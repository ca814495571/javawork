<?xml version="1.0" encoding="UTF-8"?>

<settings   xmlns="http://maven.apache.org/POM/4.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

    <!--本地仓库。该值表示构建系统本地仓库的路径。其默认值为${user.home}/.m2/repository。  -->
    <localRepository>${user.home}/.m2/repository</localRepository>

    <!--Maven是否需要和用户交互以获得输入。如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true。 -->
    <interactiveMode>true</interactiveMode>

    <!--Maven是否需要使用plugin-registry.xml文件来管理插件版本。  -->
    <!--如果设置为true，则在{user.home}/.m2下需要有一个plugin-registry.xml来对plugin的版本进行管理  -->
    <!--默认为false。 -->
    <usePluginRegistry>false</usePluginRegistry>

    <!--表示Maven是否需要在离线模式下运行。如果构建系统需要在离线模式下运行，则为true，默认为false。  -->
    <!--当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用。  -->
    <offline>false</offline>

    <!--当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。  -->
    <!--该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。  -->
    <!--当我们使用某个插件，并且没有在命令行为其提供组织Id（groupId）的时候，Maven就会使用该列表。  -->
    <!--默认情况下该列表包含了org.apache.maven.plugins。  -->
    <pluginGroups>

        <!--plugin的组织Id（groupId）  -->
        <pluginGroup>org.mortbay.jetty</pluginGroup>

    </pluginGroups>

    <!--用来配置不同的代理，多代理profiles可以应对笔记本或移动设备的工作环境：通过简单的设置profile id就可以很容易的更换整个代理配置。  -->
    <!--<proxies>-->

        <!--&lt;!&ndash;代理元素包含配置代理时需要的信息 &ndash;&gt;-->
        <!--<proxy>-->

            <!--&lt;!&ndash;代理的唯一定义符，用来区分不同的代理元素。 &ndash;&gt;-->
            <!--<id>myproxy</id>-->

            <!--&lt;!&ndash;该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。  &ndash;&gt;-->
            <!--<active>true</active>-->

            <!--&lt;!&ndash;代理的协议。 协议://主机名:端口，分隔成离散的元素以方便配置。 &ndash;&gt;-->
            <!--<protocol>http://…</protocol>-->

            <!--&lt;!&ndash;代理的主机名。协议://主机名:端口，分隔成离散的元素以方便配置。   &ndash;&gt;-->
            <!--<host>proxy.somewhere.com</host>-->

            <!--&lt;!&ndash;代理的端口。协议://主机名:端口，分隔成离散的元素以方便配置。  &ndash;&gt;-->
            <!--<port>8080</port>-->

            <!--&lt;!&ndash;代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。  &ndash;&gt;-->
            <!--<username>proxyuser</username>-->

            <!--&lt;!&ndash;代理的密码，用户名和密码表示代理服务器认证的登录名和密码。  &ndash;&gt;-->
            <!--<password>somepassword</password>-->

            <!--&lt;!&ndash;不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 &ndash;&gt;-->
            <!--<nonProxyHosts>*.google.com|ibiblio.org</nonProxyHosts>-->

        <!--</proxy>-->

    <!--</proxies>-->

    <!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 -->
    <servers>

        <!--服务器元素包含配置服务器时需要的信息  -->
        <server>

            <!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->
            <id>release</id>

            <!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。  -->
            <username>ali</username>

            <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。  -->
            <password>ali</password>

            <!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是/home/hudson/.ssh/id_dsa）以及如果需要的话，一个密钥 -->
            <!--将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。  -->
            <!--<privateKey>${usr.home}/.ssh/id_dsa</privateKey>-->

            <!--&lt;!&ndash;鉴权时使用的私钥密码。 &ndash;&gt;-->
            <!--<passphrase>some_passphrase</passphrase>-->

            <!--&lt;!&ndash;文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。&ndash;&gt;-->
            <!--&lt;!&ndash;这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。  &ndash;&gt;-->
            <!--<filePermissions>664</filePermissions>-->

            <!--&lt;!&ndash;目录被创建时的权限。  &ndash;&gt;-->
            <!--<directoryPermissions>775</directoryPermissions>-->

            <!--&lt;!&ndash;传输层额外的配置项  &ndash;&gt;-->
            <!--<configuration></configuration>-->

        </server>
        <server>
            <id>Snapshots</id>
            <username>ali</username>
            <password>ali</password>

        </server>

    </servers>

    <!--为仓库列表配置的下载镜像列表。  -->
    <mirrors>

        <!--给定仓库的下载镜像。  -->
        <mirror>

            <!--该镜像的唯一标识符。id用来区分不同的mirror元素。  -->
            <id>nexus</id>
            <!--<name>nexus</name>-->
            <mirrorOf>*</mirrorOf>
            <!--镜像名称  -->

            <!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。  -->
            <url>http://maven.aliyun.com/nexus/content/group/public</url>

            <!--被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo1.maven.org/maven2）的镜像，-->
            <!--就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 -->

        </mirror>


        <mirror>

            <id>nexus-public-snapshots</id>
            <mirrorOf>public-snapshots</mirrorOf>
            <url>http://maven.aliyun.com/nexus/content/repositories/snapshots</url>
        </mirror>

    </mirrors>

    <!--根据环境参数来调整构建配置的列表。settings.xml中的profile元素是pom.xml中profile元素的裁剪版本。-->
    <!--它包含了id，activation, repositories, pluginRepositories和 properties元素。-->
    <!--这里的profile元素只包含这五个子元素是因为这里只关心构建系统这个整体（这正是settings.xml文件的角色定位），而非单独的项目对象模型设置。-->
    <!--如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。  -->
    <profiles>

        <!--根据环境参数来调整的构件的配置 -->
        <profile>

            <!--该配置的唯一标识符。  -->
            <id>dev</id>

            <!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。-->
            <!--如POM中的profile一样，profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。-->
            <!--activation元素并不是激活profile的唯一方式。settings.xml文件中的activeProfile元素可以包含profile的id。-->
            <!--profile也可以通过在命令行，使用-P标记和逗号分隔的列表来显式的激活（如，-P test）。 -->
            <!--<activation>-->

                <!--&lt;!&ndash;profile默认是否激活的标识 &ndash;&gt;-->
                <!--<activeByDefault>false</activeByDefault>-->

                <!--&lt;!&ndash;activation有一个内建的java版本检测，如果检测到jdk版本与期待的一样，profile被激活。 &ndash;&gt;-->
                <!--<jdk>1.8</jdk>-->

                <!--&lt;!&ndash;当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 &ndash;&gt;-->
                <!--<os>-->

                    <!--&lt;!&ndash;激活profile的操作系统的名字  &ndash;&gt;-->
                    <!--<name>Windows XP</name>-->

                    <!--&lt;!&ndash;激活profile的操作系统所属家族(如 'windows')   &ndash;&gt;-->
                    <!--<family>Windows</family>-->

                    <!--&lt;!&ndash;激活profile的操作系统体系结构   &ndash;&gt;-->
                    <!--<arch>x86</arch>-->

                    <!--&lt;!&ndash;激活profile的操作系统版本 &ndash;&gt;-->
                    <!--<version>5.1.2600</version>-->

                <!--</os>-->

                <!--&lt;!&ndash;如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。&ndash;&gt;-->
                <!--&lt;!&ndash;如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 &ndash;&gt;-->
                <!--<property>-->

                    <!--&lt;!&ndash;激活profile的属性的名称 &ndash;&gt;-->
                    <!--<name>mavenVersion</name>-->

                    <!--&lt;!&ndash;激活profile的属性的值  &ndash;&gt;-->
                    <!--<value>2.0.3</value>-->

                <!--</property>-->

                <!--&lt;!&ndash;提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。&ndash;&gt;-->
                <!--&lt;!&ndash;另一方面，exists则会检查文件是否存在，如果存在则激活profile。 &ndash;&gt;-->
                <!--<file>-->

                    <!--&lt;!&ndash;如果指定的文件存在，则激活profile。  &ndash;&gt;-->
                    <!--<exists>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</exists>-->

                    <!--&lt;!&ndash;如果指定的文件不存在，则激活profile。 &ndash;&gt;-->
                    <!--<missing>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</missing>-->

                <!--</file>-->

            <!--</activation>-->

            <!--对应profile的扩展属性列表。Maven属性和Ant中的属性一样，可以用来存放一些值。这些值可以在POM中的任何地方使用标记${X}来使用，这里X是指属性的名称。-->
            <!--属性有五种不同的形式，并且都能在settings.xml文件中访问。   -->
            <!--1. env.X: 在一个变量前加上"env."的前缀，会返回一个shell环境变量。例如,"env.PATH"指代了$path环境变量（在Windows上是%PATH%）。  -->
            <!--2. project.x：指代了POM中对应的元素值。      -->
            <!--3. settings.x: 指代了settings.xml中对应元素的值。   -->
            <!--4. Java System Properties: 所有可通过java.lang.System.getProperties()访问的属性都能在POM中使用该形式访问，   -->
            <!--   如/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0/jre。      -->
            <!--5. x: 在<properties/>元素中，或者外部文件中设置，以${someVar}的形式使用。  -->
            <!--<properties>-->

                <!--&lt;!&ndash; 如果这个profile被激活，那么属性${user.install}就可以被访问了 &ndash;&gt;-->
                <!--<user.install>usr/local/winner/jobs/maven-guide</user.install>-->

            <!--</properties>-->

            <!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。  -->
            <repositories>

                <!--包含需要连接到远程仓库的信息  -->
                <repository>
                    <id>center</id>
                    <name>center</name>
                    <url>http://central</url>
                    <releases>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                        <checksumPolicy>warn</checksumPolicy>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                        <checksumPolicy>warn</checksumPolicy>
                    </snapshots>
                    <layout>default</layout>
                </repository>
            </repositories>

            <!--发现插件的远程仓库列表。仓库是两种主要构件的家。第一种构件被用作其它构件的依赖。这是中央仓库中存储的大部分构件类型。另外一种构件类型是插件。-->
            <!--Maven插件是一种特殊类型的构件。由于这个原因，插件仓库独立于其它仓库。pluginRepositories元素的结构和repositories元素的结构类似。-->
            <!--每个pluginRepository元素指定一个Maven可以用来寻找新插件的远程地址。 -->
            <pluginRepositories>

                <pluginRepository>
                    <id>center</id>
                    <name>center</name>
                    <url>http://central</url>
                    <releases>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                        <checksumPolicy>warn</checksumPolicy>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>always</updatePolicy>
                        <checksumPolicy>warn</checksumPolicy>
                    </snapshots>
                    <layout>default</layout>
                </pluginRepository>
            </pluginRepositories>
        </profile>


        <profile>
            <!--this profile will allow snapshots to be searched when activated-->
            <id>public-snapshots</id>
            <repositories>
                <repository>
                    <id>public-snapshots</id>
                    <url>http://public-snapshots</url>
                    <releases><enabled>false</enabled></releases>
                    <snapshots><enabled>true</enabled><updatePolicy>always</updatePolicy></snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>public-snapshots</id>
                    <url>http://public-snapshots</url>
                    <releases><enabled>false</enabled></releases>
                    <snapshots><enabled>true</enabled><updatePolicy>always</updatePolicy></snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>

    <activeProfiles>
        <activeProfile>dev</activeProfile>
    </activeProfiles>

</settings>


#收集的比较快的maven仓库
http://maven.wso2.org/nexus/content/groups/public/
http://jcenter.bintray.com/
http://maven.antelink.com/content/repositories/central/
http://nexus.openkoala.org/nexus/content/groups/Koala-release/
http://maven.tmatesoft.com/content/groups/public/
http://mavensync.zkoss.org/maven2/
http://maven.springframework.org/release/


<mirror>
    <id>UK</id>
    <name>UK Central</name>
    <url>http://uk.maven.org/maven2</url>
    <mirrorOf>central</mirrorOf>
</mirror>

<mirror>
    <id>sonatype</id>
    <name>sonatype Central</name>
    <url>http://repository.sonatype.org/content/groups/public/</url>
    <mirrorOf>central</mirrorOf>
</mirror>

<mirror>
    <id>jboss-public-repository-group</id>
    <name>JBoss Public Repository Group</name>
    <url>http://repository.jboss.org/nexus/content/groups/public</url>
    <mirrorOf>central</mirrorOf>
</mirror>