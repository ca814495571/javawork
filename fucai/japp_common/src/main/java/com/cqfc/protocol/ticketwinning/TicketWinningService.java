/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketwinning;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TicketWinningService {

  public interface Iface {

    public WinningAmountReturnMessage calTicketWinningAmount(String lotteryId, String playType, String orderContent, String issueNo) throws org.apache.thrift.TException;

    public BallCountReturnMessage calBallCount(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException;

    public BallCountReturnMessage calJCBallCount(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException;

    public TicketDetailReturnMessage calTicketDetail(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException;

    public WinningAmountStatData getWinningAmountStat(List<WinningAmountStat> winningAmountList, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public WinningNumStatData getWinningNumStat(WinningNumStat winningNumStat, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int restartCalPrizeAll(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public int restartCalPrizePart(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public ReturnData getWinningOrderList(WinningOrderInfo winningOrderInfo, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public long getTotalWinningMoneyByGame(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public long getTotalWinningMoneyByDay(String date) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void calTicketWinningAmount(String lotteryId, String playType, String orderContent, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void calBallCount(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void calJCBallCount(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void calTicketDetail(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWinningAmountStat(List<WinningAmountStat> winningAmountList, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWinningNumStat(WinningNumStat winningNumStat, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restartCalPrizeAll(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restartCalPrizePart(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWinningOrderList(WinningOrderInfo winningOrderInfo, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTotalWinningMoneyByGame(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTotalWinningMoneyByDay(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public WinningAmountReturnMessage calTicketWinningAmount(String lotteryId, String playType, String orderContent, String issueNo) throws org.apache.thrift.TException
    {
      send_calTicketWinningAmount(lotteryId, playType, orderContent, issueNo);
      return recv_calTicketWinningAmount();
    }

    public void send_calTicketWinningAmount(String lotteryId, String playType, String orderContent, String issueNo) throws org.apache.thrift.TException
    {
      calTicketWinningAmount_args args = new calTicketWinningAmount_args();
      args.setLotteryId(lotteryId);
      args.setPlayType(playType);
      args.setOrderContent(orderContent);
      args.setIssueNo(issueNo);
      sendBase("calTicketWinningAmount", args);
    }

    public WinningAmountReturnMessage recv_calTicketWinningAmount() throws org.apache.thrift.TException
    {
      calTicketWinningAmount_result result = new calTicketWinningAmount_result();
      receiveBase(result, "calTicketWinningAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "calTicketWinningAmount failed: unknown result");
    }

    public BallCountReturnMessage calBallCount(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException
    {
      send_calBallCount(lotteryId, playType, orderContent);
      return recv_calBallCount();
    }

    public void send_calBallCount(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException
    {
      calBallCount_args args = new calBallCount_args();
      args.setLotteryId(lotteryId);
      args.setPlayType(playType);
      args.setOrderContent(orderContent);
      sendBase("calBallCount", args);
    }

    public BallCountReturnMessage recv_calBallCount() throws org.apache.thrift.TException
    {
      calBallCount_result result = new calBallCount_result();
      receiveBase(result, "calBallCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "calBallCount failed: unknown result");
    }

    public BallCountReturnMessage calJCBallCount(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException
    {
      send_calJCBallCount(lotteryId, playType, orderContent);
      return recv_calJCBallCount();
    }

    public void send_calJCBallCount(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException
    {
      calJCBallCount_args args = new calJCBallCount_args();
      args.setLotteryId(lotteryId);
      args.setPlayType(playType);
      args.setOrderContent(orderContent);
      sendBase("calJCBallCount", args);
    }

    public BallCountReturnMessage recv_calJCBallCount() throws org.apache.thrift.TException
    {
      calJCBallCount_result result = new calJCBallCount_result();
      receiveBase(result, "calJCBallCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "calJCBallCount failed: unknown result");
    }

    public TicketDetailReturnMessage calTicketDetail(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException
    {
      send_calTicketDetail(lotteryId, playType, orderContent);
      return recv_calTicketDetail();
    }

    public void send_calTicketDetail(String lotteryId, String playType, String orderContent) throws org.apache.thrift.TException
    {
      calTicketDetail_args args = new calTicketDetail_args();
      args.setLotteryId(lotteryId);
      args.setPlayType(playType);
      args.setOrderContent(orderContent);
      sendBase("calTicketDetail", args);
    }

    public TicketDetailReturnMessage recv_calTicketDetail() throws org.apache.thrift.TException
    {
      calTicketDetail_result result = new calTicketDetail_result();
      receiveBase(result, "calTicketDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "calTicketDetail failed: unknown result");
    }

    public WinningAmountStatData getWinningAmountStat(List<WinningAmountStat> winningAmountList, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getWinningAmountStat(winningAmountList, currentPage, pageSize);
      return recv_getWinningAmountStat();
    }

    public void send_getWinningAmountStat(List<WinningAmountStat> winningAmountList, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getWinningAmountStat_args args = new getWinningAmountStat_args();
      args.setWinningAmountList(winningAmountList);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getWinningAmountStat", args);
    }

    public WinningAmountStatData recv_getWinningAmountStat() throws org.apache.thrift.TException
    {
      getWinningAmountStat_result result = new getWinningAmountStat_result();
      receiveBase(result, "getWinningAmountStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWinningAmountStat failed: unknown result");
    }

    public WinningNumStatData getWinningNumStat(WinningNumStat winningNumStat, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getWinningNumStat(winningNumStat, currentPage, pageSize);
      return recv_getWinningNumStat();
    }

    public void send_getWinningNumStat(WinningNumStat winningNumStat, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getWinningNumStat_args args = new getWinningNumStat_args();
      args.setWinningNumStat(winningNumStat);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getWinningNumStat", args);
    }

    public WinningNumStatData recv_getWinningNumStat() throws org.apache.thrift.TException
    {
      getWinningNumStat_result result = new getWinningNumStat_result();
      receiveBase(result, "getWinningNumStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWinningNumStat failed: unknown result");
    }

    public int restartCalPrizeAll(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_restartCalPrizeAll(lotteryId, issueNo);
      return recv_restartCalPrizeAll();
    }

    public void send_restartCalPrizeAll(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      restartCalPrizeAll_args args = new restartCalPrizeAll_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("restartCalPrizeAll", args);
    }

    public int recv_restartCalPrizeAll() throws org.apache.thrift.TException
    {
      restartCalPrizeAll_result result = new restartCalPrizeAll_result();
      receiveBase(result, "restartCalPrizeAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restartCalPrizeAll failed: unknown result");
    }

    public int restartCalPrizePart(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_restartCalPrizePart(lotteryId, issueNo);
      return recv_restartCalPrizePart();
    }

    public void send_restartCalPrizePart(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      restartCalPrizePart_args args = new restartCalPrizePart_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("restartCalPrizePart", args);
    }

    public int recv_restartCalPrizePart() throws org.apache.thrift.TException
    {
      restartCalPrizePart_result result = new restartCalPrizePart_result();
      receiveBase(result, "restartCalPrizePart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restartCalPrizePart failed: unknown result");
    }

    public ReturnData getWinningOrderList(WinningOrderInfo winningOrderInfo, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getWinningOrderList(winningOrderInfo, currentPage, pageSize);
      return recv_getWinningOrderList();
    }

    public void send_getWinningOrderList(WinningOrderInfo winningOrderInfo, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getWinningOrderList_args args = new getWinningOrderList_args();
      args.setWinningOrderInfo(winningOrderInfo);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getWinningOrderList", args);
    }

    public ReturnData recv_getWinningOrderList() throws org.apache.thrift.TException
    {
      getWinningOrderList_result result = new getWinningOrderList_result();
      receiveBase(result, "getWinningOrderList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWinningOrderList failed: unknown result");
    }

    public long getTotalWinningMoneyByGame(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getTotalWinningMoneyByGame(lotteryId, issueNo);
      return recv_getTotalWinningMoneyByGame();
    }

    public void send_getTotalWinningMoneyByGame(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getTotalWinningMoneyByGame_args args = new getTotalWinningMoneyByGame_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getTotalWinningMoneyByGame", args);
    }

    public long recv_getTotalWinningMoneyByGame() throws org.apache.thrift.TException
    {
      getTotalWinningMoneyByGame_result result = new getTotalWinningMoneyByGame_result();
      receiveBase(result, "getTotalWinningMoneyByGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalWinningMoneyByGame failed: unknown result");
    }

    public long getTotalWinningMoneyByDay(String date) throws org.apache.thrift.TException
    {
      send_getTotalWinningMoneyByDay(date);
      return recv_getTotalWinningMoneyByDay();
    }

    public void send_getTotalWinningMoneyByDay(String date) throws org.apache.thrift.TException
    {
      getTotalWinningMoneyByDay_args args = new getTotalWinningMoneyByDay_args();
      args.setDate(date);
      sendBase("getTotalWinningMoneyByDay", args);
    }

    public long recv_getTotalWinningMoneyByDay() throws org.apache.thrift.TException
    {
      getTotalWinningMoneyByDay_result result = new getTotalWinningMoneyByDay_result();
      receiveBase(result, "getTotalWinningMoneyByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalWinningMoneyByDay failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void calTicketWinningAmount(String lotteryId, String playType, String orderContent, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      calTicketWinningAmount_call method_call = new calTicketWinningAmount_call(lotteryId, playType, orderContent, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class calTicketWinningAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String playType;
      private String orderContent;
      private String issueNo;
      public calTicketWinningAmount_call(String lotteryId, String playType, String orderContent, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.playType = playType;
        this.orderContent = orderContent;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("calTicketWinningAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        calTicketWinningAmount_args args = new calTicketWinningAmount_args();
        args.setLotteryId(lotteryId);
        args.setPlayType(playType);
        args.setOrderContent(orderContent);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WinningAmountReturnMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_calTicketWinningAmount();
      }
    }

    public void calBallCount(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      calBallCount_call method_call = new calBallCount_call(lotteryId, playType, orderContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class calBallCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String playType;
      private String orderContent;
      public calBallCount_call(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.playType = playType;
        this.orderContent = orderContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("calBallCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        calBallCount_args args = new calBallCount_args();
        args.setLotteryId(lotteryId);
        args.setPlayType(playType);
        args.setOrderContent(orderContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BallCountReturnMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_calBallCount();
      }
    }

    public void calJCBallCount(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      calJCBallCount_call method_call = new calJCBallCount_call(lotteryId, playType, orderContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class calJCBallCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String playType;
      private String orderContent;
      public calJCBallCount_call(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.playType = playType;
        this.orderContent = orderContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("calJCBallCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        calJCBallCount_args args = new calJCBallCount_args();
        args.setLotteryId(lotteryId);
        args.setPlayType(playType);
        args.setOrderContent(orderContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BallCountReturnMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_calJCBallCount();
      }
    }

    public void calTicketDetail(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      calTicketDetail_call method_call = new calTicketDetail_call(lotteryId, playType, orderContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class calTicketDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String playType;
      private String orderContent;
      public calTicketDetail_call(String lotteryId, String playType, String orderContent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.playType = playType;
        this.orderContent = orderContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("calTicketDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        calTicketDetail_args args = new calTicketDetail_args();
        args.setLotteryId(lotteryId);
        args.setPlayType(playType);
        args.setOrderContent(orderContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TicketDetailReturnMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_calTicketDetail();
      }
    }

    public void getWinningAmountStat(List<WinningAmountStat> winningAmountList, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWinningAmountStat_call method_call = new getWinningAmountStat_call(winningAmountList, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWinningAmountStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<WinningAmountStat> winningAmountList;
      private int currentPage;
      private int pageSize;
      public getWinningAmountStat_call(List<WinningAmountStat> winningAmountList, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.winningAmountList = winningAmountList;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWinningAmountStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWinningAmountStat_args args = new getWinningAmountStat_args();
        args.setWinningAmountList(winningAmountList);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WinningAmountStatData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWinningAmountStat();
      }
    }

    public void getWinningNumStat(WinningNumStat winningNumStat, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWinningNumStat_call method_call = new getWinningNumStat_call(winningNumStat, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWinningNumStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WinningNumStat winningNumStat;
      private int currentPage;
      private int pageSize;
      public getWinningNumStat_call(WinningNumStat winningNumStat, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.winningNumStat = winningNumStat;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWinningNumStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWinningNumStat_args args = new getWinningNumStat_args();
        args.setWinningNumStat(winningNumStat);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WinningNumStatData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWinningNumStat();
      }
    }

    public void restartCalPrizeAll(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restartCalPrizeAll_call method_call = new restartCalPrizeAll_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restartCalPrizeAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public restartCalPrizeAll_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restartCalPrizeAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restartCalPrizeAll_args args = new restartCalPrizeAll_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restartCalPrizeAll();
      }
    }

    public void restartCalPrizePart(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restartCalPrizePart_call method_call = new restartCalPrizePart_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restartCalPrizePart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public restartCalPrizePart_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restartCalPrizePart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restartCalPrizePart_args args = new restartCalPrizePart_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restartCalPrizePart();
      }
    }

    public void getWinningOrderList(WinningOrderInfo winningOrderInfo, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWinningOrderList_call method_call = new getWinningOrderList_call(winningOrderInfo, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWinningOrderList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WinningOrderInfo winningOrderInfo;
      private int currentPage;
      private int pageSize;
      public getWinningOrderList_call(WinningOrderInfo winningOrderInfo, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.winningOrderInfo = winningOrderInfo;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWinningOrderList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWinningOrderList_args args = new getWinningOrderList_args();
        args.setWinningOrderInfo(winningOrderInfo);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWinningOrderList();
      }
    }

    public void getTotalWinningMoneyByGame(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalWinningMoneyByGame_call method_call = new getTotalWinningMoneyByGame_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalWinningMoneyByGame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public getTotalWinningMoneyByGame_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalWinningMoneyByGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalWinningMoneyByGame_args args = new getTotalWinningMoneyByGame_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalWinningMoneyByGame();
      }
    }

    public void getTotalWinningMoneyByDay(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalWinningMoneyByDay_call method_call = new getTotalWinningMoneyByDay_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalWinningMoneyByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String date;
      public getTotalWinningMoneyByDay_call(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalWinningMoneyByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalWinningMoneyByDay_args args = new getTotalWinningMoneyByDay_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalWinningMoneyByDay();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("calTicketWinningAmount", new calTicketWinningAmount());
      processMap.put("calBallCount", new calBallCount());
      processMap.put("calJCBallCount", new calJCBallCount());
      processMap.put("calTicketDetail", new calTicketDetail());
      processMap.put("getWinningAmountStat", new getWinningAmountStat());
      processMap.put("getWinningNumStat", new getWinningNumStat());
      processMap.put("restartCalPrizeAll", new restartCalPrizeAll());
      processMap.put("restartCalPrizePart", new restartCalPrizePart());
      processMap.put("getWinningOrderList", new getWinningOrderList());
      processMap.put("getTotalWinningMoneyByGame", new getTotalWinningMoneyByGame());
      processMap.put("getTotalWinningMoneyByDay", new getTotalWinningMoneyByDay());
      return processMap;
    }

    public static class calTicketWinningAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, calTicketWinningAmount_args> {
      public calTicketWinningAmount() {
        super("calTicketWinningAmount");
      }

      public calTicketWinningAmount_args getEmptyArgsInstance() {
        return new calTicketWinningAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public calTicketWinningAmount_result getResult(I iface, calTicketWinningAmount_args args) throws org.apache.thrift.TException {
        calTicketWinningAmount_result result = new calTicketWinningAmount_result();
        result.success = iface.calTicketWinningAmount(args.lotteryId, args.playType, args.orderContent, args.issueNo);
        return result;
      }
    }

    public static class calBallCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, calBallCount_args> {
      public calBallCount() {
        super("calBallCount");
      }

      public calBallCount_args getEmptyArgsInstance() {
        return new calBallCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public calBallCount_result getResult(I iface, calBallCount_args args) throws org.apache.thrift.TException {
        calBallCount_result result = new calBallCount_result();
        result.success = iface.calBallCount(args.lotteryId, args.playType, args.orderContent);
        return result;
      }
    }

    public static class calJCBallCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, calJCBallCount_args> {
      public calJCBallCount() {
        super("calJCBallCount");
      }

      public calJCBallCount_args getEmptyArgsInstance() {
        return new calJCBallCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public calJCBallCount_result getResult(I iface, calJCBallCount_args args) throws org.apache.thrift.TException {
        calJCBallCount_result result = new calJCBallCount_result();
        result.success = iface.calJCBallCount(args.lotteryId, args.playType, args.orderContent);
        return result;
      }
    }

    public static class calTicketDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, calTicketDetail_args> {
      public calTicketDetail() {
        super("calTicketDetail");
      }

      public calTicketDetail_args getEmptyArgsInstance() {
        return new calTicketDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public calTicketDetail_result getResult(I iface, calTicketDetail_args args) throws org.apache.thrift.TException {
        calTicketDetail_result result = new calTicketDetail_result();
        result.success = iface.calTicketDetail(args.lotteryId, args.playType, args.orderContent);
        return result;
      }
    }

    public static class getWinningAmountStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWinningAmountStat_args> {
      public getWinningAmountStat() {
        super("getWinningAmountStat");
      }

      public getWinningAmountStat_args getEmptyArgsInstance() {
        return new getWinningAmountStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWinningAmountStat_result getResult(I iface, getWinningAmountStat_args args) throws org.apache.thrift.TException {
        getWinningAmountStat_result result = new getWinningAmountStat_result();
        result.success = iface.getWinningAmountStat(args.winningAmountList, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class getWinningNumStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWinningNumStat_args> {
      public getWinningNumStat() {
        super("getWinningNumStat");
      }

      public getWinningNumStat_args getEmptyArgsInstance() {
        return new getWinningNumStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWinningNumStat_result getResult(I iface, getWinningNumStat_args args) throws org.apache.thrift.TException {
        getWinningNumStat_result result = new getWinningNumStat_result();
        result.success = iface.getWinningNumStat(args.winningNumStat, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class restartCalPrizeAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartCalPrizeAll_args> {
      public restartCalPrizeAll() {
        super("restartCalPrizeAll");
      }

      public restartCalPrizeAll_args getEmptyArgsInstance() {
        return new restartCalPrizeAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restartCalPrizeAll_result getResult(I iface, restartCalPrizeAll_args args) throws org.apache.thrift.TException {
        restartCalPrizeAll_result result = new restartCalPrizeAll_result();
        result.success = iface.restartCalPrizeAll(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class restartCalPrizePart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartCalPrizePart_args> {
      public restartCalPrizePart() {
        super("restartCalPrizePart");
      }

      public restartCalPrizePart_args getEmptyArgsInstance() {
        return new restartCalPrizePart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restartCalPrizePart_result getResult(I iface, restartCalPrizePart_args args) throws org.apache.thrift.TException {
        restartCalPrizePart_result result = new restartCalPrizePart_result();
        result.success = iface.restartCalPrizePart(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getWinningOrderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWinningOrderList_args> {
      public getWinningOrderList() {
        super("getWinningOrderList");
      }

      public getWinningOrderList_args getEmptyArgsInstance() {
        return new getWinningOrderList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWinningOrderList_result getResult(I iface, getWinningOrderList_args args) throws org.apache.thrift.TException {
        getWinningOrderList_result result = new getWinningOrderList_result();
        result.success = iface.getWinningOrderList(args.winningOrderInfo, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class getTotalWinningMoneyByGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalWinningMoneyByGame_args> {
      public getTotalWinningMoneyByGame() {
        super("getTotalWinningMoneyByGame");
      }

      public getTotalWinningMoneyByGame_args getEmptyArgsInstance() {
        return new getTotalWinningMoneyByGame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTotalWinningMoneyByGame_result getResult(I iface, getTotalWinningMoneyByGame_args args) throws org.apache.thrift.TException {
        getTotalWinningMoneyByGame_result result = new getTotalWinningMoneyByGame_result();
        result.success = iface.getTotalWinningMoneyByGame(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTotalWinningMoneyByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalWinningMoneyByDay_args> {
      public getTotalWinningMoneyByDay() {
        super("getTotalWinningMoneyByDay");
      }

      public getTotalWinningMoneyByDay_args getEmptyArgsInstance() {
        return new getTotalWinningMoneyByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTotalWinningMoneyByDay_result getResult(I iface, getTotalWinningMoneyByDay_args args) throws org.apache.thrift.TException {
        getTotalWinningMoneyByDay_result result = new getTotalWinningMoneyByDay_result();
        result.success = iface.getTotalWinningMoneyByDay(args.date);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("calTicketWinningAmount", new calTicketWinningAmount());
      processMap.put("calBallCount", new calBallCount());
      processMap.put("calJCBallCount", new calJCBallCount());
      processMap.put("calTicketDetail", new calTicketDetail());
      processMap.put("getWinningAmountStat", new getWinningAmountStat());
      processMap.put("getWinningNumStat", new getWinningNumStat());
      processMap.put("restartCalPrizeAll", new restartCalPrizeAll());
      processMap.put("restartCalPrizePart", new restartCalPrizePart());
      processMap.put("getWinningOrderList", new getWinningOrderList());
      processMap.put("getTotalWinningMoneyByGame", new getTotalWinningMoneyByGame());
      processMap.put("getTotalWinningMoneyByDay", new getTotalWinningMoneyByDay());
      return processMap;
    }

    public static class calTicketWinningAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, calTicketWinningAmount_args, WinningAmountReturnMessage> {
      public calTicketWinningAmount() {
        super("calTicketWinningAmount");
      }

      public calTicketWinningAmount_args getEmptyArgsInstance() {
        return new calTicketWinningAmount_args();
      }

      public AsyncMethodCallback<WinningAmountReturnMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WinningAmountReturnMessage>() { 
          public void onComplete(WinningAmountReturnMessage o) {
            calTicketWinningAmount_result result = new calTicketWinningAmount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            calTicketWinningAmount_result result = new calTicketWinningAmount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, calTicketWinningAmount_args args, org.apache.thrift.async.AsyncMethodCallback<WinningAmountReturnMessage> resultHandler) throws TException {
        iface.calTicketWinningAmount(args.lotteryId, args.playType, args.orderContent, args.issueNo,resultHandler);
      }
    }

    public static class calBallCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, calBallCount_args, BallCountReturnMessage> {
      public calBallCount() {
        super("calBallCount");
      }

      public calBallCount_args getEmptyArgsInstance() {
        return new calBallCount_args();
      }

      public AsyncMethodCallback<BallCountReturnMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BallCountReturnMessage>() { 
          public void onComplete(BallCountReturnMessage o) {
            calBallCount_result result = new calBallCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            calBallCount_result result = new calBallCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, calBallCount_args args, org.apache.thrift.async.AsyncMethodCallback<BallCountReturnMessage> resultHandler) throws TException {
        iface.calBallCount(args.lotteryId, args.playType, args.orderContent,resultHandler);
      }
    }

    public static class calJCBallCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, calJCBallCount_args, BallCountReturnMessage> {
      public calJCBallCount() {
        super("calJCBallCount");
      }

      public calJCBallCount_args getEmptyArgsInstance() {
        return new calJCBallCount_args();
      }

      public AsyncMethodCallback<BallCountReturnMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BallCountReturnMessage>() { 
          public void onComplete(BallCountReturnMessage o) {
            calJCBallCount_result result = new calJCBallCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            calJCBallCount_result result = new calJCBallCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, calJCBallCount_args args, org.apache.thrift.async.AsyncMethodCallback<BallCountReturnMessage> resultHandler) throws TException {
        iface.calJCBallCount(args.lotteryId, args.playType, args.orderContent,resultHandler);
      }
    }

    public static class calTicketDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, calTicketDetail_args, TicketDetailReturnMessage> {
      public calTicketDetail() {
        super("calTicketDetail");
      }

      public calTicketDetail_args getEmptyArgsInstance() {
        return new calTicketDetail_args();
      }

      public AsyncMethodCallback<TicketDetailReturnMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TicketDetailReturnMessage>() { 
          public void onComplete(TicketDetailReturnMessage o) {
            calTicketDetail_result result = new calTicketDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            calTicketDetail_result result = new calTicketDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, calTicketDetail_args args, org.apache.thrift.async.AsyncMethodCallback<TicketDetailReturnMessage> resultHandler) throws TException {
        iface.calTicketDetail(args.lotteryId, args.playType, args.orderContent,resultHandler);
      }
    }

    public static class getWinningAmountStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWinningAmountStat_args, WinningAmountStatData> {
      public getWinningAmountStat() {
        super("getWinningAmountStat");
      }

      public getWinningAmountStat_args getEmptyArgsInstance() {
        return new getWinningAmountStat_args();
      }

      public AsyncMethodCallback<WinningAmountStatData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WinningAmountStatData>() { 
          public void onComplete(WinningAmountStatData o) {
            getWinningAmountStat_result result = new getWinningAmountStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWinningAmountStat_result result = new getWinningAmountStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWinningAmountStat_args args, org.apache.thrift.async.AsyncMethodCallback<WinningAmountStatData> resultHandler) throws TException {
        iface.getWinningAmountStat(args.winningAmountList, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class getWinningNumStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWinningNumStat_args, WinningNumStatData> {
      public getWinningNumStat() {
        super("getWinningNumStat");
      }

      public getWinningNumStat_args getEmptyArgsInstance() {
        return new getWinningNumStat_args();
      }

      public AsyncMethodCallback<WinningNumStatData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WinningNumStatData>() { 
          public void onComplete(WinningNumStatData o) {
            getWinningNumStat_result result = new getWinningNumStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWinningNumStat_result result = new getWinningNumStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWinningNumStat_args args, org.apache.thrift.async.AsyncMethodCallback<WinningNumStatData> resultHandler) throws TException {
        iface.getWinningNumStat(args.winningNumStat, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class restartCalPrizeAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restartCalPrizeAll_args, Integer> {
      public restartCalPrizeAll() {
        super("restartCalPrizeAll");
      }

      public restartCalPrizeAll_args getEmptyArgsInstance() {
        return new restartCalPrizeAll_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            restartCalPrizeAll_result result = new restartCalPrizeAll_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restartCalPrizeAll_result result = new restartCalPrizeAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restartCalPrizeAll_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.restartCalPrizeAll(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class restartCalPrizePart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restartCalPrizePart_args, Integer> {
      public restartCalPrizePart() {
        super("restartCalPrizePart");
      }

      public restartCalPrizePart_args getEmptyArgsInstance() {
        return new restartCalPrizePart_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            restartCalPrizePart_result result = new restartCalPrizePart_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restartCalPrizePart_result result = new restartCalPrizePart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restartCalPrizePart_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.restartCalPrizePart(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getWinningOrderList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWinningOrderList_args, ReturnData> {
      public getWinningOrderList() {
        super("getWinningOrderList");
      }

      public getWinningOrderList_args getEmptyArgsInstance() {
        return new getWinningOrderList_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getWinningOrderList_result result = new getWinningOrderList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWinningOrderList_result result = new getWinningOrderList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWinningOrderList_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getWinningOrderList(args.winningOrderInfo, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class getTotalWinningMoneyByGame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalWinningMoneyByGame_args, Long> {
      public getTotalWinningMoneyByGame() {
        super("getTotalWinningMoneyByGame");
      }

      public getTotalWinningMoneyByGame_args getEmptyArgsInstance() {
        return new getTotalWinningMoneyByGame_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getTotalWinningMoneyByGame_result result = new getTotalWinningMoneyByGame_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTotalWinningMoneyByGame_result result = new getTotalWinningMoneyByGame_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalWinningMoneyByGame_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getTotalWinningMoneyByGame(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getTotalWinningMoneyByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalWinningMoneyByDay_args, Long> {
      public getTotalWinningMoneyByDay() {
        super("getTotalWinningMoneyByDay");
      }

      public getTotalWinningMoneyByDay_args getEmptyArgsInstance() {
        return new getTotalWinningMoneyByDay_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getTotalWinningMoneyByDay_result result = new getTotalWinningMoneyByDay_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTotalWinningMoneyByDay_result result = new getTotalWinningMoneyByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalWinningMoneyByDay_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getTotalWinningMoneyByDay(args.date,resultHandler);
      }
    }

  }

  public static class calTicketWinningAmount_args implements org.apache.thrift.TBase<calTicketWinningAmount_args, calTicketWinningAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<calTicketWinningAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calTicketWinningAmount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calTicketWinningAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calTicketWinningAmount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String playType; // required
    public String orderContent; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      PLAY_TYPE((short)2, "playType"),
      ORDER_CONTENT((short)3, "orderContent"),
      ISSUE_NO((short)4, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // PLAY_TYPE
            return PLAY_TYPE;
          case 3: // ORDER_CONTENT
            return ORDER_CONTENT;
          case 4: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calTicketWinningAmount_args.class, metaDataMap);
    }

    public calTicketWinningAmount_args() {
    }

    public calTicketWinningAmount_args(
      String lotteryId,
      String playType,
      String orderContent,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.playType = playType;
      this.orderContent = orderContent;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calTicketWinningAmount_args(calTicketWinningAmount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetPlayType()) {
        this.playType = other.playType;
      }
      if (other.isSetOrderContent()) {
        this.orderContent = other.orderContent;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public calTicketWinningAmount_args deepCopy() {
      return new calTicketWinningAmount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.playType = null;
      this.orderContent = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public calTicketWinningAmount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getPlayType() {
      return this.playType;
    }

    public calTicketWinningAmount_args setPlayType(String playType) {
      this.playType = playType;
      return this;
    }

    public void unsetPlayType() {
      this.playType = null;
    }

    /** Returns true if field playType is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayType() {
      return this.playType != null;
    }

    public void setPlayTypeIsSet(boolean value) {
      if (!value) {
        this.playType = null;
      }
    }

    public String getOrderContent() {
      return this.orderContent;
    }

    public calTicketWinningAmount_args setOrderContent(String orderContent) {
      this.orderContent = orderContent;
      return this;
    }

    public void unsetOrderContent() {
      this.orderContent = null;
    }

    /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderContent() {
      return this.orderContent != null;
    }

    public void setOrderContentIsSet(boolean value) {
      if (!value) {
        this.orderContent = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public calTicketWinningAmount_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case PLAY_TYPE:
        if (value == null) {
          unsetPlayType();
        } else {
          setPlayType((String)value);
        }
        break;

      case ORDER_CONTENT:
        if (value == null) {
          unsetOrderContent();
        } else {
          setOrderContent((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case PLAY_TYPE:
        return getPlayType();

      case ORDER_CONTENT:
        return getOrderContent();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case PLAY_TYPE:
        return isSetPlayType();
      case ORDER_CONTENT:
        return isSetOrderContent();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calTicketWinningAmount_args)
        return this.equals((calTicketWinningAmount_args)that);
      return false;
    }

    public boolean equals(calTicketWinningAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_playType = true && this.isSetPlayType();
      boolean that_present_playType = true && that.isSetPlayType();
      if (this_present_playType || that_present_playType) {
        if (!(this_present_playType && that_present_playType))
          return false;
        if (!this.playType.equals(that.playType))
          return false;
      }

      boolean this_present_orderContent = true && this.isSetOrderContent();
      boolean that_present_orderContent = true && that.isSetOrderContent();
      if (this_present_orderContent || that_present_orderContent) {
        if (!(this_present_orderContent && that_present_orderContent))
          return false;
        if (!this.orderContent.equals(that.orderContent))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calTicketWinningAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calTicketWinningAmount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playType:");
      if (this.playType == null) {
        sb.append("null");
      } else {
        sb.append(this.playType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderContent:");
      if (this.orderContent == null) {
        sb.append("null");
      } else {
        sb.append(this.orderContent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calTicketWinningAmount_argsStandardSchemeFactory implements SchemeFactory {
      public calTicketWinningAmount_argsStandardScheme getScheme() {
        return new calTicketWinningAmount_argsStandardScheme();
      }
    }

    private static class calTicketWinningAmount_argsStandardScheme extends StandardScheme<calTicketWinningAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calTicketWinningAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playType = iprot.readString();
                struct.setPlayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderContent = iprot.readString();
                struct.setOrderContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calTicketWinningAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.playType != null) {
          oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.playType);
          oprot.writeFieldEnd();
        }
        if (struct.orderContent != null) {
          oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
          oprot.writeString(struct.orderContent);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calTicketWinningAmount_argsTupleSchemeFactory implements SchemeFactory {
      public calTicketWinningAmount_argsTupleScheme getScheme() {
        return new calTicketWinningAmount_argsTupleScheme();
      }
    }

    private static class calTicketWinningAmount_argsTupleScheme extends TupleScheme<calTicketWinningAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calTicketWinningAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetPlayType()) {
          optionals.set(1);
        }
        if (struct.isSetOrderContent()) {
          optionals.set(2);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetPlayType()) {
          oprot.writeString(struct.playType);
        }
        if (struct.isSetOrderContent()) {
          oprot.writeString(struct.orderContent);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calTicketWinningAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playType = iprot.readString();
          struct.setPlayTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orderContent = iprot.readString();
          struct.setOrderContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class calTicketWinningAmount_result implements org.apache.thrift.TBase<calTicketWinningAmount_result, calTicketWinningAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<calTicketWinningAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calTicketWinningAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calTicketWinningAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calTicketWinningAmount_resultTupleSchemeFactory());
    }

    public WinningAmountReturnMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WinningAmountReturnMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calTicketWinningAmount_result.class, metaDataMap);
    }

    public calTicketWinningAmount_result() {
    }

    public calTicketWinningAmount_result(
      WinningAmountReturnMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calTicketWinningAmount_result(calTicketWinningAmount_result other) {
      if (other.isSetSuccess()) {
        this.success = new WinningAmountReturnMessage(other.success);
      }
    }

    public calTicketWinningAmount_result deepCopy() {
      return new calTicketWinningAmount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WinningAmountReturnMessage getSuccess() {
      return this.success;
    }

    public calTicketWinningAmount_result setSuccess(WinningAmountReturnMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WinningAmountReturnMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calTicketWinningAmount_result)
        return this.equals((calTicketWinningAmount_result)that);
      return false;
    }

    public boolean equals(calTicketWinningAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calTicketWinningAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calTicketWinningAmount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calTicketWinningAmount_resultStandardSchemeFactory implements SchemeFactory {
      public calTicketWinningAmount_resultStandardScheme getScheme() {
        return new calTicketWinningAmount_resultStandardScheme();
      }
    }

    private static class calTicketWinningAmount_resultStandardScheme extends StandardScheme<calTicketWinningAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calTicketWinningAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WinningAmountReturnMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calTicketWinningAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calTicketWinningAmount_resultTupleSchemeFactory implements SchemeFactory {
      public calTicketWinningAmount_resultTupleScheme getScheme() {
        return new calTicketWinningAmount_resultTupleScheme();
      }
    }

    private static class calTicketWinningAmount_resultTupleScheme extends TupleScheme<calTicketWinningAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calTicketWinningAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calTicketWinningAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WinningAmountReturnMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class calBallCount_args implements org.apache.thrift.TBase<calBallCount_args, calBallCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<calBallCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calBallCount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calBallCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calBallCount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String playType; // required
    public String orderContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      PLAY_TYPE((short)2, "playType"),
      ORDER_CONTENT((short)3, "orderContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // PLAY_TYPE
            return PLAY_TYPE;
          case 3: // ORDER_CONTENT
            return ORDER_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calBallCount_args.class, metaDataMap);
    }

    public calBallCount_args() {
    }

    public calBallCount_args(
      String lotteryId,
      String playType,
      String orderContent)
    {
      this();
      this.lotteryId = lotteryId;
      this.playType = playType;
      this.orderContent = orderContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calBallCount_args(calBallCount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetPlayType()) {
        this.playType = other.playType;
      }
      if (other.isSetOrderContent()) {
        this.orderContent = other.orderContent;
      }
    }

    public calBallCount_args deepCopy() {
      return new calBallCount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.playType = null;
      this.orderContent = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public calBallCount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getPlayType() {
      return this.playType;
    }

    public calBallCount_args setPlayType(String playType) {
      this.playType = playType;
      return this;
    }

    public void unsetPlayType() {
      this.playType = null;
    }

    /** Returns true if field playType is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayType() {
      return this.playType != null;
    }

    public void setPlayTypeIsSet(boolean value) {
      if (!value) {
        this.playType = null;
      }
    }

    public String getOrderContent() {
      return this.orderContent;
    }

    public calBallCount_args setOrderContent(String orderContent) {
      this.orderContent = orderContent;
      return this;
    }

    public void unsetOrderContent() {
      this.orderContent = null;
    }

    /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderContent() {
      return this.orderContent != null;
    }

    public void setOrderContentIsSet(boolean value) {
      if (!value) {
        this.orderContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case PLAY_TYPE:
        if (value == null) {
          unsetPlayType();
        } else {
          setPlayType((String)value);
        }
        break;

      case ORDER_CONTENT:
        if (value == null) {
          unsetOrderContent();
        } else {
          setOrderContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case PLAY_TYPE:
        return getPlayType();

      case ORDER_CONTENT:
        return getOrderContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case PLAY_TYPE:
        return isSetPlayType();
      case ORDER_CONTENT:
        return isSetOrderContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calBallCount_args)
        return this.equals((calBallCount_args)that);
      return false;
    }

    public boolean equals(calBallCount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_playType = true && this.isSetPlayType();
      boolean that_present_playType = true && that.isSetPlayType();
      if (this_present_playType || that_present_playType) {
        if (!(this_present_playType && that_present_playType))
          return false;
        if (!this.playType.equals(that.playType))
          return false;
      }

      boolean this_present_orderContent = true && this.isSetOrderContent();
      boolean that_present_orderContent = true && that.isSetOrderContent();
      if (this_present_orderContent || that_present_orderContent) {
        if (!(this_present_orderContent && that_present_orderContent))
          return false;
        if (!this.orderContent.equals(that.orderContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calBallCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calBallCount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playType:");
      if (this.playType == null) {
        sb.append("null");
      } else {
        sb.append(this.playType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderContent:");
      if (this.orderContent == null) {
        sb.append("null");
      } else {
        sb.append(this.orderContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calBallCount_argsStandardSchemeFactory implements SchemeFactory {
      public calBallCount_argsStandardScheme getScheme() {
        return new calBallCount_argsStandardScheme();
      }
    }

    private static class calBallCount_argsStandardScheme extends StandardScheme<calBallCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calBallCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playType = iprot.readString();
                struct.setPlayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderContent = iprot.readString();
                struct.setOrderContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calBallCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.playType != null) {
          oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.playType);
          oprot.writeFieldEnd();
        }
        if (struct.orderContent != null) {
          oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
          oprot.writeString(struct.orderContent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calBallCount_argsTupleSchemeFactory implements SchemeFactory {
      public calBallCount_argsTupleScheme getScheme() {
        return new calBallCount_argsTupleScheme();
      }
    }

    private static class calBallCount_argsTupleScheme extends TupleScheme<calBallCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calBallCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetPlayType()) {
          optionals.set(1);
        }
        if (struct.isSetOrderContent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetPlayType()) {
          oprot.writeString(struct.playType);
        }
        if (struct.isSetOrderContent()) {
          oprot.writeString(struct.orderContent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calBallCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playType = iprot.readString();
          struct.setPlayTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orderContent = iprot.readString();
          struct.setOrderContentIsSet(true);
        }
      }
    }

  }

  public static class calBallCount_result implements org.apache.thrift.TBase<calBallCount_result, calBallCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<calBallCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calBallCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calBallCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calBallCount_resultTupleSchemeFactory());
    }

    public BallCountReturnMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BallCountReturnMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calBallCount_result.class, metaDataMap);
    }

    public calBallCount_result() {
    }

    public calBallCount_result(
      BallCountReturnMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calBallCount_result(calBallCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new BallCountReturnMessage(other.success);
      }
    }

    public calBallCount_result deepCopy() {
      return new calBallCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BallCountReturnMessage getSuccess() {
      return this.success;
    }

    public calBallCount_result setSuccess(BallCountReturnMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BallCountReturnMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calBallCount_result)
        return this.equals((calBallCount_result)that);
      return false;
    }

    public boolean equals(calBallCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calBallCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calBallCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calBallCount_resultStandardSchemeFactory implements SchemeFactory {
      public calBallCount_resultStandardScheme getScheme() {
        return new calBallCount_resultStandardScheme();
      }
    }

    private static class calBallCount_resultStandardScheme extends StandardScheme<calBallCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calBallCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BallCountReturnMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calBallCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calBallCount_resultTupleSchemeFactory implements SchemeFactory {
      public calBallCount_resultTupleScheme getScheme() {
        return new calBallCount_resultTupleScheme();
      }
    }

    private static class calBallCount_resultTupleScheme extends TupleScheme<calBallCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calBallCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calBallCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BallCountReturnMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class calJCBallCount_args implements org.apache.thrift.TBase<calJCBallCount_args, calJCBallCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<calJCBallCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calJCBallCount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calJCBallCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calJCBallCount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String playType; // required
    public String orderContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      PLAY_TYPE((short)2, "playType"),
      ORDER_CONTENT((short)3, "orderContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // PLAY_TYPE
            return PLAY_TYPE;
          case 3: // ORDER_CONTENT
            return ORDER_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calJCBallCount_args.class, metaDataMap);
    }

    public calJCBallCount_args() {
    }

    public calJCBallCount_args(
      String lotteryId,
      String playType,
      String orderContent)
    {
      this();
      this.lotteryId = lotteryId;
      this.playType = playType;
      this.orderContent = orderContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calJCBallCount_args(calJCBallCount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetPlayType()) {
        this.playType = other.playType;
      }
      if (other.isSetOrderContent()) {
        this.orderContent = other.orderContent;
      }
    }

    public calJCBallCount_args deepCopy() {
      return new calJCBallCount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.playType = null;
      this.orderContent = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public calJCBallCount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getPlayType() {
      return this.playType;
    }

    public calJCBallCount_args setPlayType(String playType) {
      this.playType = playType;
      return this;
    }

    public void unsetPlayType() {
      this.playType = null;
    }

    /** Returns true if field playType is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayType() {
      return this.playType != null;
    }

    public void setPlayTypeIsSet(boolean value) {
      if (!value) {
        this.playType = null;
      }
    }

    public String getOrderContent() {
      return this.orderContent;
    }

    public calJCBallCount_args setOrderContent(String orderContent) {
      this.orderContent = orderContent;
      return this;
    }

    public void unsetOrderContent() {
      this.orderContent = null;
    }

    /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderContent() {
      return this.orderContent != null;
    }

    public void setOrderContentIsSet(boolean value) {
      if (!value) {
        this.orderContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case PLAY_TYPE:
        if (value == null) {
          unsetPlayType();
        } else {
          setPlayType((String)value);
        }
        break;

      case ORDER_CONTENT:
        if (value == null) {
          unsetOrderContent();
        } else {
          setOrderContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case PLAY_TYPE:
        return getPlayType();

      case ORDER_CONTENT:
        return getOrderContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case PLAY_TYPE:
        return isSetPlayType();
      case ORDER_CONTENT:
        return isSetOrderContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calJCBallCount_args)
        return this.equals((calJCBallCount_args)that);
      return false;
    }

    public boolean equals(calJCBallCount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_playType = true && this.isSetPlayType();
      boolean that_present_playType = true && that.isSetPlayType();
      if (this_present_playType || that_present_playType) {
        if (!(this_present_playType && that_present_playType))
          return false;
        if (!this.playType.equals(that.playType))
          return false;
      }

      boolean this_present_orderContent = true && this.isSetOrderContent();
      boolean that_present_orderContent = true && that.isSetOrderContent();
      if (this_present_orderContent || that_present_orderContent) {
        if (!(this_present_orderContent && that_present_orderContent))
          return false;
        if (!this.orderContent.equals(that.orderContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calJCBallCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calJCBallCount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playType:");
      if (this.playType == null) {
        sb.append("null");
      } else {
        sb.append(this.playType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderContent:");
      if (this.orderContent == null) {
        sb.append("null");
      } else {
        sb.append(this.orderContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calJCBallCount_argsStandardSchemeFactory implements SchemeFactory {
      public calJCBallCount_argsStandardScheme getScheme() {
        return new calJCBallCount_argsStandardScheme();
      }
    }

    private static class calJCBallCount_argsStandardScheme extends StandardScheme<calJCBallCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calJCBallCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playType = iprot.readString();
                struct.setPlayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderContent = iprot.readString();
                struct.setOrderContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calJCBallCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.playType != null) {
          oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.playType);
          oprot.writeFieldEnd();
        }
        if (struct.orderContent != null) {
          oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
          oprot.writeString(struct.orderContent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calJCBallCount_argsTupleSchemeFactory implements SchemeFactory {
      public calJCBallCount_argsTupleScheme getScheme() {
        return new calJCBallCount_argsTupleScheme();
      }
    }

    private static class calJCBallCount_argsTupleScheme extends TupleScheme<calJCBallCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calJCBallCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetPlayType()) {
          optionals.set(1);
        }
        if (struct.isSetOrderContent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetPlayType()) {
          oprot.writeString(struct.playType);
        }
        if (struct.isSetOrderContent()) {
          oprot.writeString(struct.orderContent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calJCBallCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playType = iprot.readString();
          struct.setPlayTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orderContent = iprot.readString();
          struct.setOrderContentIsSet(true);
        }
      }
    }

  }

  public static class calJCBallCount_result implements org.apache.thrift.TBase<calJCBallCount_result, calJCBallCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<calJCBallCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calJCBallCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calJCBallCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calJCBallCount_resultTupleSchemeFactory());
    }

    public BallCountReturnMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BallCountReturnMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calJCBallCount_result.class, metaDataMap);
    }

    public calJCBallCount_result() {
    }

    public calJCBallCount_result(
      BallCountReturnMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calJCBallCount_result(calJCBallCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new BallCountReturnMessage(other.success);
      }
    }

    public calJCBallCount_result deepCopy() {
      return new calJCBallCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BallCountReturnMessage getSuccess() {
      return this.success;
    }

    public calJCBallCount_result setSuccess(BallCountReturnMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BallCountReturnMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calJCBallCount_result)
        return this.equals((calJCBallCount_result)that);
      return false;
    }

    public boolean equals(calJCBallCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calJCBallCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calJCBallCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calJCBallCount_resultStandardSchemeFactory implements SchemeFactory {
      public calJCBallCount_resultStandardScheme getScheme() {
        return new calJCBallCount_resultStandardScheme();
      }
    }

    private static class calJCBallCount_resultStandardScheme extends StandardScheme<calJCBallCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calJCBallCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BallCountReturnMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calJCBallCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calJCBallCount_resultTupleSchemeFactory implements SchemeFactory {
      public calJCBallCount_resultTupleScheme getScheme() {
        return new calJCBallCount_resultTupleScheme();
      }
    }

    private static class calJCBallCount_resultTupleScheme extends TupleScheme<calJCBallCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calJCBallCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calJCBallCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BallCountReturnMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class calTicketDetail_args implements org.apache.thrift.TBase<calTicketDetail_args, calTicketDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<calTicketDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calTicketDetail_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calTicketDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calTicketDetail_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String playType; // required
    public String orderContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      PLAY_TYPE((short)2, "playType"),
      ORDER_CONTENT((short)3, "orderContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // PLAY_TYPE
            return PLAY_TYPE;
          case 3: // ORDER_CONTENT
            return ORDER_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calTicketDetail_args.class, metaDataMap);
    }

    public calTicketDetail_args() {
    }

    public calTicketDetail_args(
      String lotteryId,
      String playType,
      String orderContent)
    {
      this();
      this.lotteryId = lotteryId;
      this.playType = playType;
      this.orderContent = orderContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calTicketDetail_args(calTicketDetail_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetPlayType()) {
        this.playType = other.playType;
      }
      if (other.isSetOrderContent()) {
        this.orderContent = other.orderContent;
      }
    }

    public calTicketDetail_args deepCopy() {
      return new calTicketDetail_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.playType = null;
      this.orderContent = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public calTicketDetail_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getPlayType() {
      return this.playType;
    }

    public calTicketDetail_args setPlayType(String playType) {
      this.playType = playType;
      return this;
    }

    public void unsetPlayType() {
      this.playType = null;
    }

    /** Returns true if field playType is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayType() {
      return this.playType != null;
    }

    public void setPlayTypeIsSet(boolean value) {
      if (!value) {
        this.playType = null;
      }
    }

    public String getOrderContent() {
      return this.orderContent;
    }

    public calTicketDetail_args setOrderContent(String orderContent) {
      this.orderContent = orderContent;
      return this;
    }

    public void unsetOrderContent() {
      this.orderContent = null;
    }

    /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderContent() {
      return this.orderContent != null;
    }

    public void setOrderContentIsSet(boolean value) {
      if (!value) {
        this.orderContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case PLAY_TYPE:
        if (value == null) {
          unsetPlayType();
        } else {
          setPlayType((String)value);
        }
        break;

      case ORDER_CONTENT:
        if (value == null) {
          unsetOrderContent();
        } else {
          setOrderContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case PLAY_TYPE:
        return getPlayType();

      case ORDER_CONTENT:
        return getOrderContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case PLAY_TYPE:
        return isSetPlayType();
      case ORDER_CONTENT:
        return isSetOrderContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calTicketDetail_args)
        return this.equals((calTicketDetail_args)that);
      return false;
    }

    public boolean equals(calTicketDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_playType = true && this.isSetPlayType();
      boolean that_present_playType = true && that.isSetPlayType();
      if (this_present_playType || that_present_playType) {
        if (!(this_present_playType && that_present_playType))
          return false;
        if (!this.playType.equals(that.playType))
          return false;
      }

      boolean this_present_orderContent = true && this.isSetOrderContent();
      boolean that_present_orderContent = true && that.isSetOrderContent();
      if (this_present_orderContent || that_present_orderContent) {
        if (!(this_present_orderContent && that_present_orderContent))
          return false;
        if (!this.orderContent.equals(that.orderContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calTicketDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calTicketDetail_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("playType:");
      if (this.playType == null) {
        sb.append("null");
      } else {
        sb.append(this.playType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderContent:");
      if (this.orderContent == null) {
        sb.append("null");
      } else {
        sb.append(this.orderContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calTicketDetail_argsStandardSchemeFactory implements SchemeFactory {
      public calTicketDetail_argsStandardScheme getScheme() {
        return new calTicketDetail_argsStandardScheme();
      }
    }

    private static class calTicketDetail_argsStandardScheme extends StandardScheme<calTicketDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calTicketDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.playType = iprot.readString();
                struct.setPlayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderContent = iprot.readString();
                struct.setOrderContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calTicketDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.playType != null) {
          oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.playType);
          oprot.writeFieldEnd();
        }
        if (struct.orderContent != null) {
          oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
          oprot.writeString(struct.orderContent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calTicketDetail_argsTupleSchemeFactory implements SchemeFactory {
      public calTicketDetail_argsTupleScheme getScheme() {
        return new calTicketDetail_argsTupleScheme();
      }
    }

    private static class calTicketDetail_argsTupleScheme extends TupleScheme<calTicketDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calTicketDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetPlayType()) {
          optionals.set(1);
        }
        if (struct.isSetOrderContent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetPlayType()) {
          oprot.writeString(struct.playType);
        }
        if (struct.isSetOrderContent()) {
          oprot.writeString(struct.orderContent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calTicketDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.playType = iprot.readString();
          struct.setPlayTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orderContent = iprot.readString();
          struct.setOrderContentIsSet(true);
        }
      }
    }

  }

  public static class calTicketDetail_result implements org.apache.thrift.TBase<calTicketDetail_result, calTicketDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<calTicketDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calTicketDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new calTicketDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new calTicketDetail_resultTupleSchemeFactory());
    }

    public TicketDetailReturnMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TicketDetailReturnMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calTicketDetail_result.class, metaDataMap);
    }

    public calTicketDetail_result() {
    }

    public calTicketDetail_result(
      TicketDetailReturnMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calTicketDetail_result(calTicketDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new TicketDetailReturnMessage(other.success);
      }
    }

    public calTicketDetail_result deepCopy() {
      return new calTicketDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TicketDetailReturnMessage getSuccess() {
      return this.success;
    }

    public calTicketDetail_result setSuccess(TicketDetailReturnMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TicketDetailReturnMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof calTicketDetail_result)
        return this.equals((calTicketDetail_result)that);
      return false;
    }

    public boolean equals(calTicketDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(calTicketDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("calTicketDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calTicketDetail_resultStandardSchemeFactory implements SchemeFactory {
      public calTicketDetail_resultStandardScheme getScheme() {
        return new calTicketDetail_resultStandardScheme();
      }
    }

    private static class calTicketDetail_resultStandardScheme extends StandardScheme<calTicketDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, calTicketDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TicketDetailReturnMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, calTicketDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calTicketDetail_resultTupleSchemeFactory implements SchemeFactory {
      public calTicketDetail_resultTupleScheme getScheme() {
        return new calTicketDetail_resultTupleScheme();
      }
    }

    private static class calTicketDetail_resultTupleScheme extends TupleScheme<calTicketDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calTicketDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calTicketDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TicketDetailReturnMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWinningAmountStat_args implements org.apache.thrift.TBase<getWinningAmountStat_args, getWinningAmountStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWinningAmountStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWinningAmountStat_args");

    private static final org.apache.thrift.protocol.TField WINNING_AMOUNT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("winningAmountList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWinningAmountStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWinningAmountStat_argsTupleSchemeFactory());
    }

    public List<WinningAmountStat> winningAmountList; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINNING_AMOUNT_LIST((short)1, "winningAmountList"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINNING_AMOUNT_LIST
            return WINNING_AMOUNT_LIST;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINNING_AMOUNT_LIST, new org.apache.thrift.meta_data.FieldMetaData("winningAmountList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WinningAmountStat.class))));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWinningAmountStat_args.class, metaDataMap);
    }

    public getWinningAmountStat_args() {
    }

    public getWinningAmountStat_args(
      List<WinningAmountStat> winningAmountList,
      int currentPage,
      int pageSize)
    {
      this();
      this.winningAmountList = winningAmountList;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWinningAmountStat_args(getWinningAmountStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetWinningAmountList()) {
        List<WinningAmountStat> __this__winningAmountList = new ArrayList<WinningAmountStat>(other.winningAmountList.size());
        for (WinningAmountStat other_element : other.winningAmountList) {
          __this__winningAmountList.add(new WinningAmountStat(other_element));
        }
        this.winningAmountList = __this__winningAmountList;
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getWinningAmountStat_args deepCopy() {
      return new getWinningAmountStat_args(this);
    }

    @Override
    public void clear() {
      this.winningAmountList = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getWinningAmountListSize() {
      return (this.winningAmountList == null) ? 0 : this.winningAmountList.size();
    }

    public java.util.Iterator<WinningAmountStat> getWinningAmountListIterator() {
      return (this.winningAmountList == null) ? null : this.winningAmountList.iterator();
    }

    public void addToWinningAmountList(WinningAmountStat elem) {
      if (this.winningAmountList == null) {
        this.winningAmountList = new ArrayList<WinningAmountStat>();
      }
      this.winningAmountList.add(elem);
    }

    public List<WinningAmountStat> getWinningAmountList() {
      return this.winningAmountList;
    }

    public getWinningAmountStat_args setWinningAmountList(List<WinningAmountStat> winningAmountList) {
      this.winningAmountList = winningAmountList;
      return this;
    }

    public void unsetWinningAmountList() {
      this.winningAmountList = null;
    }

    /** Returns true if field winningAmountList is set (has been assigned a value) and false otherwise */
    public boolean isSetWinningAmountList() {
      return this.winningAmountList != null;
    }

    public void setWinningAmountListIsSet(boolean value) {
      if (!value) {
        this.winningAmountList = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getWinningAmountStat_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getWinningAmountStat_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINNING_AMOUNT_LIST:
        if (value == null) {
          unsetWinningAmountList();
        } else {
          setWinningAmountList((List<WinningAmountStat>)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINNING_AMOUNT_LIST:
        return getWinningAmountList();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINNING_AMOUNT_LIST:
        return isSetWinningAmountList();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWinningAmountStat_args)
        return this.equals((getWinningAmountStat_args)that);
      return false;
    }

    public boolean equals(getWinningAmountStat_args that) {
      if (that == null)
        return false;

      boolean this_present_winningAmountList = true && this.isSetWinningAmountList();
      boolean that_present_winningAmountList = true && that.isSetWinningAmountList();
      if (this_present_winningAmountList || that_present_winningAmountList) {
        if (!(this_present_winningAmountList && that_present_winningAmountList))
          return false;
        if (!this.winningAmountList.equals(that.winningAmountList))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWinningAmountStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWinningAmountList()).compareTo(other.isSetWinningAmountList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWinningAmountList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winningAmountList, other.winningAmountList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWinningAmountStat_args(");
      boolean first = true;

      sb.append("winningAmountList:");
      if (this.winningAmountList == null) {
        sb.append("null");
      } else {
        sb.append(this.winningAmountList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWinningAmountStat_argsStandardSchemeFactory implements SchemeFactory {
      public getWinningAmountStat_argsStandardScheme getScheme() {
        return new getWinningAmountStat_argsStandardScheme();
      }
    }

    private static class getWinningAmountStat_argsStandardScheme extends StandardScheme<getWinningAmountStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWinningAmountStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINNING_AMOUNT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.winningAmountList = new ArrayList<WinningAmountStat>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    WinningAmountStat _elem34;
                    _elem34 = new WinningAmountStat();
                    _elem34.read(iprot);
                    struct.winningAmountList.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setWinningAmountListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWinningAmountStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.winningAmountList != null) {
          oprot.writeFieldBegin(WINNING_AMOUNT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.winningAmountList.size()));
            for (WinningAmountStat _iter35 : struct.winningAmountList)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWinningAmountStat_argsTupleSchemeFactory implements SchemeFactory {
      public getWinningAmountStat_argsTupleScheme getScheme() {
        return new getWinningAmountStat_argsTupleScheme();
      }
    }

    private static class getWinningAmountStat_argsTupleScheme extends TupleScheme<getWinningAmountStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWinningAmountStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWinningAmountList()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWinningAmountList()) {
          {
            oprot.writeI32(struct.winningAmountList.size());
            for (WinningAmountStat _iter36 : struct.winningAmountList)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWinningAmountStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.winningAmountList = new ArrayList<WinningAmountStat>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              WinningAmountStat _elem39;
              _elem39 = new WinningAmountStat();
              _elem39.read(iprot);
              struct.winningAmountList.add(_elem39);
            }
          }
          struct.setWinningAmountListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getWinningAmountStat_result implements org.apache.thrift.TBase<getWinningAmountStat_result, getWinningAmountStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWinningAmountStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWinningAmountStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWinningAmountStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWinningAmountStat_resultTupleSchemeFactory());
    }

    public WinningAmountStatData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WinningAmountStatData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWinningAmountStat_result.class, metaDataMap);
    }

    public getWinningAmountStat_result() {
    }

    public getWinningAmountStat_result(
      WinningAmountStatData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWinningAmountStat_result(getWinningAmountStat_result other) {
      if (other.isSetSuccess()) {
        this.success = new WinningAmountStatData(other.success);
      }
    }

    public getWinningAmountStat_result deepCopy() {
      return new getWinningAmountStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WinningAmountStatData getSuccess() {
      return this.success;
    }

    public getWinningAmountStat_result setSuccess(WinningAmountStatData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WinningAmountStatData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWinningAmountStat_result)
        return this.equals((getWinningAmountStat_result)that);
      return false;
    }

    public boolean equals(getWinningAmountStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWinningAmountStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWinningAmountStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWinningAmountStat_resultStandardSchemeFactory implements SchemeFactory {
      public getWinningAmountStat_resultStandardScheme getScheme() {
        return new getWinningAmountStat_resultStandardScheme();
      }
    }

    private static class getWinningAmountStat_resultStandardScheme extends StandardScheme<getWinningAmountStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWinningAmountStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WinningAmountStatData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWinningAmountStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWinningAmountStat_resultTupleSchemeFactory implements SchemeFactory {
      public getWinningAmountStat_resultTupleScheme getScheme() {
        return new getWinningAmountStat_resultTupleScheme();
      }
    }

    private static class getWinningAmountStat_resultTupleScheme extends TupleScheme<getWinningAmountStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWinningAmountStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWinningAmountStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WinningAmountStatData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWinningNumStat_args implements org.apache.thrift.TBase<getWinningNumStat_args, getWinningNumStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWinningNumStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWinningNumStat_args");

    private static final org.apache.thrift.protocol.TField WINNING_NUM_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("winningNumStat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWinningNumStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWinningNumStat_argsTupleSchemeFactory());
    }

    public WinningNumStat winningNumStat; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINNING_NUM_STAT((short)1, "winningNumStat"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINNING_NUM_STAT
            return WINNING_NUM_STAT;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINNING_NUM_STAT, new org.apache.thrift.meta_data.FieldMetaData("winningNumStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WinningNumStat.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWinningNumStat_args.class, metaDataMap);
    }

    public getWinningNumStat_args() {
    }

    public getWinningNumStat_args(
      WinningNumStat winningNumStat,
      int currentPage,
      int pageSize)
    {
      this();
      this.winningNumStat = winningNumStat;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWinningNumStat_args(getWinningNumStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetWinningNumStat()) {
        this.winningNumStat = new WinningNumStat(other.winningNumStat);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getWinningNumStat_args deepCopy() {
      return new getWinningNumStat_args(this);
    }

    @Override
    public void clear() {
      this.winningNumStat = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public WinningNumStat getWinningNumStat() {
      return this.winningNumStat;
    }

    public getWinningNumStat_args setWinningNumStat(WinningNumStat winningNumStat) {
      this.winningNumStat = winningNumStat;
      return this;
    }

    public void unsetWinningNumStat() {
      this.winningNumStat = null;
    }

    /** Returns true if field winningNumStat is set (has been assigned a value) and false otherwise */
    public boolean isSetWinningNumStat() {
      return this.winningNumStat != null;
    }

    public void setWinningNumStatIsSet(boolean value) {
      if (!value) {
        this.winningNumStat = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getWinningNumStat_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getWinningNumStat_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINNING_NUM_STAT:
        if (value == null) {
          unsetWinningNumStat();
        } else {
          setWinningNumStat((WinningNumStat)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINNING_NUM_STAT:
        return getWinningNumStat();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINNING_NUM_STAT:
        return isSetWinningNumStat();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWinningNumStat_args)
        return this.equals((getWinningNumStat_args)that);
      return false;
    }

    public boolean equals(getWinningNumStat_args that) {
      if (that == null)
        return false;

      boolean this_present_winningNumStat = true && this.isSetWinningNumStat();
      boolean that_present_winningNumStat = true && that.isSetWinningNumStat();
      if (this_present_winningNumStat || that_present_winningNumStat) {
        if (!(this_present_winningNumStat && that_present_winningNumStat))
          return false;
        if (!this.winningNumStat.equals(that.winningNumStat))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWinningNumStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWinningNumStat()).compareTo(other.isSetWinningNumStat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWinningNumStat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winningNumStat, other.winningNumStat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWinningNumStat_args(");
      boolean first = true;

      sb.append("winningNumStat:");
      if (this.winningNumStat == null) {
        sb.append("null");
      } else {
        sb.append(this.winningNumStat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (winningNumStat != null) {
        winningNumStat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWinningNumStat_argsStandardSchemeFactory implements SchemeFactory {
      public getWinningNumStat_argsStandardScheme getScheme() {
        return new getWinningNumStat_argsStandardScheme();
      }
    }

    private static class getWinningNumStat_argsStandardScheme extends StandardScheme<getWinningNumStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWinningNumStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINNING_NUM_STAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.winningNumStat = new WinningNumStat();
                struct.winningNumStat.read(iprot);
                struct.setWinningNumStatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWinningNumStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.winningNumStat != null) {
          oprot.writeFieldBegin(WINNING_NUM_STAT_FIELD_DESC);
          struct.winningNumStat.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWinningNumStat_argsTupleSchemeFactory implements SchemeFactory {
      public getWinningNumStat_argsTupleScheme getScheme() {
        return new getWinningNumStat_argsTupleScheme();
      }
    }

    private static class getWinningNumStat_argsTupleScheme extends TupleScheme<getWinningNumStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWinningNumStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWinningNumStat()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWinningNumStat()) {
          struct.winningNumStat.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWinningNumStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.winningNumStat = new WinningNumStat();
          struct.winningNumStat.read(iprot);
          struct.setWinningNumStatIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getWinningNumStat_result implements org.apache.thrift.TBase<getWinningNumStat_result, getWinningNumStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWinningNumStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWinningNumStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWinningNumStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWinningNumStat_resultTupleSchemeFactory());
    }

    public WinningNumStatData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WinningNumStatData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWinningNumStat_result.class, metaDataMap);
    }

    public getWinningNumStat_result() {
    }

    public getWinningNumStat_result(
      WinningNumStatData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWinningNumStat_result(getWinningNumStat_result other) {
      if (other.isSetSuccess()) {
        this.success = new WinningNumStatData(other.success);
      }
    }

    public getWinningNumStat_result deepCopy() {
      return new getWinningNumStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WinningNumStatData getSuccess() {
      return this.success;
    }

    public getWinningNumStat_result setSuccess(WinningNumStatData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WinningNumStatData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWinningNumStat_result)
        return this.equals((getWinningNumStat_result)that);
      return false;
    }

    public boolean equals(getWinningNumStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWinningNumStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWinningNumStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWinningNumStat_resultStandardSchemeFactory implements SchemeFactory {
      public getWinningNumStat_resultStandardScheme getScheme() {
        return new getWinningNumStat_resultStandardScheme();
      }
    }

    private static class getWinningNumStat_resultStandardScheme extends StandardScheme<getWinningNumStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWinningNumStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WinningNumStatData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWinningNumStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWinningNumStat_resultTupleSchemeFactory implements SchemeFactory {
      public getWinningNumStat_resultTupleScheme getScheme() {
        return new getWinningNumStat_resultTupleScheme();
      }
    }

    private static class getWinningNumStat_resultTupleScheme extends TupleScheme<getWinningNumStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWinningNumStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWinningNumStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WinningNumStatData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class restartCalPrizeAll_args implements org.apache.thrift.TBase<restartCalPrizeAll_args, restartCalPrizeAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<restartCalPrizeAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartCalPrizeAll_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restartCalPrizeAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restartCalPrizeAll_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartCalPrizeAll_args.class, metaDataMap);
    }

    public restartCalPrizeAll_args() {
    }

    public restartCalPrizeAll_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restartCalPrizeAll_args(restartCalPrizeAll_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public restartCalPrizeAll_args deepCopy() {
      return new restartCalPrizeAll_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public restartCalPrizeAll_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public restartCalPrizeAll_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restartCalPrizeAll_args)
        return this.equals((restartCalPrizeAll_args)that);
      return false;
    }

    public boolean equals(restartCalPrizeAll_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restartCalPrizeAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restartCalPrizeAll_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restartCalPrizeAll_argsStandardSchemeFactory implements SchemeFactory {
      public restartCalPrizeAll_argsStandardScheme getScheme() {
        return new restartCalPrizeAll_argsStandardScheme();
      }
    }

    private static class restartCalPrizeAll_argsStandardScheme extends StandardScheme<restartCalPrizeAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restartCalPrizeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restartCalPrizeAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restartCalPrizeAll_argsTupleSchemeFactory implements SchemeFactory {
      public restartCalPrizeAll_argsTupleScheme getScheme() {
        return new restartCalPrizeAll_argsTupleScheme();
      }
    }

    private static class restartCalPrizeAll_argsTupleScheme extends TupleScheme<restartCalPrizeAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restartCalPrizeAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restartCalPrizeAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class restartCalPrizeAll_result implements org.apache.thrift.TBase<restartCalPrizeAll_result, restartCalPrizeAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<restartCalPrizeAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartCalPrizeAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restartCalPrizeAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restartCalPrizeAll_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartCalPrizeAll_result.class, metaDataMap);
    }

    public restartCalPrizeAll_result() {
    }

    public restartCalPrizeAll_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restartCalPrizeAll_result(restartCalPrizeAll_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public restartCalPrizeAll_result deepCopy() {
      return new restartCalPrizeAll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public restartCalPrizeAll_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restartCalPrizeAll_result)
        return this.equals((restartCalPrizeAll_result)that);
      return false;
    }

    public boolean equals(restartCalPrizeAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restartCalPrizeAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restartCalPrizeAll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restartCalPrizeAll_resultStandardSchemeFactory implements SchemeFactory {
      public restartCalPrizeAll_resultStandardScheme getScheme() {
        return new restartCalPrizeAll_resultStandardScheme();
      }
    }

    private static class restartCalPrizeAll_resultStandardScheme extends StandardScheme<restartCalPrizeAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restartCalPrizeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restartCalPrizeAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restartCalPrizeAll_resultTupleSchemeFactory implements SchemeFactory {
      public restartCalPrizeAll_resultTupleScheme getScheme() {
        return new restartCalPrizeAll_resultTupleScheme();
      }
    }

    private static class restartCalPrizeAll_resultTupleScheme extends TupleScheme<restartCalPrizeAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restartCalPrizeAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restartCalPrizeAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class restartCalPrizePart_args implements org.apache.thrift.TBase<restartCalPrizePart_args, restartCalPrizePart_args._Fields>, java.io.Serializable, Cloneable, Comparable<restartCalPrizePart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartCalPrizePart_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restartCalPrizePart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restartCalPrizePart_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartCalPrizePart_args.class, metaDataMap);
    }

    public restartCalPrizePart_args() {
    }

    public restartCalPrizePart_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restartCalPrizePart_args(restartCalPrizePart_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public restartCalPrizePart_args deepCopy() {
      return new restartCalPrizePart_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public restartCalPrizePart_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public restartCalPrizePart_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restartCalPrizePart_args)
        return this.equals((restartCalPrizePart_args)that);
      return false;
    }

    public boolean equals(restartCalPrizePart_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restartCalPrizePart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restartCalPrizePart_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restartCalPrizePart_argsStandardSchemeFactory implements SchemeFactory {
      public restartCalPrizePart_argsStandardScheme getScheme() {
        return new restartCalPrizePart_argsStandardScheme();
      }
    }

    private static class restartCalPrizePart_argsStandardScheme extends StandardScheme<restartCalPrizePart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restartCalPrizePart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restartCalPrizePart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restartCalPrizePart_argsTupleSchemeFactory implements SchemeFactory {
      public restartCalPrizePart_argsTupleScheme getScheme() {
        return new restartCalPrizePart_argsTupleScheme();
      }
    }

    private static class restartCalPrizePart_argsTupleScheme extends TupleScheme<restartCalPrizePart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restartCalPrizePart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restartCalPrizePart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class restartCalPrizePart_result implements org.apache.thrift.TBase<restartCalPrizePart_result, restartCalPrizePart_result._Fields>, java.io.Serializable, Cloneable, Comparable<restartCalPrizePart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartCalPrizePart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restartCalPrizePart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restartCalPrizePart_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartCalPrizePart_result.class, metaDataMap);
    }

    public restartCalPrizePart_result() {
    }

    public restartCalPrizePart_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restartCalPrizePart_result(restartCalPrizePart_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public restartCalPrizePart_result deepCopy() {
      return new restartCalPrizePart_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public restartCalPrizePart_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restartCalPrizePart_result)
        return this.equals((restartCalPrizePart_result)that);
      return false;
    }

    public boolean equals(restartCalPrizePart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restartCalPrizePart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restartCalPrizePart_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restartCalPrizePart_resultStandardSchemeFactory implements SchemeFactory {
      public restartCalPrizePart_resultStandardScheme getScheme() {
        return new restartCalPrizePart_resultStandardScheme();
      }
    }

    private static class restartCalPrizePart_resultStandardScheme extends StandardScheme<restartCalPrizePart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restartCalPrizePart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restartCalPrizePart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restartCalPrizePart_resultTupleSchemeFactory implements SchemeFactory {
      public restartCalPrizePart_resultTupleScheme getScheme() {
        return new restartCalPrizePart_resultTupleScheme();
      }
    }

    private static class restartCalPrizePart_resultTupleScheme extends TupleScheme<restartCalPrizePart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restartCalPrizePart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restartCalPrizePart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWinningOrderList_args implements org.apache.thrift.TBase<getWinningOrderList_args, getWinningOrderList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWinningOrderList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWinningOrderList_args");

    private static final org.apache.thrift.protocol.TField WINNING_ORDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("winningOrderInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWinningOrderList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWinningOrderList_argsTupleSchemeFactory());
    }

    public WinningOrderInfo winningOrderInfo; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINNING_ORDER_INFO((short)1, "winningOrderInfo"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINNING_ORDER_INFO
            return WINNING_ORDER_INFO;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINNING_ORDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("winningOrderInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WinningOrderInfo.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWinningOrderList_args.class, metaDataMap);
    }

    public getWinningOrderList_args() {
    }

    public getWinningOrderList_args(
      WinningOrderInfo winningOrderInfo,
      int currentPage,
      int pageSize)
    {
      this();
      this.winningOrderInfo = winningOrderInfo;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWinningOrderList_args(getWinningOrderList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetWinningOrderInfo()) {
        this.winningOrderInfo = new WinningOrderInfo(other.winningOrderInfo);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getWinningOrderList_args deepCopy() {
      return new getWinningOrderList_args(this);
    }

    @Override
    public void clear() {
      this.winningOrderInfo = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public WinningOrderInfo getWinningOrderInfo() {
      return this.winningOrderInfo;
    }

    public getWinningOrderList_args setWinningOrderInfo(WinningOrderInfo winningOrderInfo) {
      this.winningOrderInfo = winningOrderInfo;
      return this;
    }

    public void unsetWinningOrderInfo() {
      this.winningOrderInfo = null;
    }

    /** Returns true if field winningOrderInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetWinningOrderInfo() {
      return this.winningOrderInfo != null;
    }

    public void setWinningOrderInfoIsSet(boolean value) {
      if (!value) {
        this.winningOrderInfo = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getWinningOrderList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getWinningOrderList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINNING_ORDER_INFO:
        if (value == null) {
          unsetWinningOrderInfo();
        } else {
          setWinningOrderInfo((WinningOrderInfo)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINNING_ORDER_INFO:
        return getWinningOrderInfo();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINNING_ORDER_INFO:
        return isSetWinningOrderInfo();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWinningOrderList_args)
        return this.equals((getWinningOrderList_args)that);
      return false;
    }

    public boolean equals(getWinningOrderList_args that) {
      if (that == null)
        return false;

      boolean this_present_winningOrderInfo = true && this.isSetWinningOrderInfo();
      boolean that_present_winningOrderInfo = true && that.isSetWinningOrderInfo();
      if (this_present_winningOrderInfo || that_present_winningOrderInfo) {
        if (!(this_present_winningOrderInfo && that_present_winningOrderInfo))
          return false;
        if (!this.winningOrderInfo.equals(that.winningOrderInfo))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWinningOrderList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWinningOrderInfo()).compareTo(other.isSetWinningOrderInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWinningOrderInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winningOrderInfo, other.winningOrderInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWinningOrderList_args(");
      boolean first = true;

      sb.append("winningOrderInfo:");
      if (this.winningOrderInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.winningOrderInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (winningOrderInfo != null) {
        winningOrderInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWinningOrderList_argsStandardSchemeFactory implements SchemeFactory {
      public getWinningOrderList_argsStandardScheme getScheme() {
        return new getWinningOrderList_argsStandardScheme();
      }
    }

    private static class getWinningOrderList_argsStandardScheme extends StandardScheme<getWinningOrderList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWinningOrderList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINNING_ORDER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.winningOrderInfo = new WinningOrderInfo();
                struct.winningOrderInfo.read(iprot);
                struct.setWinningOrderInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWinningOrderList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.winningOrderInfo != null) {
          oprot.writeFieldBegin(WINNING_ORDER_INFO_FIELD_DESC);
          struct.winningOrderInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWinningOrderList_argsTupleSchemeFactory implements SchemeFactory {
      public getWinningOrderList_argsTupleScheme getScheme() {
        return new getWinningOrderList_argsTupleScheme();
      }
    }

    private static class getWinningOrderList_argsTupleScheme extends TupleScheme<getWinningOrderList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWinningOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWinningOrderInfo()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWinningOrderInfo()) {
          struct.winningOrderInfo.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWinningOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.winningOrderInfo = new WinningOrderInfo();
          struct.winningOrderInfo.read(iprot);
          struct.setWinningOrderInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getWinningOrderList_result implements org.apache.thrift.TBase<getWinningOrderList_result, getWinningOrderList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWinningOrderList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWinningOrderList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWinningOrderList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWinningOrderList_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWinningOrderList_result.class, metaDataMap);
    }

    public getWinningOrderList_result() {
    }

    public getWinningOrderList_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWinningOrderList_result(getWinningOrderList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getWinningOrderList_result deepCopy() {
      return new getWinningOrderList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getWinningOrderList_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWinningOrderList_result)
        return this.equals((getWinningOrderList_result)that);
      return false;
    }

    public boolean equals(getWinningOrderList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWinningOrderList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWinningOrderList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWinningOrderList_resultStandardSchemeFactory implements SchemeFactory {
      public getWinningOrderList_resultStandardScheme getScheme() {
        return new getWinningOrderList_resultStandardScheme();
      }
    }

    private static class getWinningOrderList_resultStandardScheme extends StandardScheme<getWinningOrderList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWinningOrderList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWinningOrderList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWinningOrderList_resultTupleSchemeFactory implements SchemeFactory {
      public getWinningOrderList_resultTupleScheme getScheme() {
        return new getWinningOrderList_resultTupleScheme();
      }
    }

    private static class getWinningOrderList_resultTupleScheme extends TupleScheme<getWinningOrderList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWinningOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWinningOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTotalWinningMoneyByGame_args implements org.apache.thrift.TBase<getTotalWinningMoneyByGame_args, getTotalWinningMoneyByGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalWinningMoneyByGame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalWinningMoneyByGame_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalWinningMoneyByGame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalWinningMoneyByGame_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalWinningMoneyByGame_args.class, metaDataMap);
    }

    public getTotalWinningMoneyByGame_args() {
    }

    public getTotalWinningMoneyByGame_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalWinningMoneyByGame_args(getTotalWinningMoneyByGame_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getTotalWinningMoneyByGame_args deepCopy() {
      return new getTotalWinningMoneyByGame_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getTotalWinningMoneyByGame_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getTotalWinningMoneyByGame_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalWinningMoneyByGame_args)
        return this.equals((getTotalWinningMoneyByGame_args)that);
      return false;
    }

    public boolean equals(getTotalWinningMoneyByGame_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalWinningMoneyByGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalWinningMoneyByGame_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalWinningMoneyByGame_argsStandardSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByGame_argsStandardScheme getScheme() {
        return new getTotalWinningMoneyByGame_argsStandardScheme();
      }
    }

    private static class getTotalWinningMoneyByGame_argsStandardScheme extends StandardScheme<getTotalWinningMoneyByGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalWinningMoneyByGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalWinningMoneyByGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalWinningMoneyByGame_argsTupleSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByGame_argsTupleScheme getScheme() {
        return new getTotalWinningMoneyByGame_argsTupleScheme();
      }
    }

    private static class getTotalWinningMoneyByGame_argsTupleScheme extends TupleScheme<getTotalWinningMoneyByGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getTotalWinningMoneyByGame_result implements org.apache.thrift.TBase<getTotalWinningMoneyByGame_result, getTotalWinningMoneyByGame_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalWinningMoneyByGame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalWinningMoneyByGame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalWinningMoneyByGame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalWinningMoneyByGame_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalWinningMoneyByGame_result.class, metaDataMap);
    }

    public getTotalWinningMoneyByGame_result() {
    }

    public getTotalWinningMoneyByGame_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalWinningMoneyByGame_result(getTotalWinningMoneyByGame_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalWinningMoneyByGame_result deepCopy() {
      return new getTotalWinningMoneyByGame_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalWinningMoneyByGame_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalWinningMoneyByGame_result)
        return this.equals((getTotalWinningMoneyByGame_result)that);
      return false;
    }

    public boolean equals(getTotalWinningMoneyByGame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalWinningMoneyByGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalWinningMoneyByGame_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalWinningMoneyByGame_resultStandardSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByGame_resultStandardScheme getScheme() {
        return new getTotalWinningMoneyByGame_resultStandardScheme();
      }
    }

    private static class getTotalWinningMoneyByGame_resultStandardScheme extends StandardScheme<getTotalWinningMoneyByGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalWinningMoneyByGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalWinningMoneyByGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalWinningMoneyByGame_resultTupleSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByGame_resultTupleScheme getScheme() {
        return new getTotalWinningMoneyByGame_resultTupleScheme();
      }
    }

    private static class getTotalWinningMoneyByGame_resultTupleScheme extends TupleScheme<getTotalWinningMoneyByGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTotalWinningMoneyByDay_args implements org.apache.thrift.TBase<getTotalWinningMoneyByDay_args, getTotalWinningMoneyByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalWinningMoneyByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalWinningMoneyByDay_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalWinningMoneyByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalWinningMoneyByDay_argsTupleSchemeFactory());
    }

    public String date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalWinningMoneyByDay_args.class, metaDataMap);
    }

    public getTotalWinningMoneyByDay_args() {
    }

    public getTotalWinningMoneyByDay_args(
      String date)
    {
      this();
      this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalWinningMoneyByDay_args(getTotalWinningMoneyByDay_args other) {
      if (other.isSetDate()) {
        this.date = other.date;
      }
    }

    public getTotalWinningMoneyByDay_args deepCopy() {
      return new getTotalWinningMoneyByDay_args(this);
    }

    @Override
    public void clear() {
      this.date = null;
    }

    public String getDate() {
      return this.date;
    }

    public getTotalWinningMoneyByDay_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalWinningMoneyByDay_args)
        return this.equals((getTotalWinningMoneyByDay_args)that);
      return false;
    }

    public boolean equals(getTotalWinningMoneyByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalWinningMoneyByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalWinningMoneyByDay_args(");
      boolean first = true;

      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalWinningMoneyByDay_argsStandardSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByDay_argsStandardScheme getScheme() {
        return new getTotalWinningMoneyByDay_argsStandardScheme();
      }
    }

    private static class getTotalWinningMoneyByDay_argsStandardScheme extends StandardScheme<getTotalWinningMoneyByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalWinningMoneyByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalWinningMoneyByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalWinningMoneyByDay_argsTupleSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByDay_argsTupleScheme getScheme() {
        return new getTotalWinningMoneyByDay_argsTupleScheme();
      }
    }

    private static class getTotalWinningMoneyByDay_argsTupleScheme extends TupleScheme<getTotalWinningMoneyByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class getTotalWinningMoneyByDay_result implements org.apache.thrift.TBase<getTotalWinningMoneyByDay_result, getTotalWinningMoneyByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalWinningMoneyByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalWinningMoneyByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalWinningMoneyByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalWinningMoneyByDay_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalWinningMoneyByDay_result.class, metaDataMap);
    }

    public getTotalWinningMoneyByDay_result() {
    }

    public getTotalWinningMoneyByDay_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalWinningMoneyByDay_result(getTotalWinningMoneyByDay_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalWinningMoneyByDay_result deepCopy() {
      return new getTotalWinningMoneyByDay_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalWinningMoneyByDay_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalWinningMoneyByDay_result)
        return this.equals((getTotalWinningMoneyByDay_result)that);
      return false;
    }

    public boolean equals(getTotalWinningMoneyByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalWinningMoneyByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalWinningMoneyByDay_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalWinningMoneyByDay_resultStandardSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByDay_resultStandardScheme getScheme() {
        return new getTotalWinningMoneyByDay_resultStandardScheme();
      }
    }

    private static class getTotalWinningMoneyByDay_resultStandardScheme extends StandardScheme<getTotalWinningMoneyByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalWinningMoneyByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalWinningMoneyByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalWinningMoneyByDay_resultTupleSchemeFactory implements SchemeFactory {
      public getTotalWinningMoneyByDay_resultTupleScheme getScheme() {
        return new getTotalWinningMoneyByDay_resultTupleScheme();
      }
    }

    private static class getTotalWinningMoneyByDay_resultTupleScheme extends TupleScheme<getTotalWinningMoneyByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalWinningMoneyByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
