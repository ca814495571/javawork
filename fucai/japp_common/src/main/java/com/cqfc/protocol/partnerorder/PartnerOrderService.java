/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerOrderService {

  public interface Iface {

    public int addPartnerOrder(Order order) throws org.apache.thrift.TException;

    public PcPartnerOrder getPartnerOrderByWhere(Order order, int pageNum, int pageSize) throws org.apache.thrift.TException;

    public List<IssueSaleAndReward> getIssueSaleAndReward(String partnerId, String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public List<LotteryIssueSale> getIssueSaleAndRewardByGroup(String partnerId, String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public List<DailySaleAndCharge> getDailySaleAndCharge(String partnerId, String countTime) throws org.apache.thrift.TException;

    public List<LotteryIssueSale> getAllLotteryIssueSale(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public PcLotteryIssueSale getLotteryIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, int pageNum, int pageSize) throws org.apache.thrift.TException;

    public List<LotteryIssueSale> getCurrentIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, String fromTime, String toTime) throws org.apache.thrift.TException;

    public List<LotteryDaySale> getLotteryDaySaleByWhere(LotteryDaySale lotteryDaySale, int pageNum, int pageSize) throws org.apache.thrift.TException;

    public PcDailyReport getDailyReportByWhere(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize) throws org.apache.thrift.TException;

    public DailyRiskCount getDailyRiskCount(String day) throws org.apache.thrift.TException;

    public IssueRiskCount getIssueRiskCount(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public int partnerIssueSaleCount(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public int partnerIssueRewardCount(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public int partnerDailySaleCount(String countTime) throws org.apache.thrift.TException;

    public int partnerDailyAwardCount(String countTime) throws org.apache.thrift.TException;

    public int partnerDailyChargeCount(String countTime) throws org.apache.thrift.TException;

    public int partnerDailyEncashCount(String countTime) throws org.apache.thrift.TException;

    public int partnerDailyReport(String countTime) throws org.apache.thrift.TException;

    public long getTotalTicknumByDay(String date) throws org.apache.thrift.TException;

    public int updateWinResultInfo(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos) throws org.apache.thrift.TException;

    public PcDaySaleDetails getDailySaleDetails(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addPartnerOrder(Order order, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPartnerOrderByWhere(Order order, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIssueSaleAndReward(String partnerId, String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIssueSaleAndRewardByGroup(String partnerId, String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDailySaleAndCharge(String partnerId, String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllLotteryIssueSale(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLotteryIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCurrentIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, String fromTime, String toTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLotteryDaySaleByWhere(LotteryDaySale lotteryDaySale, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDailyReportByWhere(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDailyRiskCount(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIssueRiskCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerIssueSaleCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerIssueRewardCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerDailySaleCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerDailyAwardCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerDailyChargeCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerDailyEncashCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partnerDailyReport(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTotalTicknumByDay(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWinResultInfo(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDailySaleDetails(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addPartnerOrder(Order order) throws org.apache.thrift.TException
    {
      send_addPartnerOrder(order);
      return recv_addPartnerOrder();
    }

    public void send_addPartnerOrder(Order order) throws org.apache.thrift.TException
    {
      addPartnerOrder_args args = new addPartnerOrder_args();
      args.setOrder(order);
      sendBase("addPartnerOrder", args);
    }

    public int recv_addPartnerOrder() throws org.apache.thrift.TException
    {
      addPartnerOrder_result result = new addPartnerOrder_result();
      receiveBase(result, "addPartnerOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPartnerOrder failed: unknown result");
    }

    public PcPartnerOrder getPartnerOrderByWhere(Order order, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_getPartnerOrderByWhere(order, pageNum, pageSize);
      return recv_getPartnerOrderByWhere();
    }

    public void send_getPartnerOrderByWhere(Order order, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      getPartnerOrderByWhere_args args = new getPartnerOrderByWhere_args();
      args.setOrder(order);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("getPartnerOrderByWhere", args);
    }

    public PcPartnerOrder recv_getPartnerOrderByWhere() throws org.apache.thrift.TException
    {
      getPartnerOrderByWhere_result result = new getPartnerOrderByWhere_result();
      receiveBase(result, "getPartnerOrderByWhere");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartnerOrderByWhere failed: unknown result");
    }

    public List<IssueSaleAndReward> getIssueSaleAndReward(String partnerId, String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getIssueSaleAndReward(partnerId, lotteryId, issueNo);
      return recv_getIssueSaleAndReward();
    }

    public void send_getIssueSaleAndReward(String partnerId, String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getIssueSaleAndReward_args args = new getIssueSaleAndReward_args();
      args.setPartnerId(partnerId);
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getIssueSaleAndReward", args);
    }

    public List<IssueSaleAndReward> recv_getIssueSaleAndReward() throws org.apache.thrift.TException
    {
      getIssueSaleAndReward_result result = new getIssueSaleAndReward_result();
      receiveBase(result, "getIssueSaleAndReward");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIssueSaleAndReward failed: unknown result");
    }

    public List<LotteryIssueSale> getIssueSaleAndRewardByGroup(String partnerId, String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getIssueSaleAndRewardByGroup(partnerId, lotteryId, issueNo);
      return recv_getIssueSaleAndRewardByGroup();
    }

    public void send_getIssueSaleAndRewardByGroup(String partnerId, String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getIssueSaleAndRewardByGroup_args args = new getIssueSaleAndRewardByGroup_args();
      args.setPartnerId(partnerId);
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getIssueSaleAndRewardByGroup", args);
    }

    public List<LotteryIssueSale> recv_getIssueSaleAndRewardByGroup() throws org.apache.thrift.TException
    {
      getIssueSaleAndRewardByGroup_result result = new getIssueSaleAndRewardByGroup_result();
      receiveBase(result, "getIssueSaleAndRewardByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIssueSaleAndRewardByGroup failed: unknown result");
    }

    public List<DailySaleAndCharge> getDailySaleAndCharge(String partnerId, String countTime) throws org.apache.thrift.TException
    {
      send_getDailySaleAndCharge(partnerId, countTime);
      return recv_getDailySaleAndCharge();
    }

    public void send_getDailySaleAndCharge(String partnerId, String countTime) throws org.apache.thrift.TException
    {
      getDailySaleAndCharge_args args = new getDailySaleAndCharge_args();
      args.setPartnerId(partnerId);
      args.setCountTime(countTime);
      sendBase("getDailySaleAndCharge", args);
    }

    public List<DailySaleAndCharge> recv_getDailySaleAndCharge() throws org.apache.thrift.TException
    {
      getDailySaleAndCharge_result result = new getDailySaleAndCharge_result();
      receiveBase(result, "getDailySaleAndCharge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDailySaleAndCharge failed: unknown result");
    }

    public List<LotteryIssueSale> getAllLotteryIssueSale(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getAllLotteryIssueSale(lotteryId, issueNo);
      return recv_getAllLotteryIssueSale();
    }

    public void send_getAllLotteryIssueSale(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getAllLotteryIssueSale_args args = new getAllLotteryIssueSale_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getAllLotteryIssueSale", args);
    }

    public List<LotteryIssueSale> recv_getAllLotteryIssueSale() throws org.apache.thrift.TException
    {
      getAllLotteryIssueSale_result result = new getAllLotteryIssueSale_result();
      receiveBase(result, "getAllLotteryIssueSale");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllLotteryIssueSale failed: unknown result");
    }

    public PcLotteryIssueSale getLotteryIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_getLotteryIssueSaleByWhere(lotteryIssueSale, pageNum, pageSize);
      return recv_getLotteryIssueSaleByWhere();
    }

    public void send_getLotteryIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      getLotteryIssueSaleByWhere_args args = new getLotteryIssueSaleByWhere_args();
      args.setLotteryIssueSale(lotteryIssueSale);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("getLotteryIssueSaleByWhere", args);
    }

    public PcLotteryIssueSale recv_getLotteryIssueSaleByWhere() throws org.apache.thrift.TException
    {
      getLotteryIssueSaleByWhere_result result = new getLotteryIssueSaleByWhere_result();
      receiveBase(result, "getLotteryIssueSaleByWhere");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryIssueSaleByWhere failed: unknown result");
    }

    public List<LotteryIssueSale> getCurrentIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, String fromTime, String toTime) throws org.apache.thrift.TException
    {
      send_getCurrentIssueSaleByWhere(lotteryIssueSale, fromTime, toTime);
      return recv_getCurrentIssueSaleByWhere();
    }

    public void send_getCurrentIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, String fromTime, String toTime) throws org.apache.thrift.TException
    {
      getCurrentIssueSaleByWhere_args args = new getCurrentIssueSaleByWhere_args();
      args.setLotteryIssueSale(lotteryIssueSale);
      args.setFromTime(fromTime);
      args.setToTime(toTime);
      sendBase("getCurrentIssueSaleByWhere", args);
    }

    public List<LotteryIssueSale> recv_getCurrentIssueSaleByWhere() throws org.apache.thrift.TException
    {
      getCurrentIssueSaleByWhere_result result = new getCurrentIssueSaleByWhere_result();
      receiveBase(result, "getCurrentIssueSaleByWhere");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentIssueSaleByWhere failed: unknown result");
    }

    public List<LotteryDaySale> getLotteryDaySaleByWhere(LotteryDaySale lotteryDaySale, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_getLotteryDaySaleByWhere(lotteryDaySale, pageNum, pageSize);
      return recv_getLotteryDaySaleByWhere();
    }

    public void send_getLotteryDaySaleByWhere(LotteryDaySale lotteryDaySale, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      getLotteryDaySaleByWhere_args args = new getLotteryDaySaleByWhere_args();
      args.setLotteryDaySale(lotteryDaySale);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("getLotteryDaySaleByWhere", args);
    }

    public List<LotteryDaySale> recv_getLotteryDaySaleByWhere() throws org.apache.thrift.TException
    {
      getLotteryDaySaleByWhere_result result = new getLotteryDaySaleByWhere_result();
      receiveBase(result, "getLotteryDaySaleByWhere");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryDaySaleByWhere failed: unknown result");
    }

    public PcDailyReport getDailyReportByWhere(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_getDailyReportByWhere(dailySaleAndCharge, pageNum, pageSize);
      return recv_getDailyReportByWhere();
    }

    public void send_getDailyReportByWhere(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      getDailyReportByWhere_args args = new getDailyReportByWhere_args();
      args.setDailySaleAndCharge(dailySaleAndCharge);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("getDailyReportByWhere", args);
    }

    public PcDailyReport recv_getDailyReportByWhere() throws org.apache.thrift.TException
    {
      getDailyReportByWhere_result result = new getDailyReportByWhere_result();
      receiveBase(result, "getDailyReportByWhere");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDailyReportByWhere failed: unknown result");
    }

    public DailyRiskCount getDailyRiskCount(String day) throws org.apache.thrift.TException
    {
      send_getDailyRiskCount(day);
      return recv_getDailyRiskCount();
    }

    public void send_getDailyRiskCount(String day) throws org.apache.thrift.TException
    {
      getDailyRiskCount_args args = new getDailyRiskCount_args();
      args.setDay(day);
      sendBase("getDailyRiskCount", args);
    }

    public DailyRiskCount recv_getDailyRiskCount() throws org.apache.thrift.TException
    {
      getDailyRiskCount_result result = new getDailyRiskCount_result();
      receiveBase(result, "getDailyRiskCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDailyRiskCount failed: unknown result");
    }

    public IssueRiskCount getIssueRiskCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getIssueRiskCount(lotteryId, issueNo);
      return recv_getIssueRiskCount();
    }

    public void send_getIssueRiskCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getIssueRiskCount_args args = new getIssueRiskCount_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getIssueRiskCount", args);
    }

    public IssueRiskCount recv_getIssueRiskCount() throws org.apache.thrift.TException
    {
      getIssueRiskCount_result result = new getIssueRiskCount_result();
      receiveBase(result, "getIssueRiskCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIssueRiskCount failed: unknown result");
    }

    public int partnerIssueSaleCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_partnerIssueSaleCount(lotteryId, issueNo);
      return recv_partnerIssueSaleCount();
    }

    public void send_partnerIssueSaleCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      partnerIssueSaleCount_args args = new partnerIssueSaleCount_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("partnerIssueSaleCount", args);
    }

    public int recv_partnerIssueSaleCount() throws org.apache.thrift.TException
    {
      partnerIssueSaleCount_result result = new partnerIssueSaleCount_result();
      receiveBase(result, "partnerIssueSaleCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerIssueSaleCount failed: unknown result");
    }

    public int partnerIssueRewardCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_partnerIssueRewardCount(lotteryId, issueNo);
      return recv_partnerIssueRewardCount();
    }

    public void send_partnerIssueRewardCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      partnerIssueRewardCount_args args = new partnerIssueRewardCount_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("partnerIssueRewardCount", args);
    }

    public int recv_partnerIssueRewardCount() throws org.apache.thrift.TException
    {
      partnerIssueRewardCount_result result = new partnerIssueRewardCount_result();
      receiveBase(result, "partnerIssueRewardCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerIssueRewardCount failed: unknown result");
    }

    public int partnerDailySaleCount(String countTime) throws org.apache.thrift.TException
    {
      send_partnerDailySaleCount(countTime);
      return recv_partnerDailySaleCount();
    }

    public void send_partnerDailySaleCount(String countTime) throws org.apache.thrift.TException
    {
      partnerDailySaleCount_args args = new partnerDailySaleCount_args();
      args.setCountTime(countTime);
      sendBase("partnerDailySaleCount", args);
    }

    public int recv_partnerDailySaleCount() throws org.apache.thrift.TException
    {
      partnerDailySaleCount_result result = new partnerDailySaleCount_result();
      receiveBase(result, "partnerDailySaleCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerDailySaleCount failed: unknown result");
    }

    public int partnerDailyAwardCount(String countTime) throws org.apache.thrift.TException
    {
      send_partnerDailyAwardCount(countTime);
      return recv_partnerDailyAwardCount();
    }

    public void send_partnerDailyAwardCount(String countTime) throws org.apache.thrift.TException
    {
      partnerDailyAwardCount_args args = new partnerDailyAwardCount_args();
      args.setCountTime(countTime);
      sendBase("partnerDailyAwardCount", args);
    }

    public int recv_partnerDailyAwardCount() throws org.apache.thrift.TException
    {
      partnerDailyAwardCount_result result = new partnerDailyAwardCount_result();
      receiveBase(result, "partnerDailyAwardCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerDailyAwardCount failed: unknown result");
    }

    public int partnerDailyChargeCount(String countTime) throws org.apache.thrift.TException
    {
      send_partnerDailyChargeCount(countTime);
      return recv_partnerDailyChargeCount();
    }

    public void send_partnerDailyChargeCount(String countTime) throws org.apache.thrift.TException
    {
      partnerDailyChargeCount_args args = new partnerDailyChargeCount_args();
      args.setCountTime(countTime);
      sendBase("partnerDailyChargeCount", args);
    }

    public int recv_partnerDailyChargeCount() throws org.apache.thrift.TException
    {
      partnerDailyChargeCount_result result = new partnerDailyChargeCount_result();
      receiveBase(result, "partnerDailyChargeCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerDailyChargeCount failed: unknown result");
    }

    public int partnerDailyEncashCount(String countTime) throws org.apache.thrift.TException
    {
      send_partnerDailyEncashCount(countTime);
      return recv_partnerDailyEncashCount();
    }

    public void send_partnerDailyEncashCount(String countTime) throws org.apache.thrift.TException
    {
      partnerDailyEncashCount_args args = new partnerDailyEncashCount_args();
      args.setCountTime(countTime);
      sendBase("partnerDailyEncashCount", args);
    }

    public int recv_partnerDailyEncashCount() throws org.apache.thrift.TException
    {
      partnerDailyEncashCount_result result = new partnerDailyEncashCount_result();
      receiveBase(result, "partnerDailyEncashCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerDailyEncashCount failed: unknown result");
    }

    public int partnerDailyReport(String countTime) throws org.apache.thrift.TException
    {
      send_partnerDailyReport(countTime);
      return recv_partnerDailyReport();
    }

    public void send_partnerDailyReport(String countTime) throws org.apache.thrift.TException
    {
      partnerDailyReport_args args = new partnerDailyReport_args();
      args.setCountTime(countTime);
      sendBase("partnerDailyReport", args);
    }

    public int recv_partnerDailyReport() throws org.apache.thrift.TException
    {
      partnerDailyReport_result result = new partnerDailyReport_result();
      receiveBase(result, "partnerDailyReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partnerDailyReport failed: unknown result");
    }

    public long getTotalTicknumByDay(String date) throws org.apache.thrift.TException
    {
      send_getTotalTicknumByDay(date);
      return recv_getTotalTicknumByDay();
    }

    public void send_getTotalTicknumByDay(String date) throws org.apache.thrift.TException
    {
      getTotalTicknumByDay_args args = new getTotalTicknumByDay_args();
      args.setDate(date);
      sendBase("getTotalTicknumByDay", args);
    }

    public long recv_getTotalTicknumByDay() throws org.apache.thrift.TException
    {
      getTotalTicknumByDay_result result = new getTotalTicknumByDay_result();
      receiveBase(result, "getTotalTicknumByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalTicknumByDay failed: unknown result");
    }

    public int updateWinResultInfo(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos) throws org.apache.thrift.TException
    {
      send_updateWinResultInfo(winningOrderInfos);
      return recv_updateWinResultInfo();
    }

    public void send_updateWinResultInfo(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos) throws org.apache.thrift.TException
    {
      updateWinResultInfo_args args = new updateWinResultInfo_args();
      args.setWinningOrderInfos(winningOrderInfos);
      sendBase("updateWinResultInfo", args);
    }

    public int recv_updateWinResultInfo() throws org.apache.thrift.TException
    {
      updateWinResultInfo_result result = new updateWinResultInfo_result();
      receiveBase(result, "updateWinResultInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWinResultInfo failed: unknown result");
    }

    public PcDaySaleDetails getDailySaleDetails(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_getDailySaleDetails(dailySaleAndCharge, pageNum, pageSize);
      return recv_getDailySaleDetails();
    }

    public void send_getDailySaleDetails(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      getDailySaleDetails_args args = new getDailySaleDetails_args();
      args.setDailySaleAndCharge(dailySaleAndCharge);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("getDailySaleDetails", args);
    }

    public PcDaySaleDetails recv_getDailySaleDetails() throws org.apache.thrift.TException
    {
      getDailySaleDetails_result result = new getDailySaleDetails_result();
      receiveBase(result, "getDailySaleDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDailySaleDetails failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addPartnerOrder(Order order, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPartnerOrder_call method_call = new addPartnerOrder_call(order, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPartnerOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Order order;
      public addPartnerOrder_call(Order order, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.order = order;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPartnerOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPartnerOrder_args args = new addPartnerOrder_args();
        args.setOrder(order);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPartnerOrder();
      }
    }

    public void getPartnerOrderByWhere(Order order, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartnerOrderByWhere_call method_call = new getPartnerOrderByWhere_call(order, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartnerOrderByWhere_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Order order;
      private int pageNum;
      private int pageSize;
      public getPartnerOrderByWhere_call(Order order, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.order = order;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartnerOrderByWhere", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartnerOrderByWhere_args args = new getPartnerOrderByWhere_args();
        args.setOrder(order);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PcPartnerOrder getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartnerOrderByWhere();
      }
    }

    public void getIssueSaleAndReward(String partnerId, String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIssueSaleAndReward_call method_call = new getIssueSaleAndReward_call(partnerId, lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIssueSaleAndReward_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String lotteryId;
      private String issueNo;
      public getIssueSaleAndReward_call(String partnerId, String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIssueSaleAndReward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIssueSaleAndReward_args args = new getIssueSaleAndReward_args();
        args.setPartnerId(partnerId);
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<IssueSaleAndReward> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIssueSaleAndReward();
      }
    }

    public void getIssueSaleAndRewardByGroup(String partnerId, String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIssueSaleAndRewardByGroup_call method_call = new getIssueSaleAndRewardByGroup_call(partnerId, lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIssueSaleAndRewardByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String lotteryId;
      private String issueNo;
      public getIssueSaleAndRewardByGroup_call(String partnerId, String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIssueSaleAndRewardByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIssueSaleAndRewardByGroup_args args = new getIssueSaleAndRewardByGroup_args();
        args.setPartnerId(partnerId);
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LotteryIssueSale> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIssueSaleAndRewardByGroup();
      }
    }

    public void getDailySaleAndCharge(String partnerId, String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDailySaleAndCharge_call method_call = new getDailySaleAndCharge_call(partnerId, countTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDailySaleAndCharge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String countTime;
      public getDailySaleAndCharge_call(String partnerId, String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.countTime = countTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDailySaleAndCharge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDailySaleAndCharge_args args = new getDailySaleAndCharge_args();
        args.setPartnerId(partnerId);
        args.setCountTime(countTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DailySaleAndCharge> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDailySaleAndCharge();
      }
    }

    public void getAllLotteryIssueSale(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllLotteryIssueSale_call method_call = new getAllLotteryIssueSale_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllLotteryIssueSale_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public getAllLotteryIssueSale_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllLotteryIssueSale", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllLotteryIssueSale_args args = new getAllLotteryIssueSale_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LotteryIssueSale> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllLotteryIssueSale();
      }
    }

    public void getLotteryIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryIssueSaleByWhere_call method_call = new getLotteryIssueSaleByWhere_call(lotteryIssueSale, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryIssueSaleByWhere_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryIssueSale lotteryIssueSale;
      private int pageNum;
      private int pageSize;
      public getLotteryIssueSaleByWhere_call(LotteryIssueSale lotteryIssueSale, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryIssueSale = lotteryIssueSale;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryIssueSaleByWhere", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryIssueSaleByWhere_args args = new getLotteryIssueSaleByWhere_args();
        args.setLotteryIssueSale(lotteryIssueSale);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PcLotteryIssueSale getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryIssueSaleByWhere();
      }
    }

    public void getCurrentIssueSaleByWhere(LotteryIssueSale lotteryIssueSale, String fromTime, String toTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentIssueSaleByWhere_call method_call = new getCurrentIssueSaleByWhere_call(lotteryIssueSale, fromTime, toTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentIssueSaleByWhere_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryIssueSale lotteryIssueSale;
      private String fromTime;
      private String toTime;
      public getCurrentIssueSaleByWhere_call(LotteryIssueSale lotteryIssueSale, String fromTime, String toTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryIssueSale = lotteryIssueSale;
        this.fromTime = fromTime;
        this.toTime = toTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentIssueSaleByWhere", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentIssueSaleByWhere_args args = new getCurrentIssueSaleByWhere_args();
        args.setLotteryIssueSale(lotteryIssueSale);
        args.setFromTime(fromTime);
        args.setToTime(toTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LotteryIssueSale> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentIssueSaleByWhere();
      }
    }

    public void getLotteryDaySaleByWhere(LotteryDaySale lotteryDaySale, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryDaySaleByWhere_call method_call = new getLotteryDaySaleByWhere_call(lotteryDaySale, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryDaySaleByWhere_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryDaySale lotteryDaySale;
      private int pageNum;
      private int pageSize;
      public getLotteryDaySaleByWhere_call(LotteryDaySale lotteryDaySale, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryDaySale = lotteryDaySale;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryDaySaleByWhere", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryDaySaleByWhere_args args = new getLotteryDaySaleByWhere_args();
        args.setLotteryDaySale(lotteryDaySale);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LotteryDaySale> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryDaySaleByWhere();
      }
    }

    public void getDailyReportByWhere(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDailyReportByWhere_call method_call = new getDailyReportByWhere_call(dailySaleAndCharge, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDailyReportByWhere_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DailySaleAndCharge dailySaleAndCharge;
      private int pageNum;
      private int pageSize;
      public getDailyReportByWhere_call(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dailySaleAndCharge = dailySaleAndCharge;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDailyReportByWhere", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDailyReportByWhere_args args = new getDailyReportByWhere_args();
        args.setDailySaleAndCharge(dailySaleAndCharge);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PcDailyReport getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDailyReportByWhere();
      }
    }

    public void getDailyRiskCount(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDailyRiskCount_call method_call = new getDailyRiskCount_call(day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDailyRiskCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      public getDailyRiskCount_call(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDailyRiskCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDailyRiskCount_args args = new getDailyRiskCount_args();
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DailyRiskCount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDailyRiskCount();
      }
    }

    public void getIssueRiskCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIssueRiskCount_call method_call = new getIssueRiskCount_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIssueRiskCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public getIssueRiskCount_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIssueRiskCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIssueRiskCount_args args = new getIssueRiskCount_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IssueRiskCount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIssueRiskCount();
      }
    }

    public void partnerIssueSaleCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerIssueSaleCount_call method_call = new partnerIssueSaleCount_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerIssueSaleCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public partnerIssueSaleCount_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerIssueSaleCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerIssueSaleCount_args args = new partnerIssueSaleCount_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerIssueSaleCount();
      }
    }

    public void partnerIssueRewardCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerIssueRewardCount_call method_call = new partnerIssueRewardCount_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerIssueRewardCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public partnerIssueRewardCount_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerIssueRewardCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerIssueRewardCount_args args = new partnerIssueRewardCount_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerIssueRewardCount();
      }
    }

    public void partnerDailySaleCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerDailySaleCount_call method_call = new partnerDailySaleCount_call(countTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerDailySaleCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String countTime;
      public partnerDailySaleCount_call(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countTime = countTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerDailySaleCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerDailySaleCount_args args = new partnerDailySaleCount_args();
        args.setCountTime(countTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerDailySaleCount();
      }
    }

    public void partnerDailyAwardCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerDailyAwardCount_call method_call = new partnerDailyAwardCount_call(countTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerDailyAwardCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String countTime;
      public partnerDailyAwardCount_call(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countTime = countTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerDailyAwardCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerDailyAwardCount_args args = new partnerDailyAwardCount_args();
        args.setCountTime(countTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerDailyAwardCount();
      }
    }

    public void partnerDailyChargeCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerDailyChargeCount_call method_call = new partnerDailyChargeCount_call(countTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerDailyChargeCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String countTime;
      public partnerDailyChargeCount_call(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countTime = countTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerDailyChargeCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerDailyChargeCount_args args = new partnerDailyChargeCount_args();
        args.setCountTime(countTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerDailyChargeCount();
      }
    }

    public void partnerDailyEncashCount(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerDailyEncashCount_call method_call = new partnerDailyEncashCount_call(countTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerDailyEncashCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String countTime;
      public partnerDailyEncashCount_call(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countTime = countTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerDailyEncashCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerDailyEncashCount_args args = new partnerDailyEncashCount_args();
        args.setCountTime(countTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerDailyEncashCount();
      }
    }

    public void partnerDailyReport(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partnerDailyReport_call method_call = new partnerDailyReport_call(countTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partnerDailyReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String countTime;
      public partnerDailyReport_call(String countTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countTime = countTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partnerDailyReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partnerDailyReport_args args = new partnerDailyReport_args();
        args.setCountTime(countTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partnerDailyReport();
      }
    }

    public void getTotalTicknumByDay(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalTicknumByDay_call method_call = new getTotalTicknumByDay_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalTicknumByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String date;
      public getTotalTicknumByDay_call(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalTicknumByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalTicknumByDay_args args = new getTotalTicknumByDay_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalTicknumByDay();
      }
    }

    public void updateWinResultInfo(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWinResultInfo_call method_call = new updateWinResultInfo_call(winningOrderInfos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWinResultInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos;
      public updateWinResultInfo_call(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.winningOrderInfos = winningOrderInfos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWinResultInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWinResultInfo_args args = new updateWinResultInfo_args();
        args.setWinningOrderInfos(winningOrderInfos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWinResultInfo();
      }
    }

    public void getDailySaleDetails(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDailySaleDetails_call method_call = new getDailySaleDetails_call(dailySaleAndCharge, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDailySaleDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DailySaleAndCharge dailySaleAndCharge;
      private int pageNum;
      private int pageSize;
      public getDailySaleDetails_call(DailySaleAndCharge dailySaleAndCharge, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dailySaleAndCharge = dailySaleAndCharge;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDailySaleDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDailySaleDetails_args args = new getDailySaleDetails_args();
        args.setDailySaleAndCharge(dailySaleAndCharge);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PcDaySaleDetails getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDailySaleDetails();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addPartnerOrder", new addPartnerOrder());
      processMap.put("getPartnerOrderByWhere", new getPartnerOrderByWhere());
      processMap.put("getIssueSaleAndReward", new getIssueSaleAndReward());
      processMap.put("getIssueSaleAndRewardByGroup", new getIssueSaleAndRewardByGroup());
      processMap.put("getDailySaleAndCharge", new getDailySaleAndCharge());
      processMap.put("getAllLotteryIssueSale", new getAllLotteryIssueSale());
      processMap.put("getLotteryIssueSaleByWhere", new getLotteryIssueSaleByWhere());
      processMap.put("getCurrentIssueSaleByWhere", new getCurrentIssueSaleByWhere());
      processMap.put("getLotteryDaySaleByWhere", new getLotteryDaySaleByWhere());
      processMap.put("getDailyReportByWhere", new getDailyReportByWhere());
      processMap.put("getDailyRiskCount", new getDailyRiskCount());
      processMap.put("getIssueRiskCount", new getIssueRiskCount());
      processMap.put("partnerIssueSaleCount", new partnerIssueSaleCount());
      processMap.put("partnerIssueRewardCount", new partnerIssueRewardCount());
      processMap.put("partnerDailySaleCount", new partnerDailySaleCount());
      processMap.put("partnerDailyAwardCount", new partnerDailyAwardCount());
      processMap.put("partnerDailyChargeCount", new partnerDailyChargeCount());
      processMap.put("partnerDailyEncashCount", new partnerDailyEncashCount());
      processMap.put("partnerDailyReport", new partnerDailyReport());
      processMap.put("getTotalTicknumByDay", new getTotalTicknumByDay());
      processMap.put("updateWinResultInfo", new updateWinResultInfo());
      processMap.put("getDailySaleDetails", new getDailySaleDetails());
      return processMap;
    }

    public static class addPartnerOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPartnerOrder_args> {
      public addPartnerOrder() {
        super("addPartnerOrder");
      }

      public addPartnerOrder_args getEmptyArgsInstance() {
        return new addPartnerOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPartnerOrder_result getResult(I iface, addPartnerOrder_args args) throws org.apache.thrift.TException {
        addPartnerOrder_result result = new addPartnerOrder_result();
        result.success = iface.addPartnerOrder(args.order);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPartnerOrderByWhere<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartnerOrderByWhere_args> {
      public getPartnerOrderByWhere() {
        super("getPartnerOrderByWhere");
      }

      public getPartnerOrderByWhere_args getEmptyArgsInstance() {
        return new getPartnerOrderByWhere_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartnerOrderByWhere_result getResult(I iface, getPartnerOrderByWhere_args args) throws org.apache.thrift.TException {
        getPartnerOrderByWhere_result result = new getPartnerOrderByWhere_result();
        result.success = iface.getPartnerOrderByWhere(args.order, args.pageNum, args.pageSize);
        return result;
      }
    }

    public static class getIssueSaleAndReward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIssueSaleAndReward_args> {
      public getIssueSaleAndReward() {
        super("getIssueSaleAndReward");
      }

      public getIssueSaleAndReward_args getEmptyArgsInstance() {
        return new getIssueSaleAndReward_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIssueSaleAndReward_result getResult(I iface, getIssueSaleAndReward_args args) throws org.apache.thrift.TException {
        getIssueSaleAndReward_result result = new getIssueSaleAndReward_result();
        result.success = iface.getIssueSaleAndReward(args.partnerId, args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getIssueSaleAndRewardByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIssueSaleAndRewardByGroup_args> {
      public getIssueSaleAndRewardByGroup() {
        super("getIssueSaleAndRewardByGroup");
      }

      public getIssueSaleAndRewardByGroup_args getEmptyArgsInstance() {
        return new getIssueSaleAndRewardByGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIssueSaleAndRewardByGroup_result getResult(I iface, getIssueSaleAndRewardByGroup_args args) throws org.apache.thrift.TException {
        getIssueSaleAndRewardByGroup_result result = new getIssueSaleAndRewardByGroup_result();
        result.success = iface.getIssueSaleAndRewardByGroup(args.partnerId, args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getDailySaleAndCharge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDailySaleAndCharge_args> {
      public getDailySaleAndCharge() {
        super("getDailySaleAndCharge");
      }

      public getDailySaleAndCharge_args getEmptyArgsInstance() {
        return new getDailySaleAndCharge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDailySaleAndCharge_result getResult(I iface, getDailySaleAndCharge_args args) throws org.apache.thrift.TException {
        getDailySaleAndCharge_result result = new getDailySaleAndCharge_result();
        result.success = iface.getDailySaleAndCharge(args.partnerId, args.countTime);
        return result;
      }
    }

    public static class getAllLotteryIssueSale<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllLotteryIssueSale_args> {
      public getAllLotteryIssueSale() {
        super("getAllLotteryIssueSale");
      }

      public getAllLotteryIssueSale_args getEmptyArgsInstance() {
        return new getAllLotteryIssueSale_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllLotteryIssueSale_result getResult(I iface, getAllLotteryIssueSale_args args) throws org.apache.thrift.TException {
        getAllLotteryIssueSale_result result = new getAllLotteryIssueSale_result();
        result.success = iface.getAllLotteryIssueSale(args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getLotteryIssueSaleByWhere<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryIssueSaleByWhere_args> {
      public getLotteryIssueSaleByWhere() {
        super("getLotteryIssueSaleByWhere");
      }

      public getLotteryIssueSaleByWhere_args getEmptyArgsInstance() {
        return new getLotteryIssueSaleByWhere_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryIssueSaleByWhere_result getResult(I iface, getLotteryIssueSaleByWhere_args args) throws org.apache.thrift.TException {
        getLotteryIssueSaleByWhere_result result = new getLotteryIssueSaleByWhere_result();
        result.success = iface.getLotteryIssueSaleByWhere(args.lotteryIssueSale, args.pageNum, args.pageSize);
        return result;
      }
    }

    public static class getCurrentIssueSaleByWhere<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentIssueSaleByWhere_args> {
      public getCurrentIssueSaleByWhere() {
        super("getCurrentIssueSaleByWhere");
      }

      public getCurrentIssueSaleByWhere_args getEmptyArgsInstance() {
        return new getCurrentIssueSaleByWhere_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentIssueSaleByWhere_result getResult(I iface, getCurrentIssueSaleByWhere_args args) throws org.apache.thrift.TException {
        getCurrentIssueSaleByWhere_result result = new getCurrentIssueSaleByWhere_result();
        result.success = iface.getCurrentIssueSaleByWhere(args.lotteryIssueSale, args.fromTime, args.toTime);
        return result;
      }
    }

    public static class getLotteryDaySaleByWhere<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryDaySaleByWhere_args> {
      public getLotteryDaySaleByWhere() {
        super("getLotteryDaySaleByWhere");
      }

      public getLotteryDaySaleByWhere_args getEmptyArgsInstance() {
        return new getLotteryDaySaleByWhere_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryDaySaleByWhere_result getResult(I iface, getLotteryDaySaleByWhere_args args) throws org.apache.thrift.TException {
        getLotteryDaySaleByWhere_result result = new getLotteryDaySaleByWhere_result();
        result.success = iface.getLotteryDaySaleByWhere(args.lotteryDaySale, args.pageNum, args.pageSize);
        return result;
      }
    }

    public static class getDailyReportByWhere<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDailyReportByWhere_args> {
      public getDailyReportByWhere() {
        super("getDailyReportByWhere");
      }

      public getDailyReportByWhere_args getEmptyArgsInstance() {
        return new getDailyReportByWhere_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDailyReportByWhere_result getResult(I iface, getDailyReportByWhere_args args) throws org.apache.thrift.TException {
        getDailyReportByWhere_result result = new getDailyReportByWhere_result();
        result.success = iface.getDailyReportByWhere(args.dailySaleAndCharge, args.pageNum, args.pageSize);
        return result;
      }
    }

    public static class getDailyRiskCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDailyRiskCount_args> {
      public getDailyRiskCount() {
        super("getDailyRiskCount");
      }

      public getDailyRiskCount_args getEmptyArgsInstance() {
        return new getDailyRiskCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDailyRiskCount_result getResult(I iface, getDailyRiskCount_args args) throws org.apache.thrift.TException {
        getDailyRiskCount_result result = new getDailyRiskCount_result();
        result.success = iface.getDailyRiskCount(args.day);
        return result;
      }
    }

    public static class getIssueRiskCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIssueRiskCount_args> {
      public getIssueRiskCount() {
        super("getIssueRiskCount");
      }

      public getIssueRiskCount_args getEmptyArgsInstance() {
        return new getIssueRiskCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIssueRiskCount_result getResult(I iface, getIssueRiskCount_args args) throws org.apache.thrift.TException {
        getIssueRiskCount_result result = new getIssueRiskCount_result();
        result.success = iface.getIssueRiskCount(args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class partnerIssueSaleCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerIssueSaleCount_args> {
      public partnerIssueSaleCount() {
        super("partnerIssueSaleCount");
      }

      public partnerIssueSaleCount_args getEmptyArgsInstance() {
        return new partnerIssueSaleCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerIssueSaleCount_result getResult(I iface, partnerIssueSaleCount_args args) throws org.apache.thrift.TException {
        partnerIssueSaleCount_result result = new partnerIssueSaleCount_result();
        result.success = iface.partnerIssueSaleCount(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class partnerIssueRewardCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerIssueRewardCount_args> {
      public partnerIssueRewardCount() {
        super("partnerIssueRewardCount");
      }

      public partnerIssueRewardCount_args getEmptyArgsInstance() {
        return new partnerIssueRewardCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerIssueRewardCount_result getResult(I iface, partnerIssueRewardCount_args args) throws org.apache.thrift.TException {
        partnerIssueRewardCount_result result = new partnerIssueRewardCount_result();
        result.success = iface.partnerIssueRewardCount(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class partnerDailySaleCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerDailySaleCount_args> {
      public partnerDailySaleCount() {
        super("partnerDailySaleCount");
      }

      public partnerDailySaleCount_args getEmptyArgsInstance() {
        return new partnerDailySaleCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerDailySaleCount_result getResult(I iface, partnerDailySaleCount_args args) throws org.apache.thrift.TException {
        partnerDailySaleCount_result result = new partnerDailySaleCount_result();
        result.success = iface.partnerDailySaleCount(args.countTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class partnerDailyAwardCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerDailyAwardCount_args> {
      public partnerDailyAwardCount() {
        super("partnerDailyAwardCount");
      }

      public partnerDailyAwardCount_args getEmptyArgsInstance() {
        return new partnerDailyAwardCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerDailyAwardCount_result getResult(I iface, partnerDailyAwardCount_args args) throws org.apache.thrift.TException {
        partnerDailyAwardCount_result result = new partnerDailyAwardCount_result();
        result.success = iface.partnerDailyAwardCount(args.countTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class partnerDailyChargeCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerDailyChargeCount_args> {
      public partnerDailyChargeCount() {
        super("partnerDailyChargeCount");
      }

      public partnerDailyChargeCount_args getEmptyArgsInstance() {
        return new partnerDailyChargeCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerDailyChargeCount_result getResult(I iface, partnerDailyChargeCount_args args) throws org.apache.thrift.TException {
        partnerDailyChargeCount_result result = new partnerDailyChargeCount_result();
        result.success = iface.partnerDailyChargeCount(args.countTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class partnerDailyEncashCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerDailyEncashCount_args> {
      public partnerDailyEncashCount() {
        super("partnerDailyEncashCount");
      }

      public partnerDailyEncashCount_args getEmptyArgsInstance() {
        return new partnerDailyEncashCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerDailyEncashCount_result getResult(I iface, partnerDailyEncashCount_args args) throws org.apache.thrift.TException {
        partnerDailyEncashCount_result result = new partnerDailyEncashCount_result();
        result.success = iface.partnerDailyEncashCount(args.countTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class partnerDailyReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partnerDailyReport_args> {
      public partnerDailyReport() {
        super("partnerDailyReport");
      }

      public partnerDailyReport_args getEmptyArgsInstance() {
        return new partnerDailyReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partnerDailyReport_result getResult(I iface, partnerDailyReport_args args) throws org.apache.thrift.TException {
        partnerDailyReport_result result = new partnerDailyReport_result();
        result.success = iface.partnerDailyReport(args.countTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTotalTicknumByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalTicknumByDay_args> {
      public getTotalTicknumByDay() {
        super("getTotalTicknumByDay");
      }

      public getTotalTicknumByDay_args getEmptyArgsInstance() {
        return new getTotalTicknumByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTotalTicknumByDay_result getResult(I iface, getTotalTicknumByDay_args args) throws org.apache.thrift.TException {
        getTotalTicknumByDay_result result = new getTotalTicknumByDay_result();
        result.success = iface.getTotalTicknumByDay(args.date);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateWinResultInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWinResultInfo_args> {
      public updateWinResultInfo() {
        super("updateWinResultInfo");
      }

      public updateWinResultInfo_args getEmptyArgsInstance() {
        return new updateWinResultInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWinResultInfo_result getResult(I iface, updateWinResultInfo_args args) throws org.apache.thrift.TException {
        updateWinResultInfo_result result = new updateWinResultInfo_result();
        result.success = iface.updateWinResultInfo(args.winningOrderInfos);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDailySaleDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDailySaleDetails_args> {
      public getDailySaleDetails() {
        super("getDailySaleDetails");
      }

      public getDailySaleDetails_args getEmptyArgsInstance() {
        return new getDailySaleDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDailySaleDetails_result getResult(I iface, getDailySaleDetails_args args) throws org.apache.thrift.TException {
        getDailySaleDetails_result result = new getDailySaleDetails_result();
        result.success = iface.getDailySaleDetails(args.dailySaleAndCharge, args.pageNum, args.pageSize);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addPartnerOrder", new addPartnerOrder());
      processMap.put("getPartnerOrderByWhere", new getPartnerOrderByWhere());
      processMap.put("getIssueSaleAndReward", new getIssueSaleAndReward());
      processMap.put("getIssueSaleAndRewardByGroup", new getIssueSaleAndRewardByGroup());
      processMap.put("getDailySaleAndCharge", new getDailySaleAndCharge());
      processMap.put("getAllLotteryIssueSale", new getAllLotteryIssueSale());
      processMap.put("getLotteryIssueSaleByWhere", new getLotteryIssueSaleByWhere());
      processMap.put("getCurrentIssueSaleByWhere", new getCurrentIssueSaleByWhere());
      processMap.put("getLotteryDaySaleByWhere", new getLotteryDaySaleByWhere());
      processMap.put("getDailyReportByWhere", new getDailyReportByWhere());
      processMap.put("getDailyRiskCount", new getDailyRiskCount());
      processMap.put("getIssueRiskCount", new getIssueRiskCount());
      processMap.put("partnerIssueSaleCount", new partnerIssueSaleCount());
      processMap.put("partnerIssueRewardCount", new partnerIssueRewardCount());
      processMap.put("partnerDailySaleCount", new partnerDailySaleCount());
      processMap.put("partnerDailyAwardCount", new partnerDailyAwardCount());
      processMap.put("partnerDailyChargeCount", new partnerDailyChargeCount());
      processMap.put("partnerDailyEncashCount", new partnerDailyEncashCount());
      processMap.put("partnerDailyReport", new partnerDailyReport());
      processMap.put("getTotalTicknumByDay", new getTotalTicknumByDay());
      processMap.put("updateWinResultInfo", new updateWinResultInfo());
      processMap.put("getDailySaleDetails", new getDailySaleDetails());
      return processMap;
    }

    public static class addPartnerOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPartnerOrder_args, Integer> {
      public addPartnerOrder() {
        super("addPartnerOrder");
      }

      public addPartnerOrder_args getEmptyArgsInstance() {
        return new addPartnerOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addPartnerOrder_result result = new addPartnerOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPartnerOrder_result result = new addPartnerOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPartnerOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addPartnerOrder(args.order,resultHandler);
      }
    }

    public static class getPartnerOrderByWhere<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartnerOrderByWhere_args, PcPartnerOrder> {
      public getPartnerOrderByWhere() {
        super("getPartnerOrderByWhere");
      }

      public getPartnerOrderByWhere_args getEmptyArgsInstance() {
        return new getPartnerOrderByWhere_args();
      }

      public AsyncMethodCallback<PcPartnerOrder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PcPartnerOrder>() { 
          public void onComplete(PcPartnerOrder o) {
            getPartnerOrderByWhere_result result = new getPartnerOrderByWhere_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartnerOrderByWhere_result result = new getPartnerOrderByWhere_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartnerOrderByWhere_args args, org.apache.thrift.async.AsyncMethodCallback<PcPartnerOrder> resultHandler) throws TException {
        iface.getPartnerOrderByWhere(args.order, args.pageNum, args.pageSize,resultHandler);
      }
    }

    public static class getIssueSaleAndReward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIssueSaleAndReward_args, List<IssueSaleAndReward>> {
      public getIssueSaleAndReward() {
        super("getIssueSaleAndReward");
      }

      public getIssueSaleAndReward_args getEmptyArgsInstance() {
        return new getIssueSaleAndReward_args();
      }

      public AsyncMethodCallback<List<IssueSaleAndReward>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<IssueSaleAndReward>>() { 
          public void onComplete(List<IssueSaleAndReward> o) {
            getIssueSaleAndReward_result result = new getIssueSaleAndReward_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIssueSaleAndReward_result result = new getIssueSaleAndReward_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIssueSaleAndReward_args args, org.apache.thrift.async.AsyncMethodCallback<List<IssueSaleAndReward>> resultHandler) throws TException {
        iface.getIssueSaleAndReward(args.partnerId, args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getIssueSaleAndRewardByGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIssueSaleAndRewardByGroup_args, List<LotteryIssueSale>> {
      public getIssueSaleAndRewardByGroup() {
        super("getIssueSaleAndRewardByGroup");
      }

      public getIssueSaleAndRewardByGroup_args getEmptyArgsInstance() {
        return new getIssueSaleAndRewardByGroup_args();
      }

      public AsyncMethodCallback<List<LotteryIssueSale>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LotteryIssueSale>>() { 
          public void onComplete(List<LotteryIssueSale> o) {
            getIssueSaleAndRewardByGroup_result result = new getIssueSaleAndRewardByGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIssueSaleAndRewardByGroup_result result = new getIssueSaleAndRewardByGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIssueSaleAndRewardByGroup_args args, org.apache.thrift.async.AsyncMethodCallback<List<LotteryIssueSale>> resultHandler) throws TException {
        iface.getIssueSaleAndRewardByGroup(args.partnerId, args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getDailySaleAndCharge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDailySaleAndCharge_args, List<DailySaleAndCharge>> {
      public getDailySaleAndCharge() {
        super("getDailySaleAndCharge");
      }

      public getDailySaleAndCharge_args getEmptyArgsInstance() {
        return new getDailySaleAndCharge_args();
      }

      public AsyncMethodCallback<List<DailySaleAndCharge>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DailySaleAndCharge>>() { 
          public void onComplete(List<DailySaleAndCharge> o) {
            getDailySaleAndCharge_result result = new getDailySaleAndCharge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDailySaleAndCharge_result result = new getDailySaleAndCharge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDailySaleAndCharge_args args, org.apache.thrift.async.AsyncMethodCallback<List<DailySaleAndCharge>> resultHandler) throws TException {
        iface.getDailySaleAndCharge(args.partnerId, args.countTime,resultHandler);
      }
    }

    public static class getAllLotteryIssueSale<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllLotteryIssueSale_args, List<LotteryIssueSale>> {
      public getAllLotteryIssueSale() {
        super("getAllLotteryIssueSale");
      }

      public getAllLotteryIssueSale_args getEmptyArgsInstance() {
        return new getAllLotteryIssueSale_args();
      }

      public AsyncMethodCallback<List<LotteryIssueSale>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LotteryIssueSale>>() { 
          public void onComplete(List<LotteryIssueSale> o) {
            getAllLotteryIssueSale_result result = new getAllLotteryIssueSale_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllLotteryIssueSale_result result = new getAllLotteryIssueSale_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllLotteryIssueSale_args args, org.apache.thrift.async.AsyncMethodCallback<List<LotteryIssueSale>> resultHandler) throws TException {
        iface.getAllLotteryIssueSale(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getLotteryIssueSaleByWhere<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryIssueSaleByWhere_args, PcLotteryIssueSale> {
      public getLotteryIssueSaleByWhere() {
        super("getLotteryIssueSaleByWhere");
      }

      public getLotteryIssueSaleByWhere_args getEmptyArgsInstance() {
        return new getLotteryIssueSaleByWhere_args();
      }

      public AsyncMethodCallback<PcLotteryIssueSale> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PcLotteryIssueSale>() { 
          public void onComplete(PcLotteryIssueSale o) {
            getLotteryIssueSaleByWhere_result result = new getLotteryIssueSaleByWhere_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryIssueSaleByWhere_result result = new getLotteryIssueSaleByWhere_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryIssueSaleByWhere_args args, org.apache.thrift.async.AsyncMethodCallback<PcLotteryIssueSale> resultHandler) throws TException {
        iface.getLotteryIssueSaleByWhere(args.lotteryIssueSale, args.pageNum, args.pageSize,resultHandler);
      }
    }

    public static class getCurrentIssueSaleByWhere<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentIssueSaleByWhere_args, List<LotteryIssueSale>> {
      public getCurrentIssueSaleByWhere() {
        super("getCurrentIssueSaleByWhere");
      }

      public getCurrentIssueSaleByWhere_args getEmptyArgsInstance() {
        return new getCurrentIssueSaleByWhere_args();
      }

      public AsyncMethodCallback<List<LotteryIssueSale>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LotteryIssueSale>>() { 
          public void onComplete(List<LotteryIssueSale> o) {
            getCurrentIssueSaleByWhere_result result = new getCurrentIssueSaleByWhere_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentIssueSaleByWhere_result result = new getCurrentIssueSaleByWhere_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentIssueSaleByWhere_args args, org.apache.thrift.async.AsyncMethodCallback<List<LotteryIssueSale>> resultHandler) throws TException {
        iface.getCurrentIssueSaleByWhere(args.lotteryIssueSale, args.fromTime, args.toTime,resultHandler);
      }
    }

    public static class getLotteryDaySaleByWhere<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryDaySaleByWhere_args, List<LotteryDaySale>> {
      public getLotteryDaySaleByWhere() {
        super("getLotteryDaySaleByWhere");
      }

      public getLotteryDaySaleByWhere_args getEmptyArgsInstance() {
        return new getLotteryDaySaleByWhere_args();
      }

      public AsyncMethodCallback<List<LotteryDaySale>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LotteryDaySale>>() { 
          public void onComplete(List<LotteryDaySale> o) {
            getLotteryDaySaleByWhere_result result = new getLotteryDaySaleByWhere_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryDaySaleByWhere_result result = new getLotteryDaySaleByWhere_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryDaySaleByWhere_args args, org.apache.thrift.async.AsyncMethodCallback<List<LotteryDaySale>> resultHandler) throws TException {
        iface.getLotteryDaySaleByWhere(args.lotteryDaySale, args.pageNum, args.pageSize,resultHandler);
      }
    }

    public static class getDailyReportByWhere<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDailyReportByWhere_args, PcDailyReport> {
      public getDailyReportByWhere() {
        super("getDailyReportByWhere");
      }

      public getDailyReportByWhere_args getEmptyArgsInstance() {
        return new getDailyReportByWhere_args();
      }

      public AsyncMethodCallback<PcDailyReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PcDailyReport>() { 
          public void onComplete(PcDailyReport o) {
            getDailyReportByWhere_result result = new getDailyReportByWhere_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDailyReportByWhere_result result = new getDailyReportByWhere_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDailyReportByWhere_args args, org.apache.thrift.async.AsyncMethodCallback<PcDailyReport> resultHandler) throws TException {
        iface.getDailyReportByWhere(args.dailySaleAndCharge, args.pageNum, args.pageSize,resultHandler);
      }
    }

    public static class getDailyRiskCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDailyRiskCount_args, DailyRiskCount> {
      public getDailyRiskCount() {
        super("getDailyRiskCount");
      }

      public getDailyRiskCount_args getEmptyArgsInstance() {
        return new getDailyRiskCount_args();
      }

      public AsyncMethodCallback<DailyRiskCount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DailyRiskCount>() { 
          public void onComplete(DailyRiskCount o) {
            getDailyRiskCount_result result = new getDailyRiskCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDailyRiskCount_result result = new getDailyRiskCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDailyRiskCount_args args, org.apache.thrift.async.AsyncMethodCallback<DailyRiskCount> resultHandler) throws TException {
        iface.getDailyRiskCount(args.day,resultHandler);
      }
    }

    public static class getIssueRiskCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIssueRiskCount_args, IssueRiskCount> {
      public getIssueRiskCount() {
        super("getIssueRiskCount");
      }

      public getIssueRiskCount_args getEmptyArgsInstance() {
        return new getIssueRiskCount_args();
      }

      public AsyncMethodCallback<IssueRiskCount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IssueRiskCount>() { 
          public void onComplete(IssueRiskCount o) {
            getIssueRiskCount_result result = new getIssueRiskCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIssueRiskCount_result result = new getIssueRiskCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIssueRiskCount_args args, org.apache.thrift.async.AsyncMethodCallback<IssueRiskCount> resultHandler) throws TException {
        iface.getIssueRiskCount(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class partnerIssueSaleCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerIssueSaleCount_args, Integer> {
      public partnerIssueSaleCount() {
        super("partnerIssueSaleCount");
      }

      public partnerIssueSaleCount_args getEmptyArgsInstance() {
        return new partnerIssueSaleCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerIssueSaleCount_result result = new partnerIssueSaleCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerIssueSaleCount_result result = new partnerIssueSaleCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerIssueSaleCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerIssueSaleCount(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class partnerIssueRewardCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerIssueRewardCount_args, Integer> {
      public partnerIssueRewardCount() {
        super("partnerIssueRewardCount");
      }

      public partnerIssueRewardCount_args getEmptyArgsInstance() {
        return new partnerIssueRewardCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerIssueRewardCount_result result = new partnerIssueRewardCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerIssueRewardCount_result result = new partnerIssueRewardCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerIssueRewardCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerIssueRewardCount(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class partnerDailySaleCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerDailySaleCount_args, Integer> {
      public partnerDailySaleCount() {
        super("partnerDailySaleCount");
      }

      public partnerDailySaleCount_args getEmptyArgsInstance() {
        return new partnerDailySaleCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerDailySaleCount_result result = new partnerDailySaleCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerDailySaleCount_result result = new partnerDailySaleCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerDailySaleCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerDailySaleCount(args.countTime,resultHandler);
      }
    }

    public static class partnerDailyAwardCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerDailyAwardCount_args, Integer> {
      public partnerDailyAwardCount() {
        super("partnerDailyAwardCount");
      }

      public partnerDailyAwardCount_args getEmptyArgsInstance() {
        return new partnerDailyAwardCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerDailyAwardCount_result result = new partnerDailyAwardCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerDailyAwardCount_result result = new partnerDailyAwardCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerDailyAwardCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerDailyAwardCount(args.countTime,resultHandler);
      }
    }

    public static class partnerDailyChargeCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerDailyChargeCount_args, Integer> {
      public partnerDailyChargeCount() {
        super("partnerDailyChargeCount");
      }

      public partnerDailyChargeCount_args getEmptyArgsInstance() {
        return new partnerDailyChargeCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerDailyChargeCount_result result = new partnerDailyChargeCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerDailyChargeCount_result result = new partnerDailyChargeCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerDailyChargeCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerDailyChargeCount(args.countTime,resultHandler);
      }
    }

    public static class partnerDailyEncashCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerDailyEncashCount_args, Integer> {
      public partnerDailyEncashCount() {
        super("partnerDailyEncashCount");
      }

      public partnerDailyEncashCount_args getEmptyArgsInstance() {
        return new partnerDailyEncashCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerDailyEncashCount_result result = new partnerDailyEncashCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerDailyEncashCount_result result = new partnerDailyEncashCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerDailyEncashCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerDailyEncashCount(args.countTime,resultHandler);
      }
    }

    public static class partnerDailyReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partnerDailyReport_args, Integer> {
      public partnerDailyReport() {
        super("partnerDailyReport");
      }

      public partnerDailyReport_args getEmptyArgsInstance() {
        return new partnerDailyReport_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            partnerDailyReport_result result = new partnerDailyReport_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partnerDailyReport_result result = new partnerDailyReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partnerDailyReport_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.partnerDailyReport(args.countTime,resultHandler);
      }
    }

    public static class getTotalTicknumByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalTicknumByDay_args, Long> {
      public getTotalTicknumByDay() {
        super("getTotalTicknumByDay");
      }

      public getTotalTicknumByDay_args getEmptyArgsInstance() {
        return new getTotalTicknumByDay_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getTotalTicknumByDay_result result = new getTotalTicknumByDay_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTotalTicknumByDay_result result = new getTotalTicknumByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalTicknumByDay_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getTotalTicknumByDay(args.date,resultHandler);
      }
    }

    public static class updateWinResultInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWinResultInfo_args, Integer> {
      public updateWinResultInfo() {
        super("updateWinResultInfo");
      }

      public updateWinResultInfo_args getEmptyArgsInstance() {
        return new updateWinResultInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateWinResultInfo_result result = new updateWinResultInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWinResultInfo_result result = new updateWinResultInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWinResultInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateWinResultInfo(args.winningOrderInfos,resultHandler);
      }
    }

    public static class getDailySaleDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDailySaleDetails_args, PcDaySaleDetails> {
      public getDailySaleDetails() {
        super("getDailySaleDetails");
      }

      public getDailySaleDetails_args getEmptyArgsInstance() {
        return new getDailySaleDetails_args();
      }

      public AsyncMethodCallback<PcDaySaleDetails> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PcDaySaleDetails>() { 
          public void onComplete(PcDaySaleDetails o) {
            getDailySaleDetails_result result = new getDailySaleDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDailySaleDetails_result result = new getDailySaleDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDailySaleDetails_args args, org.apache.thrift.async.AsyncMethodCallback<PcDaySaleDetails> resultHandler) throws TException {
        iface.getDailySaleDetails(args.dailySaleAndCharge, args.pageNum, args.pageSize,resultHandler);
      }
    }

  }

  public static class addPartnerOrder_args implements org.apache.thrift.TBase<addPartnerOrder_args, addPartnerOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPartnerOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPartnerOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPartnerOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPartnerOrder_argsTupleSchemeFactory());
    }

    public Order order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER((short)1, "order");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER
            return ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Order.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPartnerOrder_args.class, metaDataMap);
    }

    public addPartnerOrder_args() {
    }

    public addPartnerOrder_args(
      Order order)
    {
      this();
      this.order = order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPartnerOrder_args(addPartnerOrder_args other) {
      if (other.isSetOrder()) {
        this.order = new Order(other.order);
      }
    }

    public addPartnerOrder_args deepCopy() {
      return new addPartnerOrder_args(this);
    }

    @Override
    public void clear() {
      this.order = null;
    }

    public Order getOrder() {
      return this.order;
    }

    public addPartnerOrder_args setOrder(Order order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((Order)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER:
        return getOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER:
        return isSetOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPartnerOrder_args)
        return this.equals((addPartnerOrder_args)that);
      return false;
    }

    public boolean equals(addPartnerOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPartnerOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPartnerOrder_args(");
      boolean first = true;

      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (order != null) {
        order.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPartnerOrder_argsStandardSchemeFactory implements SchemeFactory {
      public addPartnerOrder_argsStandardScheme getScheme() {
        return new addPartnerOrder_argsStandardScheme();
      }
    }

    private static class addPartnerOrder_argsStandardScheme extends StandardScheme<addPartnerOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPartnerOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.order = new Order();
                struct.order.read(iprot);
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPartnerOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          struct.order.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPartnerOrder_argsTupleSchemeFactory implements SchemeFactory {
      public addPartnerOrder_argsTupleScheme getScheme() {
        return new addPartnerOrder_argsTupleScheme();
      }
    }

    private static class addPartnerOrder_argsTupleScheme extends TupleScheme<addPartnerOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPartnerOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrder()) {
          struct.order.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPartnerOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.order = new Order();
          struct.order.read(iprot);
          struct.setOrderIsSet(true);
        }
      }
    }

  }

  public static class addPartnerOrder_result implements org.apache.thrift.TBase<addPartnerOrder_result, addPartnerOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPartnerOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPartnerOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPartnerOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPartnerOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPartnerOrder_result.class, metaDataMap);
    }

    public addPartnerOrder_result() {
    }

    public addPartnerOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPartnerOrder_result(addPartnerOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addPartnerOrder_result deepCopy() {
      return new addPartnerOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addPartnerOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPartnerOrder_result)
        return this.equals((addPartnerOrder_result)that);
      return false;
    }

    public boolean equals(addPartnerOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPartnerOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPartnerOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPartnerOrder_resultStandardSchemeFactory implements SchemeFactory {
      public addPartnerOrder_resultStandardScheme getScheme() {
        return new addPartnerOrder_resultStandardScheme();
      }
    }

    private static class addPartnerOrder_resultStandardScheme extends StandardScheme<addPartnerOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPartnerOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPartnerOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPartnerOrder_resultTupleSchemeFactory implements SchemeFactory {
      public addPartnerOrder_resultTupleScheme getScheme() {
        return new addPartnerOrder_resultTupleScheme();
      }
    }

    private static class addPartnerOrder_resultTupleScheme extends TupleScheme<addPartnerOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPartnerOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPartnerOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartnerOrderByWhere_args implements org.apache.thrift.TBase<getPartnerOrderByWhere_args, getPartnerOrderByWhere_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerOrderByWhere_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerOrderByWhere_args");

    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerOrderByWhere_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerOrderByWhere_argsTupleSchemeFactory());
    }

    public Order order; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER((short)1, "order"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER
            return ORDER;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Order.class)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerOrderByWhere_args.class, metaDataMap);
    }

    public getPartnerOrderByWhere_args() {
    }

    public getPartnerOrderByWhere_args(
      Order order,
      int pageNum,
      int pageSize)
    {
      this();
      this.order = order;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerOrderByWhere_args(getPartnerOrderByWhere_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrder()) {
        this.order = new Order(other.order);
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public getPartnerOrderByWhere_args deepCopy() {
      return new getPartnerOrderByWhere_args(this);
    }

    @Override
    public void clear() {
      this.order = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public Order getOrder() {
      return this.order;
    }

    public getPartnerOrderByWhere_args setOrder(Order order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getPartnerOrderByWhere_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getPartnerOrderByWhere_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((Order)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER:
        return getOrder();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER:
        return isSetOrder();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerOrderByWhere_args)
        return this.equals((getPartnerOrderByWhere_args)that);
      return false;
    }

    public boolean equals(getPartnerOrderByWhere_args that) {
      if (that == null)
        return false;

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerOrderByWhere_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerOrderByWhere_args(");
      boolean first = true;

      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (order != null) {
        order.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerOrderByWhere_argsStandardSchemeFactory implements SchemeFactory {
      public getPartnerOrderByWhere_argsStandardScheme getScheme() {
        return new getPartnerOrderByWhere_argsStandardScheme();
      }
    }

    private static class getPartnerOrderByWhere_argsStandardScheme extends StandardScheme<getPartnerOrderByWhere_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerOrderByWhere_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.order = new Order();
                struct.order.read(iprot);
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerOrderByWhere_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          struct.order.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerOrderByWhere_argsTupleSchemeFactory implements SchemeFactory {
      public getPartnerOrderByWhere_argsTupleScheme getScheme() {
        return new getPartnerOrderByWhere_argsTupleScheme();
      }
    }

    private static class getPartnerOrderByWhere_argsTupleScheme extends TupleScheme<getPartnerOrderByWhere_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerOrderByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrder()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOrder()) {
          struct.order.write(oprot);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerOrderByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.order = new Order();
          struct.order.read(iprot);
          struct.setOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getPartnerOrderByWhere_result implements org.apache.thrift.TBase<getPartnerOrderByWhere_result, getPartnerOrderByWhere_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerOrderByWhere_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerOrderByWhere_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerOrderByWhere_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerOrderByWhere_resultTupleSchemeFactory());
    }

    public PcPartnerOrder success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PcPartnerOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerOrderByWhere_result.class, metaDataMap);
    }

    public getPartnerOrderByWhere_result() {
    }

    public getPartnerOrderByWhere_result(
      PcPartnerOrder success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerOrderByWhere_result(getPartnerOrderByWhere_result other) {
      if (other.isSetSuccess()) {
        this.success = new PcPartnerOrder(other.success);
      }
    }

    public getPartnerOrderByWhere_result deepCopy() {
      return new getPartnerOrderByWhere_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PcPartnerOrder getSuccess() {
      return this.success;
    }

    public getPartnerOrderByWhere_result setSuccess(PcPartnerOrder success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PcPartnerOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerOrderByWhere_result)
        return this.equals((getPartnerOrderByWhere_result)that);
      return false;
    }

    public boolean equals(getPartnerOrderByWhere_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerOrderByWhere_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerOrderByWhere_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerOrderByWhere_resultStandardSchemeFactory implements SchemeFactory {
      public getPartnerOrderByWhere_resultStandardScheme getScheme() {
        return new getPartnerOrderByWhere_resultStandardScheme();
      }
    }

    private static class getPartnerOrderByWhere_resultStandardScheme extends StandardScheme<getPartnerOrderByWhere_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerOrderByWhere_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PcPartnerOrder();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerOrderByWhere_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerOrderByWhere_resultTupleSchemeFactory implements SchemeFactory {
      public getPartnerOrderByWhere_resultTupleScheme getScheme() {
        return new getPartnerOrderByWhere_resultTupleScheme();
      }
    }

    private static class getPartnerOrderByWhere_resultTupleScheme extends TupleScheme<getPartnerOrderByWhere_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerOrderByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerOrderByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PcPartnerOrder();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIssueSaleAndReward_args implements org.apache.thrift.TBase<getIssueSaleAndReward_args, getIssueSaleAndReward_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIssueSaleAndReward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIssueSaleAndReward_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIssueSaleAndReward_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIssueSaleAndReward_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      LOTTERY_ID((short)2, "lotteryId"),
      ISSUE_NO((short)3, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // LOTTERY_ID
            return LOTTERY_ID;
          case 3: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIssueSaleAndReward_args.class, metaDataMap);
    }

    public getIssueSaleAndReward_args() {
    }

    public getIssueSaleAndReward_args(
      String partnerId,
      String lotteryId,
      String issueNo)
    {
      this();
      this.partnerId = partnerId;
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIssueSaleAndReward_args(getIssueSaleAndReward_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getIssueSaleAndReward_args deepCopy() {
      return new getIssueSaleAndReward_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public getIssueSaleAndReward_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getIssueSaleAndReward_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getIssueSaleAndReward_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIssueSaleAndReward_args)
        return this.equals((getIssueSaleAndReward_args)that);
      return false;
    }

    public boolean equals(getIssueSaleAndReward_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getIssueSaleAndReward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIssueSaleAndReward_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIssueSaleAndReward_argsStandardSchemeFactory implements SchemeFactory {
      public getIssueSaleAndReward_argsStandardScheme getScheme() {
        return new getIssueSaleAndReward_argsStandardScheme();
      }
    }

    private static class getIssueSaleAndReward_argsStandardScheme extends StandardScheme<getIssueSaleAndReward_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIssueSaleAndReward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIssueSaleAndReward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIssueSaleAndReward_argsTupleSchemeFactory implements SchemeFactory {
      public getIssueSaleAndReward_argsTupleScheme getScheme() {
        return new getIssueSaleAndReward_argsTupleScheme();
      }
    }

    private static class getIssueSaleAndReward_argsTupleScheme extends TupleScheme<getIssueSaleAndReward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetLotteryId()) {
          optionals.set(1);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndReward_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getIssueSaleAndReward_result implements org.apache.thrift.TBase<getIssueSaleAndReward_result, getIssueSaleAndReward_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIssueSaleAndReward_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIssueSaleAndReward_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIssueSaleAndReward_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIssueSaleAndReward_resultTupleSchemeFactory());
    }

    public List<IssueSaleAndReward> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssueSaleAndReward.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIssueSaleAndReward_result.class, metaDataMap);
    }

    public getIssueSaleAndReward_result() {
    }

    public getIssueSaleAndReward_result(
      List<IssueSaleAndReward> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIssueSaleAndReward_result(getIssueSaleAndReward_result other) {
      if (other.isSetSuccess()) {
        List<IssueSaleAndReward> __this__success = new ArrayList<IssueSaleAndReward>(other.success.size());
        for (IssueSaleAndReward other_element : other.success) {
          __this__success.add(new IssueSaleAndReward(other_element));
        }
        this.success = __this__success;
      }
    }

    public getIssueSaleAndReward_result deepCopy() {
      return new getIssueSaleAndReward_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IssueSaleAndReward> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IssueSaleAndReward elem) {
      if (this.success == null) {
        this.success = new ArrayList<IssueSaleAndReward>();
      }
      this.success.add(elem);
    }

    public List<IssueSaleAndReward> getSuccess() {
      return this.success;
    }

    public getIssueSaleAndReward_result setSuccess(List<IssueSaleAndReward> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IssueSaleAndReward>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIssueSaleAndReward_result)
        return this.equals((getIssueSaleAndReward_result)that);
      return false;
    }

    public boolean equals(getIssueSaleAndReward_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getIssueSaleAndReward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIssueSaleAndReward_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIssueSaleAndReward_resultStandardSchemeFactory implements SchemeFactory {
      public getIssueSaleAndReward_resultStandardScheme getScheme() {
        return new getIssueSaleAndReward_resultStandardScheme();
      }
    }

    private static class getIssueSaleAndReward_resultStandardScheme extends StandardScheme<getIssueSaleAndReward_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIssueSaleAndReward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<IssueSaleAndReward>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    IssueSaleAndReward _elem42;
                    _elem42 = new IssueSaleAndReward();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIssueSaleAndReward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (IssueSaleAndReward _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIssueSaleAndReward_resultTupleSchemeFactory implements SchemeFactory {
      public getIssueSaleAndReward_resultTupleScheme getScheme() {
        return new getIssueSaleAndReward_resultTupleScheme();
      }
    }

    private static class getIssueSaleAndReward_resultTupleScheme extends TupleScheme<getIssueSaleAndReward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (IssueSaleAndReward _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndReward_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<IssueSaleAndReward>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              IssueSaleAndReward _elem47;
              _elem47 = new IssueSaleAndReward();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIssueSaleAndRewardByGroup_args implements org.apache.thrift.TBase<getIssueSaleAndRewardByGroup_args, getIssueSaleAndRewardByGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIssueSaleAndRewardByGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIssueSaleAndRewardByGroup_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIssueSaleAndRewardByGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIssueSaleAndRewardByGroup_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      LOTTERY_ID((short)2, "lotteryId"),
      ISSUE_NO((short)3, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // LOTTERY_ID
            return LOTTERY_ID;
          case 3: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIssueSaleAndRewardByGroup_args.class, metaDataMap);
    }

    public getIssueSaleAndRewardByGroup_args() {
    }

    public getIssueSaleAndRewardByGroup_args(
      String partnerId,
      String lotteryId,
      String issueNo)
    {
      this();
      this.partnerId = partnerId;
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIssueSaleAndRewardByGroup_args(getIssueSaleAndRewardByGroup_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getIssueSaleAndRewardByGroup_args deepCopy() {
      return new getIssueSaleAndRewardByGroup_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public getIssueSaleAndRewardByGroup_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getIssueSaleAndRewardByGroup_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getIssueSaleAndRewardByGroup_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIssueSaleAndRewardByGroup_args)
        return this.equals((getIssueSaleAndRewardByGroup_args)that);
      return false;
    }

    public boolean equals(getIssueSaleAndRewardByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getIssueSaleAndRewardByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIssueSaleAndRewardByGroup_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIssueSaleAndRewardByGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getIssueSaleAndRewardByGroup_argsStandardScheme getScheme() {
        return new getIssueSaleAndRewardByGroup_argsStandardScheme();
      }
    }

    private static class getIssueSaleAndRewardByGroup_argsStandardScheme extends StandardScheme<getIssueSaleAndRewardByGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIssueSaleAndRewardByGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIssueSaleAndRewardByGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIssueSaleAndRewardByGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getIssueSaleAndRewardByGroup_argsTupleScheme getScheme() {
        return new getIssueSaleAndRewardByGroup_argsTupleScheme();
      }
    }

    private static class getIssueSaleAndRewardByGroup_argsTupleScheme extends TupleScheme<getIssueSaleAndRewardByGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndRewardByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetLotteryId()) {
          optionals.set(1);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndRewardByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getIssueSaleAndRewardByGroup_result implements org.apache.thrift.TBase<getIssueSaleAndRewardByGroup_result, getIssueSaleAndRewardByGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIssueSaleAndRewardByGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIssueSaleAndRewardByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIssueSaleAndRewardByGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIssueSaleAndRewardByGroup_resultTupleSchemeFactory());
    }

    public List<LotteryIssueSale> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssueSale.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIssueSaleAndRewardByGroup_result.class, metaDataMap);
    }

    public getIssueSaleAndRewardByGroup_result() {
    }

    public getIssueSaleAndRewardByGroup_result(
      List<LotteryIssueSale> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIssueSaleAndRewardByGroup_result(getIssueSaleAndRewardByGroup_result other) {
      if (other.isSetSuccess()) {
        List<LotteryIssueSale> __this__success = new ArrayList<LotteryIssueSale>(other.success.size());
        for (LotteryIssueSale other_element : other.success) {
          __this__success.add(new LotteryIssueSale(other_element));
        }
        this.success = __this__success;
      }
    }

    public getIssueSaleAndRewardByGroup_result deepCopy() {
      return new getIssueSaleAndRewardByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LotteryIssueSale> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LotteryIssueSale elem) {
      if (this.success == null) {
        this.success = new ArrayList<LotteryIssueSale>();
      }
      this.success.add(elem);
    }

    public List<LotteryIssueSale> getSuccess() {
      return this.success;
    }

    public getIssueSaleAndRewardByGroup_result setSuccess(List<LotteryIssueSale> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LotteryIssueSale>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIssueSaleAndRewardByGroup_result)
        return this.equals((getIssueSaleAndRewardByGroup_result)that);
      return false;
    }

    public boolean equals(getIssueSaleAndRewardByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getIssueSaleAndRewardByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIssueSaleAndRewardByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIssueSaleAndRewardByGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getIssueSaleAndRewardByGroup_resultStandardScheme getScheme() {
        return new getIssueSaleAndRewardByGroup_resultStandardScheme();
      }
    }

    private static class getIssueSaleAndRewardByGroup_resultStandardScheme extends StandardScheme<getIssueSaleAndRewardByGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIssueSaleAndRewardByGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<LotteryIssueSale>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    LotteryIssueSale _elem50;
                    _elem50 = new LotteryIssueSale();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIssueSaleAndRewardByGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LotteryIssueSale _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIssueSaleAndRewardByGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getIssueSaleAndRewardByGroup_resultTupleScheme getScheme() {
        return new getIssueSaleAndRewardByGroup_resultTupleScheme();
      }
    }

    private static class getIssueSaleAndRewardByGroup_resultTupleScheme extends TupleScheme<getIssueSaleAndRewardByGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndRewardByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LotteryIssueSale _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIssueSaleAndRewardByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LotteryIssueSale>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              LotteryIssueSale _elem55;
              _elem55 = new LotteryIssueSale();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDailySaleAndCharge_args implements org.apache.thrift.TBase<getDailySaleAndCharge_args, getDailySaleAndCharge_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDailySaleAndCharge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailySaleAndCharge_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailySaleAndCharge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailySaleAndCharge_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String countTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      COUNT_TIME((short)2, "countTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // COUNT_TIME
            return COUNT_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailySaleAndCharge_args.class, metaDataMap);
    }

    public getDailySaleAndCharge_args() {
    }

    public getDailySaleAndCharge_args(
      String partnerId,
      String countTime)
    {
      this();
      this.partnerId = partnerId;
      this.countTime = countTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailySaleAndCharge_args(getDailySaleAndCharge_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetCountTime()) {
        this.countTime = other.countTime;
      }
    }

    public getDailySaleAndCharge_args deepCopy() {
      return new getDailySaleAndCharge_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.countTime = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public getDailySaleAndCharge_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getCountTime() {
      return this.countTime;
    }

    public getDailySaleAndCharge_args setCountTime(String countTime) {
      this.countTime = countTime;
      return this;
    }

    public void unsetCountTime() {
      this.countTime = null;
    }

    /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCountTime() {
      return this.countTime != null;
    }

    public void setCountTimeIsSet(boolean value) {
      if (!value) {
        this.countTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case COUNT_TIME:
        if (value == null) {
          unsetCountTime();
        } else {
          setCountTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case COUNT_TIME:
        return getCountTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case COUNT_TIME:
        return isSetCountTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailySaleAndCharge_args)
        return this.equals((getDailySaleAndCharge_args)that);
      return false;
    }

    public boolean equals(getDailySaleAndCharge_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_countTime = true && this.isSetCountTime();
      boolean that_present_countTime = true && that.isSetCountTime();
      if (this_present_countTime || that_present_countTime) {
        if (!(this_present_countTime && that_present_countTime))
          return false;
        if (!this.countTime.equals(that.countTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailySaleAndCharge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailySaleAndCharge_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countTime:");
      if (this.countTime == null) {
        sb.append("null");
      } else {
        sb.append(this.countTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailySaleAndCharge_argsStandardSchemeFactory implements SchemeFactory {
      public getDailySaleAndCharge_argsStandardScheme getScheme() {
        return new getDailySaleAndCharge_argsStandardScheme();
      }
    }

    private static class getDailySaleAndCharge_argsStandardScheme extends StandardScheme<getDailySaleAndCharge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailySaleAndCharge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countTime = iprot.readString();
                struct.setCountTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailySaleAndCharge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.countTime != null) {
          oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
          oprot.writeString(struct.countTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailySaleAndCharge_argsTupleSchemeFactory implements SchemeFactory {
      public getDailySaleAndCharge_argsTupleScheme getScheme() {
        return new getDailySaleAndCharge_argsTupleScheme();
      }
    }

    private static class getDailySaleAndCharge_argsTupleScheme extends TupleScheme<getDailySaleAndCharge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailySaleAndCharge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetCountTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetCountTime()) {
          oprot.writeString(struct.countTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailySaleAndCharge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.countTime = iprot.readString();
          struct.setCountTimeIsSet(true);
        }
      }
    }

  }

  public static class getDailySaleAndCharge_result implements org.apache.thrift.TBase<getDailySaleAndCharge_result, getDailySaleAndCharge_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDailySaleAndCharge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailySaleAndCharge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailySaleAndCharge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailySaleAndCharge_resultTupleSchemeFactory());
    }

    public List<DailySaleAndCharge> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailySaleAndCharge.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailySaleAndCharge_result.class, metaDataMap);
    }

    public getDailySaleAndCharge_result() {
    }

    public getDailySaleAndCharge_result(
      List<DailySaleAndCharge> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailySaleAndCharge_result(getDailySaleAndCharge_result other) {
      if (other.isSetSuccess()) {
        List<DailySaleAndCharge> __this__success = new ArrayList<DailySaleAndCharge>(other.success.size());
        for (DailySaleAndCharge other_element : other.success) {
          __this__success.add(new DailySaleAndCharge(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDailySaleAndCharge_result deepCopy() {
      return new getDailySaleAndCharge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DailySaleAndCharge> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DailySaleAndCharge elem) {
      if (this.success == null) {
        this.success = new ArrayList<DailySaleAndCharge>();
      }
      this.success.add(elem);
    }

    public List<DailySaleAndCharge> getSuccess() {
      return this.success;
    }

    public getDailySaleAndCharge_result setSuccess(List<DailySaleAndCharge> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DailySaleAndCharge>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailySaleAndCharge_result)
        return this.equals((getDailySaleAndCharge_result)that);
      return false;
    }

    public boolean equals(getDailySaleAndCharge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailySaleAndCharge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailySaleAndCharge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailySaleAndCharge_resultStandardSchemeFactory implements SchemeFactory {
      public getDailySaleAndCharge_resultStandardScheme getScheme() {
        return new getDailySaleAndCharge_resultStandardScheme();
      }
    }

    private static class getDailySaleAndCharge_resultStandardScheme extends StandardScheme<getDailySaleAndCharge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailySaleAndCharge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<DailySaleAndCharge>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    DailySaleAndCharge _elem58;
                    _elem58 = new DailySaleAndCharge();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailySaleAndCharge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DailySaleAndCharge _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailySaleAndCharge_resultTupleSchemeFactory implements SchemeFactory {
      public getDailySaleAndCharge_resultTupleScheme getScheme() {
        return new getDailySaleAndCharge_resultTupleScheme();
      }
    }

    private static class getDailySaleAndCharge_resultTupleScheme extends TupleScheme<getDailySaleAndCharge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailySaleAndCharge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DailySaleAndCharge _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailySaleAndCharge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DailySaleAndCharge>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              DailySaleAndCharge _elem63;
              _elem63 = new DailySaleAndCharge();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllLotteryIssueSale_args implements org.apache.thrift.TBase<getAllLotteryIssueSale_args, getAllLotteryIssueSale_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllLotteryIssueSale_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllLotteryIssueSale_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllLotteryIssueSale_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllLotteryIssueSale_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllLotteryIssueSale_args.class, metaDataMap);
    }

    public getAllLotteryIssueSale_args() {
    }

    public getAllLotteryIssueSale_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllLotteryIssueSale_args(getAllLotteryIssueSale_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getAllLotteryIssueSale_args deepCopy() {
      return new getAllLotteryIssueSale_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getAllLotteryIssueSale_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getAllLotteryIssueSale_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllLotteryIssueSale_args)
        return this.equals((getAllLotteryIssueSale_args)that);
      return false;
    }

    public boolean equals(getAllLotteryIssueSale_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllLotteryIssueSale_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllLotteryIssueSale_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllLotteryIssueSale_argsStandardSchemeFactory implements SchemeFactory {
      public getAllLotteryIssueSale_argsStandardScheme getScheme() {
        return new getAllLotteryIssueSale_argsStandardScheme();
      }
    }

    private static class getAllLotteryIssueSale_argsStandardScheme extends StandardScheme<getAllLotteryIssueSale_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllLotteryIssueSale_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllLotteryIssueSale_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllLotteryIssueSale_argsTupleSchemeFactory implements SchemeFactory {
      public getAllLotteryIssueSale_argsTupleScheme getScheme() {
        return new getAllLotteryIssueSale_argsTupleScheme();
      }
    }

    private static class getAllLotteryIssueSale_argsTupleScheme extends TupleScheme<getAllLotteryIssueSale_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllLotteryIssueSale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllLotteryIssueSale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getAllLotteryIssueSale_result implements org.apache.thrift.TBase<getAllLotteryIssueSale_result, getAllLotteryIssueSale_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllLotteryIssueSale_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllLotteryIssueSale_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllLotteryIssueSale_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllLotteryIssueSale_resultTupleSchemeFactory());
    }

    public List<LotteryIssueSale> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssueSale.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllLotteryIssueSale_result.class, metaDataMap);
    }

    public getAllLotteryIssueSale_result() {
    }

    public getAllLotteryIssueSale_result(
      List<LotteryIssueSale> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllLotteryIssueSale_result(getAllLotteryIssueSale_result other) {
      if (other.isSetSuccess()) {
        List<LotteryIssueSale> __this__success = new ArrayList<LotteryIssueSale>(other.success.size());
        for (LotteryIssueSale other_element : other.success) {
          __this__success.add(new LotteryIssueSale(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllLotteryIssueSale_result deepCopy() {
      return new getAllLotteryIssueSale_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LotteryIssueSale> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LotteryIssueSale elem) {
      if (this.success == null) {
        this.success = new ArrayList<LotteryIssueSale>();
      }
      this.success.add(elem);
    }

    public List<LotteryIssueSale> getSuccess() {
      return this.success;
    }

    public getAllLotteryIssueSale_result setSuccess(List<LotteryIssueSale> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LotteryIssueSale>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllLotteryIssueSale_result)
        return this.equals((getAllLotteryIssueSale_result)that);
      return false;
    }

    public boolean equals(getAllLotteryIssueSale_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllLotteryIssueSale_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllLotteryIssueSale_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllLotteryIssueSale_resultStandardSchemeFactory implements SchemeFactory {
      public getAllLotteryIssueSale_resultStandardScheme getScheme() {
        return new getAllLotteryIssueSale_resultStandardScheme();
      }
    }

    private static class getAllLotteryIssueSale_resultStandardScheme extends StandardScheme<getAllLotteryIssueSale_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllLotteryIssueSale_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<LotteryIssueSale>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    LotteryIssueSale _elem66;
                    _elem66 = new LotteryIssueSale();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllLotteryIssueSale_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LotteryIssueSale _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllLotteryIssueSale_resultTupleSchemeFactory implements SchemeFactory {
      public getAllLotteryIssueSale_resultTupleScheme getScheme() {
        return new getAllLotteryIssueSale_resultTupleScheme();
      }
    }

    private static class getAllLotteryIssueSale_resultTupleScheme extends TupleScheme<getAllLotteryIssueSale_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllLotteryIssueSale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LotteryIssueSale _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllLotteryIssueSale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LotteryIssueSale>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              LotteryIssueSale _elem71;
              _elem71 = new LotteryIssueSale();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLotteryIssueSaleByWhere_args implements org.apache.thrift.TBase<getLotteryIssueSaleByWhere_args, getLotteryIssueSaleByWhere_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryIssueSaleByWhere_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryIssueSaleByWhere_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssueSale", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryIssueSaleByWhere_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryIssueSaleByWhere_argsTupleSchemeFactory());
    }

    public LotteryIssueSale lotteryIssueSale; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ISSUE_SALE((short)1, "lotteryIssueSale"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ISSUE_SALE
            return LOTTERY_ISSUE_SALE;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ISSUE_SALE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssueSale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssueSale.class)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryIssueSaleByWhere_args.class, metaDataMap);
    }

    public getLotteryIssueSaleByWhere_args() {
    }

    public getLotteryIssueSaleByWhere_args(
      LotteryIssueSale lotteryIssueSale,
      int pageNum,
      int pageSize)
    {
      this();
      this.lotteryIssueSale = lotteryIssueSale;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryIssueSaleByWhere_args(getLotteryIssueSaleByWhere_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryIssueSale()) {
        this.lotteryIssueSale = new LotteryIssueSale(other.lotteryIssueSale);
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public getLotteryIssueSaleByWhere_args deepCopy() {
      return new getLotteryIssueSaleByWhere_args(this);
    }

    @Override
    public void clear() {
      this.lotteryIssueSale = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public LotteryIssueSale getLotteryIssueSale() {
      return this.lotteryIssueSale;
    }

    public getLotteryIssueSaleByWhere_args setLotteryIssueSale(LotteryIssueSale lotteryIssueSale) {
      this.lotteryIssueSale = lotteryIssueSale;
      return this;
    }

    public void unsetLotteryIssueSale() {
      this.lotteryIssueSale = null;
    }

    /** Returns true if field lotteryIssueSale is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryIssueSale() {
      return this.lotteryIssueSale != null;
    }

    public void setLotteryIssueSaleIsSet(boolean value) {
      if (!value) {
        this.lotteryIssueSale = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getLotteryIssueSaleByWhere_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getLotteryIssueSaleByWhere_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ISSUE_SALE:
        if (value == null) {
          unsetLotteryIssueSale();
        } else {
          setLotteryIssueSale((LotteryIssueSale)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ISSUE_SALE:
        return getLotteryIssueSale();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ISSUE_SALE:
        return isSetLotteryIssueSale();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryIssueSaleByWhere_args)
        return this.equals((getLotteryIssueSaleByWhere_args)that);
      return false;
    }

    public boolean equals(getLotteryIssueSaleByWhere_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryIssueSale = true && this.isSetLotteryIssueSale();
      boolean that_present_lotteryIssueSale = true && that.isSetLotteryIssueSale();
      if (this_present_lotteryIssueSale || that_present_lotteryIssueSale) {
        if (!(this_present_lotteryIssueSale && that_present_lotteryIssueSale))
          return false;
        if (!this.lotteryIssueSale.equals(that.lotteryIssueSale))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryIssueSaleByWhere_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryIssueSale()).compareTo(other.isSetLotteryIssueSale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryIssueSale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssueSale, other.lotteryIssueSale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryIssueSaleByWhere_args(");
      boolean first = true;

      sb.append("lotteryIssueSale:");
      if (this.lotteryIssueSale == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryIssueSale);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryIssueSale != null) {
        lotteryIssueSale.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryIssueSaleByWhere_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryIssueSaleByWhere_argsStandardScheme getScheme() {
        return new getLotteryIssueSaleByWhere_argsStandardScheme();
      }
    }

    private static class getLotteryIssueSaleByWhere_argsStandardScheme extends StandardScheme<getLotteryIssueSaleByWhere_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ISSUE_SALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryIssueSale = new LotteryIssueSale();
                struct.lotteryIssueSale.read(iprot);
                struct.setLotteryIssueSaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryIssueSale != null) {
          oprot.writeFieldBegin(LOTTERY_ISSUE_SALE_FIELD_DESC);
          struct.lotteryIssueSale.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryIssueSaleByWhere_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryIssueSaleByWhere_argsTupleScheme getScheme() {
        return new getLotteryIssueSaleByWhere_argsTupleScheme();
      }
    }

    private static class getLotteryIssueSaleByWhere_argsTupleScheme extends TupleScheme<getLotteryIssueSaleByWhere_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryIssueSale()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryIssueSale()) {
          struct.lotteryIssueSale.write(oprot);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryIssueSale = new LotteryIssueSale();
          struct.lotteryIssueSale.read(iprot);
          struct.setLotteryIssueSaleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getLotteryIssueSaleByWhere_result implements org.apache.thrift.TBase<getLotteryIssueSaleByWhere_result, getLotteryIssueSaleByWhere_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryIssueSaleByWhere_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryIssueSaleByWhere_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryIssueSaleByWhere_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryIssueSaleByWhere_resultTupleSchemeFactory());
    }

    public PcLotteryIssueSale success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PcLotteryIssueSale.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryIssueSaleByWhere_result.class, metaDataMap);
    }

    public getLotteryIssueSaleByWhere_result() {
    }

    public getLotteryIssueSaleByWhere_result(
      PcLotteryIssueSale success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryIssueSaleByWhere_result(getLotteryIssueSaleByWhere_result other) {
      if (other.isSetSuccess()) {
        this.success = new PcLotteryIssueSale(other.success);
      }
    }

    public getLotteryIssueSaleByWhere_result deepCopy() {
      return new getLotteryIssueSaleByWhere_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PcLotteryIssueSale getSuccess() {
      return this.success;
    }

    public getLotteryIssueSaleByWhere_result setSuccess(PcLotteryIssueSale success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PcLotteryIssueSale)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryIssueSaleByWhere_result)
        return this.equals((getLotteryIssueSaleByWhere_result)that);
      return false;
    }

    public boolean equals(getLotteryIssueSaleByWhere_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryIssueSaleByWhere_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryIssueSaleByWhere_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryIssueSaleByWhere_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryIssueSaleByWhere_resultStandardScheme getScheme() {
        return new getLotteryIssueSaleByWhere_resultStandardScheme();
      }
    }

    private static class getLotteryIssueSaleByWhere_resultStandardScheme extends StandardScheme<getLotteryIssueSaleByWhere_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PcLotteryIssueSale();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryIssueSaleByWhere_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryIssueSaleByWhere_resultTupleScheme getScheme() {
        return new getLotteryIssueSaleByWhere_resultTupleScheme();
      }
    }

    private static class getLotteryIssueSaleByWhere_resultTupleScheme extends TupleScheme<getLotteryIssueSaleByWhere_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PcLotteryIssueSale();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentIssueSaleByWhere_args implements org.apache.thrift.TBase<getCurrentIssueSaleByWhere_args, getCurrentIssueSaleByWhere_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentIssueSaleByWhere_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentIssueSaleByWhere_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssueSale", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentIssueSaleByWhere_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentIssueSaleByWhere_argsTupleSchemeFactory());
    }

    public LotteryIssueSale lotteryIssueSale; // required
    public String fromTime; // required
    public String toTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ISSUE_SALE((short)1, "lotteryIssueSale"),
      FROM_TIME((short)2, "fromTime"),
      TO_TIME((short)3, "toTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ISSUE_SALE
            return LOTTERY_ISSUE_SALE;
          case 2: // FROM_TIME
            return FROM_TIME;
          case 3: // TO_TIME
            return TO_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ISSUE_SALE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssueSale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssueSale.class)));
      tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentIssueSaleByWhere_args.class, metaDataMap);
    }

    public getCurrentIssueSaleByWhere_args() {
    }

    public getCurrentIssueSaleByWhere_args(
      LotteryIssueSale lotteryIssueSale,
      String fromTime,
      String toTime)
    {
      this();
      this.lotteryIssueSale = lotteryIssueSale;
      this.fromTime = fromTime;
      this.toTime = toTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentIssueSaleByWhere_args(getCurrentIssueSaleByWhere_args other) {
      if (other.isSetLotteryIssueSale()) {
        this.lotteryIssueSale = new LotteryIssueSale(other.lotteryIssueSale);
      }
      if (other.isSetFromTime()) {
        this.fromTime = other.fromTime;
      }
      if (other.isSetToTime()) {
        this.toTime = other.toTime;
      }
    }

    public getCurrentIssueSaleByWhere_args deepCopy() {
      return new getCurrentIssueSaleByWhere_args(this);
    }

    @Override
    public void clear() {
      this.lotteryIssueSale = null;
      this.fromTime = null;
      this.toTime = null;
    }

    public LotteryIssueSale getLotteryIssueSale() {
      return this.lotteryIssueSale;
    }

    public getCurrentIssueSaleByWhere_args setLotteryIssueSale(LotteryIssueSale lotteryIssueSale) {
      this.lotteryIssueSale = lotteryIssueSale;
      return this;
    }

    public void unsetLotteryIssueSale() {
      this.lotteryIssueSale = null;
    }

    /** Returns true if field lotteryIssueSale is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryIssueSale() {
      return this.lotteryIssueSale != null;
    }

    public void setLotteryIssueSaleIsSet(boolean value) {
      if (!value) {
        this.lotteryIssueSale = null;
      }
    }

    public String getFromTime() {
      return this.fromTime;
    }

    public getCurrentIssueSaleByWhere_args setFromTime(String fromTime) {
      this.fromTime = fromTime;
      return this;
    }

    public void unsetFromTime() {
      this.fromTime = null;
    }

    /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
    public boolean isSetFromTime() {
      return this.fromTime != null;
    }

    public void setFromTimeIsSet(boolean value) {
      if (!value) {
        this.fromTime = null;
      }
    }

    public String getToTime() {
      return this.toTime;
    }

    public getCurrentIssueSaleByWhere_args setToTime(String toTime) {
      this.toTime = toTime;
      return this;
    }

    public void unsetToTime() {
      this.toTime = null;
    }

    /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
    public boolean isSetToTime() {
      return this.toTime != null;
    }

    public void setToTimeIsSet(boolean value) {
      if (!value) {
        this.toTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ISSUE_SALE:
        if (value == null) {
          unsetLotteryIssueSale();
        } else {
          setLotteryIssueSale((LotteryIssueSale)value);
        }
        break;

      case FROM_TIME:
        if (value == null) {
          unsetFromTime();
        } else {
          setFromTime((String)value);
        }
        break;

      case TO_TIME:
        if (value == null) {
          unsetToTime();
        } else {
          setToTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ISSUE_SALE:
        return getLotteryIssueSale();

      case FROM_TIME:
        return getFromTime();

      case TO_TIME:
        return getToTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ISSUE_SALE:
        return isSetLotteryIssueSale();
      case FROM_TIME:
        return isSetFromTime();
      case TO_TIME:
        return isSetToTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentIssueSaleByWhere_args)
        return this.equals((getCurrentIssueSaleByWhere_args)that);
      return false;
    }

    public boolean equals(getCurrentIssueSaleByWhere_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryIssueSale = true && this.isSetLotteryIssueSale();
      boolean that_present_lotteryIssueSale = true && that.isSetLotteryIssueSale();
      if (this_present_lotteryIssueSale || that_present_lotteryIssueSale) {
        if (!(this_present_lotteryIssueSale && that_present_lotteryIssueSale))
          return false;
        if (!this.lotteryIssueSale.equals(that.lotteryIssueSale))
          return false;
      }

      boolean this_present_fromTime = true && this.isSetFromTime();
      boolean that_present_fromTime = true && that.isSetFromTime();
      if (this_present_fromTime || that_present_fromTime) {
        if (!(this_present_fromTime && that_present_fromTime))
          return false;
        if (!this.fromTime.equals(that.fromTime))
          return false;
      }

      boolean this_present_toTime = true && this.isSetToTime();
      boolean that_present_toTime = true && that.isSetToTime();
      if (this_present_toTime || that_present_toTime) {
        if (!(this_present_toTime && that_present_toTime))
          return false;
        if (!this.toTime.equals(that.toTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCurrentIssueSaleByWhere_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryIssueSale()).compareTo(other.isSetLotteryIssueSale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryIssueSale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssueSale, other.lotteryIssueSale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(other.isSetFromTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, other.fromTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToTime()).compareTo(other.isSetToTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, other.toTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentIssueSaleByWhere_args(");
      boolean first = true;

      sb.append("lotteryIssueSale:");
      if (this.lotteryIssueSale == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryIssueSale);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromTime:");
      if (this.fromTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toTime:");
      if (this.toTime == null) {
        sb.append("null");
      } else {
        sb.append(this.toTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryIssueSale != null) {
        lotteryIssueSale.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentIssueSaleByWhere_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentIssueSaleByWhere_argsStandardScheme getScheme() {
        return new getCurrentIssueSaleByWhere_argsStandardScheme();
      }
    }

    private static class getCurrentIssueSaleByWhere_argsStandardScheme extends StandardScheme<getCurrentIssueSaleByWhere_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ISSUE_SALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryIssueSale = new LotteryIssueSale();
                struct.lotteryIssueSale.read(iprot);
                struct.setLotteryIssueSaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromTime = iprot.readString();
                struct.setFromTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.toTime = iprot.readString();
                struct.setToTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryIssueSale != null) {
          oprot.writeFieldBegin(LOTTERY_ISSUE_SALE_FIELD_DESC);
          struct.lotteryIssueSale.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fromTime != null) {
          oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
          oprot.writeString(struct.fromTime);
          oprot.writeFieldEnd();
        }
        if (struct.toTime != null) {
          oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
          oprot.writeString(struct.toTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentIssueSaleByWhere_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentIssueSaleByWhere_argsTupleScheme getScheme() {
        return new getCurrentIssueSaleByWhere_argsTupleScheme();
      }
    }

    private static class getCurrentIssueSaleByWhere_argsTupleScheme extends TupleScheme<getCurrentIssueSaleByWhere_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryIssueSale()) {
          optionals.set(0);
        }
        if (struct.isSetFromTime()) {
          optionals.set(1);
        }
        if (struct.isSetToTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryIssueSale()) {
          struct.lotteryIssueSale.write(oprot);
        }
        if (struct.isSetFromTime()) {
          oprot.writeString(struct.fromTime);
        }
        if (struct.isSetToTime()) {
          oprot.writeString(struct.toTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentIssueSaleByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryIssueSale = new LotteryIssueSale();
          struct.lotteryIssueSale.read(iprot);
          struct.setLotteryIssueSaleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromTime = iprot.readString();
          struct.setFromTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toTime = iprot.readString();
          struct.setToTimeIsSet(true);
        }
      }
    }

  }

  public static class getCurrentIssueSaleByWhere_result implements org.apache.thrift.TBase<getCurrentIssueSaleByWhere_result, getCurrentIssueSaleByWhere_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentIssueSaleByWhere_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentIssueSaleByWhere_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentIssueSaleByWhere_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentIssueSaleByWhere_resultTupleSchemeFactory());
    }

    public List<LotteryIssueSale> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssueSale.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentIssueSaleByWhere_result.class, metaDataMap);
    }

    public getCurrentIssueSaleByWhere_result() {
    }

    public getCurrentIssueSaleByWhere_result(
      List<LotteryIssueSale> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentIssueSaleByWhere_result(getCurrentIssueSaleByWhere_result other) {
      if (other.isSetSuccess()) {
        List<LotteryIssueSale> __this__success = new ArrayList<LotteryIssueSale>(other.success.size());
        for (LotteryIssueSale other_element : other.success) {
          __this__success.add(new LotteryIssueSale(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCurrentIssueSaleByWhere_result deepCopy() {
      return new getCurrentIssueSaleByWhere_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LotteryIssueSale> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LotteryIssueSale elem) {
      if (this.success == null) {
        this.success = new ArrayList<LotteryIssueSale>();
      }
      this.success.add(elem);
    }

    public List<LotteryIssueSale> getSuccess() {
      return this.success;
    }

    public getCurrentIssueSaleByWhere_result setSuccess(List<LotteryIssueSale> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LotteryIssueSale>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentIssueSaleByWhere_result)
        return this.equals((getCurrentIssueSaleByWhere_result)that);
      return false;
    }

    public boolean equals(getCurrentIssueSaleByWhere_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCurrentIssueSaleByWhere_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentIssueSaleByWhere_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentIssueSaleByWhere_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentIssueSaleByWhere_resultStandardScheme getScheme() {
        return new getCurrentIssueSaleByWhere_resultStandardScheme();
      }
    }

    private static class getCurrentIssueSaleByWhere_resultStandardScheme extends StandardScheme<getCurrentIssueSaleByWhere_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<LotteryIssueSale>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    LotteryIssueSale _elem74;
                    _elem74 = new LotteryIssueSale();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LotteryIssueSale _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentIssueSaleByWhere_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentIssueSaleByWhere_resultTupleScheme getScheme() {
        return new getCurrentIssueSaleByWhere_resultTupleScheme();
      }
    }

    private static class getCurrentIssueSaleByWhere_resultTupleScheme extends TupleScheme<getCurrentIssueSaleByWhere_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LotteryIssueSale _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentIssueSaleByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LotteryIssueSale>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              LotteryIssueSale _elem79;
              _elem79 = new LotteryIssueSale();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLotteryDaySaleByWhere_args implements org.apache.thrift.TBase<getLotteryDaySaleByWhere_args, getLotteryDaySaleByWhere_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryDaySaleByWhere_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryDaySaleByWhere_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_DAY_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryDaySale", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryDaySaleByWhere_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryDaySaleByWhere_argsTupleSchemeFactory());
    }

    public LotteryDaySale lotteryDaySale; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_DAY_SALE((short)1, "lotteryDaySale"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_DAY_SALE
            return LOTTERY_DAY_SALE;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_DAY_SALE, new org.apache.thrift.meta_data.FieldMetaData("lotteryDaySale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryDaySale.class)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryDaySaleByWhere_args.class, metaDataMap);
    }

    public getLotteryDaySaleByWhere_args() {
    }

    public getLotteryDaySaleByWhere_args(
      LotteryDaySale lotteryDaySale,
      int pageNum,
      int pageSize)
    {
      this();
      this.lotteryDaySale = lotteryDaySale;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryDaySaleByWhere_args(getLotteryDaySaleByWhere_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryDaySale()) {
        this.lotteryDaySale = new LotteryDaySale(other.lotteryDaySale);
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public getLotteryDaySaleByWhere_args deepCopy() {
      return new getLotteryDaySaleByWhere_args(this);
    }

    @Override
    public void clear() {
      this.lotteryDaySale = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public LotteryDaySale getLotteryDaySale() {
      return this.lotteryDaySale;
    }

    public getLotteryDaySaleByWhere_args setLotteryDaySale(LotteryDaySale lotteryDaySale) {
      this.lotteryDaySale = lotteryDaySale;
      return this;
    }

    public void unsetLotteryDaySale() {
      this.lotteryDaySale = null;
    }

    /** Returns true if field lotteryDaySale is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryDaySale() {
      return this.lotteryDaySale != null;
    }

    public void setLotteryDaySaleIsSet(boolean value) {
      if (!value) {
        this.lotteryDaySale = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getLotteryDaySaleByWhere_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getLotteryDaySaleByWhere_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_DAY_SALE:
        if (value == null) {
          unsetLotteryDaySale();
        } else {
          setLotteryDaySale((LotteryDaySale)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_DAY_SALE:
        return getLotteryDaySale();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_DAY_SALE:
        return isSetLotteryDaySale();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryDaySaleByWhere_args)
        return this.equals((getLotteryDaySaleByWhere_args)that);
      return false;
    }

    public boolean equals(getLotteryDaySaleByWhere_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryDaySale = true && this.isSetLotteryDaySale();
      boolean that_present_lotteryDaySale = true && that.isSetLotteryDaySale();
      if (this_present_lotteryDaySale || that_present_lotteryDaySale) {
        if (!(this_present_lotteryDaySale && that_present_lotteryDaySale))
          return false;
        if (!this.lotteryDaySale.equals(that.lotteryDaySale))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryDaySaleByWhere_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryDaySale()).compareTo(other.isSetLotteryDaySale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryDaySale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryDaySale, other.lotteryDaySale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryDaySaleByWhere_args(");
      boolean first = true;

      sb.append("lotteryDaySale:");
      if (this.lotteryDaySale == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryDaySale);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryDaySale != null) {
        lotteryDaySale.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryDaySaleByWhere_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryDaySaleByWhere_argsStandardScheme getScheme() {
        return new getLotteryDaySaleByWhere_argsStandardScheme();
      }
    }

    private static class getLotteryDaySaleByWhere_argsStandardScheme extends StandardScheme<getLotteryDaySaleByWhere_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryDaySaleByWhere_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_DAY_SALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryDaySale = new LotteryDaySale();
                struct.lotteryDaySale.read(iprot);
                struct.setLotteryDaySaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryDaySaleByWhere_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryDaySale != null) {
          oprot.writeFieldBegin(LOTTERY_DAY_SALE_FIELD_DESC);
          struct.lotteryDaySale.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryDaySaleByWhere_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryDaySaleByWhere_argsTupleScheme getScheme() {
        return new getLotteryDaySaleByWhere_argsTupleScheme();
      }
    }

    private static class getLotteryDaySaleByWhere_argsTupleScheme extends TupleScheme<getLotteryDaySaleByWhere_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryDaySaleByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryDaySale()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryDaySale()) {
          struct.lotteryDaySale.write(oprot);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryDaySaleByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryDaySale = new LotteryDaySale();
          struct.lotteryDaySale.read(iprot);
          struct.setLotteryDaySaleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getLotteryDaySaleByWhere_result implements org.apache.thrift.TBase<getLotteryDaySaleByWhere_result, getLotteryDaySaleByWhere_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryDaySaleByWhere_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryDaySaleByWhere_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryDaySaleByWhere_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryDaySaleByWhere_resultTupleSchemeFactory());
    }

    public List<LotteryDaySale> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryDaySale.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryDaySaleByWhere_result.class, metaDataMap);
    }

    public getLotteryDaySaleByWhere_result() {
    }

    public getLotteryDaySaleByWhere_result(
      List<LotteryDaySale> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryDaySaleByWhere_result(getLotteryDaySaleByWhere_result other) {
      if (other.isSetSuccess()) {
        List<LotteryDaySale> __this__success = new ArrayList<LotteryDaySale>(other.success.size());
        for (LotteryDaySale other_element : other.success) {
          __this__success.add(new LotteryDaySale(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLotteryDaySaleByWhere_result deepCopy() {
      return new getLotteryDaySaleByWhere_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LotteryDaySale> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LotteryDaySale elem) {
      if (this.success == null) {
        this.success = new ArrayList<LotteryDaySale>();
      }
      this.success.add(elem);
    }

    public List<LotteryDaySale> getSuccess() {
      return this.success;
    }

    public getLotteryDaySaleByWhere_result setSuccess(List<LotteryDaySale> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LotteryDaySale>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryDaySaleByWhere_result)
        return this.equals((getLotteryDaySaleByWhere_result)that);
      return false;
    }

    public boolean equals(getLotteryDaySaleByWhere_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryDaySaleByWhere_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryDaySaleByWhere_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryDaySaleByWhere_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryDaySaleByWhere_resultStandardScheme getScheme() {
        return new getLotteryDaySaleByWhere_resultStandardScheme();
      }
    }

    private static class getLotteryDaySaleByWhere_resultStandardScheme extends StandardScheme<getLotteryDaySaleByWhere_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryDaySaleByWhere_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<LotteryDaySale>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    LotteryDaySale _elem82;
                    _elem82 = new LotteryDaySale();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryDaySaleByWhere_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LotteryDaySale _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryDaySaleByWhere_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryDaySaleByWhere_resultTupleScheme getScheme() {
        return new getLotteryDaySaleByWhere_resultTupleScheme();
      }
    }

    private static class getLotteryDaySaleByWhere_resultTupleScheme extends TupleScheme<getLotteryDaySaleByWhere_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryDaySaleByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LotteryDaySale _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryDaySaleByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LotteryDaySale>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              LotteryDaySale _elem87;
              _elem87 = new LotteryDaySale();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDailyReportByWhere_args implements org.apache.thrift.TBase<getDailyReportByWhere_args, getDailyReportByWhere_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDailyReportByWhere_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailyReportByWhere_args");

    private static final org.apache.thrift.protocol.TField DAILY_SALE_AND_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("dailySaleAndCharge", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailyReportByWhere_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailyReportByWhere_argsTupleSchemeFactory());
    }

    public DailySaleAndCharge dailySaleAndCharge; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAILY_SALE_AND_CHARGE((short)1, "dailySaleAndCharge"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAILY_SALE_AND_CHARGE
            return DAILY_SALE_AND_CHARGE;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAILY_SALE_AND_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("dailySaleAndCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailySaleAndCharge.class)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailyReportByWhere_args.class, metaDataMap);
    }

    public getDailyReportByWhere_args() {
    }

    public getDailyReportByWhere_args(
      DailySaleAndCharge dailySaleAndCharge,
      int pageNum,
      int pageSize)
    {
      this();
      this.dailySaleAndCharge = dailySaleAndCharge;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailyReportByWhere_args(getDailyReportByWhere_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDailySaleAndCharge()) {
        this.dailySaleAndCharge = new DailySaleAndCharge(other.dailySaleAndCharge);
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public getDailyReportByWhere_args deepCopy() {
      return new getDailyReportByWhere_args(this);
    }

    @Override
    public void clear() {
      this.dailySaleAndCharge = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public DailySaleAndCharge getDailySaleAndCharge() {
      return this.dailySaleAndCharge;
    }

    public getDailyReportByWhere_args setDailySaleAndCharge(DailySaleAndCharge dailySaleAndCharge) {
      this.dailySaleAndCharge = dailySaleAndCharge;
      return this;
    }

    public void unsetDailySaleAndCharge() {
      this.dailySaleAndCharge = null;
    }

    /** Returns true if field dailySaleAndCharge is set (has been assigned a value) and false otherwise */
    public boolean isSetDailySaleAndCharge() {
      return this.dailySaleAndCharge != null;
    }

    public void setDailySaleAndChargeIsSet(boolean value) {
      if (!value) {
        this.dailySaleAndCharge = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getDailyReportByWhere_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getDailyReportByWhere_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAILY_SALE_AND_CHARGE:
        if (value == null) {
          unsetDailySaleAndCharge();
        } else {
          setDailySaleAndCharge((DailySaleAndCharge)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAILY_SALE_AND_CHARGE:
        return getDailySaleAndCharge();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAILY_SALE_AND_CHARGE:
        return isSetDailySaleAndCharge();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailyReportByWhere_args)
        return this.equals((getDailyReportByWhere_args)that);
      return false;
    }

    public boolean equals(getDailyReportByWhere_args that) {
      if (that == null)
        return false;

      boolean this_present_dailySaleAndCharge = true && this.isSetDailySaleAndCharge();
      boolean that_present_dailySaleAndCharge = true && that.isSetDailySaleAndCharge();
      if (this_present_dailySaleAndCharge || that_present_dailySaleAndCharge) {
        if (!(this_present_dailySaleAndCharge && that_present_dailySaleAndCharge))
          return false;
        if (!this.dailySaleAndCharge.equals(that.dailySaleAndCharge))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailyReportByWhere_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDailySaleAndCharge()).compareTo(other.isSetDailySaleAndCharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDailySaleAndCharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailySaleAndCharge, other.dailySaleAndCharge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailyReportByWhere_args(");
      boolean first = true;

      sb.append("dailySaleAndCharge:");
      if (this.dailySaleAndCharge == null) {
        sb.append("null");
      } else {
        sb.append(this.dailySaleAndCharge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dailySaleAndCharge != null) {
        dailySaleAndCharge.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailyReportByWhere_argsStandardSchemeFactory implements SchemeFactory {
      public getDailyReportByWhere_argsStandardScheme getScheme() {
        return new getDailyReportByWhere_argsStandardScheme();
      }
    }

    private static class getDailyReportByWhere_argsStandardScheme extends StandardScheme<getDailyReportByWhere_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailyReportByWhere_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAILY_SALE_AND_CHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dailySaleAndCharge = new DailySaleAndCharge();
                struct.dailySaleAndCharge.read(iprot);
                struct.setDailySaleAndChargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailyReportByWhere_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dailySaleAndCharge != null) {
          oprot.writeFieldBegin(DAILY_SALE_AND_CHARGE_FIELD_DESC);
          struct.dailySaleAndCharge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailyReportByWhere_argsTupleSchemeFactory implements SchemeFactory {
      public getDailyReportByWhere_argsTupleScheme getScheme() {
        return new getDailyReportByWhere_argsTupleScheme();
      }
    }

    private static class getDailyReportByWhere_argsTupleScheme extends TupleScheme<getDailyReportByWhere_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailyReportByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDailySaleAndCharge()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDailySaleAndCharge()) {
          struct.dailySaleAndCharge.write(oprot);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailyReportByWhere_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dailySaleAndCharge = new DailySaleAndCharge();
          struct.dailySaleAndCharge.read(iprot);
          struct.setDailySaleAndChargeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getDailyReportByWhere_result implements org.apache.thrift.TBase<getDailyReportByWhere_result, getDailyReportByWhere_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDailyReportByWhere_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailyReportByWhere_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailyReportByWhere_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailyReportByWhere_resultTupleSchemeFactory());
    }

    public PcDailyReport success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PcDailyReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailyReportByWhere_result.class, metaDataMap);
    }

    public getDailyReportByWhere_result() {
    }

    public getDailyReportByWhere_result(
      PcDailyReport success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailyReportByWhere_result(getDailyReportByWhere_result other) {
      if (other.isSetSuccess()) {
        this.success = new PcDailyReport(other.success);
      }
    }

    public getDailyReportByWhere_result deepCopy() {
      return new getDailyReportByWhere_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PcDailyReport getSuccess() {
      return this.success;
    }

    public getDailyReportByWhere_result setSuccess(PcDailyReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PcDailyReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailyReportByWhere_result)
        return this.equals((getDailyReportByWhere_result)that);
      return false;
    }

    public boolean equals(getDailyReportByWhere_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailyReportByWhere_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailyReportByWhere_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailyReportByWhere_resultStandardSchemeFactory implements SchemeFactory {
      public getDailyReportByWhere_resultStandardScheme getScheme() {
        return new getDailyReportByWhere_resultStandardScheme();
      }
    }

    private static class getDailyReportByWhere_resultStandardScheme extends StandardScheme<getDailyReportByWhere_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailyReportByWhere_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PcDailyReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailyReportByWhere_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailyReportByWhere_resultTupleSchemeFactory implements SchemeFactory {
      public getDailyReportByWhere_resultTupleScheme getScheme() {
        return new getDailyReportByWhere_resultTupleScheme();
      }
    }

    private static class getDailyReportByWhere_resultTupleScheme extends TupleScheme<getDailyReportByWhere_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailyReportByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailyReportByWhere_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PcDailyReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDailyRiskCount_args implements org.apache.thrift.TBase<getDailyRiskCount_args, getDailyRiskCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDailyRiskCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailyRiskCount_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailyRiskCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailyRiskCount_argsTupleSchemeFactory());
    }

    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailyRiskCount_args.class, metaDataMap);
    }

    public getDailyRiskCount_args() {
    }

    public getDailyRiskCount_args(
      String day)
    {
      this();
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailyRiskCount_args(getDailyRiskCount_args other) {
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public getDailyRiskCount_args deepCopy() {
      return new getDailyRiskCount_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
    }

    public String getDay() {
      return this.day;
    }

    public getDailyRiskCount_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailyRiskCount_args)
        return this.equals((getDailyRiskCount_args)that);
      return false;
    }

    public boolean equals(getDailyRiskCount_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailyRiskCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailyRiskCount_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailyRiskCount_argsStandardSchemeFactory implements SchemeFactory {
      public getDailyRiskCount_argsStandardScheme getScheme() {
        return new getDailyRiskCount_argsStandardScheme();
      }
    }

    private static class getDailyRiskCount_argsStandardScheme extends StandardScheme<getDailyRiskCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailyRiskCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailyRiskCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailyRiskCount_argsTupleSchemeFactory implements SchemeFactory {
      public getDailyRiskCount_argsTupleScheme getScheme() {
        return new getDailyRiskCount_argsTupleScheme();
      }
    }

    private static class getDailyRiskCount_argsTupleScheme extends TupleScheme<getDailyRiskCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailyRiskCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailyRiskCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class getDailyRiskCount_result implements org.apache.thrift.TBase<getDailyRiskCount_result, getDailyRiskCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDailyRiskCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailyRiskCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailyRiskCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailyRiskCount_resultTupleSchemeFactory());
    }

    public DailyRiskCount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailyRiskCount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailyRiskCount_result.class, metaDataMap);
    }

    public getDailyRiskCount_result() {
    }

    public getDailyRiskCount_result(
      DailyRiskCount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailyRiskCount_result(getDailyRiskCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new DailyRiskCount(other.success);
      }
    }

    public getDailyRiskCount_result deepCopy() {
      return new getDailyRiskCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DailyRiskCount getSuccess() {
      return this.success;
    }

    public getDailyRiskCount_result setSuccess(DailyRiskCount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DailyRiskCount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailyRiskCount_result)
        return this.equals((getDailyRiskCount_result)that);
      return false;
    }

    public boolean equals(getDailyRiskCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailyRiskCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailyRiskCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailyRiskCount_resultStandardSchemeFactory implements SchemeFactory {
      public getDailyRiskCount_resultStandardScheme getScheme() {
        return new getDailyRiskCount_resultStandardScheme();
      }
    }

    private static class getDailyRiskCount_resultStandardScheme extends StandardScheme<getDailyRiskCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailyRiskCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DailyRiskCount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailyRiskCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailyRiskCount_resultTupleSchemeFactory implements SchemeFactory {
      public getDailyRiskCount_resultTupleScheme getScheme() {
        return new getDailyRiskCount_resultTupleScheme();
      }
    }

    private static class getDailyRiskCount_resultTupleScheme extends TupleScheme<getDailyRiskCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailyRiskCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailyRiskCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DailyRiskCount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIssueRiskCount_args implements org.apache.thrift.TBase<getIssueRiskCount_args, getIssueRiskCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIssueRiskCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIssueRiskCount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIssueRiskCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIssueRiskCount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIssueRiskCount_args.class, metaDataMap);
    }

    public getIssueRiskCount_args() {
    }

    public getIssueRiskCount_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIssueRiskCount_args(getIssueRiskCount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getIssueRiskCount_args deepCopy() {
      return new getIssueRiskCount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getIssueRiskCount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getIssueRiskCount_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIssueRiskCount_args)
        return this.equals((getIssueRiskCount_args)that);
      return false;
    }

    public boolean equals(getIssueRiskCount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getIssueRiskCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIssueRiskCount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIssueRiskCount_argsStandardSchemeFactory implements SchemeFactory {
      public getIssueRiskCount_argsStandardScheme getScheme() {
        return new getIssueRiskCount_argsStandardScheme();
      }
    }

    private static class getIssueRiskCount_argsStandardScheme extends StandardScheme<getIssueRiskCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIssueRiskCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIssueRiskCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIssueRiskCount_argsTupleSchemeFactory implements SchemeFactory {
      public getIssueRiskCount_argsTupleScheme getScheme() {
        return new getIssueRiskCount_argsTupleScheme();
      }
    }

    private static class getIssueRiskCount_argsTupleScheme extends TupleScheme<getIssueRiskCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIssueRiskCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIssueRiskCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getIssueRiskCount_result implements org.apache.thrift.TBase<getIssueRiskCount_result, getIssueRiskCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIssueRiskCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIssueRiskCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIssueRiskCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIssueRiskCount_resultTupleSchemeFactory());
    }

    public IssueRiskCount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssueRiskCount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIssueRiskCount_result.class, metaDataMap);
    }

    public getIssueRiskCount_result() {
    }

    public getIssueRiskCount_result(
      IssueRiskCount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIssueRiskCount_result(getIssueRiskCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new IssueRiskCount(other.success);
      }
    }

    public getIssueRiskCount_result deepCopy() {
      return new getIssueRiskCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IssueRiskCount getSuccess() {
      return this.success;
    }

    public getIssueRiskCount_result setSuccess(IssueRiskCount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IssueRiskCount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIssueRiskCount_result)
        return this.equals((getIssueRiskCount_result)that);
      return false;
    }

    public boolean equals(getIssueRiskCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getIssueRiskCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIssueRiskCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIssueRiskCount_resultStandardSchemeFactory implements SchemeFactory {
      public getIssueRiskCount_resultStandardScheme getScheme() {
        return new getIssueRiskCount_resultStandardScheme();
      }
    }

    private static class getIssueRiskCount_resultStandardScheme extends StandardScheme<getIssueRiskCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIssueRiskCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IssueRiskCount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIssueRiskCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIssueRiskCount_resultTupleSchemeFactory implements SchemeFactory {
      public getIssueRiskCount_resultTupleScheme getScheme() {
        return new getIssueRiskCount_resultTupleScheme();
      }
    }

    private static class getIssueRiskCount_resultTupleScheme extends TupleScheme<getIssueRiskCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIssueRiskCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIssueRiskCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IssueRiskCount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerIssueSaleCount_args implements org.apache.thrift.TBase<partnerIssueSaleCount_args, partnerIssueSaleCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerIssueSaleCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerIssueSaleCount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerIssueSaleCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerIssueSaleCount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerIssueSaleCount_args.class, metaDataMap);
    }

    public partnerIssueSaleCount_args() {
    }

    public partnerIssueSaleCount_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerIssueSaleCount_args(partnerIssueSaleCount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public partnerIssueSaleCount_args deepCopy() {
      return new partnerIssueSaleCount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public partnerIssueSaleCount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public partnerIssueSaleCount_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerIssueSaleCount_args)
        return this.equals((partnerIssueSaleCount_args)that);
      return false;
    }

    public boolean equals(partnerIssueSaleCount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerIssueSaleCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerIssueSaleCount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerIssueSaleCount_argsStandardSchemeFactory implements SchemeFactory {
      public partnerIssueSaleCount_argsStandardScheme getScheme() {
        return new partnerIssueSaleCount_argsStandardScheme();
      }
    }

    private static class partnerIssueSaleCount_argsStandardScheme extends StandardScheme<partnerIssueSaleCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerIssueSaleCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerIssueSaleCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerIssueSaleCount_argsTupleSchemeFactory implements SchemeFactory {
      public partnerIssueSaleCount_argsTupleScheme getScheme() {
        return new partnerIssueSaleCount_argsTupleScheme();
      }
    }

    private static class partnerIssueSaleCount_argsTupleScheme extends TupleScheme<partnerIssueSaleCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerIssueSaleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerIssueSaleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class partnerIssueSaleCount_result implements org.apache.thrift.TBase<partnerIssueSaleCount_result, partnerIssueSaleCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerIssueSaleCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerIssueSaleCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerIssueSaleCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerIssueSaleCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerIssueSaleCount_result.class, metaDataMap);
    }

    public partnerIssueSaleCount_result() {
    }

    public partnerIssueSaleCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerIssueSaleCount_result(partnerIssueSaleCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerIssueSaleCount_result deepCopy() {
      return new partnerIssueSaleCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerIssueSaleCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerIssueSaleCount_result)
        return this.equals((partnerIssueSaleCount_result)that);
      return false;
    }

    public boolean equals(partnerIssueSaleCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerIssueSaleCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerIssueSaleCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerIssueSaleCount_resultStandardSchemeFactory implements SchemeFactory {
      public partnerIssueSaleCount_resultStandardScheme getScheme() {
        return new partnerIssueSaleCount_resultStandardScheme();
      }
    }

    private static class partnerIssueSaleCount_resultStandardScheme extends StandardScheme<partnerIssueSaleCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerIssueSaleCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerIssueSaleCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerIssueSaleCount_resultTupleSchemeFactory implements SchemeFactory {
      public partnerIssueSaleCount_resultTupleScheme getScheme() {
        return new partnerIssueSaleCount_resultTupleScheme();
      }
    }

    private static class partnerIssueSaleCount_resultTupleScheme extends TupleScheme<partnerIssueSaleCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerIssueSaleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerIssueSaleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerIssueRewardCount_args implements org.apache.thrift.TBase<partnerIssueRewardCount_args, partnerIssueRewardCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerIssueRewardCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerIssueRewardCount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerIssueRewardCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerIssueRewardCount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerIssueRewardCount_args.class, metaDataMap);
    }

    public partnerIssueRewardCount_args() {
    }

    public partnerIssueRewardCount_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerIssueRewardCount_args(partnerIssueRewardCount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public partnerIssueRewardCount_args deepCopy() {
      return new partnerIssueRewardCount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public partnerIssueRewardCount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public partnerIssueRewardCount_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerIssueRewardCount_args)
        return this.equals((partnerIssueRewardCount_args)that);
      return false;
    }

    public boolean equals(partnerIssueRewardCount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerIssueRewardCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerIssueRewardCount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerIssueRewardCount_argsStandardSchemeFactory implements SchemeFactory {
      public partnerIssueRewardCount_argsStandardScheme getScheme() {
        return new partnerIssueRewardCount_argsStandardScheme();
      }
    }

    private static class partnerIssueRewardCount_argsStandardScheme extends StandardScheme<partnerIssueRewardCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerIssueRewardCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerIssueRewardCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerIssueRewardCount_argsTupleSchemeFactory implements SchemeFactory {
      public partnerIssueRewardCount_argsTupleScheme getScheme() {
        return new partnerIssueRewardCount_argsTupleScheme();
      }
    }

    private static class partnerIssueRewardCount_argsTupleScheme extends TupleScheme<partnerIssueRewardCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerIssueRewardCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerIssueRewardCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class partnerIssueRewardCount_result implements org.apache.thrift.TBase<partnerIssueRewardCount_result, partnerIssueRewardCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerIssueRewardCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerIssueRewardCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerIssueRewardCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerIssueRewardCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerIssueRewardCount_result.class, metaDataMap);
    }

    public partnerIssueRewardCount_result() {
    }

    public partnerIssueRewardCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerIssueRewardCount_result(partnerIssueRewardCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerIssueRewardCount_result deepCopy() {
      return new partnerIssueRewardCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerIssueRewardCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerIssueRewardCount_result)
        return this.equals((partnerIssueRewardCount_result)that);
      return false;
    }

    public boolean equals(partnerIssueRewardCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerIssueRewardCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerIssueRewardCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerIssueRewardCount_resultStandardSchemeFactory implements SchemeFactory {
      public partnerIssueRewardCount_resultStandardScheme getScheme() {
        return new partnerIssueRewardCount_resultStandardScheme();
      }
    }

    private static class partnerIssueRewardCount_resultStandardScheme extends StandardScheme<partnerIssueRewardCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerIssueRewardCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerIssueRewardCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerIssueRewardCount_resultTupleSchemeFactory implements SchemeFactory {
      public partnerIssueRewardCount_resultTupleScheme getScheme() {
        return new partnerIssueRewardCount_resultTupleScheme();
      }
    }

    private static class partnerIssueRewardCount_resultTupleScheme extends TupleScheme<partnerIssueRewardCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerIssueRewardCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerIssueRewardCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerDailySaleCount_args implements org.apache.thrift.TBase<partnerDailySaleCount_args, partnerDailySaleCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailySaleCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailySaleCount_args");

    private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailySaleCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailySaleCount_argsTupleSchemeFactory());
    }

    public String countTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT_TIME((short)1, "countTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT_TIME
            return COUNT_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailySaleCount_args.class, metaDataMap);
    }

    public partnerDailySaleCount_args() {
    }

    public partnerDailySaleCount_args(
      String countTime)
    {
      this();
      this.countTime = countTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailySaleCount_args(partnerDailySaleCount_args other) {
      if (other.isSetCountTime()) {
        this.countTime = other.countTime;
      }
    }

    public partnerDailySaleCount_args deepCopy() {
      return new partnerDailySaleCount_args(this);
    }

    @Override
    public void clear() {
      this.countTime = null;
    }

    public String getCountTime() {
      return this.countTime;
    }

    public partnerDailySaleCount_args setCountTime(String countTime) {
      this.countTime = countTime;
      return this;
    }

    public void unsetCountTime() {
      this.countTime = null;
    }

    /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCountTime() {
      return this.countTime != null;
    }

    public void setCountTimeIsSet(boolean value) {
      if (!value) {
        this.countTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT_TIME:
        if (value == null) {
          unsetCountTime();
        } else {
          setCountTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT_TIME:
        return getCountTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT_TIME:
        return isSetCountTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailySaleCount_args)
        return this.equals((partnerDailySaleCount_args)that);
      return false;
    }

    public boolean equals(partnerDailySaleCount_args that) {
      if (that == null)
        return false;

      boolean this_present_countTime = true && this.isSetCountTime();
      boolean that_present_countTime = true && that.isSetCountTime();
      if (this_present_countTime || that_present_countTime) {
        if (!(this_present_countTime && that_present_countTime))
          return false;
        if (!this.countTime.equals(that.countTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailySaleCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailySaleCount_args(");
      boolean first = true;

      sb.append("countTime:");
      if (this.countTime == null) {
        sb.append("null");
      } else {
        sb.append(this.countTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailySaleCount_argsStandardSchemeFactory implements SchemeFactory {
      public partnerDailySaleCount_argsStandardScheme getScheme() {
        return new partnerDailySaleCount_argsStandardScheme();
      }
    }

    private static class partnerDailySaleCount_argsStandardScheme extends StandardScheme<partnerDailySaleCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailySaleCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countTime = iprot.readString();
                struct.setCountTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailySaleCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countTime != null) {
          oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
          oprot.writeString(struct.countTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailySaleCount_argsTupleSchemeFactory implements SchemeFactory {
      public partnerDailySaleCount_argsTupleScheme getScheme() {
        return new partnerDailySaleCount_argsTupleScheme();
      }
    }

    private static class partnerDailySaleCount_argsTupleScheme extends TupleScheme<partnerDailySaleCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailySaleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCountTime()) {
          oprot.writeString(struct.countTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailySaleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.countTime = iprot.readString();
          struct.setCountTimeIsSet(true);
        }
      }
    }

  }

  public static class partnerDailySaleCount_result implements org.apache.thrift.TBase<partnerDailySaleCount_result, partnerDailySaleCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailySaleCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailySaleCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailySaleCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailySaleCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailySaleCount_result.class, metaDataMap);
    }

    public partnerDailySaleCount_result() {
    }

    public partnerDailySaleCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailySaleCount_result(partnerDailySaleCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerDailySaleCount_result deepCopy() {
      return new partnerDailySaleCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerDailySaleCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailySaleCount_result)
        return this.equals((partnerDailySaleCount_result)that);
      return false;
    }

    public boolean equals(partnerDailySaleCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailySaleCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailySaleCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailySaleCount_resultStandardSchemeFactory implements SchemeFactory {
      public partnerDailySaleCount_resultStandardScheme getScheme() {
        return new partnerDailySaleCount_resultStandardScheme();
      }
    }

    private static class partnerDailySaleCount_resultStandardScheme extends StandardScheme<partnerDailySaleCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailySaleCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailySaleCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailySaleCount_resultTupleSchemeFactory implements SchemeFactory {
      public partnerDailySaleCount_resultTupleScheme getScheme() {
        return new partnerDailySaleCount_resultTupleScheme();
      }
    }

    private static class partnerDailySaleCount_resultTupleScheme extends TupleScheme<partnerDailySaleCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailySaleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailySaleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyAwardCount_args implements org.apache.thrift.TBase<partnerDailyAwardCount_args, partnerDailyAwardCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyAwardCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyAwardCount_args");

    private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyAwardCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyAwardCount_argsTupleSchemeFactory());
    }

    public String countTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT_TIME((short)1, "countTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT_TIME
            return COUNT_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyAwardCount_args.class, metaDataMap);
    }

    public partnerDailyAwardCount_args() {
    }

    public partnerDailyAwardCount_args(
      String countTime)
    {
      this();
      this.countTime = countTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyAwardCount_args(partnerDailyAwardCount_args other) {
      if (other.isSetCountTime()) {
        this.countTime = other.countTime;
      }
    }

    public partnerDailyAwardCount_args deepCopy() {
      return new partnerDailyAwardCount_args(this);
    }

    @Override
    public void clear() {
      this.countTime = null;
    }

    public String getCountTime() {
      return this.countTime;
    }

    public partnerDailyAwardCount_args setCountTime(String countTime) {
      this.countTime = countTime;
      return this;
    }

    public void unsetCountTime() {
      this.countTime = null;
    }

    /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCountTime() {
      return this.countTime != null;
    }

    public void setCountTimeIsSet(boolean value) {
      if (!value) {
        this.countTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT_TIME:
        if (value == null) {
          unsetCountTime();
        } else {
          setCountTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT_TIME:
        return getCountTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT_TIME:
        return isSetCountTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyAwardCount_args)
        return this.equals((partnerDailyAwardCount_args)that);
      return false;
    }

    public boolean equals(partnerDailyAwardCount_args that) {
      if (that == null)
        return false;

      boolean this_present_countTime = true && this.isSetCountTime();
      boolean that_present_countTime = true && that.isSetCountTime();
      if (this_present_countTime || that_present_countTime) {
        if (!(this_present_countTime && that_present_countTime))
          return false;
        if (!this.countTime.equals(that.countTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyAwardCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyAwardCount_args(");
      boolean first = true;

      sb.append("countTime:");
      if (this.countTime == null) {
        sb.append("null");
      } else {
        sb.append(this.countTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyAwardCount_argsStandardSchemeFactory implements SchemeFactory {
      public partnerDailyAwardCount_argsStandardScheme getScheme() {
        return new partnerDailyAwardCount_argsStandardScheme();
      }
    }

    private static class partnerDailyAwardCount_argsStandardScheme extends StandardScheme<partnerDailyAwardCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyAwardCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countTime = iprot.readString();
                struct.setCountTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyAwardCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countTime != null) {
          oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
          oprot.writeString(struct.countTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyAwardCount_argsTupleSchemeFactory implements SchemeFactory {
      public partnerDailyAwardCount_argsTupleScheme getScheme() {
        return new partnerDailyAwardCount_argsTupleScheme();
      }
    }

    private static class partnerDailyAwardCount_argsTupleScheme extends TupleScheme<partnerDailyAwardCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyAwardCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCountTime()) {
          oprot.writeString(struct.countTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyAwardCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.countTime = iprot.readString();
          struct.setCountTimeIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyAwardCount_result implements org.apache.thrift.TBase<partnerDailyAwardCount_result, partnerDailyAwardCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyAwardCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyAwardCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyAwardCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyAwardCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyAwardCount_result.class, metaDataMap);
    }

    public partnerDailyAwardCount_result() {
    }

    public partnerDailyAwardCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyAwardCount_result(partnerDailyAwardCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerDailyAwardCount_result deepCopy() {
      return new partnerDailyAwardCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerDailyAwardCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyAwardCount_result)
        return this.equals((partnerDailyAwardCount_result)that);
      return false;
    }

    public boolean equals(partnerDailyAwardCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyAwardCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyAwardCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyAwardCount_resultStandardSchemeFactory implements SchemeFactory {
      public partnerDailyAwardCount_resultStandardScheme getScheme() {
        return new partnerDailyAwardCount_resultStandardScheme();
      }
    }

    private static class partnerDailyAwardCount_resultStandardScheme extends StandardScheme<partnerDailyAwardCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyAwardCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyAwardCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyAwardCount_resultTupleSchemeFactory implements SchemeFactory {
      public partnerDailyAwardCount_resultTupleScheme getScheme() {
        return new partnerDailyAwardCount_resultTupleScheme();
      }
    }

    private static class partnerDailyAwardCount_resultTupleScheme extends TupleScheme<partnerDailyAwardCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyAwardCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyAwardCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyChargeCount_args implements org.apache.thrift.TBase<partnerDailyChargeCount_args, partnerDailyChargeCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyChargeCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyChargeCount_args");

    private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyChargeCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyChargeCount_argsTupleSchemeFactory());
    }

    public String countTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT_TIME((short)1, "countTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT_TIME
            return COUNT_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyChargeCount_args.class, metaDataMap);
    }

    public partnerDailyChargeCount_args() {
    }

    public partnerDailyChargeCount_args(
      String countTime)
    {
      this();
      this.countTime = countTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyChargeCount_args(partnerDailyChargeCount_args other) {
      if (other.isSetCountTime()) {
        this.countTime = other.countTime;
      }
    }

    public partnerDailyChargeCount_args deepCopy() {
      return new partnerDailyChargeCount_args(this);
    }

    @Override
    public void clear() {
      this.countTime = null;
    }

    public String getCountTime() {
      return this.countTime;
    }

    public partnerDailyChargeCount_args setCountTime(String countTime) {
      this.countTime = countTime;
      return this;
    }

    public void unsetCountTime() {
      this.countTime = null;
    }

    /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCountTime() {
      return this.countTime != null;
    }

    public void setCountTimeIsSet(boolean value) {
      if (!value) {
        this.countTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT_TIME:
        if (value == null) {
          unsetCountTime();
        } else {
          setCountTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT_TIME:
        return getCountTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT_TIME:
        return isSetCountTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyChargeCount_args)
        return this.equals((partnerDailyChargeCount_args)that);
      return false;
    }

    public boolean equals(partnerDailyChargeCount_args that) {
      if (that == null)
        return false;

      boolean this_present_countTime = true && this.isSetCountTime();
      boolean that_present_countTime = true && that.isSetCountTime();
      if (this_present_countTime || that_present_countTime) {
        if (!(this_present_countTime && that_present_countTime))
          return false;
        if (!this.countTime.equals(that.countTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyChargeCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyChargeCount_args(");
      boolean first = true;

      sb.append("countTime:");
      if (this.countTime == null) {
        sb.append("null");
      } else {
        sb.append(this.countTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyChargeCount_argsStandardSchemeFactory implements SchemeFactory {
      public partnerDailyChargeCount_argsStandardScheme getScheme() {
        return new partnerDailyChargeCount_argsStandardScheme();
      }
    }

    private static class partnerDailyChargeCount_argsStandardScheme extends StandardScheme<partnerDailyChargeCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyChargeCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countTime = iprot.readString();
                struct.setCountTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyChargeCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countTime != null) {
          oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
          oprot.writeString(struct.countTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyChargeCount_argsTupleSchemeFactory implements SchemeFactory {
      public partnerDailyChargeCount_argsTupleScheme getScheme() {
        return new partnerDailyChargeCount_argsTupleScheme();
      }
    }

    private static class partnerDailyChargeCount_argsTupleScheme extends TupleScheme<partnerDailyChargeCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyChargeCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCountTime()) {
          oprot.writeString(struct.countTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyChargeCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.countTime = iprot.readString();
          struct.setCountTimeIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyChargeCount_result implements org.apache.thrift.TBase<partnerDailyChargeCount_result, partnerDailyChargeCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyChargeCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyChargeCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyChargeCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyChargeCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyChargeCount_result.class, metaDataMap);
    }

    public partnerDailyChargeCount_result() {
    }

    public partnerDailyChargeCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyChargeCount_result(partnerDailyChargeCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerDailyChargeCount_result deepCopy() {
      return new partnerDailyChargeCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerDailyChargeCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyChargeCount_result)
        return this.equals((partnerDailyChargeCount_result)that);
      return false;
    }

    public boolean equals(partnerDailyChargeCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyChargeCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyChargeCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyChargeCount_resultStandardSchemeFactory implements SchemeFactory {
      public partnerDailyChargeCount_resultStandardScheme getScheme() {
        return new partnerDailyChargeCount_resultStandardScheme();
      }
    }

    private static class partnerDailyChargeCount_resultStandardScheme extends StandardScheme<partnerDailyChargeCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyChargeCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyChargeCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyChargeCount_resultTupleSchemeFactory implements SchemeFactory {
      public partnerDailyChargeCount_resultTupleScheme getScheme() {
        return new partnerDailyChargeCount_resultTupleScheme();
      }
    }

    private static class partnerDailyChargeCount_resultTupleScheme extends TupleScheme<partnerDailyChargeCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyChargeCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyChargeCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyEncashCount_args implements org.apache.thrift.TBase<partnerDailyEncashCount_args, partnerDailyEncashCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyEncashCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyEncashCount_args");

    private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyEncashCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyEncashCount_argsTupleSchemeFactory());
    }

    public String countTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT_TIME((short)1, "countTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT_TIME
            return COUNT_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyEncashCount_args.class, metaDataMap);
    }

    public partnerDailyEncashCount_args() {
    }

    public partnerDailyEncashCount_args(
      String countTime)
    {
      this();
      this.countTime = countTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyEncashCount_args(partnerDailyEncashCount_args other) {
      if (other.isSetCountTime()) {
        this.countTime = other.countTime;
      }
    }

    public partnerDailyEncashCount_args deepCopy() {
      return new partnerDailyEncashCount_args(this);
    }

    @Override
    public void clear() {
      this.countTime = null;
    }

    public String getCountTime() {
      return this.countTime;
    }

    public partnerDailyEncashCount_args setCountTime(String countTime) {
      this.countTime = countTime;
      return this;
    }

    public void unsetCountTime() {
      this.countTime = null;
    }

    /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCountTime() {
      return this.countTime != null;
    }

    public void setCountTimeIsSet(boolean value) {
      if (!value) {
        this.countTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT_TIME:
        if (value == null) {
          unsetCountTime();
        } else {
          setCountTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT_TIME:
        return getCountTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT_TIME:
        return isSetCountTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyEncashCount_args)
        return this.equals((partnerDailyEncashCount_args)that);
      return false;
    }

    public boolean equals(partnerDailyEncashCount_args that) {
      if (that == null)
        return false;

      boolean this_present_countTime = true && this.isSetCountTime();
      boolean that_present_countTime = true && that.isSetCountTime();
      if (this_present_countTime || that_present_countTime) {
        if (!(this_present_countTime && that_present_countTime))
          return false;
        if (!this.countTime.equals(that.countTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyEncashCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyEncashCount_args(");
      boolean first = true;

      sb.append("countTime:");
      if (this.countTime == null) {
        sb.append("null");
      } else {
        sb.append(this.countTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyEncashCount_argsStandardSchemeFactory implements SchemeFactory {
      public partnerDailyEncashCount_argsStandardScheme getScheme() {
        return new partnerDailyEncashCount_argsStandardScheme();
      }
    }

    private static class partnerDailyEncashCount_argsStandardScheme extends StandardScheme<partnerDailyEncashCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyEncashCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countTime = iprot.readString();
                struct.setCountTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyEncashCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countTime != null) {
          oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
          oprot.writeString(struct.countTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyEncashCount_argsTupleSchemeFactory implements SchemeFactory {
      public partnerDailyEncashCount_argsTupleScheme getScheme() {
        return new partnerDailyEncashCount_argsTupleScheme();
      }
    }

    private static class partnerDailyEncashCount_argsTupleScheme extends TupleScheme<partnerDailyEncashCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyEncashCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCountTime()) {
          oprot.writeString(struct.countTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyEncashCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.countTime = iprot.readString();
          struct.setCountTimeIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyEncashCount_result implements org.apache.thrift.TBase<partnerDailyEncashCount_result, partnerDailyEncashCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyEncashCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyEncashCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyEncashCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyEncashCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyEncashCount_result.class, metaDataMap);
    }

    public partnerDailyEncashCount_result() {
    }

    public partnerDailyEncashCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyEncashCount_result(partnerDailyEncashCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerDailyEncashCount_result deepCopy() {
      return new partnerDailyEncashCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerDailyEncashCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyEncashCount_result)
        return this.equals((partnerDailyEncashCount_result)that);
      return false;
    }

    public boolean equals(partnerDailyEncashCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyEncashCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyEncashCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyEncashCount_resultStandardSchemeFactory implements SchemeFactory {
      public partnerDailyEncashCount_resultStandardScheme getScheme() {
        return new partnerDailyEncashCount_resultStandardScheme();
      }
    }

    private static class partnerDailyEncashCount_resultStandardScheme extends StandardScheme<partnerDailyEncashCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyEncashCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyEncashCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyEncashCount_resultTupleSchemeFactory implements SchemeFactory {
      public partnerDailyEncashCount_resultTupleScheme getScheme() {
        return new partnerDailyEncashCount_resultTupleScheme();
      }
    }

    private static class partnerDailyEncashCount_resultTupleScheme extends TupleScheme<partnerDailyEncashCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyEncashCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyEncashCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyReport_args implements org.apache.thrift.TBase<partnerDailyReport_args, partnerDailyReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyReport_args");

    private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyReport_argsTupleSchemeFactory());
    }

    public String countTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT_TIME((short)1, "countTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT_TIME
            return COUNT_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyReport_args.class, metaDataMap);
    }

    public partnerDailyReport_args() {
    }

    public partnerDailyReport_args(
      String countTime)
    {
      this();
      this.countTime = countTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyReport_args(partnerDailyReport_args other) {
      if (other.isSetCountTime()) {
        this.countTime = other.countTime;
      }
    }

    public partnerDailyReport_args deepCopy() {
      return new partnerDailyReport_args(this);
    }

    @Override
    public void clear() {
      this.countTime = null;
    }

    public String getCountTime() {
      return this.countTime;
    }

    public partnerDailyReport_args setCountTime(String countTime) {
      this.countTime = countTime;
      return this;
    }

    public void unsetCountTime() {
      this.countTime = null;
    }

    /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCountTime() {
      return this.countTime != null;
    }

    public void setCountTimeIsSet(boolean value) {
      if (!value) {
        this.countTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT_TIME:
        if (value == null) {
          unsetCountTime();
        } else {
          setCountTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT_TIME:
        return getCountTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT_TIME:
        return isSetCountTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyReport_args)
        return this.equals((partnerDailyReport_args)that);
      return false;
    }

    public boolean equals(partnerDailyReport_args that) {
      if (that == null)
        return false;

      boolean this_present_countTime = true && this.isSetCountTime();
      boolean that_present_countTime = true && that.isSetCountTime();
      if (this_present_countTime || that_present_countTime) {
        if (!(this_present_countTime && that_present_countTime))
          return false;
        if (!this.countTime.equals(that.countTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyReport_args(");
      boolean first = true;

      sb.append("countTime:");
      if (this.countTime == null) {
        sb.append("null");
      } else {
        sb.append(this.countTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyReport_argsStandardSchemeFactory implements SchemeFactory {
      public partnerDailyReport_argsStandardScheme getScheme() {
        return new partnerDailyReport_argsStandardScheme();
      }
    }

    private static class partnerDailyReport_argsStandardScheme extends StandardScheme<partnerDailyReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countTime = iprot.readString();
                struct.setCountTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countTime != null) {
          oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
          oprot.writeString(struct.countTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyReport_argsTupleSchemeFactory implements SchemeFactory {
      public partnerDailyReport_argsTupleScheme getScheme() {
        return new partnerDailyReport_argsTupleScheme();
      }
    }

    private static class partnerDailyReport_argsTupleScheme extends TupleScheme<partnerDailyReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCountTime()) {
          oprot.writeString(struct.countTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.countTime = iprot.readString();
          struct.setCountTimeIsSet(true);
        }
      }
    }

  }

  public static class partnerDailyReport_result implements org.apache.thrift.TBase<partnerDailyReport_result, partnerDailyReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<partnerDailyReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partnerDailyReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partnerDailyReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partnerDailyReport_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partnerDailyReport_result.class, metaDataMap);
    }

    public partnerDailyReport_result() {
    }

    public partnerDailyReport_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partnerDailyReport_result(partnerDailyReport_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public partnerDailyReport_result deepCopy() {
      return new partnerDailyReport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public partnerDailyReport_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partnerDailyReport_result)
        return this.equals((partnerDailyReport_result)that);
      return false;
    }

    public boolean equals(partnerDailyReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(partnerDailyReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partnerDailyReport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partnerDailyReport_resultStandardSchemeFactory implements SchemeFactory {
      public partnerDailyReport_resultStandardScheme getScheme() {
        return new partnerDailyReport_resultStandardScheme();
      }
    }

    private static class partnerDailyReport_resultStandardScheme extends StandardScheme<partnerDailyReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partnerDailyReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partnerDailyReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partnerDailyReport_resultTupleSchemeFactory implements SchemeFactory {
      public partnerDailyReport_resultTupleScheme getScheme() {
        return new partnerDailyReport_resultTupleScheme();
      }
    }

    private static class partnerDailyReport_resultTupleScheme extends TupleScheme<partnerDailyReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partnerDailyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partnerDailyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTotalTicknumByDay_args implements org.apache.thrift.TBase<getTotalTicknumByDay_args, getTotalTicknumByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalTicknumByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalTicknumByDay_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalTicknumByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalTicknumByDay_argsTupleSchemeFactory());
    }

    public String date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalTicknumByDay_args.class, metaDataMap);
    }

    public getTotalTicknumByDay_args() {
    }

    public getTotalTicknumByDay_args(
      String date)
    {
      this();
      this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalTicknumByDay_args(getTotalTicknumByDay_args other) {
      if (other.isSetDate()) {
        this.date = other.date;
      }
    }

    public getTotalTicknumByDay_args deepCopy() {
      return new getTotalTicknumByDay_args(this);
    }

    @Override
    public void clear() {
      this.date = null;
    }

    public String getDate() {
      return this.date;
    }

    public getTotalTicknumByDay_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalTicknumByDay_args)
        return this.equals((getTotalTicknumByDay_args)that);
      return false;
    }

    public boolean equals(getTotalTicknumByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalTicknumByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalTicknumByDay_args(");
      boolean first = true;

      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalTicknumByDay_argsStandardSchemeFactory implements SchemeFactory {
      public getTotalTicknumByDay_argsStandardScheme getScheme() {
        return new getTotalTicknumByDay_argsStandardScheme();
      }
    }

    private static class getTotalTicknumByDay_argsStandardScheme extends StandardScheme<getTotalTicknumByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalTicknumByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalTicknumByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalTicknumByDay_argsTupleSchemeFactory implements SchemeFactory {
      public getTotalTicknumByDay_argsTupleScheme getScheme() {
        return new getTotalTicknumByDay_argsTupleScheme();
      }
    }

    private static class getTotalTicknumByDay_argsTupleScheme extends TupleScheme<getTotalTicknumByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalTicknumByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalTicknumByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class getTotalTicknumByDay_result implements org.apache.thrift.TBase<getTotalTicknumByDay_result, getTotalTicknumByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalTicknumByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalTicknumByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTotalTicknumByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTotalTicknumByDay_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalTicknumByDay_result.class, metaDataMap);
    }

    public getTotalTicknumByDay_result() {
    }

    public getTotalTicknumByDay_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalTicknumByDay_result(getTotalTicknumByDay_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalTicknumByDay_result deepCopy() {
      return new getTotalTicknumByDay_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalTicknumByDay_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalTicknumByDay_result)
        return this.equals((getTotalTicknumByDay_result)that);
      return false;
    }

    public boolean equals(getTotalTicknumByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTotalTicknumByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTotalTicknumByDay_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalTicknumByDay_resultStandardSchemeFactory implements SchemeFactory {
      public getTotalTicknumByDay_resultStandardScheme getScheme() {
        return new getTotalTicknumByDay_resultStandardScheme();
      }
    }

    private static class getTotalTicknumByDay_resultStandardScheme extends StandardScheme<getTotalTicknumByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalTicknumByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalTicknumByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalTicknumByDay_resultTupleSchemeFactory implements SchemeFactory {
      public getTotalTicknumByDay_resultTupleScheme getScheme() {
        return new getTotalTicknumByDay_resultTupleScheme();
      }
    }

    private static class getTotalTicknumByDay_resultTupleScheme extends TupleScheme<getTotalTicknumByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalTicknumByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalTicknumByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateWinResultInfo_args implements org.apache.thrift.TBase<updateWinResultInfo_args, updateWinResultInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWinResultInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWinResultInfo_args");

    private static final org.apache.thrift.protocol.TField WINNING_ORDER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("winningOrderInfos", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWinResultInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWinResultInfo_argsTupleSchemeFactory());
    }

    public List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINNING_ORDER_INFOS((short)1, "winningOrderInfos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINNING_ORDER_INFOS
            return WINNING_ORDER_INFOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINNING_ORDER_INFOS, new org.apache.thrift.meta_data.FieldMetaData("winningOrderInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cqfc.protocol.ticketwinning.WinningOrderInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWinResultInfo_args.class, metaDataMap);
    }

    public updateWinResultInfo_args() {
    }

    public updateWinResultInfo_args(
      List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos)
    {
      this();
      this.winningOrderInfos = winningOrderInfos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWinResultInfo_args(updateWinResultInfo_args other) {
      if (other.isSetWinningOrderInfos()) {
        List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> __this__winningOrderInfos = new ArrayList<com.cqfc.protocol.ticketwinning.WinningOrderInfo>(other.winningOrderInfos.size());
        for (com.cqfc.protocol.ticketwinning.WinningOrderInfo other_element : other.winningOrderInfos) {
          __this__winningOrderInfos.add(new com.cqfc.protocol.ticketwinning.WinningOrderInfo(other_element));
        }
        this.winningOrderInfos = __this__winningOrderInfos;
      }
    }

    public updateWinResultInfo_args deepCopy() {
      return new updateWinResultInfo_args(this);
    }

    @Override
    public void clear() {
      this.winningOrderInfos = null;
    }

    public int getWinningOrderInfosSize() {
      return (this.winningOrderInfos == null) ? 0 : this.winningOrderInfos.size();
    }

    public java.util.Iterator<com.cqfc.protocol.ticketwinning.WinningOrderInfo> getWinningOrderInfosIterator() {
      return (this.winningOrderInfos == null) ? null : this.winningOrderInfos.iterator();
    }

    public void addToWinningOrderInfos(com.cqfc.protocol.ticketwinning.WinningOrderInfo elem) {
      if (this.winningOrderInfos == null) {
        this.winningOrderInfos = new ArrayList<com.cqfc.protocol.ticketwinning.WinningOrderInfo>();
      }
      this.winningOrderInfos.add(elem);
    }

    public List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> getWinningOrderInfos() {
      return this.winningOrderInfos;
    }

    public updateWinResultInfo_args setWinningOrderInfos(List<com.cqfc.protocol.ticketwinning.WinningOrderInfo> winningOrderInfos) {
      this.winningOrderInfos = winningOrderInfos;
      return this;
    }

    public void unsetWinningOrderInfos() {
      this.winningOrderInfos = null;
    }

    /** Returns true if field winningOrderInfos is set (has been assigned a value) and false otherwise */
    public boolean isSetWinningOrderInfos() {
      return this.winningOrderInfos != null;
    }

    public void setWinningOrderInfosIsSet(boolean value) {
      if (!value) {
        this.winningOrderInfos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINNING_ORDER_INFOS:
        if (value == null) {
          unsetWinningOrderInfos();
        } else {
          setWinningOrderInfos((List<com.cqfc.protocol.ticketwinning.WinningOrderInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINNING_ORDER_INFOS:
        return getWinningOrderInfos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINNING_ORDER_INFOS:
        return isSetWinningOrderInfos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWinResultInfo_args)
        return this.equals((updateWinResultInfo_args)that);
      return false;
    }

    public boolean equals(updateWinResultInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_winningOrderInfos = true && this.isSetWinningOrderInfos();
      boolean that_present_winningOrderInfos = true && that.isSetWinningOrderInfos();
      if (this_present_winningOrderInfos || that_present_winningOrderInfos) {
        if (!(this_present_winningOrderInfos && that_present_winningOrderInfos))
          return false;
        if (!this.winningOrderInfos.equals(that.winningOrderInfos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWinResultInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWinningOrderInfos()).compareTo(other.isSetWinningOrderInfos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWinningOrderInfos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winningOrderInfos, other.winningOrderInfos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWinResultInfo_args(");
      boolean first = true;

      sb.append("winningOrderInfos:");
      if (this.winningOrderInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.winningOrderInfos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWinResultInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateWinResultInfo_argsStandardScheme getScheme() {
        return new updateWinResultInfo_argsStandardScheme();
      }
    }

    private static class updateWinResultInfo_argsStandardScheme extends StandardScheme<updateWinResultInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWinResultInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINNING_ORDER_INFOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.winningOrderInfos = new ArrayList<com.cqfc.protocol.ticketwinning.WinningOrderInfo>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    com.cqfc.protocol.ticketwinning.WinningOrderInfo _elem90;
                    _elem90 = new com.cqfc.protocol.ticketwinning.WinningOrderInfo();
                    _elem90.read(iprot);
                    struct.winningOrderInfos.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setWinningOrderInfosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWinResultInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.winningOrderInfos != null) {
          oprot.writeFieldBegin(WINNING_ORDER_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.winningOrderInfos.size()));
            for (com.cqfc.protocol.ticketwinning.WinningOrderInfo _iter91 : struct.winningOrderInfos)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWinResultInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateWinResultInfo_argsTupleScheme getScheme() {
        return new updateWinResultInfo_argsTupleScheme();
      }
    }

    private static class updateWinResultInfo_argsTupleScheme extends TupleScheme<updateWinResultInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWinResultInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWinningOrderInfos()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWinningOrderInfos()) {
          {
            oprot.writeI32(struct.winningOrderInfos.size());
            for (com.cqfc.protocol.ticketwinning.WinningOrderInfo _iter92 : struct.winningOrderInfos)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWinResultInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.winningOrderInfos = new ArrayList<com.cqfc.protocol.ticketwinning.WinningOrderInfo>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              com.cqfc.protocol.ticketwinning.WinningOrderInfo _elem95;
              _elem95 = new com.cqfc.protocol.ticketwinning.WinningOrderInfo();
              _elem95.read(iprot);
              struct.winningOrderInfos.add(_elem95);
            }
          }
          struct.setWinningOrderInfosIsSet(true);
        }
      }
    }

  }

  public static class updateWinResultInfo_result implements org.apache.thrift.TBase<updateWinResultInfo_result, updateWinResultInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWinResultInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWinResultInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWinResultInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWinResultInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWinResultInfo_result.class, metaDataMap);
    }

    public updateWinResultInfo_result() {
    }

    public updateWinResultInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWinResultInfo_result(updateWinResultInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateWinResultInfo_result deepCopy() {
      return new updateWinResultInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateWinResultInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWinResultInfo_result)
        return this.equals((updateWinResultInfo_result)that);
      return false;
    }

    public boolean equals(updateWinResultInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWinResultInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWinResultInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWinResultInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateWinResultInfo_resultStandardScheme getScheme() {
        return new updateWinResultInfo_resultStandardScheme();
      }
    }

    private static class updateWinResultInfo_resultStandardScheme extends StandardScheme<updateWinResultInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWinResultInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWinResultInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWinResultInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateWinResultInfo_resultTupleScheme getScheme() {
        return new updateWinResultInfo_resultTupleScheme();
      }
    }

    private static class updateWinResultInfo_resultTupleScheme extends TupleScheme<updateWinResultInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWinResultInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWinResultInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDailySaleDetails_args implements org.apache.thrift.TBase<getDailySaleDetails_args, getDailySaleDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDailySaleDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailySaleDetails_args");

    private static final org.apache.thrift.protocol.TField DAILY_SALE_AND_CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("dailySaleAndCharge", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailySaleDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailySaleDetails_argsTupleSchemeFactory());
    }

    public DailySaleAndCharge dailySaleAndCharge; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAILY_SALE_AND_CHARGE((short)1, "dailySaleAndCharge"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAILY_SALE_AND_CHARGE
            return DAILY_SALE_AND_CHARGE;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAILY_SALE_AND_CHARGE, new org.apache.thrift.meta_data.FieldMetaData("dailySaleAndCharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailySaleAndCharge.class)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailySaleDetails_args.class, metaDataMap);
    }

    public getDailySaleDetails_args() {
    }

    public getDailySaleDetails_args(
      DailySaleAndCharge dailySaleAndCharge,
      int pageNum,
      int pageSize)
    {
      this();
      this.dailySaleAndCharge = dailySaleAndCharge;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailySaleDetails_args(getDailySaleDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDailySaleAndCharge()) {
        this.dailySaleAndCharge = new DailySaleAndCharge(other.dailySaleAndCharge);
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public getDailySaleDetails_args deepCopy() {
      return new getDailySaleDetails_args(this);
    }

    @Override
    public void clear() {
      this.dailySaleAndCharge = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public DailySaleAndCharge getDailySaleAndCharge() {
      return this.dailySaleAndCharge;
    }

    public getDailySaleDetails_args setDailySaleAndCharge(DailySaleAndCharge dailySaleAndCharge) {
      this.dailySaleAndCharge = dailySaleAndCharge;
      return this;
    }

    public void unsetDailySaleAndCharge() {
      this.dailySaleAndCharge = null;
    }

    /** Returns true if field dailySaleAndCharge is set (has been assigned a value) and false otherwise */
    public boolean isSetDailySaleAndCharge() {
      return this.dailySaleAndCharge != null;
    }

    public void setDailySaleAndChargeIsSet(boolean value) {
      if (!value) {
        this.dailySaleAndCharge = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getDailySaleDetails_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getDailySaleDetails_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAILY_SALE_AND_CHARGE:
        if (value == null) {
          unsetDailySaleAndCharge();
        } else {
          setDailySaleAndCharge((DailySaleAndCharge)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAILY_SALE_AND_CHARGE:
        return getDailySaleAndCharge();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAILY_SALE_AND_CHARGE:
        return isSetDailySaleAndCharge();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailySaleDetails_args)
        return this.equals((getDailySaleDetails_args)that);
      return false;
    }

    public boolean equals(getDailySaleDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_dailySaleAndCharge = true && this.isSetDailySaleAndCharge();
      boolean that_present_dailySaleAndCharge = true && that.isSetDailySaleAndCharge();
      if (this_present_dailySaleAndCharge || that_present_dailySaleAndCharge) {
        if (!(this_present_dailySaleAndCharge && that_present_dailySaleAndCharge))
          return false;
        if (!this.dailySaleAndCharge.equals(that.dailySaleAndCharge))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailySaleDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDailySaleAndCharge()).compareTo(other.isSetDailySaleAndCharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDailySaleAndCharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailySaleAndCharge, other.dailySaleAndCharge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailySaleDetails_args(");
      boolean first = true;

      sb.append("dailySaleAndCharge:");
      if (this.dailySaleAndCharge == null) {
        sb.append("null");
      } else {
        sb.append(this.dailySaleAndCharge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dailySaleAndCharge != null) {
        dailySaleAndCharge.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailySaleDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getDailySaleDetails_argsStandardScheme getScheme() {
        return new getDailySaleDetails_argsStandardScheme();
      }
    }

    private static class getDailySaleDetails_argsStandardScheme extends StandardScheme<getDailySaleDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailySaleDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAILY_SALE_AND_CHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dailySaleAndCharge = new DailySaleAndCharge();
                struct.dailySaleAndCharge.read(iprot);
                struct.setDailySaleAndChargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailySaleDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dailySaleAndCharge != null) {
          oprot.writeFieldBegin(DAILY_SALE_AND_CHARGE_FIELD_DESC);
          struct.dailySaleAndCharge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailySaleDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getDailySaleDetails_argsTupleScheme getScheme() {
        return new getDailySaleDetails_argsTupleScheme();
      }
    }

    private static class getDailySaleDetails_argsTupleScheme extends TupleScheme<getDailySaleDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailySaleDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDailySaleAndCharge()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDailySaleAndCharge()) {
          struct.dailySaleAndCharge.write(oprot);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailySaleDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dailySaleAndCharge = new DailySaleAndCharge();
          struct.dailySaleAndCharge.read(iprot);
          struct.setDailySaleAndChargeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getDailySaleDetails_result implements org.apache.thrift.TBase<getDailySaleDetails_result, getDailySaleDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDailySaleDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDailySaleDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDailySaleDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDailySaleDetails_resultTupleSchemeFactory());
    }

    public PcDaySaleDetails success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PcDaySaleDetails.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDailySaleDetails_result.class, metaDataMap);
    }

    public getDailySaleDetails_result() {
    }

    public getDailySaleDetails_result(
      PcDaySaleDetails success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDailySaleDetails_result(getDailySaleDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new PcDaySaleDetails(other.success);
      }
    }

    public getDailySaleDetails_result deepCopy() {
      return new getDailySaleDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PcDaySaleDetails getSuccess() {
      return this.success;
    }

    public getDailySaleDetails_result setSuccess(PcDaySaleDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PcDaySaleDetails)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDailySaleDetails_result)
        return this.equals((getDailySaleDetails_result)that);
      return false;
    }

    public boolean equals(getDailySaleDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDailySaleDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDailySaleDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDailySaleDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getDailySaleDetails_resultStandardScheme getScheme() {
        return new getDailySaleDetails_resultStandardScheme();
      }
    }

    private static class getDailySaleDetails_resultStandardScheme extends StandardScheme<getDailySaleDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDailySaleDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PcDaySaleDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDailySaleDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDailySaleDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getDailySaleDetails_resultTupleScheme getScheme() {
        return new getDailySaleDetails_resultTupleScheme();
      }
    }

    private static class getDailySaleDetails_resultTupleScheme extends TupleScheme<getDailySaleDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDailySaleDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDailySaleDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PcDaySaleDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
