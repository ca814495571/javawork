/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TicketIssueService {

  public interface Iface {

    public ResultMessage sendTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException;

    public ResultMessage testHttpRequest(String queryString) throws org.apache.thrift.TException;

    public ResultMessage checkTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException;

    public com.cqfc.protocol.lotteryissue.LotteryDrawResult findLotteryDrawResult(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public FucaiCount getFucaiCount(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public FucaiCount getFucaiCountByDay(String date) throws org.apache.thrift.TException;

    public ResultMessage queryTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException;

    public UserAccountInfo getUserAccountInfo(String parmType, String value) throws org.apache.thrift.TException;

    public List<FucaiPartnerInfo> getFucaiPartnerInfoList() throws org.apache.thrift.TException;

    public String pushDrawResult(String lotteryId, String issueNo, String msg) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendTicket(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void testHttpRequest(String queryString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkTicket(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findLotteryDrawResult(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFucaiCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFucaiCountByDay(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTicket(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserAccountInfo(String parmType, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFucaiPartnerInfoList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pushDrawResult(String lotteryId, String issueNo, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultMessage sendTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException
    {
      send_sendTicket(outTicketOrder);
      return recv_sendTicket();
    }

    public void send_sendTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException
    {
      sendTicket_args args = new sendTicket_args();
      args.setOutTicketOrder(outTicketOrder);
      sendBase("sendTicket", args);
    }

    public ResultMessage recv_sendTicket() throws org.apache.thrift.TException
    {
      sendTicket_result result = new sendTicket_result();
      receiveBase(result, "sendTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTicket failed: unknown result");
    }

    public ResultMessage testHttpRequest(String queryString) throws org.apache.thrift.TException
    {
      send_testHttpRequest(queryString);
      return recv_testHttpRequest();
    }

    public void send_testHttpRequest(String queryString) throws org.apache.thrift.TException
    {
      testHttpRequest_args args = new testHttpRequest_args();
      args.setQueryString(queryString);
      sendBase("testHttpRequest", args);
    }

    public ResultMessage recv_testHttpRequest() throws org.apache.thrift.TException
    {
      testHttpRequest_result result = new testHttpRequest_result();
      receiveBase(result, "testHttpRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testHttpRequest failed: unknown result");
    }

    public ResultMessage checkTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException
    {
      send_checkTicket(outTicketOrder);
      return recv_checkTicket();
    }

    public void send_checkTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException
    {
      checkTicket_args args = new checkTicket_args();
      args.setOutTicketOrder(outTicketOrder);
      sendBase("checkTicket", args);
    }

    public ResultMessage recv_checkTicket() throws org.apache.thrift.TException
    {
      checkTicket_result result = new checkTicket_result();
      receiveBase(result, "checkTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkTicket failed: unknown result");
    }

    public com.cqfc.protocol.lotteryissue.LotteryDrawResult findLotteryDrawResult(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_findLotteryDrawResult(lotteryId, issueNo);
      return recv_findLotteryDrawResult();
    }

    public void send_findLotteryDrawResult(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      findLotteryDrawResult_args args = new findLotteryDrawResult_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("findLotteryDrawResult", args);
    }

    public com.cqfc.protocol.lotteryissue.LotteryDrawResult recv_findLotteryDrawResult() throws org.apache.thrift.TException
    {
      findLotteryDrawResult_result result = new findLotteryDrawResult_result();
      receiveBase(result, "findLotteryDrawResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLotteryDrawResult failed: unknown result");
    }

    public FucaiCount getFucaiCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getFucaiCount(lotteryId, issueNo);
      return recv_getFucaiCount();
    }

    public void send_getFucaiCount(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getFucaiCount_args args = new getFucaiCount_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getFucaiCount", args);
    }

    public FucaiCount recv_getFucaiCount() throws org.apache.thrift.TException
    {
      getFucaiCount_result result = new getFucaiCount_result();
      receiveBase(result, "getFucaiCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFucaiCount failed: unknown result");
    }

    public FucaiCount getFucaiCountByDay(String date) throws org.apache.thrift.TException
    {
      send_getFucaiCountByDay(date);
      return recv_getFucaiCountByDay();
    }

    public void send_getFucaiCountByDay(String date) throws org.apache.thrift.TException
    {
      getFucaiCountByDay_args args = new getFucaiCountByDay_args();
      args.setDate(date);
      sendBase("getFucaiCountByDay", args);
    }

    public FucaiCount recv_getFucaiCountByDay() throws org.apache.thrift.TException
    {
      getFucaiCountByDay_result result = new getFucaiCountByDay_result();
      receiveBase(result, "getFucaiCountByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFucaiCountByDay failed: unknown result");
    }

    public ResultMessage queryTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException
    {
      send_queryTicket(outTicketOrder);
      return recv_queryTicket();
    }

    public void send_queryTicket(OutTicketOrder outTicketOrder) throws org.apache.thrift.TException
    {
      queryTicket_args args = new queryTicket_args();
      args.setOutTicketOrder(outTicketOrder);
      sendBase("queryTicket", args);
    }

    public ResultMessage recv_queryTicket() throws org.apache.thrift.TException
    {
      queryTicket_result result = new queryTicket_result();
      receiveBase(result, "queryTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTicket failed: unknown result");
    }

    public UserAccountInfo getUserAccountInfo(String parmType, String value) throws org.apache.thrift.TException
    {
      send_getUserAccountInfo(parmType, value);
      return recv_getUserAccountInfo();
    }

    public void send_getUserAccountInfo(String parmType, String value) throws org.apache.thrift.TException
    {
      getUserAccountInfo_args args = new getUserAccountInfo_args();
      args.setParmType(parmType);
      args.setValue(value);
      sendBase("getUserAccountInfo", args);
    }

    public UserAccountInfo recv_getUserAccountInfo() throws org.apache.thrift.TException
    {
      getUserAccountInfo_result result = new getUserAccountInfo_result();
      receiveBase(result, "getUserAccountInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserAccountInfo failed: unknown result");
    }

    public List<FucaiPartnerInfo> getFucaiPartnerInfoList() throws org.apache.thrift.TException
    {
      send_getFucaiPartnerInfoList();
      return recv_getFucaiPartnerInfoList();
    }

    public void send_getFucaiPartnerInfoList() throws org.apache.thrift.TException
    {
      getFucaiPartnerInfoList_args args = new getFucaiPartnerInfoList_args();
      sendBase("getFucaiPartnerInfoList", args);
    }

    public List<FucaiPartnerInfo> recv_getFucaiPartnerInfoList() throws org.apache.thrift.TException
    {
      getFucaiPartnerInfoList_result result = new getFucaiPartnerInfoList_result();
      receiveBase(result, "getFucaiPartnerInfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFucaiPartnerInfoList failed: unknown result");
    }

    public String pushDrawResult(String lotteryId, String issueNo, String msg) throws org.apache.thrift.TException
    {
      send_pushDrawResult(lotteryId, issueNo, msg);
      return recv_pushDrawResult();
    }

    public void send_pushDrawResult(String lotteryId, String issueNo, String msg) throws org.apache.thrift.TException
    {
      pushDrawResult_args args = new pushDrawResult_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      args.setMsg(msg);
      sendBase("pushDrawResult", args);
    }

    public String recv_pushDrawResult() throws org.apache.thrift.TException
    {
      pushDrawResult_result result = new pushDrawResult_result();
      receiveBase(result, "pushDrawResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushDrawResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendTicket(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTicket_call method_call = new sendTicket_call(outTicketOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTicket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OutTicketOrder outTicketOrder;
      public sendTicket_call(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outTicketOrder = outTicketOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTicket_args args = new sendTicket_args();
        args.setOutTicketOrder(outTicketOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTicket();
      }
    }

    public void testHttpRequest(String queryString, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testHttpRequest_call method_call = new testHttpRequest_call(queryString, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testHttpRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queryString;
      public testHttpRequest_call(String queryString, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryString = queryString;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testHttpRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testHttpRequest_args args = new testHttpRequest_args();
        args.setQueryString(queryString);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testHttpRequest();
      }
    }

    public void checkTicket(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkTicket_call method_call = new checkTicket_call(outTicketOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkTicket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OutTicketOrder outTicketOrder;
      public checkTicket_call(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outTicketOrder = outTicketOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkTicket_args args = new checkTicket_args();
        args.setOutTicketOrder(outTicketOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkTicket();
      }
    }

    public void findLotteryDrawResult(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLotteryDrawResult_call method_call = new findLotteryDrawResult_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLotteryDrawResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public findLotteryDrawResult_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLotteryDrawResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLotteryDrawResult_args args = new findLotteryDrawResult_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.cqfc.protocol.lotteryissue.LotteryDrawResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLotteryDrawResult();
      }
    }

    public void getFucaiCount(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFucaiCount_call method_call = new getFucaiCount_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFucaiCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public getFucaiCount_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFucaiCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFucaiCount_args args = new getFucaiCount_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FucaiCount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFucaiCount();
      }
    }

    public void getFucaiCountByDay(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFucaiCountByDay_call method_call = new getFucaiCountByDay_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFucaiCountByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String date;
      public getFucaiCountByDay_call(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFucaiCountByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFucaiCountByDay_args args = new getFucaiCountByDay_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FucaiCount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFucaiCountByDay();
      }
    }

    public void queryTicket(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTicket_call method_call = new queryTicket_call(outTicketOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTicket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OutTicketOrder outTicketOrder;
      public queryTicket_call(OutTicketOrder outTicketOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outTicketOrder = outTicketOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTicket_args args = new queryTicket_args();
        args.setOutTicketOrder(outTicketOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTicket();
      }
    }

    public void getUserAccountInfo(String parmType, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserAccountInfo_call method_call = new getUserAccountInfo_call(parmType, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserAccountInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String parmType;
      private String value;
      public getUserAccountInfo_call(String parmType, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parmType = parmType;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserAccountInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserAccountInfo_args args = new getUserAccountInfo_args();
        args.setParmType(parmType);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserAccountInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserAccountInfo();
      }
    }

    public void getFucaiPartnerInfoList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFucaiPartnerInfoList_call method_call = new getFucaiPartnerInfoList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFucaiPartnerInfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getFucaiPartnerInfoList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFucaiPartnerInfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFucaiPartnerInfoList_args args = new getFucaiPartnerInfoList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FucaiPartnerInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFucaiPartnerInfoList();
      }
    }

    public void pushDrawResult(String lotteryId, String issueNo, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushDrawResult_call method_call = new pushDrawResult_call(lotteryId, issueNo, msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushDrawResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      private String msg;
      public pushDrawResult_call(String lotteryId, String issueNo, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushDrawResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushDrawResult_args args = new pushDrawResult_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushDrawResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendTicket", new sendTicket());
      processMap.put("testHttpRequest", new testHttpRequest());
      processMap.put("checkTicket", new checkTicket());
      processMap.put("findLotteryDrawResult", new findLotteryDrawResult());
      processMap.put("getFucaiCount", new getFucaiCount());
      processMap.put("getFucaiCountByDay", new getFucaiCountByDay());
      processMap.put("queryTicket", new queryTicket());
      processMap.put("getUserAccountInfo", new getUserAccountInfo());
      processMap.put("getFucaiPartnerInfoList", new getFucaiPartnerInfoList());
      processMap.put("pushDrawResult", new pushDrawResult());
      return processMap;
    }

    public static class sendTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTicket_args> {
      public sendTicket() {
        super("sendTicket");
      }

      public sendTicket_args getEmptyArgsInstance() {
        return new sendTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendTicket_result getResult(I iface, sendTicket_args args) throws org.apache.thrift.TException {
        sendTicket_result result = new sendTicket_result();
        result.success = iface.sendTicket(args.outTicketOrder);
        return result;
      }
    }

    public static class testHttpRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testHttpRequest_args> {
      public testHttpRequest() {
        super("testHttpRequest");
      }

      public testHttpRequest_args getEmptyArgsInstance() {
        return new testHttpRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public testHttpRequest_result getResult(I iface, testHttpRequest_args args) throws org.apache.thrift.TException {
        testHttpRequest_result result = new testHttpRequest_result();
        result.success = iface.testHttpRequest(args.queryString);
        return result;
      }
    }

    public static class checkTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkTicket_args> {
      public checkTicket() {
        super("checkTicket");
      }

      public checkTicket_args getEmptyArgsInstance() {
        return new checkTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkTicket_result getResult(I iface, checkTicket_args args) throws org.apache.thrift.TException {
        checkTicket_result result = new checkTicket_result();
        result.success = iface.checkTicket(args.outTicketOrder);
        return result;
      }
    }

    public static class findLotteryDrawResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLotteryDrawResult_args> {
      public findLotteryDrawResult() {
        super("findLotteryDrawResult");
      }

      public findLotteryDrawResult_args getEmptyArgsInstance() {
        return new findLotteryDrawResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findLotteryDrawResult_result getResult(I iface, findLotteryDrawResult_args args) throws org.apache.thrift.TException {
        findLotteryDrawResult_result result = new findLotteryDrawResult_result();
        result.success = iface.findLotteryDrawResult(args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getFucaiCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFucaiCount_args> {
      public getFucaiCount() {
        super("getFucaiCount");
      }

      public getFucaiCount_args getEmptyArgsInstance() {
        return new getFucaiCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFucaiCount_result getResult(I iface, getFucaiCount_args args) throws org.apache.thrift.TException {
        getFucaiCount_result result = new getFucaiCount_result();
        result.success = iface.getFucaiCount(args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getFucaiCountByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFucaiCountByDay_args> {
      public getFucaiCountByDay() {
        super("getFucaiCountByDay");
      }

      public getFucaiCountByDay_args getEmptyArgsInstance() {
        return new getFucaiCountByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFucaiCountByDay_result getResult(I iface, getFucaiCountByDay_args args) throws org.apache.thrift.TException {
        getFucaiCountByDay_result result = new getFucaiCountByDay_result();
        result.success = iface.getFucaiCountByDay(args.date);
        return result;
      }
    }

    public static class queryTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTicket_args> {
      public queryTicket() {
        super("queryTicket");
      }

      public queryTicket_args getEmptyArgsInstance() {
        return new queryTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTicket_result getResult(I iface, queryTicket_args args) throws org.apache.thrift.TException {
        queryTicket_result result = new queryTicket_result();
        result.success = iface.queryTicket(args.outTicketOrder);
        return result;
      }
    }

    public static class getUserAccountInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserAccountInfo_args> {
      public getUserAccountInfo() {
        super("getUserAccountInfo");
      }

      public getUserAccountInfo_args getEmptyArgsInstance() {
        return new getUserAccountInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserAccountInfo_result getResult(I iface, getUserAccountInfo_args args) throws org.apache.thrift.TException {
        getUserAccountInfo_result result = new getUserAccountInfo_result();
        result.success = iface.getUserAccountInfo(args.parmType, args.value);
        return result;
      }
    }

    public static class getFucaiPartnerInfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFucaiPartnerInfoList_args> {
      public getFucaiPartnerInfoList() {
        super("getFucaiPartnerInfoList");
      }

      public getFucaiPartnerInfoList_args getEmptyArgsInstance() {
        return new getFucaiPartnerInfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFucaiPartnerInfoList_result getResult(I iface, getFucaiPartnerInfoList_args args) throws org.apache.thrift.TException {
        getFucaiPartnerInfoList_result result = new getFucaiPartnerInfoList_result();
        result.success = iface.getFucaiPartnerInfoList();
        return result;
      }
    }

    public static class pushDrawResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushDrawResult_args> {
      public pushDrawResult() {
        super("pushDrawResult");
      }

      public pushDrawResult_args getEmptyArgsInstance() {
        return new pushDrawResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushDrawResult_result getResult(I iface, pushDrawResult_args args) throws org.apache.thrift.TException {
        pushDrawResult_result result = new pushDrawResult_result();
        result.success = iface.pushDrawResult(args.lotteryId, args.issueNo, args.msg);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendTicket", new sendTicket());
      processMap.put("testHttpRequest", new testHttpRequest());
      processMap.put("checkTicket", new checkTicket());
      processMap.put("findLotteryDrawResult", new findLotteryDrawResult());
      processMap.put("getFucaiCount", new getFucaiCount());
      processMap.put("getFucaiCountByDay", new getFucaiCountByDay());
      processMap.put("queryTicket", new queryTicket());
      processMap.put("getUserAccountInfo", new getUserAccountInfo());
      processMap.put("getFucaiPartnerInfoList", new getFucaiPartnerInfoList());
      processMap.put("pushDrawResult", new pushDrawResult());
      return processMap;
    }

    public static class sendTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTicket_args, ResultMessage> {
      public sendTicket() {
        super("sendTicket");
      }

      public sendTicket_args getEmptyArgsInstance() {
        return new sendTicket_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            sendTicket_result result = new sendTicket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendTicket_result result = new sendTicket_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendTicket_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.sendTicket(args.outTicketOrder,resultHandler);
      }
    }

    public static class testHttpRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testHttpRequest_args, ResultMessage> {
      public testHttpRequest() {
        super("testHttpRequest");
      }

      public testHttpRequest_args getEmptyArgsInstance() {
        return new testHttpRequest_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            testHttpRequest_result result = new testHttpRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            testHttpRequest_result result = new testHttpRequest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testHttpRequest_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.testHttpRequest(args.queryString,resultHandler);
      }
    }

    public static class checkTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkTicket_args, ResultMessage> {
      public checkTicket() {
        super("checkTicket");
      }

      public checkTicket_args getEmptyArgsInstance() {
        return new checkTicket_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            checkTicket_result result = new checkTicket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkTicket_result result = new checkTicket_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkTicket_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.checkTicket(args.outTicketOrder,resultHandler);
      }
    }

    public static class findLotteryDrawResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLotteryDrawResult_args, com.cqfc.protocol.lotteryissue.LotteryDrawResult> {
      public findLotteryDrawResult() {
        super("findLotteryDrawResult");
      }

      public findLotteryDrawResult_args getEmptyArgsInstance() {
        return new findLotteryDrawResult_args();
      }

      public AsyncMethodCallback<com.cqfc.protocol.lotteryissue.LotteryDrawResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.cqfc.protocol.lotteryissue.LotteryDrawResult>() { 
          public void onComplete(com.cqfc.protocol.lotteryissue.LotteryDrawResult o) {
            findLotteryDrawResult_result result = new findLotteryDrawResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findLotteryDrawResult_result result = new findLotteryDrawResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLotteryDrawResult_args args, org.apache.thrift.async.AsyncMethodCallback<com.cqfc.protocol.lotteryissue.LotteryDrawResult> resultHandler) throws TException {
        iface.findLotteryDrawResult(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getFucaiCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFucaiCount_args, FucaiCount> {
      public getFucaiCount() {
        super("getFucaiCount");
      }

      public getFucaiCount_args getEmptyArgsInstance() {
        return new getFucaiCount_args();
      }

      public AsyncMethodCallback<FucaiCount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FucaiCount>() { 
          public void onComplete(FucaiCount o) {
            getFucaiCount_result result = new getFucaiCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFucaiCount_result result = new getFucaiCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFucaiCount_args args, org.apache.thrift.async.AsyncMethodCallback<FucaiCount> resultHandler) throws TException {
        iface.getFucaiCount(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getFucaiCountByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFucaiCountByDay_args, FucaiCount> {
      public getFucaiCountByDay() {
        super("getFucaiCountByDay");
      }

      public getFucaiCountByDay_args getEmptyArgsInstance() {
        return new getFucaiCountByDay_args();
      }

      public AsyncMethodCallback<FucaiCount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FucaiCount>() { 
          public void onComplete(FucaiCount o) {
            getFucaiCountByDay_result result = new getFucaiCountByDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFucaiCountByDay_result result = new getFucaiCountByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFucaiCountByDay_args args, org.apache.thrift.async.AsyncMethodCallback<FucaiCount> resultHandler) throws TException {
        iface.getFucaiCountByDay(args.date,resultHandler);
      }
    }

    public static class queryTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTicket_args, ResultMessage> {
      public queryTicket() {
        super("queryTicket");
      }

      public queryTicket_args getEmptyArgsInstance() {
        return new queryTicket_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            queryTicket_result result = new queryTicket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTicket_result result = new queryTicket_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTicket_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.queryTicket(args.outTicketOrder,resultHandler);
      }
    }

    public static class getUserAccountInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserAccountInfo_args, UserAccountInfo> {
      public getUserAccountInfo() {
        super("getUserAccountInfo");
      }

      public getUserAccountInfo_args getEmptyArgsInstance() {
        return new getUserAccountInfo_args();
      }

      public AsyncMethodCallback<UserAccountInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserAccountInfo>() { 
          public void onComplete(UserAccountInfo o) {
            getUserAccountInfo_result result = new getUserAccountInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserAccountInfo_result result = new getUserAccountInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserAccountInfo_args args, org.apache.thrift.async.AsyncMethodCallback<UserAccountInfo> resultHandler) throws TException {
        iface.getUserAccountInfo(args.parmType, args.value,resultHandler);
      }
    }

    public static class getFucaiPartnerInfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFucaiPartnerInfoList_args, List<FucaiPartnerInfo>> {
      public getFucaiPartnerInfoList() {
        super("getFucaiPartnerInfoList");
      }

      public getFucaiPartnerInfoList_args getEmptyArgsInstance() {
        return new getFucaiPartnerInfoList_args();
      }

      public AsyncMethodCallback<List<FucaiPartnerInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FucaiPartnerInfo>>() { 
          public void onComplete(List<FucaiPartnerInfo> o) {
            getFucaiPartnerInfoList_result result = new getFucaiPartnerInfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFucaiPartnerInfoList_result result = new getFucaiPartnerInfoList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFucaiPartnerInfoList_args args, org.apache.thrift.async.AsyncMethodCallback<List<FucaiPartnerInfo>> resultHandler) throws TException {
        iface.getFucaiPartnerInfoList(resultHandler);
      }
    }

    public static class pushDrawResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushDrawResult_args, String> {
      public pushDrawResult() {
        super("pushDrawResult");
      }

      public pushDrawResult_args getEmptyArgsInstance() {
        return new pushDrawResult_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            pushDrawResult_result result = new pushDrawResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pushDrawResult_result result = new pushDrawResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pushDrawResult_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.pushDrawResult(args.lotteryId, args.issueNo, args.msg,resultHandler);
      }
    }

  }

  public static class sendTicket_args implements org.apache.thrift.TBase<sendTicket_args, sendTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTicket_args");

    private static final org.apache.thrift.protocol.TField OUT_TICKET_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("outTicketOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTicket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTicket_argsTupleSchemeFactory());
    }

    public OutTicketOrder outTicketOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUT_TICKET_ORDER((short)1, "outTicketOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUT_TICKET_ORDER
            return OUT_TICKET_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUT_TICKET_ORDER, new org.apache.thrift.meta_data.FieldMetaData("outTicketOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutTicketOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTicket_args.class, metaDataMap);
    }

    public sendTicket_args() {
    }

    public sendTicket_args(
      OutTicketOrder outTicketOrder)
    {
      this();
      this.outTicketOrder = outTicketOrder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTicket_args(sendTicket_args other) {
      if (other.isSetOutTicketOrder()) {
        this.outTicketOrder = new OutTicketOrder(other.outTicketOrder);
      }
    }

    public sendTicket_args deepCopy() {
      return new sendTicket_args(this);
    }

    @Override
    public void clear() {
      this.outTicketOrder = null;
    }

    public OutTicketOrder getOutTicketOrder() {
      return this.outTicketOrder;
    }

    public sendTicket_args setOutTicketOrder(OutTicketOrder outTicketOrder) {
      this.outTicketOrder = outTicketOrder;
      return this;
    }

    public void unsetOutTicketOrder() {
      this.outTicketOrder = null;
    }

    /** Returns true if field outTicketOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetOutTicketOrder() {
      return this.outTicketOrder != null;
    }

    public void setOutTicketOrderIsSet(boolean value) {
      if (!value) {
        this.outTicketOrder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUT_TICKET_ORDER:
        if (value == null) {
          unsetOutTicketOrder();
        } else {
          setOutTicketOrder((OutTicketOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUT_TICKET_ORDER:
        return getOutTicketOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUT_TICKET_ORDER:
        return isSetOutTicketOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTicket_args)
        return this.equals((sendTicket_args)that);
      return false;
    }

    public boolean equals(sendTicket_args that) {
      if (that == null)
        return false;

      boolean this_present_outTicketOrder = true && this.isSetOutTicketOrder();
      boolean that_present_outTicketOrder = true && that.isSetOutTicketOrder();
      if (this_present_outTicketOrder || that_present_outTicketOrder) {
        if (!(this_present_outTicketOrder && that_present_outTicketOrder))
          return false;
        if (!this.outTicketOrder.equals(that.outTicketOrder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutTicketOrder()).compareTo(other.isSetOutTicketOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutTicketOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outTicketOrder, other.outTicketOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTicket_args(");
      boolean first = true;

      sb.append("outTicketOrder:");
      if (this.outTicketOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.outTicketOrder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outTicketOrder != null) {
        outTicketOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTicket_argsStandardSchemeFactory implements SchemeFactory {
      public sendTicket_argsStandardScheme getScheme() {
        return new sendTicket_argsStandardScheme();
      }
    }

    private static class sendTicket_argsStandardScheme extends StandardScheme<sendTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUT_TICKET_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outTicketOrder = new OutTicketOrder();
                struct.outTicketOrder.read(iprot);
                struct.setOutTicketOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outTicketOrder != null) {
          oprot.writeFieldBegin(OUT_TICKET_ORDER_FIELD_DESC);
          struct.outTicketOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTicket_argsTupleSchemeFactory implements SchemeFactory {
      public sendTicket_argsTupleScheme getScheme() {
        return new sendTicket_argsTupleScheme();
      }
    }

    private static class sendTicket_argsTupleScheme extends TupleScheme<sendTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTicket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutTicketOrder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutTicketOrder()) {
          struct.outTicketOrder.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTicket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outTicketOrder = new OutTicketOrder();
          struct.outTicketOrder.read(iprot);
          struct.setOutTicketOrderIsSet(true);
        }
      }
    }

  }

  public static class sendTicket_result implements org.apache.thrift.TBase<sendTicket_result, sendTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTicket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTicket_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTicket_result.class, metaDataMap);
    }

    public sendTicket_result() {
    }

    public sendTicket_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTicket_result(sendTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public sendTicket_result deepCopy() {
      return new sendTicket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public sendTicket_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTicket_result)
        return this.equals((sendTicket_result)that);
      return false;
    }

    public boolean equals(sendTicket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTicket_resultStandardSchemeFactory implements SchemeFactory {
      public sendTicket_resultStandardScheme getScheme() {
        return new sendTicket_resultStandardScheme();
      }
    }

    private static class sendTicket_resultStandardScheme extends StandardScheme<sendTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTicket_resultTupleSchemeFactory implements SchemeFactory {
      public sendTicket_resultTupleScheme getScheme() {
        return new sendTicket_resultTupleScheme();
      }
    }

    private static class sendTicket_resultTupleScheme extends TupleScheme<sendTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTicket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTicket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class testHttpRequest_args implements org.apache.thrift.TBase<testHttpRequest_args, testHttpRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<testHttpRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testHttpRequest_args");

    private static final org.apache.thrift.protocol.TField QUERY_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("queryString", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testHttpRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testHttpRequest_argsTupleSchemeFactory());
    }

    public String queryString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_STRING((short)1, "queryString");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_STRING
            return QUERY_STRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_STRING, new org.apache.thrift.meta_data.FieldMetaData("queryString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testHttpRequest_args.class, metaDataMap);
    }

    public testHttpRequest_args() {
    }

    public testHttpRequest_args(
      String queryString)
    {
      this();
      this.queryString = queryString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testHttpRequest_args(testHttpRequest_args other) {
      if (other.isSetQueryString()) {
        this.queryString = other.queryString;
      }
    }

    public testHttpRequest_args deepCopy() {
      return new testHttpRequest_args(this);
    }

    @Override
    public void clear() {
      this.queryString = null;
    }

    public String getQueryString() {
      return this.queryString;
    }

    public testHttpRequest_args setQueryString(String queryString) {
      this.queryString = queryString;
      return this;
    }

    public void unsetQueryString() {
      this.queryString = null;
    }

    /** Returns true if field queryString is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryString() {
      return this.queryString != null;
    }

    public void setQueryStringIsSet(boolean value) {
      if (!value) {
        this.queryString = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_STRING:
        if (value == null) {
          unsetQueryString();
        } else {
          setQueryString((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_STRING:
        return getQueryString();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_STRING:
        return isSetQueryString();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testHttpRequest_args)
        return this.equals((testHttpRequest_args)that);
      return false;
    }

    public boolean equals(testHttpRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_queryString = true && this.isSetQueryString();
      boolean that_present_queryString = true && that.isSetQueryString();
      if (this_present_queryString || that_present_queryString) {
        if (!(this_present_queryString && that_present_queryString))
          return false;
        if (!this.queryString.equals(that.queryString))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(testHttpRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryString()).compareTo(other.isSetQueryString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryString, other.queryString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testHttpRequest_args(");
      boolean first = true;

      sb.append("queryString:");
      if (this.queryString == null) {
        sb.append("null");
      } else {
        sb.append(this.queryString);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testHttpRequest_argsStandardSchemeFactory implements SchemeFactory {
      public testHttpRequest_argsStandardScheme getScheme() {
        return new testHttpRequest_argsStandardScheme();
      }
    }

    private static class testHttpRequest_argsStandardScheme extends StandardScheme<testHttpRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testHttpRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queryString = iprot.readString();
                struct.setQueryStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testHttpRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queryString != null) {
          oprot.writeFieldBegin(QUERY_STRING_FIELD_DESC);
          oprot.writeString(struct.queryString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testHttpRequest_argsTupleSchemeFactory implements SchemeFactory {
      public testHttpRequest_argsTupleScheme getScheme() {
        return new testHttpRequest_argsTupleScheme();
      }
    }

    private static class testHttpRequest_argsTupleScheme extends TupleScheme<testHttpRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testHttpRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryString()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueryString()) {
          oprot.writeString(struct.queryString);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testHttpRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queryString = iprot.readString();
          struct.setQueryStringIsSet(true);
        }
      }
    }

  }

  public static class testHttpRequest_result implements org.apache.thrift.TBase<testHttpRequest_result, testHttpRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<testHttpRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testHttpRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testHttpRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testHttpRequest_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testHttpRequest_result.class, metaDataMap);
    }

    public testHttpRequest_result() {
    }

    public testHttpRequest_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testHttpRequest_result(testHttpRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public testHttpRequest_result deepCopy() {
      return new testHttpRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public testHttpRequest_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testHttpRequest_result)
        return this.equals((testHttpRequest_result)that);
      return false;
    }

    public boolean equals(testHttpRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(testHttpRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testHttpRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testHttpRequest_resultStandardSchemeFactory implements SchemeFactory {
      public testHttpRequest_resultStandardScheme getScheme() {
        return new testHttpRequest_resultStandardScheme();
      }
    }

    private static class testHttpRequest_resultStandardScheme extends StandardScheme<testHttpRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testHttpRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testHttpRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testHttpRequest_resultTupleSchemeFactory implements SchemeFactory {
      public testHttpRequest_resultTupleScheme getScheme() {
        return new testHttpRequest_resultTupleScheme();
      }
    }

    private static class testHttpRequest_resultTupleScheme extends TupleScheme<testHttpRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testHttpRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testHttpRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkTicket_args implements org.apache.thrift.TBase<checkTicket_args, checkTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkTicket_args");

    private static final org.apache.thrift.protocol.TField OUT_TICKET_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("outTicketOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkTicket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkTicket_argsTupleSchemeFactory());
    }

    public OutTicketOrder outTicketOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUT_TICKET_ORDER((short)1, "outTicketOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUT_TICKET_ORDER
            return OUT_TICKET_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUT_TICKET_ORDER, new org.apache.thrift.meta_data.FieldMetaData("outTicketOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutTicketOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkTicket_args.class, metaDataMap);
    }

    public checkTicket_args() {
    }

    public checkTicket_args(
      OutTicketOrder outTicketOrder)
    {
      this();
      this.outTicketOrder = outTicketOrder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkTicket_args(checkTicket_args other) {
      if (other.isSetOutTicketOrder()) {
        this.outTicketOrder = new OutTicketOrder(other.outTicketOrder);
      }
    }

    public checkTicket_args deepCopy() {
      return new checkTicket_args(this);
    }

    @Override
    public void clear() {
      this.outTicketOrder = null;
    }

    public OutTicketOrder getOutTicketOrder() {
      return this.outTicketOrder;
    }

    public checkTicket_args setOutTicketOrder(OutTicketOrder outTicketOrder) {
      this.outTicketOrder = outTicketOrder;
      return this;
    }

    public void unsetOutTicketOrder() {
      this.outTicketOrder = null;
    }

    /** Returns true if field outTicketOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetOutTicketOrder() {
      return this.outTicketOrder != null;
    }

    public void setOutTicketOrderIsSet(boolean value) {
      if (!value) {
        this.outTicketOrder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUT_TICKET_ORDER:
        if (value == null) {
          unsetOutTicketOrder();
        } else {
          setOutTicketOrder((OutTicketOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUT_TICKET_ORDER:
        return getOutTicketOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUT_TICKET_ORDER:
        return isSetOutTicketOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkTicket_args)
        return this.equals((checkTicket_args)that);
      return false;
    }

    public boolean equals(checkTicket_args that) {
      if (that == null)
        return false;

      boolean this_present_outTicketOrder = true && this.isSetOutTicketOrder();
      boolean that_present_outTicketOrder = true && that.isSetOutTicketOrder();
      if (this_present_outTicketOrder || that_present_outTicketOrder) {
        if (!(this_present_outTicketOrder && that_present_outTicketOrder))
          return false;
        if (!this.outTicketOrder.equals(that.outTicketOrder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutTicketOrder()).compareTo(other.isSetOutTicketOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutTicketOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outTicketOrder, other.outTicketOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkTicket_args(");
      boolean first = true;

      sb.append("outTicketOrder:");
      if (this.outTicketOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.outTicketOrder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outTicketOrder != null) {
        outTicketOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkTicket_argsStandardSchemeFactory implements SchemeFactory {
      public checkTicket_argsStandardScheme getScheme() {
        return new checkTicket_argsStandardScheme();
      }
    }

    private static class checkTicket_argsStandardScheme extends StandardScheme<checkTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUT_TICKET_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outTicketOrder = new OutTicketOrder();
                struct.outTicketOrder.read(iprot);
                struct.setOutTicketOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outTicketOrder != null) {
          oprot.writeFieldBegin(OUT_TICKET_ORDER_FIELD_DESC);
          struct.outTicketOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkTicket_argsTupleSchemeFactory implements SchemeFactory {
      public checkTicket_argsTupleScheme getScheme() {
        return new checkTicket_argsTupleScheme();
      }
    }

    private static class checkTicket_argsTupleScheme extends TupleScheme<checkTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkTicket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutTicketOrder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutTicketOrder()) {
          struct.outTicketOrder.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkTicket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outTicketOrder = new OutTicketOrder();
          struct.outTicketOrder.read(iprot);
          struct.setOutTicketOrderIsSet(true);
        }
      }
    }

  }

  public static class checkTicket_result implements org.apache.thrift.TBase<checkTicket_result, checkTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkTicket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkTicket_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkTicket_result.class, metaDataMap);
    }

    public checkTicket_result() {
    }

    public checkTicket_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkTicket_result(checkTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public checkTicket_result deepCopy() {
      return new checkTicket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public checkTicket_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkTicket_result)
        return this.equals((checkTicket_result)that);
      return false;
    }

    public boolean equals(checkTicket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkTicket_resultStandardSchemeFactory implements SchemeFactory {
      public checkTicket_resultStandardScheme getScheme() {
        return new checkTicket_resultStandardScheme();
      }
    }

    private static class checkTicket_resultStandardScheme extends StandardScheme<checkTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkTicket_resultTupleSchemeFactory implements SchemeFactory {
      public checkTicket_resultTupleScheme getScheme() {
        return new checkTicket_resultTupleScheme();
      }
    }

    private static class checkTicket_resultTupleScheme extends TupleScheme<checkTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkTicket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkTicket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findLotteryDrawResult_args implements org.apache.thrift.TBase<findLotteryDrawResult_args, findLotteryDrawResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryDrawResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryDrawResult_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryDrawResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryDrawResult_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryDrawResult_args.class, metaDataMap);
    }

    public findLotteryDrawResult_args() {
    }

    public findLotteryDrawResult_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryDrawResult_args(findLotteryDrawResult_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public findLotteryDrawResult_args deepCopy() {
      return new findLotteryDrawResult_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public findLotteryDrawResult_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public findLotteryDrawResult_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryDrawResult_args)
        return this.equals((findLotteryDrawResult_args)that);
      return false;
    }

    public boolean equals(findLotteryDrawResult_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryDrawResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryDrawResult_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryDrawResult_argsStandardSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_argsStandardScheme getScheme() {
        return new findLotteryDrawResult_argsStandardScheme();
      }
    }

    private static class findLotteryDrawResult_argsStandardScheme extends StandardScheme<findLotteryDrawResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryDrawResult_argsTupleSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_argsTupleScheme getScheme() {
        return new findLotteryDrawResult_argsTupleScheme();
      }
    }

    private static class findLotteryDrawResult_argsTupleScheme extends TupleScheme<findLotteryDrawResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class findLotteryDrawResult_result implements org.apache.thrift.TBase<findLotteryDrawResult_result, findLotteryDrawResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryDrawResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryDrawResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryDrawResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryDrawResult_resultTupleSchemeFactory());
    }

    public com.cqfc.protocol.lotteryissue.LotteryDrawResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cqfc.protocol.lotteryissue.LotteryDrawResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryDrawResult_result.class, metaDataMap);
    }

    public findLotteryDrawResult_result() {
    }

    public findLotteryDrawResult_result(
      com.cqfc.protocol.lotteryissue.LotteryDrawResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryDrawResult_result(findLotteryDrawResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.cqfc.protocol.lotteryissue.LotteryDrawResult(other.success);
      }
    }

    public findLotteryDrawResult_result deepCopy() {
      return new findLotteryDrawResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.cqfc.protocol.lotteryissue.LotteryDrawResult getSuccess() {
      return this.success;
    }

    public findLotteryDrawResult_result setSuccess(com.cqfc.protocol.lotteryissue.LotteryDrawResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.cqfc.protocol.lotteryissue.LotteryDrawResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryDrawResult_result)
        return this.equals((findLotteryDrawResult_result)that);
      return false;
    }

    public boolean equals(findLotteryDrawResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryDrawResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryDrawResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryDrawResult_resultStandardSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_resultStandardScheme getScheme() {
        return new findLotteryDrawResult_resultStandardScheme();
      }
    }

    private static class findLotteryDrawResult_resultStandardScheme extends StandardScheme<findLotteryDrawResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.cqfc.protocol.lotteryissue.LotteryDrawResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryDrawResult_resultTupleSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_resultTupleScheme getScheme() {
        return new findLotteryDrawResult_resultTupleScheme();
      }
    }

    private static class findLotteryDrawResult_resultTupleScheme extends TupleScheme<findLotteryDrawResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.cqfc.protocol.lotteryissue.LotteryDrawResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFucaiCount_args implements org.apache.thrift.TBase<getFucaiCount_args, getFucaiCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFucaiCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFucaiCount_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFucaiCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFucaiCount_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFucaiCount_args.class, metaDataMap);
    }

    public getFucaiCount_args() {
    }

    public getFucaiCount_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFucaiCount_args(getFucaiCount_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getFucaiCount_args deepCopy() {
      return new getFucaiCount_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getFucaiCount_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getFucaiCount_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFucaiCount_args)
        return this.equals((getFucaiCount_args)that);
      return false;
    }

    public boolean equals(getFucaiCount_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFucaiCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFucaiCount_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFucaiCount_argsStandardSchemeFactory implements SchemeFactory {
      public getFucaiCount_argsStandardScheme getScheme() {
        return new getFucaiCount_argsStandardScheme();
      }
    }

    private static class getFucaiCount_argsStandardScheme extends StandardScheme<getFucaiCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFucaiCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFucaiCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFucaiCount_argsTupleSchemeFactory implements SchemeFactory {
      public getFucaiCount_argsTupleScheme getScheme() {
        return new getFucaiCount_argsTupleScheme();
      }
    }

    private static class getFucaiCount_argsTupleScheme extends TupleScheme<getFucaiCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFucaiCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFucaiCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getFucaiCount_result implements org.apache.thrift.TBase<getFucaiCount_result, getFucaiCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFucaiCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFucaiCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFucaiCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFucaiCount_resultTupleSchemeFactory());
    }

    public FucaiCount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FucaiCount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFucaiCount_result.class, metaDataMap);
    }

    public getFucaiCount_result() {
    }

    public getFucaiCount_result(
      FucaiCount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFucaiCount_result(getFucaiCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new FucaiCount(other.success);
      }
    }

    public getFucaiCount_result deepCopy() {
      return new getFucaiCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FucaiCount getSuccess() {
      return this.success;
    }

    public getFucaiCount_result setSuccess(FucaiCount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FucaiCount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFucaiCount_result)
        return this.equals((getFucaiCount_result)that);
      return false;
    }

    public boolean equals(getFucaiCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFucaiCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFucaiCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFucaiCount_resultStandardSchemeFactory implements SchemeFactory {
      public getFucaiCount_resultStandardScheme getScheme() {
        return new getFucaiCount_resultStandardScheme();
      }
    }

    private static class getFucaiCount_resultStandardScheme extends StandardScheme<getFucaiCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFucaiCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FucaiCount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFucaiCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFucaiCount_resultTupleSchemeFactory implements SchemeFactory {
      public getFucaiCount_resultTupleScheme getScheme() {
        return new getFucaiCount_resultTupleScheme();
      }
    }

    private static class getFucaiCount_resultTupleScheme extends TupleScheme<getFucaiCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFucaiCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFucaiCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FucaiCount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFucaiCountByDay_args implements org.apache.thrift.TBase<getFucaiCountByDay_args, getFucaiCountByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFucaiCountByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFucaiCountByDay_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFucaiCountByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFucaiCountByDay_argsTupleSchemeFactory());
    }

    public String date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFucaiCountByDay_args.class, metaDataMap);
    }

    public getFucaiCountByDay_args() {
    }

    public getFucaiCountByDay_args(
      String date)
    {
      this();
      this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFucaiCountByDay_args(getFucaiCountByDay_args other) {
      if (other.isSetDate()) {
        this.date = other.date;
      }
    }

    public getFucaiCountByDay_args deepCopy() {
      return new getFucaiCountByDay_args(this);
    }

    @Override
    public void clear() {
      this.date = null;
    }

    public String getDate() {
      return this.date;
    }

    public getFucaiCountByDay_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFucaiCountByDay_args)
        return this.equals((getFucaiCountByDay_args)that);
      return false;
    }

    public boolean equals(getFucaiCountByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFucaiCountByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFucaiCountByDay_args(");
      boolean first = true;

      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFucaiCountByDay_argsStandardSchemeFactory implements SchemeFactory {
      public getFucaiCountByDay_argsStandardScheme getScheme() {
        return new getFucaiCountByDay_argsStandardScheme();
      }
    }

    private static class getFucaiCountByDay_argsStandardScheme extends StandardScheme<getFucaiCountByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFucaiCountByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFucaiCountByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFucaiCountByDay_argsTupleSchemeFactory implements SchemeFactory {
      public getFucaiCountByDay_argsTupleScheme getScheme() {
        return new getFucaiCountByDay_argsTupleScheme();
      }
    }

    private static class getFucaiCountByDay_argsTupleScheme extends TupleScheme<getFucaiCountByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFucaiCountByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFucaiCountByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class getFucaiCountByDay_result implements org.apache.thrift.TBase<getFucaiCountByDay_result, getFucaiCountByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFucaiCountByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFucaiCountByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFucaiCountByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFucaiCountByDay_resultTupleSchemeFactory());
    }

    public FucaiCount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FucaiCount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFucaiCountByDay_result.class, metaDataMap);
    }

    public getFucaiCountByDay_result() {
    }

    public getFucaiCountByDay_result(
      FucaiCount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFucaiCountByDay_result(getFucaiCountByDay_result other) {
      if (other.isSetSuccess()) {
        this.success = new FucaiCount(other.success);
      }
    }

    public getFucaiCountByDay_result deepCopy() {
      return new getFucaiCountByDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FucaiCount getSuccess() {
      return this.success;
    }

    public getFucaiCountByDay_result setSuccess(FucaiCount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FucaiCount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFucaiCountByDay_result)
        return this.equals((getFucaiCountByDay_result)that);
      return false;
    }

    public boolean equals(getFucaiCountByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFucaiCountByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFucaiCountByDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFucaiCountByDay_resultStandardSchemeFactory implements SchemeFactory {
      public getFucaiCountByDay_resultStandardScheme getScheme() {
        return new getFucaiCountByDay_resultStandardScheme();
      }
    }

    private static class getFucaiCountByDay_resultStandardScheme extends StandardScheme<getFucaiCountByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFucaiCountByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FucaiCount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFucaiCountByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFucaiCountByDay_resultTupleSchemeFactory implements SchemeFactory {
      public getFucaiCountByDay_resultTupleScheme getScheme() {
        return new getFucaiCountByDay_resultTupleScheme();
      }
    }

    private static class getFucaiCountByDay_resultTupleScheme extends TupleScheme<getFucaiCountByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFucaiCountByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFucaiCountByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FucaiCount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTicket_args implements org.apache.thrift.TBase<queryTicket_args, queryTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTicket_args");

    private static final org.apache.thrift.protocol.TField OUT_TICKET_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("outTicketOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTicket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTicket_argsTupleSchemeFactory());
    }

    public OutTicketOrder outTicketOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUT_TICKET_ORDER((short)1, "outTicketOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUT_TICKET_ORDER
            return OUT_TICKET_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUT_TICKET_ORDER, new org.apache.thrift.meta_data.FieldMetaData("outTicketOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutTicketOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTicket_args.class, metaDataMap);
    }

    public queryTicket_args() {
    }

    public queryTicket_args(
      OutTicketOrder outTicketOrder)
    {
      this();
      this.outTicketOrder = outTicketOrder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTicket_args(queryTicket_args other) {
      if (other.isSetOutTicketOrder()) {
        this.outTicketOrder = new OutTicketOrder(other.outTicketOrder);
      }
    }

    public queryTicket_args deepCopy() {
      return new queryTicket_args(this);
    }

    @Override
    public void clear() {
      this.outTicketOrder = null;
    }

    public OutTicketOrder getOutTicketOrder() {
      return this.outTicketOrder;
    }

    public queryTicket_args setOutTicketOrder(OutTicketOrder outTicketOrder) {
      this.outTicketOrder = outTicketOrder;
      return this;
    }

    public void unsetOutTicketOrder() {
      this.outTicketOrder = null;
    }

    /** Returns true if field outTicketOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetOutTicketOrder() {
      return this.outTicketOrder != null;
    }

    public void setOutTicketOrderIsSet(boolean value) {
      if (!value) {
        this.outTicketOrder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUT_TICKET_ORDER:
        if (value == null) {
          unsetOutTicketOrder();
        } else {
          setOutTicketOrder((OutTicketOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUT_TICKET_ORDER:
        return getOutTicketOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUT_TICKET_ORDER:
        return isSetOutTicketOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTicket_args)
        return this.equals((queryTicket_args)that);
      return false;
    }

    public boolean equals(queryTicket_args that) {
      if (that == null)
        return false;

      boolean this_present_outTicketOrder = true && this.isSetOutTicketOrder();
      boolean that_present_outTicketOrder = true && that.isSetOutTicketOrder();
      if (this_present_outTicketOrder || that_present_outTicketOrder) {
        if (!(this_present_outTicketOrder && that_present_outTicketOrder))
          return false;
        if (!this.outTicketOrder.equals(that.outTicketOrder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutTicketOrder()).compareTo(other.isSetOutTicketOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutTicketOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outTicketOrder, other.outTicketOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTicket_args(");
      boolean first = true;

      sb.append("outTicketOrder:");
      if (this.outTicketOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.outTicketOrder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outTicketOrder != null) {
        outTicketOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTicket_argsStandardSchemeFactory implements SchemeFactory {
      public queryTicket_argsStandardScheme getScheme() {
        return new queryTicket_argsStandardScheme();
      }
    }

    private static class queryTicket_argsStandardScheme extends StandardScheme<queryTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUT_TICKET_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outTicketOrder = new OutTicketOrder();
                struct.outTicketOrder.read(iprot);
                struct.setOutTicketOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outTicketOrder != null) {
          oprot.writeFieldBegin(OUT_TICKET_ORDER_FIELD_DESC);
          struct.outTicketOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTicket_argsTupleSchemeFactory implements SchemeFactory {
      public queryTicket_argsTupleScheme getScheme() {
        return new queryTicket_argsTupleScheme();
      }
    }

    private static class queryTicket_argsTupleScheme extends TupleScheme<queryTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTicket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutTicketOrder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutTicketOrder()) {
          struct.outTicketOrder.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTicket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outTicketOrder = new OutTicketOrder();
          struct.outTicketOrder.read(iprot);
          struct.setOutTicketOrderIsSet(true);
        }
      }
    }

  }

  public static class queryTicket_result implements org.apache.thrift.TBase<queryTicket_result, queryTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTicket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTicket_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTicket_result.class, metaDataMap);
    }

    public queryTicket_result() {
    }

    public queryTicket_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTicket_result(queryTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public queryTicket_result deepCopy() {
      return new queryTicket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public queryTicket_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTicket_result)
        return this.equals((queryTicket_result)that);
      return false;
    }

    public boolean equals(queryTicket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTicket_resultStandardSchemeFactory implements SchemeFactory {
      public queryTicket_resultStandardScheme getScheme() {
        return new queryTicket_resultStandardScheme();
      }
    }

    private static class queryTicket_resultStandardScheme extends StandardScheme<queryTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTicket_resultTupleSchemeFactory implements SchemeFactory {
      public queryTicket_resultTupleScheme getScheme() {
        return new queryTicket_resultTupleScheme();
      }
    }

    private static class queryTicket_resultTupleScheme extends TupleScheme<queryTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTicket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTicket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserAccountInfo_args implements org.apache.thrift.TBase<getUserAccountInfo_args, getUserAccountInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserAccountInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserAccountInfo_args");

    private static final org.apache.thrift.protocol.TField PARM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("parmType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserAccountInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserAccountInfo_argsTupleSchemeFactory());
    }

    public String parmType; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARM_TYPE((short)1, "parmType"),
      VALUE((short)2, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARM_TYPE
            return PARM_TYPE;
          case 2: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("parmType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserAccountInfo_args.class, metaDataMap);
    }

    public getUserAccountInfo_args() {
    }

    public getUserAccountInfo_args(
      String parmType,
      String value)
    {
      this();
      this.parmType = parmType;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserAccountInfo_args(getUserAccountInfo_args other) {
      if (other.isSetParmType()) {
        this.parmType = other.parmType;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public getUserAccountInfo_args deepCopy() {
      return new getUserAccountInfo_args(this);
    }

    @Override
    public void clear() {
      this.parmType = null;
      this.value = null;
    }

    public String getParmType() {
      return this.parmType;
    }

    public getUserAccountInfo_args setParmType(String parmType) {
      this.parmType = parmType;
      return this;
    }

    public void unsetParmType() {
      this.parmType = null;
    }

    /** Returns true if field parmType is set (has been assigned a value) and false otherwise */
    public boolean isSetParmType() {
      return this.parmType != null;
    }

    public void setParmTypeIsSet(boolean value) {
      if (!value) {
        this.parmType = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public getUserAccountInfo_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARM_TYPE:
        if (value == null) {
          unsetParmType();
        } else {
          setParmType((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARM_TYPE:
        return getParmType();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARM_TYPE:
        return isSetParmType();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserAccountInfo_args)
        return this.equals((getUserAccountInfo_args)that);
      return false;
    }

    public boolean equals(getUserAccountInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_parmType = true && this.isSetParmType();
      boolean that_present_parmType = true && that.isSetParmType();
      if (this_present_parmType || that_present_parmType) {
        if (!(this_present_parmType && that_present_parmType))
          return false;
        if (!this.parmType.equals(that.parmType))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserAccountInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParmType()).compareTo(other.isSetParmType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParmType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parmType, other.parmType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserAccountInfo_args(");
      boolean first = true;

      sb.append("parmType:");
      if (this.parmType == null) {
        sb.append("null");
      } else {
        sb.append(this.parmType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserAccountInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getUserAccountInfo_argsStandardScheme getScheme() {
        return new getUserAccountInfo_argsStandardScheme();
      }
    }

    private static class getUserAccountInfo_argsStandardScheme extends StandardScheme<getUserAccountInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserAccountInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parmType = iprot.readString();
                struct.setParmTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserAccountInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parmType != null) {
          oprot.writeFieldBegin(PARM_TYPE_FIELD_DESC);
          oprot.writeString(struct.parmType);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserAccountInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getUserAccountInfo_argsTupleScheme getScheme() {
        return new getUserAccountInfo_argsTupleScheme();
      }
    }

    private static class getUserAccountInfo_argsTupleScheme extends TupleScheme<getUserAccountInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserAccountInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParmType()) {
          optionals.set(0);
        }
        if (struct.isSetValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParmType()) {
          oprot.writeString(struct.parmType);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserAccountInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.parmType = iprot.readString();
          struct.setParmTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class getUserAccountInfo_result implements org.apache.thrift.TBase<getUserAccountInfo_result, getUserAccountInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserAccountInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserAccountInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserAccountInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserAccountInfo_resultTupleSchemeFactory());
    }

    public UserAccountInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserAccountInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserAccountInfo_result.class, metaDataMap);
    }

    public getUserAccountInfo_result() {
    }

    public getUserAccountInfo_result(
      UserAccountInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserAccountInfo_result(getUserAccountInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserAccountInfo(other.success);
      }
    }

    public getUserAccountInfo_result deepCopy() {
      return new getUserAccountInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserAccountInfo getSuccess() {
      return this.success;
    }

    public getUserAccountInfo_result setSuccess(UserAccountInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserAccountInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserAccountInfo_result)
        return this.equals((getUserAccountInfo_result)that);
      return false;
    }

    public boolean equals(getUserAccountInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserAccountInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserAccountInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserAccountInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getUserAccountInfo_resultStandardScheme getScheme() {
        return new getUserAccountInfo_resultStandardScheme();
      }
    }

    private static class getUserAccountInfo_resultStandardScheme extends StandardScheme<getUserAccountInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserAccountInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserAccountInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserAccountInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserAccountInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getUserAccountInfo_resultTupleScheme getScheme() {
        return new getUserAccountInfo_resultTupleScheme();
      }
    }

    private static class getUserAccountInfo_resultTupleScheme extends TupleScheme<getUserAccountInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserAccountInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserAccountInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserAccountInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFucaiPartnerInfoList_args implements org.apache.thrift.TBase<getFucaiPartnerInfoList_args, getFucaiPartnerInfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFucaiPartnerInfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFucaiPartnerInfoList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFucaiPartnerInfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFucaiPartnerInfoList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFucaiPartnerInfoList_args.class, metaDataMap);
    }

    public getFucaiPartnerInfoList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFucaiPartnerInfoList_args(getFucaiPartnerInfoList_args other) {
    }

    public getFucaiPartnerInfoList_args deepCopy() {
      return new getFucaiPartnerInfoList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFucaiPartnerInfoList_args)
        return this.equals((getFucaiPartnerInfoList_args)that);
      return false;
    }

    public boolean equals(getFucaiPartnerInfoList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFucaiPartnerInfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFucaiPartnerInfoList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFucaiPartnerInfoList_argsStandardSchemeFactory implements SchemeFactory {
      public getFucaiPartnerInfoList_argsStandardScheme getScheme() {
        return new getFucaiPartnerInfoList_argsStandardScheme();
      }
    }

    private static class getFucaiPartnerInfoList_argsStandardScheme extends StandardScheme<getFucaiPartnerInfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFucaiPartnerInfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFucaiPartnerInfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFucaiPartnerInfoList_argsTupleSchemeFactory implements SchemeFactory {
      public getFucaiPartnerInfoList_argsTupleScheme getScheme() {
        return new getFucaiPartnerInfoList_argsTupleScheme();
      }
    }

    private static class getFucaiPartnerInfoList_argsTupleScheme extends TupleScheme<getFucaiPartnerInfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFucaiPartnerInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFucaiPartnerInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getFucaiPartnerInfoList_result implements org.apache.thrift.TBase<getFucaiPartnerInfoList_result, getFucaiPartnerInfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFucaiPartnerInfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFucaiPartnerInfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFucaiPartnerInfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFucaiPartnerInfoList_resultTupleSchemeFactory());
    }

    public List<FucaiPartnerInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FucaiPartnerInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFucaiPartnerInfoList_result.class, metaDataMap);
    }

    public getFucaiPartnerInfoList_result() {
    }

    public getFucaiPartnerInfoList_result(
      List<FucaiPartnerInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFucaiPartnerInfoList_result(getFucaiPartnerInfoList_result other) {
      if (other.isSetSuccess()) {
        List<FucaiPartnerInfo> __this__success = new ArrayList<FucaiPartnerInfo>(other.success.size());
        for (FucaiPartnerInfo other_element : other.success) {
          __this__success.add(new FucaiPartnerInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFucaiPartnerInfoList_result deepCopy() {
      return new getFucaiPartnerInfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FucaiPartnerInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FucaiPartnerInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<FucaiPartnerInfo>();
      }
      this.success.add(elem);
    }

    public List<FucaiPartnerInfo> getSuccess() {
      return this.success;
    }

    public getFucaiPartnerInfoList_result setSuccess(List<FucaiPartnerInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FucaiPartnerInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFucaiPartnerInfoList_result)
        return this.equals((getFucaiPartnerInfoList_result)that);
      return false;
    }

    public boolean equals(getFucaiPartnerInfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFucaiPartnerInfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFucaiPartnerInfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFucaiPartnerInfoList_resultStandardSchemeFactory implements SchemeFactory {
      public getFucaiPartnerInfoList_resultStandardScheme getScheme() {
        return new getFucaiPartnerInfoList_resultStandardScheme();
      }
    }

    private static class getFucaiPartnerInfoList_resultStandardScheme extends StandardScheme<getFucaiPartnerInfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFucaiPartnerInfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<FucaiPartnerInfo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    FucaiPartnerInfo _elem2;
                    _elem2 = new FucaiPartnerInfo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFucaiPartnerInfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FucaiPartnerInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFucaiPartnerInfoList_resultTupleSchemeFactory implements SchemeFactory {
      public getFucaiPartnerInfoList_resultTupleScheme getScheme() {
        return new getFucaiPartnerInfoList_resultTupleScheme();
      }
    }

    private static class getFucaiPartnerInfoList_resultTupleScheme extends TupleScheme<getFucaiPartnerInfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFucaiPartnerInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FucaiPartnerInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFucaiPartnerInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FucaiPartnerInfo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              FucaiPartnerInfo _elem7;
              _elem7 = new FucaiPartnerInfo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pushDrawResult_args implements org.apache.thrift.TBase<pushDrawResult_args, pushDrawResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushDrawResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushDrawResult_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushDrawResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushDrawResult_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required
    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo"),
      MSG((short)3, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          case 3: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushDrawResult_args.class, metaDataMap);
    }

    public pushDrawResult_args() {
    }

    public pushDrawResult_args(
      String lotteryId,
      String issueNo,
      String msg)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushDrawResult_args(pushDrawResult_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public pushDrawResult_args deepCopy() {
      return new pushDrawResult_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
      this.msg = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public pushDrawResult_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public pushDrawResult_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public pushDrawResult_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushDrawResult_args)
        return this.equals((pushDrawResult_args)that);
      return false;
    }

    public boolean equals(pushDrawResult_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pushDrawResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushDrawResult_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushDrawResult_argsStandardSchemeFactory implements SchemeFactory {
      public pushDrawResult_argsStandardScheme getScheme() {
        return new pushDrawResult_argsStandardScheme();
      }
    }

    private static class pushDrawResult_argsStandardScheme extends StandardScheme<pushDrawResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushDrawResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushDrawResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushDrawResult_argsTupleSchemeFactory implements SchemeFactory {
      public pushDrawResult_argsTupleScheme getScheme() {
        return new pushDrawResult_argsTupleScheme();
      }
    }

    private static class pushDrawResult_argsTupleScheme extends TupleScheme<pushDrawResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class pushDrawResult_result implements org.apache.thrift.TBase<pushDrawResult_result, pushDrawResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<pushDrawResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushDrawResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushDrawResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushDrawResult_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushDrawResult_result.class, metaDataMap);
    }

    public pushDrawResult_result() {
    }

    public pushDrawResult_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushDrawResult_result(pushDrawResult_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public pushDrawResult_result deepCopy() {
      return new pushDrawResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public pushDrawResult_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushDrawResult_result)
        return this.equals((pushDrawResult_result)that);
      return false;
    }

    public boolean equals(pushDrawResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pushDrawResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushDrawResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushDrawResult_resultStandardSchemeFactory implements SchemeFactory {
      public pushDrawResult_resultStandardScheme getScheme() {
        return new pushDrawResult_resultStandardScheme();
      }
    }

    private static class pushDrawResult_resultStandardScheme extends StandardScheme<pushDrawResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushDrawResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushDrawResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushDrawResult_resultTupleSchemeFactory implements SchemeFactory {
      public pushDrawResult_resultTupleScheme getScheme() {
        return new pushDrawResult_resultTupleScheme();
      }
    }

    private static class pushDrawResult_resultTupleScheme extends TupleScheme<pushDrawResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
