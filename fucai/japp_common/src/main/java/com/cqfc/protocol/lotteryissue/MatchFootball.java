/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MatchFootball implements org.apache.thrift.TBase<MatchFootball, MatchFootball._Fields>, java.io.Serializable, Cloneable, Comparable<MatchFootball> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatchFootball");

  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MATCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HOME_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("homeTeam", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GUEST_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("guestTeam", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("drawResult", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MATCH_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchBeginTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SP_FIELD_DESC = new org.apache.thrift.protocol.TField("sp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MatchFootballStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MatchFootballTupleSchemeFactory());
  }

  public String lotteryId; // required
  public String wareIssue; // required
  public String matchNo; // required
  public String matchId; // required
  public String matchName; // required
  public String homeTeam; // required
  public String guestTeam; // required
  public String drawResult; // required
  public String matchBeginTime; // required
  public String sp; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOTTERY_ID((short)1, "lotteryId"),
    WARE_ISSUE((short)2, "wareIssue"),
    MATCH_NO((short)3, "matchNo"),
    MATCH_ID((short)4, "matchId"),
    MATCH_NAME((short)5, "matchName"),
    HOME_TEAM((short)6, "homeTeam"),
    GUEST_TEAM((short)7, "guestTeam"),
    DRAW_RESULT((short)8, "drawResult"),
    MATCH_BEGIN_TIME((short)9, "matchBeginTime"),
    SP((short)10, "sp"),
    CREATE_TIME((short)11, "createTime"),
    LAST_UPDATE_TIME((short)12, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOTTERY_ID
          return LOTTERY_ID;
        case 2: // WARE_ISSUE
          return WARE_ISSUE;
        case 3: // MATCH_NO
          return MATCH_NO;
        case 4: // MATCH_ID
          return MATCH_ID;
        case 5: // MATCH_NAME
          return MATCH_NAME;
        case 6: // HOME_TEAM
          return HOME_TEAM;
        case 7: // GUEST_TEAM
          return GUEST_TEAM;
        case 8: // DRAW_RESULT
          return DRAW_RESULT;
        case 9: // MATCH_BEGIN_TIME
          return MATCH_BEGIN_TIME;
        case 10: // SP
          return SP;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("matchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("matchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("matchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_TEAM, new org.apache.thrift.meta_data.FieldMetaData("homeTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUEST_TEAM, new org.apache.thrift.meta_data.FieldMetaData("guestTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("drawResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("matchBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SP, new org.apache.thrift.meta_data.FieldMetaData("sp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatchFootball.class, metaDataMap);
  }

  public MatchFootball() {
  }

  public MatchFootball(
    String lotteryId,
    String wareIssue,
    String matchNo,
    String matchId,
    String matchName,
    String homeTeam,
    String guestTeam,
    String drawResult,
    String matchBeginTime,
    String sp,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.lotteryId = lotteryId;
    this.wareIssue = wareIssue;
    this.matchNo = matchNo;
    this.matchId = matchId;
    this.matchName = matchName;
    this.homeTeam = homeTeam;
    this.guestTeam = guestTeam;
    this.drawResult = drawResult;
    this.matchBeginTime = matchBeginTime;
    this.sp = sp;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatchFootball(MatchFootball other) {
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetWareIssue()) {
      this.wareIssue = other.wareIssue;
    }
    if (other.isSetMatchNo()) {
      this.matchNo = other.matchNo;
    }
    if (other.isSetMatchId()) {
      this.matchId = other.matchId;
    }
    if (other.isSetMatchName()) {
      this.matchName = other.matchName;
    }
    if (other.isSetHomeTeam()) {
      this.homeTeam = other.homeTeam;
    }
    if (other.isSetGuestTeam()) {
      this.guestTeam = other.guestTeam;
    }
    if (other.isSetDrawResult()) {
      this.drawResult = other.drawResult;
    }
    if (other.isSetMatchBeginTime()) {
      this.matchBeginTime = other.matchBeginTime;
    }
    if (other.isSetSp()) {
      this.sp = other.sp;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public MatchFootball deepCopy() {
    return new MatchFootball(this);
  }

  @Override
  public void clear() {
    this.lotteryId = null;
    this.wareIssue = null;
    this.matchNo = null;
    this.matchId = null;
    this.matchName = null;
    this.homeTeam = null;
    this.guestTeam = null;
    this.drawResult = null;
    this.matchBeginTime = null;
    this.sp = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public MatchFootball setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getWareIssue() {
    return this.wareIssue;
  }

  public MatchFootball setWareIssue(String wareIssue) {
    this.wareIssue = wareIssue;
    return this;
  }

  public void unsetWareIssue() {
    this.wareIssue = null;
  }

  /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
  public boolean isSetWareIssue() {
    return this.wareIssue != null;
  }

  public void setWareIssueIsSet(boolean value) {
    if (!value) {
      this.wareIssue = null;
    }
  }

  public String getMatchNo() {
    return this.matchNo;
  }

  public MatchFootball setMatchNo(String matchNo) {
    this.matchNo = matchNo;
    return this;
  }

  public void unsetMatchNo() {
    this.matchNo = null;
  }

  /** Returns true if field matchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchNo() {
    return this.matchNo != null;
  }

  public void setMatchNoIsSet(boolean value) {
    if (!value) {
      this.matchNo = null;
    }
  }

  public String getMatchId() {
    return this.matchId;
  }

  public MatchFootball setMatchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  public void unsetMatchId() {
    this.matchId = null;
  }

  /** Returns true if field matchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchId() {
    return this.matchId != null;
  }

  public void setMatchIdIsSet(boolean value) {
    if (!value) {
      this.matchId = null;
    }
  }

  public String getMatchName() {
    return this.matchName;
  }

  public MatchFootball setMatchName(String matchName) {
    this.matchName = matchName;
    return this;
  }

  public void unsetMatchName() {
    this.matchName = null;
  }

  /** Returns true if field matchName is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchName() {
    return this.matchName != null;
  }

  public void setMatchNameIsSet(boolean value) {
    if (!value) {
      this.matchName = null;
    }
  }

  public String getHomeTeam() {
    return this.homeTeam;
  }

  public MatchFootball setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  public void unsetHomeTeam() {
    this.homeTeam = null;
  }

  /** Returns true if field homeTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeTeam() {
    return this.homeTeam != null;
  }

  public void setHomeTeamIsSet(boolean value) {
    if (!value) {
      this.homeTeam = null;
    }
  }

  public String getGuestTeam() {
    return this.guestTeam;
  }

  public MatchFootball setGuestTeam(String guestTeam) {
    this.guestTeam = guestTeam;
    return this;
  }

  public void unsetGuestTeam() {
    this.guestTeam = null;
  }

  /** Returns true if field guestTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetGuestTeam() {
    return this.guestTeam != null;
  }

  public void setGuestTeamIsSet(boolean value) {
    if (!value) {
      this.guestTeam = null;
    }
  }

  public String getDrawResult() {
    return this.drawResult;
  }

  public MatchFootball setDrawResult(String drawResult) {
    this.drawResult = drawResult;
    return this;
  }

  public void unsetDrawResult() {
    this.drawResult = null;
  }

  /** Returns true if field drawResult is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawResult() {
    return this.drawResult != null;
  }

  public void setDrawResultIsSet(boolean value) {
    if (!value) {
      this.drawResult = null;
    }
  }

  public String getMatchBeginTime() {
    return this.matchBeginTime;
  }

  public MatchFootball setMatchBeginTime(String matchBeginTime) {
    this.matchBeginTime = matchBeginTime;
    return this;
  }

  public void unsetMatchBeginTime() {
    this.matchBeginTime = null;
  }

  /** Returns true if field matchBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchBeginTime() {
    return this.matchBeginTime != null;
  }

  public void setMatchBeginTimeIsSet(boolean value) {
    if (!value) {
      this.matchBeginTime = null;
    }
  }

  public String getSp() {
    return this.sp;
  }

  public MatchFootball setSp(String sp) {
    this.sp = sp;
    return this;
  }

  public void unsetSp() {
    this.sp = null;
  }

  /** Returns true if field sp is set (has been assigned a value) and false otherwise */
  public boolean isSetSp() {
    return this.sp != null;
  }

  public void setSpIsSet(boolean value) {
    if (!value) {
      this.sp = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MatchFootball setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public MatchFootball setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case WARE_ISSUE:
      if (value == null) {
        unsetWareIssue();
      } else {
        setWareIssue((String)value);
      }
      break;

    case MATCH_NO:
      if (value == null) {
        unsetMatchNo();
      } else {
        setMatchNo((String)value);
      }
      break;

    case MATCH_ID:
      if (value == null) {
        unsetMatchId();
      } else {
        setMatchId((String)value);
      }
      break;

    case MATCH_NAME:
      if (value == null) {
        unsetMatchName();
      } else {
        setMatchName((String)value);
      }
      break;

    case HOME_TEAM:
      if (value == null) {
        unsetHomeTeam();
      } else {
        setHomeTeam((String)value);
      }
      break;

    case GUEST_TEAM:
      if (value == null) {
        unsetGuestTeam();
      } else {
        setGuestTeam((String)value);
      }
      break;

    case DRAW_RESULT:
      if (value == null) {
        unsetDrawResult();
      } else {
        setDrawResult((String)value);
      }
      break;

    case MATCH_BEGIN_TIME:
      if (value == null) {
        unsetMatchBeginTime();
      } else {
        setMatchBeginTime((String)value);
      }
      break;

    case SP:
      if (value == null) {
        unsetSp();
      } else {
        setSp((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOTTERY_ID:
      return getLotteryId();

    case WARE_ISSUE:
      return getWareIssue();

    case MATCH_NO:
      return getMatchNo();

    case MATCH_ID:
      return getMatchId();

    case MATCH_NAME:
      return getMatchName();

    case HOME_TEAM:
      return getHomeTeam();

    case GUEST_TEAM:
      return getGuestTeam();

    case DRAW_RESULT:
      return getDrawResult();

    case MATCH_BEGIN_TIME:
      return getMatchBeginTime();

    case SP:
      return getSp();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOTTERY_ID:
      return isSetLotteryId();
    case WARE_ISSUE:
      return isSetWareIssue();
    case MATCH_NO:
      return isSetMatchNo();
    case MATCH_ID:
      return isSetMatchId();
    case MATCH_NAME:
      return isSetMatchName();
    case HOME_TEAM:
      return isSetHomeTeam();
    case GUEST_TEAM:
      return isSetGuestTeam();
    case DRAW_RESULT:
      return isSetDrawResult();
    case MATCH_BEGIN_TIME:
      return isSetMatchBeginTime();
    case SP:
      return isSetSp();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MatchFootball)
      return this.equals((MatchFootball)that);
    return false;
  }

  public boolean equals(MatchFootball that) {
    if (that == null)
      return false;

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_wareIssue = true && this.isSetWareIssue();
    boolean that_present_wareIssue = true && that.isSetWareIssue();
    if (this_present_wareIssue || that_present_wareIssue) {
      if (!(this_present_wareIssue && that_present_wareIssue))
        return false;
      if (!this.wareIssue.equals(that.wareIssue))
        return false;
    }

    boolean this_present_matchNo = true && this.isSetMatchNo();
    boolean that_present_matchNo = true && that.isSetMatchNo();
    if (this_present_matchNo || that_present_matchNo) {
      if (!(this_present_matchNo && that_present_matchNo))
        return false;
      if (!this.matchNo.equals(that.matchNo))
        return false;
    }

    boolean this_present_matchId = true && this.isSetMatchId();
    boolean that_present_matchId = true && that.isSetMatchId();
    if (this_present_matchId || that_present_matchId) {
      if (!(this_present_matchId && that_present_matchId))
        return false;
      if (!this.matchId.equals(that.matchId))
        return false;
    }

    boolean this_present_matchName = true && this.isSetMatchName();
    boolean that_present_matchName = true && that.isSetMatchName();
    if (this_present_matchName || that_present_matchName) {
      if (!(this_present_matchName && that_present_matchName))
        return false;
      if (!this.matchName.equals(that.matchName))
        return false;
    }

    boolean this_present_homeTeam = true && this.isSetHomeTeam();
    boolean that_present_homeTeam = true && that.isSetHomeTeam();
    if (this_present_homeTeam || that_present_homeTeam) {
      if (!(this_present_homeTeam && that_present_homeTeam))
        return false;
      if (!this.homeTeam.equals(that.homeTeam))
        return false;
    }

    boolean this_present_guestTeam = true && this.isSetGuestTeam();
    boolean that_present_guestTeam = true && that.isSetGuestTeam();
    if (this_present_guestTeam || that_present_guestTeam) {
      if (!(this_present_guestTeam && that_present_guestTeam))
        return false;
      if (!this.guestTeam.equals(that.guestTeam))
        return false;
    }

    boolean this_present_drawResult = true && this.isSetDrawResult();
    boolean that_present_drawResult = true && that.isSetDrawResult();
    if (this_present_drawResult || that_present_drawResult) {
      if (!(this_present_drawResult && that_present_drawResult))
        return false;
      if (!this.drawResult.equals(that.drawResult))
        return false;
    }

    boolean this_present_matchBeginTime = true && this.isSetMatchBeginTime();
    boolean that_present_matchBeginTime = true && that.isSetMatchBeginTime();
    if (this_present_matchBeginTime || that_present_matchBeginTime) {
      if (!(this_present_matchBeginTime && that_present_matchBeginTime))
        return false;
      if (!this.matchBeginTime.equals(that.matchBeginTime))
        return false;
    }

    boolean this_present_sp = true && this.isSetSp();
    boolean that_present_sp = true && that.isSetSp();
    if (this_present_sp || that_present_sp) {
      if (!(this_present_sp && that_present_sp))
        return false;
      if (!this.sp.equals(that.sp))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MatchFootball other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchNo()).compareTo(other.isSetMatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNo, other.matchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchId()).compareTo(other.isSetMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchId, other.matchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchName()).compareTo(other.isSetMatchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchName, other.matchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeTeam()).compareTo(other.isSetHomeTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeTeam, other.homeTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuestTeam()).compareTo(other.isSetGuestTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuestTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guestTeam, other.guestTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawResult()).compareTo(other.isSetDrawResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawResult, other.drawResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchBeginTime()).compareTo(other.isSetMatchBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchBeginTime, other.matchBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSp()).compareTo(other.isSetSp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sp, other.sp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MatchFootball(");
    boolean first = true;

    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wareIssue:");
    if (this.wareIssue == null) {
      sb.append("null");
    } else {
      sb.append(this.wareIssue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchNo:");
    if (this.matchNo == null) {
      sb.append("null");
    } else {
      sb.append(this.matchNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchId:");
    if (this.matchId == null) {
      sb.append("null");
    } else {
      sb.append(this.matchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchName:");
    if (this.matchName == null) {
      sb.append("null");
    } else {
      sb.append(this.matchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeTeam:");
    if (this.homeTeam == null) {
      sb.append("null");
    } else {
      sb.append(this.homeTeam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guestTeam:");
    if (this.guestTeam == null) {
      sb.append("null");
    } else {
      sb.append(this.guestTeam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawResult:");
    if (this.drawResult == null) {
      sb.append("null");
    } else {
      sb.append(this.drawResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchBeginTime:");
    if (this.matchBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.matchBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sp:");
    if (this.sp == null) {
      sb.append("null");
    } else {
      sb.append(this.sp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatchFootballStandardSchemeFactory implements SchemeFactory {
    public MatchFootballStandardScheme getScheme() {
      return new MatchFootballStandardScheme();
    }
  }

  private static class MatchFootballStandardScheme extends StandardScheme<MatchFootball> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MatchFootball struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WARE_ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareIssue = iprot.readString();
              struct.setWareIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchNo = iprot.readString();
              struct.setMatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchId = iprot.readString();
              struct.setMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchName = iprot.readString();
              struct.setMatchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOME_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeTeam = iprot.readString();
              struct.setHomeTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GUEST_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guestTeam = iprot.readString();
              struct.setGuestTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DRAW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawResult = iprot.readString();
              struct.setDrawResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MATCH_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchBeginTime = iprot.readString();
              struct.setMatchBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sp = iprot.readString();
              struct.setSpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MatchFootball struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.wareIssue != null) {
        oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
        oprot.writeString(struct.wareIssue);
        oprot.writeFieldEnd();
      }
      if (struct.matchNo != null) {
        oprot.writeFieldBegin(MATCH_NO_FIELD_DESC);
        oprot.writeString(struct.matchNo);
        oprot.writeFieldEnd();
      }
      if (struct.matchId != null) {
        oprot.writeFieldBegin(MATCH_ID_FIELD_DESC);
        oprot.writeString(struct.matchId);
        oprot.writeFieldEnd();
      }
      if (struct.matchName != null) {
        oprot.writeFieldBegin(MATCH_NAME_FIELD_DESC);
        oprot.writeString(struct.matchName);
        oprot.writeFieldEnd();
      }
      if (struct.homeTeam != null) {
        oprot.writeFieldBegin(HOME_TEAM_FIELD_DESC);
        oprot.writeString(struct.homeTeam);
        oprot.writeFieldEnd();
      }
      if (struct.guestTeam != null) {
        oprot.writeFieldBegin(GUEST_TEAM_FIELD_DESC);
        oprot.writeString(struct.guestTeam);
        oprot.writeFieldEnd();
      }
      if (struct.drawResult != null) {
        oprot.writeFieldBegin(DRAW_RESULT_FIELD_DESC);
        oprot.writeString(struct.drawResult);
        oprot.writeFieldEnd();
      }
      if (struct.matchBeginTime != null) {
        oprot.writeFieldBegin(MATCH_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.matchBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.sp != null) {
        oprot.writeFieldBegin(SP_FIELD_DESC);
        oprot.writeString(struct.sp);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatchFootballTupleSchemeFactory implements SchemeFactory {
    public MatchFootballTupleScheme getScheme() {
      return new MatchFootballTupleScheme();
    }
  }

  private static class MatchFootballTupleScheme extends TupleScheme<MatchFootball> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatchFootball struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLotteryId()) {
        optionals.set(0);
      }
      if (struct.isSetWareIssue()) {
        optionals.set(1);
      }
      if (struct.isSetMatchNo()) {
        optionals.set(2);
      }
      if (struct.isSetMatchId()) {
        optionals.set(3);
      }
      if (struct.isSetMatchName()) {
        optionals.set(4);
      }
      if (struct.isSetHomeTeam()) {
        optionals.set(5);
      }
      if (struct.isSetGuestTeam()) {
        optionals.set(6);
      }
      if (struct.isSetDrawResult()) {
        optionals.set(7);
      }
      if (struct.isSetMatchBeginTime()) {
        optionals.set(8);
      }
      if (struct.isSetSp()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetWareIssue()) {
        oprot.writeString(struct.wareIssue);
      }
      if (struct.isSetMatchNo()) {
        oprot.writeString(struct.matchNo);
      }
      if (struct.isSetMatchId()) {
        oprot.writeString(struct.matchId);
      }
      if (struct.isSetMatchName()) {
        oprot.writeString(struct.matchName);
      }
      if (struct.isSetHomeTeam()) {
        oprot.writeString(struct.homeTeam);
      }
      if (struct.isSetGuestTeam()) {
        oprot.writeString(struct.guestTeam);
      }
      if (struct.isSetDrawResult()) {
        oprot.writeString(struct.drawResult);
      }
      if (struct.isSetMatchBeginTime()) {
        oprot.writeString(struct.matchBeginTime);
      }
      if (struct.isSetSp()) {
        oprot.writeString(struct.sp);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatchFootball struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wareIssue = iprot.readString();
        struct.setWareIssueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.matchNo = iprot.readString();
        struct.setMatchNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.matchId = iprot.readString();
        struct.setMatchIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.matchName = iprot.readString();
        struct.setMatchNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.homeTeam = iprot.readString();
        struct.setHomeTeamIsSet(true);
      }
      if (incoming.get(6)) {
        struct.guestTeam = iprot.readString();
        struct.setGuestTeamIsSet(true);
      }
      if (incoming.get(7)) {
        struct.drawResult = iprot.readString();
        struct.setDrawResultIsSet(true);
      }
      if (incoming.get(8)) {
        struct.matchBeginTime = iprot.readString();
        struct.setMatchBeginTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sp = iprot.readString();
        struct.setSpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

