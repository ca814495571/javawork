/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderDetail implements org.apache.thrift.TBase<OrderDetail, OrderDetail._Fields>, java.io.Serializable, Cloneable, Comparable<OrderDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderDetail");

  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RQ_FIELD_DESC = new org.apache.thrift.protocol.TField("rq", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ODDS_FIELD_DESC = new org.apache.thrift.protocol.TField("odds", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MATCH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField WIN_ODDS_FIELD_DESC = new org.apache.thrift.protocol.TField("winOdds", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MATCH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchType", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderDetailTupleSchemeFactory());
  }

  public String orderNo; // required
  public String transferId; // required
  public String matchNo; // required
  public String rq; // required
  public String content; // required
  public String odds; // required
  public int matchStatus; // required
  public String createTime; // required
  public String winOdds; // required
  public String lotteryId; // required
  public String issueNo; // required
  public int matchType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_NO((short)1, "orderNo"),
    TRANSFER_ID((short)2, "transferId"),
    MATCH_NO((short)3, "matchNo"),
    RQ((short)4, "rq"),
    CONTENT((short)5, "content"),
    ODDS((short)6, "odds"),
    MATCH_STATUS((short)7, "matchStatus"),
    CREATE_TIME((short)8, "createTime"),
    WIN_ODDS((short)9, "winOdds"),
    LOTTERY_ID((short)10, "lotteryId"),
    ISSUE_NO((short)11, "issueNo"),
    MATCH_TYPE((short)12, "matchType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_NO
          return ORDER_NO;
        case 2: // TRANSFER_ID
          return TRANSFER_ID;
        case 3: // MATCH_NO
          return MATCH_NO;
        case 4: // RQ
          return RQ;
        case 5: // CONTENT
          return CONTENT;
        case 6: // ODDS
          return ODDS;
        case 7: // MATCH_STATUS
          return MATCH_STATUS;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // WIN_ODDS
          return WIN_ODDS;
        case 10: // LOTTERY_ID
          return LOTTERY_ID;
        case 11: // ISSUE_NO
          return ISSUE_NO;
        case 12: // MATCH_TYPE
          return MATCH_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MATCHSTATUS_ISSET_ID = 0;
  private static final int __MATCHTYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("matchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RQ, new org.apache.thrift.meta_data.FieldMetaData("rq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ODDS, new org.apache.thrift.meta_data.FieldMetaData("odds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("matchStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIN_ODDS, new org.apache.thrift.meta_data.FieldMetaData("winOdds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("matchType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderDetail.class, metaDataMap);
  }

  public OrderDetail() {
  }

  public OrderDetail(
    String orderNo,
    String transferId,
    String matchNo,
    String rq,
    String content,
    String odds,
    int matchStatus,
    String createTime,
    String winOdds,
    String lotteryId,
    String issueNo,
    int matchType)
  {
    this();
    this.orderNo = orderNo;
    this.transferId = transferId;
    this.matchNo = matchNo;
    this.rq = rq;
    this.content = content;
    this.odds = odds;
    this.matchStatus = matchStatus;
    setMatchStatusIsSet(true);
    this.createTime = createTime;
    this.winOdds = winOdds;
    this.lotteryId = lotteryId;
    this.issueNo = issueNo;
    this.matchType = matchType;
    setMatchTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderDetail(OrderDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    if (other.isSetTransferId()) {
      this.transferId = other.transferId;
    }
    if (other.isSetMatchNo()) {
      this.matchNo = other.matchNo;
    }
    if (other.isSetRq()) {
      this.rq = other.rq;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetOdds()) {
      this.odds = other.odds;
    }
    this.matchStatus = other.matchStatus;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetWinOdds()) {
      this.winOdds = other.winOdds;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    this.matchType = other.matchType;
  }

  public OrderDetail deepCopy() {
    return new OrderDetail(this);
  }

  @Override
  public void clear() {
    this.orderNo = null;
    this.transferId = null;
    this.matchNo = null;
    this.rq = null;
    this.content = null;
    this.odds = null;
    setMatchStatusIsSet(false);
    this.matchStatus = 0;
    this.createTime = null;
    this.winOdds = null;
    this.lotteryId = null;
    this.issueNo = null;
    setMatchTypeIsSet(false);
    this.matchType = 0;
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public OrderDetail setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public String getTransferId() {
    return this.transferId;
  }

  public OrderDetail setTransferId(String transferId) {
    this.transferId = transferId;
    return this;
  }

  public void unsetTransferId() {
    this.transferId = null;
  }

  /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferId() {
    return this.transferId != null;
  }

  public void setTransferIdIsSet(boolean value) {
    if (!value) {
      this.transferId = null;
    }
  }

  public String getMatchNo() {
    return this.matchNo;
  }

  public OrderDetail setMatchNo(String matchNo) {
    this.matchNo = matchNo;
    return this;
  }

  public void unsetMatchNo() {
    this.matchNo = null;
  }

  /** Returns true if field matchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchNo() {
    return this.matchNo != null;
  }

  public void setMatchNoIsSet(boolean value) {
    if (!value) {
      this.matchNo = null;
    }
  }

  public String getRq() {
    return this.rq;
  }

  public OrderDetail setRq(String rq) {
    this.rq = rq;
    return this;
  }

  public void unsetRq() {
    this.rq = null;
  }

  /** Returns true if field rq is set (has been assigned a value) and false otherwise */
  public boolean isSetRq() {
    return this.rq != null;
  }

  public void setRqIsSet(boolean value) {
    if (!value) {
      this.rq = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public OrderDetail setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getOdds() {
    return this.odds;
  }

  public OrderDetail setOdds(String odds) {
    this.odds = odds;
    return this;
  }

  public void unsetOdds() {
    this.odds = null;
  }

  /** Returns true if field odds is set (has been assigned a value) and false otherwise */
  public boolean isSetOdds() {
    return this.odds != null;
  }

  public void setOddsIsSet(boolean value) {
    if (!value) {
      this.odds = null;
    }
  }

  public int getMatchStatus() {
    return this.matchStatus;
  }

  public OrderDetail setMatchStatus(int matchStatus) {
    this.matchStatus = matchStatus;
    setMatchStatusIsSet(true);
    return this;
  }

  public void unsetMatchStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHSTATUS_ISSET_ID);
  }

  /** Returns true if field matchStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHSTATUS_ISSET_ID);
  }

  public void setMatchStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHSTATUS_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public OrderDetail setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getWinOdds() {
    return this.winOdds;
  }

  public OrderDetail setWinOdds(String winOdds) {
    this.winOdds = winOdds;
    return this;
  }

  public void unsetWinOdds() {
    this.winOdds = null;
  }

  /** Returns true if field winOdds is set (has been assigned a value) and false otherwise */
  public boolean isSetWinOdds() {
    return this.winOdds != null;
  }

  public void setWinOddsIsSet(boolean value) {
    if (!value) {
      this.winOdds = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public OrderDetail setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public OrderDetail setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public int getMatchType() {
    return this.matchType;
  }

  public OrderDetail setMatchType(int matchType) {
    this.matchType = matchType;
    setMatchTypeIsSet(true);
    return this;
  }

  public void unsetMatchType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHTYPE_ISSET_ID);
  }

  /** Returns true if field matchType is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchType() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHTYPE_ISSET_ID);
  }

  public void setMatchTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;

    case TRANSFER_ID:
      if (value == null) {
        unsetTransferId();
      } else {
        setTransferId((String)value);
      }
      break;

    case MATCH_NO:
      if (value == null) {
        unsetMatchNo();
      } else {
        setMatchNo((String)value);
      }
      break;

    case RQ:
      if (value == null) {
        unsetRq();
      } else {
        setRq((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case ODDS:
      if (value == null) {
        unsetOdds();
      } else {
        setOdds((String)value);
      }
      break;

    case MATCH_STATUS:
      if (value == null) {
        unsetMatchStatus();
      } else {
        setMatchStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case WIN_ODDS:
      if (value == null) {
        unsetWinOdds();
      } else {
        setWinOdds((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case MATCH_TYPE:
      if (value == null) {
        unsetMatchType();
      } else {
        setMatchType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_NO:
      return getOrderNo();

    case TRANSFER_ID:
      return getTransferId();

    case MATCH_NO:
      return getMatchNo();

    case RQ:
      return getRq();

    case CONTENT:
      return getContent();

    case ODDS:
      return getOdds();

    case MATCH_STATUS:
      return Integer.valueOf(getMatchStatus());

    case CREATE_TIME:
      return getCreateTime();

    case WIN_ODDS:
      return getWinOdds();

    case LOTTERY_ID:
      return getLotteryId();

    case ISSUE_NO:
      return getIssueNo();

    case MATCH_TYPE:
      return Integer.valueOf(getMatchType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_NO:
      return isSetOrderNo();
    case TRANSFER_ID:
      return isSetTransferId();
    case MATCH_NO:
      return isSetMatchNo();
    case RQ:
      return isSetRq();
    case CONTENT:
      return isSetContent();
    case ODDS:
      return isSetOdds();
    case MATCH_STATUS:
      return isSetMatchStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case WIN_ODDS:
      return isSetWinOdds();
    case LOTTERY_ID:
      return isSetLotteryId();
    case ISSUE_NO:
      return isSetIssueNo();
    case MATCH_TYPE:
      return isSetMatchType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderDetail)
      return this.equals((OrderDetail)that);
    return false;
  }

  public boolean equals(OrderDetail that) {
    if (that == null)
      return false;

    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }

    boolean this_present_transferId = true && this.isSetTransferId();
    boolean that_present_transferId = true && that.isSetTransferId();
    if (this_present_transferId || that_present_transferId) {
      if (!(this_present_transferId && that_present_transferId))
        return false;
      if (!this.transferId.equals(that.transferId))
        return false;
    }

    boolean this_present_matchNo = true && this.isSetMatchNo();
    boolean that_present_matchNo = true && that.isSetMatchNo();
    if (this_present_matchNo || that_present_matchNo) {
      if (!(this_present_matchNo && that_present_matchNo))
        return false;
      if (!this.matchNo.equals(that.matchNo))
        return false;
    }

    boolean this_present_rq = true && this.isSetRq();
    boolean that_present_rq = true && that.isSetRq();
    if (this_present_rq || that_present_rq) {
      if (!(this_present_rq && that_present_rq))
        return false;
      if (!this.rq.equals(that.rq))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_odds = true && this.isSetOdds();
    boolean that_present_odds = true && that.isSetOdds();
    if (this_present_odds || that_present_odds) {
      if (!(this_present_odds && that_present_odds))
        return false;
      if (!this.odds.equals(that.odds))
        return false;
    }

    boolean this_present_matchStatus = true;
    boolean that_present_matchStatus = true;
    if (this_present_matchStatus || that_present_matchStatus) {
      if (!(this_present_matchStatus && that_present_matchStatus))
        return false;
      if (this.matchStatus != that.matchStatus)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_winOdds = true && this.isSetWinOdds();
    boolean that_present_winOdds = true && that.isSetWinOdds();
    if (this_present_winOdds || that_present_winOdds) {
      if (!(this_present_winOdds && that_present_winOdds))
        return false;
      if (!this.winOdds.equals(that.winOdds))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_matchType = true;
    boolean that_present_matchType = true;
    if (this_present_matchType || that_present_matchType) {
      if (!(this_present_matchType && that_present_matchType))
        return false;
      if (this.matchType != that.matchType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OrderDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchNo()).compareTo(other.isSetMatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNo, other.matchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRq()).compareTo(other.isSetRq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rq, other.rq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOdds()).compareTo(other.isSetOdds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odds, other.odds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchStatus()).compareTo(other.isSetMatchStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchStatus, other.matchStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinOdds()).compareTo(other.isSetWinOdds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinOdds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winOdds, other.winOdds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchType()).compareTo(other.isSetMatchType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchType, other.matchType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderDetail(");
    boolean first = true;

    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferId:");
    if (this.transferId == null) {
      sb.append("null");
    } else {
      sb.append(this.transferId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchNo:");
    if (this.matchNo == null) {
      sb.append("null");
    } else {
      sb.append(this.matchNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rq:");
    if (this.rq == null) {
      sb.append("null");
    } else {
      sb.append(this.rq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odds:");
    if (this.odds == null) {
      sb.append("null");
    } else {
      sb.append(this.odds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchStatus:");
    sb.append(this.matchStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("winOdds:");
    if (this.winOdds == null) {
      sb.append("null");
    } else {
      sb.append(this.winOdds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchType:");
    sb.append(this.matchType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderDetailStandardSchemeFactory implements SchemeFactory {
    public OrderDetailStandardScheme getScheme() {
      return new OrderDetailStandardScheme();
    }
  }

  private static class OrderDetailStandardScheme extends StandardScheme<OrderDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNo = iprot.readString();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferId = iprot.readString();
              struct.setTransferIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchNo = iprot.readString();
              struct.setMatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rq = iprot.readString();
              struct.setRqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ODDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odds = iprot.readString();
              struct.setOddsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MATCH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchStatus = iprot.readI32();
              struct.setMatchStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WIN_ODDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.winOdds = iprot.readString();
              struct.setWinOddsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MATCH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchType = iprot.readI32();
              struct.setMatchTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderNo != null) {
        oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.orderNo);
        oprot.writeFieldEnd();
      }
      if (struct.transferId != null) {
        oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
        oprot.writeString(struct.transferId);
        oprot.writeFieldEnd();
      }
      if (struct.matchNo != null) {
        oprot.writeFieldBegin(MATCH_NO_FIELD_DESC);
        oprot.writeString(struct.matchNo);
        oprot.writeFieldEnd();
      }
      if (struct.rq != null) {
        oprot.writeFieldBegin(RQ_FIELD_DESC);
        oprot.writeString(struct.rq);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.odds != null) {
        oprot.writeFieldBegin(ODDS_FIELD_DESC);
        oprot.writeString(struct.odds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MATCH_STATUS_FIELD_DESC);
      oprot.writeI32(struct.matchStatus);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.winOdds != null) {
        oprot.writeFieldBegin(WIN_ODDS_FIELD_DESC);
        oprot.writeString(struct.winOdds);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MATCH_TYPE_FIELD_DESC);
      oprot.writeI32(struct.matchType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderDetailTupleSchemeFactory implements SchemeFactory {
    public OrderDetailTupleScheme getScheme() {
      return new OrderDetailTupleScheme();
    }
  }

  private static class OrderDetailTupleScheme extends TupleScheme<OrderDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderNo()) {
        optionals.set(0);
      }
      if (struct.isSetTransferId()) {
        optionals.set(1);
      }
      if (struct.isSetMatchNo()) {
        optionals.set(2);
      }
      if (struct.isSetRq()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      if (struct.isSetOdds()) {
        optionals.set(5);
      }
      if (struct.isSetMatchStatus()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetWinOdds()) {
        optionals.set(8);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(9);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(10);
      }
      if (struct.isSetMatchType()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetOrderNo()) {
        oprot.writeString(struct.orderNo);
      }
      if (struct.isSetTransferId()) {
        oprot.writeString(struct.transferId);
      }
      if (struct.isSetMatchNo()) {
        oprot.writeString(struct.matchNo);
      }
      if (struct.isSetRq()) {
        oprot.writeString(struct.rq);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetOdds()) {
        oprot.writeString(struct.odds);
      }
      if (struct.isSetMatchStatus()) {
        oprot.writeI32(struct.matchStatus);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetWinOdds()) {
        oprot.writeString(struct.winOdds);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetMatchType()) {
        oprot.writeI32(struct.matchType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.orderNo = iprot.readString();
        struct.setOrderNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.transferId = iprot.readString();
        struct.setTransferIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.matchNo = iprot.readString();
        struct.setMatchNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rq = iprot.readString();
        struct.setRqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.odds = iprot.readString();
        struct.setOddsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.matchStatus = iprot.readI32();
        struct.setMatchStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.winOdds = iprot.readString();
        struct.setWinOddsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.matchType = iprot.readI32();
        struct.setMatchTypeIsSet(true);
      }
    }
  }

}

