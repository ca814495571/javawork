/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.accessback;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TicknumRecord implements org.apache.thrift.TBase<TicknumRecord, TicknumRecord._Fields>, java.io.Serializable, Cloneable, Comparable<TicknumRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TicknumRecord");

  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUCCESS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("successNum", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FAIL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("failNum", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TicknumRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TicknumRecordTupleSchemeFactory());
  }

  public String gameId; // required
  public String issue; // required
  public long successNum; // required
  public long failNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_ID((short)1, "gameId"),
    ISSUE((short)2, "issue"),
    SUCCESS_NUM((short)3, "successNum"),
    FAIL_NUM((short)4, "failNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_ID
          return GAME_ID;
        case 2: // ISSUE
          return ISSUE;
        case 3: // SUCCESS_NUM
          return SUCCESS_NUM;
        case 4: // FAIL_NUM
          return FAIL_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESSNUM_ISSET_ID = 0;
  private static final int __FAILNUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_NUM, new org.apache.thrift.meta_data.FieldMetaData("successNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAIL_NUM, new org.apache.thrift.meta_data.FieldMetaData("failNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TicknumRecord.class, metaDataMap);
  }

  public TicknumRecord() {
  }

  public TicknumRecord(
    String gameId,
    String issue,
    long successNum,
    long failNum)
  {
    this();
    this.gameId = gameId;
    this.issue = issue;
    this.successNum = successNum;
    setSuccessNumIsSet(true);
    this.failNum = failNum;
    setFailNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TicknumRecord(TicknumRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGameId()) {
      this.gameId = other.gameId;
    }
    if (other.isSetIssue()) {
      this.issue = other.issue;
    }
    this.successNum = other.successNum;
    this.failNum = other.failNum;
  }

  public TicknumRecord deepCopy() {
    return new TicknumRecord(this);
  }

  @Override
  public void clear() {
    this.gameId = null;
    this.issue = null;
    setSuccessNumIsSet(false);
    this.successNum = 0;
    setFailNumIsSet(false);
    this.failNum = 0;
  }

  public String getGameId() {
    return this.gameId;
  }

  public TicknumRecord setGameId(String gameId) {
    this.gameId = gameId;
    return this;
  }

  public void unsetGameId() {
    this.gameId = null;
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return this.gameId != null;
  }

  public void setGameIdIsSet(boolean value) {
    if (!value) {
      this.gameId = null;
    }
  }

  public String getIssue() {
    return this.issue;
  }

  public TicknumRecord setIssue(String issue) {
    this.issue = issue;
    return this;
  }

  public void unsetIssue() {
    this.issue = null;
  }

  /** Returns true if field issue is set (has been assigned a value) and false otherwise */
  public boolean isSetIssue() {
    return this.issue != null;
  }

  public void setIssueIsSet(boolean value) {
    if (!value) {
      this.issue = null;
    }
  }

  public long getSuccessNum() {
    return this.successNum;
  }

  public TicknumRecord setSuccessNum(long successNum) {
    this.successNum = successNum;
    setSuccessNumIsSet(true);
    return this;
  }

  public void unsetSuccessNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSNUM_ISSET_ID);
  }

  /** Returns true if field successNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSNUM_ISSET_ID);
  }

  public void setSuccessNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSNUM_ISSET_ID, value);
  }

  public long getFailNum() {
    return this.failNum;
  }

  public TicknumRecord setFailNum(long failNum) {
    this.failNum = failNum;
    setFailNumIsSet(true);
    return this;
  }

  public void unsetFailNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILNUM_ISSET_ID);
  }

  /** Returns true if field failNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFailNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILNUM_ISSET_ID);
  }

  public void setFailNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((String)value);
      }
      break;

    case ISSUE:
      if (value == null) {
        unsetIssue();
      } else {
        setIssue((String)value);
      }
      break;

    case SUCCESS_NUM:
      if (value == null) {
        unsetSuccessNum();
      } else {
        setSuccessNum((Long)value);
      }
      break;

    case FAIL_NUM:
      if (value == null) {
        unsetFailNum();
      } else {
        setFailNum((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_ID:
      return getGameId();

    case ISSUE:
      return getIssue();

    case SUCCESS_NUM:
      return Long.valueOf(getSuccessNum());

    case FAIL_NUM:
      return Long.valueOf(getFailNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_ID:
      return isSetGameId();
    case ISSUE:
      return isSetIssue();
    case SUCCESS_NUM:
      return isSetSuccessNum();
    case FAIL_NUM:
      return isSetFailNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TicknumRecord)
      return this.equals((TicknumRecord)that);
    return false;
  }

  public boolean equals(TicknumRecord that) {
    if (that == null)
      return false;

    boolean this_present_gameId = true && this.isSetGameId();
    boolean that_present_gameId = true && that.isSetGameId();
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (!this.gameId.equals(that.gameId))
        return false;
    }

    boolean this_present_issue = true && this.isSetIssue();
    boolean that_present_issue = true && that.isSetIssue();
    if (this_present_issue || that_present_issue) {
      if (!(this_present_issue && that_present_issue))
        return false;
      if (!this.issue.equals(that.issue))
        return false;
    }

    boolean this_present_successNum = true;
    boolean that_present_successNum = true;
    if (this_present_successNum || that_present_successNum) {
      if (!(this_present_successNum && that_present_successNum))
        return false;
      if (this.successNum != that.successNum)
        return false;
    }

    boolean this_present_failNum = true;
    boolean that_present_failNum = true;
    if (this_present_failNum || that_present_failNum) {
      if (!(this_present_failNum && that_present_failNum))
        return false;
      if (this.failNum != that.failNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TicknumRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssue()).compareTo(other.isSetIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issue, other.issue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessNum()).compareTo(other.isSetSuccessNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successNum, other.successNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailNum()).compareTo(other.isSetFailNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failNum, other.failNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TicknumRecord(");
    boolean first = true;

    sb.append("gameId:");
    if (this.gameId == null) {
      sb.append("null");
    } else {
      sb.append(this.gameId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issue:");
    if (this.issue == null) {
      sb.append("null");
    } else {
      sb.append(this.issue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successNum:");
    sb.append(this.successNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failNum:");
    sb.append(this.failNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TicknumRecordStandardSchemeFactory implements SchemeFactory {
    public TicknumRecordStandardScheme getScheme() {
      return new TicknumRecordStandardScheme();
    }
  }

  private static class TicknumRecordStandardScheme extends StandardScheme<TicknumRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TicknumRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameId = iprot.readString();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issue = iprot.readString();
              struct.setIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUCCESS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successNum = iprot.readI64();
              struct.setSuccessNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAIL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failNum = iprot.readI64();
              struct.setFailNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TicknumRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gameId != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameId);
        oprot.writeFieldEnd();
      }
      if (struct.issue != null) {
        oprot.writeFieldBegin(ISSUE_FIELD_DESC);
        oprot.writeString(struct.issue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUCCESS_NUM_FIELD_DESC);
      oprot.writeI64(struct.successNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_NUM_FIELD_DESC);
      oprot.writeI64(struct.failNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TicknumRecordTupleSchemeFactory implements SchemeFactory {
    public TicknumRecordTupleScheme getScheme() {
      return new TicknumRecordTupleScheme();
    }
  }

  private static class TicknumRecordTupleScheme extends TupleScheme<TicknumRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TicknumRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameId()) {
        optionals.set(0);
      }
      if (struct.isSetIssue()) {
        optionals.set(1);
      }
      if (struct.isSetSuccessNum()) {
        optionals.set(2);
      }
      if (struct.isSetFailNum()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGameId()) {
        oprot.writeString(struct.gameId);
      }
      if (struct.isSetIssue()) {
        oprot.writeString(struct.issue);
      }
      if (struct.isSetSuccessNum()) {
        oprot.writeI64(struct.successNum);
      }
      if (struct.isSetFailNum()) {
        oprot.writeI64(struct.failNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TicknumRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.gameId = iprot.readString();
        struct.setGameIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.issue = iprot.readString();
        struct.setIssueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.successNum = iprot.readI64();
        struct.setSuccessNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.failNum = iprot.readI64();
        struct.setFailNumIsSet(true);
      }
    }
  }

}

