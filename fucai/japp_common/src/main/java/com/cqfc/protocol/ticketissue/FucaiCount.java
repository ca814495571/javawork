/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FucaiCount implements org.apache.thrift.TBase<FucaiCount, FucaiCount._Fields>, java.io.Serializable, Cloneable, Comparable<FucaiCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FucaiCount");

  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBuy", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_WINNING_FIELD_DESC = new org.apache.thrift.protocol.TField("totalWinning", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FucaiCountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FucaiCountTupleSchemeFactory());
  }

  public String lotteryId; // required
  public String issueNo; // required
  public int ticketNum; // required
  public long totalBuy; // required
  public long totalWinning; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOTTERY_ID((short)1, "lotteryId"),
    ISSUE_NO((short)2, "issueNo"),
    TICKET_NUM((short)3, "ticketNum"),
    TOTAL_BUY((short)4, "totalBuy"),
    TOTAL_WINNING((short)5, "totalWinning");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOTTERY_ID
          return LOTTERY_ID;
        case 2: // ISSUE_NO
          return ISSUE_NO;
        case 3: // TICKET_NUM
          return TICKET_NUM;
        case 4: // TOTAL_BUY
          return TOTAL_BUY;
        case 5: // TOTAL_WINNING
          return TOTAL_WINNING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETNUM_ISSET_ID = 0;
  private static final int __TOTALBUY_ISSET_ID = 1;
  private static final int __TOTALWINNING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("ticketNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_BUY, new org.apache.thrift.meta_data.FieldMetaData("totalBuy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_WINNING, new org.apache.thrift.meta_data.FieldMetaData("totalWinning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FucaiCount.class, metaDataMap);
  }

  public FucaiCount() {
  }

  public FucaiCount(
    String lotteryId,
    String issueNo,
    int ticketNum,
    long totalBuy,
    long totalWinning)
  {
    this();
    this.lotteryId = lotteryId;
    this.issueNo = issueNo;
    this.ticketNum = ticketNum;
    setTicketNumIsSet(true);
    this.totalBuy = totalBuy;
    setTotalBuyIsSet(true);
    this.totalWinning = totalWinning;
    setTotalWinningIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FucaiCount(FucaiCount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    this.ticketNum = other.ticketNum;
    this.totalBuy = other.totalBuy;
    this.totalWinning = other.totalWinning;
  }

  public FucaiCount deepCopy() {
    return new FucaiCount(this);
  }

  @Override
  public void clear() {
    this.lotteryId = null;
    this.issueNo = null;
    setTicketNumIsSet(false);
    this.ticketNum = 0;
    setTotalBuyIsSet(false);
    this.totalBuy = 0;
    setTotalWinningIsSet(false);
    this.totalWinning = 0;
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public FucaiCount setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public FucaiCount setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public int getTicketNum() {
    return this.ticketNum;
  }

  public FucaiCount setTicketNum(int ticketNum) {
    this.ticketNum = ticketNum;
    setTicketNumIsSet(true);
    return this;
  }

  public void unsetTicketNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETNUM_ISSET_ID);
  }

  /** Returns true if field ticketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETNUM_ISSET_ID);
  }

  public void setTicketNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETNUM_ISSET_ID, value);
  }

  public long getTotalBuy() {
    return this.totalBuy;
  }

  public FucaiCount setTotalBuy(long totalBuy) {
    this.totalBuy = totalBuy;
    setTotalBuyIsSet(true);
    return this;
  }

  public void unsetTotalBuy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALBUY_ISSET_ID);
  }

  /** Returns true if field totalBuy is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalBuy() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALBUY_ISSET_ID);
  }

  public void setTotalBuyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALBUY_ISSET_ID, value);
  }

  public long getTotalWinning() {
    return this.totalWinning;
  }

  public FucaiCount setTotalWinning(long totalWinning) {
    this.totalWinning = totalWinning;
    setTotalWinningIsSet(true);
    return this;
  }

  public void unsetTotalWinning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALWINNING_ISSET_ID);
  }

  /** Returns true if field totalWinning is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalWinning() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALWINNING_ISSET_ID);
  }

  public void setTotalWinningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALWINNING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case TICKET_NUM:
      if (value == null) {
        unsetTicketNum();
      } else {
        setTicketNum((Integer)value);
      }
      break;

    case TOTAL_BUY:
      if (value == null) {
        unsetTotalBuy();
      } else {
        setTotalBuy((Long)value);
      }
      break;

    case TOTAL_WINNING:
      if (value == null) {
        unsetTotalWinning();
      } else {
        setTotalWinning((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOTTERY_ID:
      return getLotteryId();

    case ISSUE_NO:
      return getIssueNo();

    case TICKET_NUM:
      return Integer.valueOf(getTicketNum());

    case TOTAL_BUY:
      return Long.valueOf(getTotalBuy());

    case TOTAL_WINNING:
      return Long.valueOf(getTotalWinning());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOTTERY_ID:
      return isSetLotteryId();
    case ISSUE_NO:
      return isSetIssueNo();
    case TICKET_NUM:
      return isSetTicketNum();
    case TOTAL_BUY:
      return isSetTotalBuy();
    case TOTAL_WINNING:
      return isSetTotalWinning();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FucaiCount)
      return this.equals((FucaiCount)that);
    return false;
  }

  public boolean equals(FucaiCount that) {
    if (that == null)
      return false;

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_ticketNum = true;
    boolean that_present_ticketNum = true;
    if (this_present_ticketNum || that_present_ticketNum) {
      if (!(this_present_ticketNum && that_present_ticketNum))
        return false;
      if (this.ticketNum != that.ticketNum)
        return false;
    }

    boolean this_present_totalBuy = true;
    boolean that_present_totalBuy = true;
    if (this_present_totalBuy || that_present_totalBuy) {
      if (!(this_present_totalBuy && that_present_totalBuy))
        return false;
      if (this.totalBuy != that.totalBuy)
        return false;
    }

    boolean this_present_totalWinning = true;
    boolean that_present_totalWinning = true;
    if (this_present_totalWinning || that_present_totalWinning) {
      if (!(this_present_totalWinning && that_present_totalWinning))
        return false;
      if (this.totalWinning != that.totalWinning)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FucaiCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketNum()).compareTo(other.isSetTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketNum, other.ticketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalBuy()).compareTo(other.isSetTotalBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBuy, other.totalBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalWinning()).compareTo(other.isSetTotalWinning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalWinning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalWinning, other.totalWinning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FucaiCount(");
    boolean first = true;

    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketNum:");
    sb.append(this.ticketNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalBuy:");
    sb.append(this.totalBuy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalWinning:");
    sb.append(this.totalWinning);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FucaiCountStandardSchemeFactory implements SchemeFactory {
    public FucaiCountStandardScheme getScheme() {
      return new FucaiCountStandardScheme();
    }
  }

  private static class FucaiCountStandardScheme extends StandardScheme<FucaiCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FucaiCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketNum = iprot.readI32();
              struct.setTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalBuy = iprot.readI64();
              struct.setTotalBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_WINNING
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalWinning = iprot.readI64();
              struct.setTotalWinningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FucaiCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKET_NUM_FIELD_DESC);
      oprot.writeI32(struct.ticketNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_BUY_FIELD_DESC);
      oprot.writeI64(struct.totalBuy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_WINNING_FIELD_DESC);
      oprot.writeI64(struct.totalWinning);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FucaiCountTupleSchemeFactory implements SchemeFactory {
    public FucaiCountTupleScheme getScheme() {
      return new FucaiCountTupleScheme();
    }
  }

  private static class FucaiCountTupleScheme extends TupleScheme<FucaiCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FucaiCount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLotteryId()) {
        optionals.set(0);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(1);
      }
      if (struct.isSetTicketNum()) {
        optionals.set(2);
      }
      if (struct.isSetTotalBuy()) {
        optionals.set(3);
      }
      if (struct.isSetTotalWinning()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetTicketNum()) {
        oprot.writeI32(struct.ticketNum);
      }
      if (struct.isSetTotalBuy()) {
        oprot.writeI64(struct.totalBuy);
      }
      if (struct.isSetTotalWinning()) {
        oprot.writeI64(struct.totalWinning);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FucaiCount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ticketNum = iprot.readI32();
        struct.setTicketNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalBuy = iprot.readI64();
        struct.setTotalBuyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalWinning = iprot.readI64();
        struct.setTotalWinningIsSet(true);
      }
    }
  }

}

