/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MatchCompetivePlay implements org.apache.thrift.TBase<MatchCompetivePlay, MatchCompetivePlay._Fields>, java.io.Serializable, Cloneable, Comparable<MatchCompetivePlay> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatchCompetivePlay");

  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DG_GD_SALE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("dgGdSaleStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DG_SALE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("dgSaleStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField GG_SALE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ggSaleStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DG_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("dgPv", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GG_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("ggPv", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DG_RQ_FIELD_DESC = new org.apache.thrift.protocol.TField("dgRq", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField GG_RQ_FIELD_DESC = new org.apache.thrift.protocol.TField("ggRq", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MatchCompetivePlayStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MatchCompetivePlayTupleSchemeFactory());
  }

  public String lotteryId; // required
  public String wareIssue; // required
  public String transferId; // required
  public String matchId; // required
  public int dgGdSaleStatus; // required
  public int dgSaleStatus; // required
  public int ggSaleStatus; // required
  public String dgPv; // required
  public String ggPv; // required
  public String dgRq; // required
  public String ggRq; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOTTERY_ID((short)1, "lotteryId"),
    WARE_ISSUE((short)2, "wareIssue"),
    TRANSFER_ID((short)3, "transferId"),
    MATCH_ID((short)4, "matchId"),
    DG_GD_SALE_STATUS((short)5, "dgGdSaleStatus"),
    DG_SALE_STATUS((short)6, "dgSaleStatus"),
    GG_SALE_STATUS((short)7, "ggSaleStatus"),
    DG_PV((short)8, "dgPv"),
    GG_PV((short)9, "ggPv"),
    DG_RQ((short)10, "dgRq"),
    GG_RQ((short)11, "ggRq"),
    CREATE_TIME((short)12, "createTime"),
    LAST_UPDATE_TIME((short)13, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOTTERY_ID
          return LOTTERY_ID;
        case 2: // WARE_ISSUE
          return WARE_ISSUE;
        case 3: // TRANSFER_ID
          return TRANSFER_ID;
        case 4: // MATCH_ID
          return MATCH_ID;
        case 5: // DG_GD_SALE_STATUS
          return DG_GD_SALE_STATUS;
        case 6: // DG_SALE_STATUS
          return DG_SALE_STATUS;
        case 7: // GG_SALE_STATUS
          return GG_SALE_STATUS;
        case 8: // DG_PV
          return DG_PV;
        case 9: // GG_PV
          return GG_PV;
        case 10: // DG_RQ
          return DG_RQ;
        case 11: // GG_RQ
          return GG_RQ;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DGGDSALESTATUS_ISSET_ID = 0;
  private static final int __DGSALESTATUS_ISSET_ID = 1;
  private static final int __GGSALESTATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("matchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DG_GD_SALE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("dgGdSaleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DG_SALE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("dgSaleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GG_SALE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ggSaleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DG_PV, new org.apache.thrift.meta_data.FieldMetaData("dgPv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GG_PV, new org.apache.thrift.meta_data.FieldMetaData("ggPv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DG_RQ, new org.apache.thrift.meta_data.FieldMetaData("dgRq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GG_RQ, new org.apache.thrift.meta_data.FieldMetaData("ggRq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatchCompetivePlay.class, metaDataMap);
  }

  public MatchCompetivePlay() {
  }

  public MatchCompetivePlay(
    String lotteryId,
    String wareIssue,
    String transferId,
    String matchId,
    int dgGdSaleStatus,
    int dgSaleStatus,
    int ggSaleStatus,
    String dgPv,
    String ggPv,
    String dgRq,
    String ggRq,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.lotteryId = lotteryId;
    this.wareIssue = wareIssue;
    this.transferId = transferId;
    this.matchId = matchId;
    this.dgGdSaleStatus = dgGdSaleStatus;
    setDgGdSaleStatusIsSet(true);
    this.dgSaleStatus = dgSaleStatus;
    setDgSaleStatusIsSet(true);
    this.ggSaleStatus = ggSaleStatus;
    setGgSaleStatusIsSet(true);
    this.dgPv = dgPv;
    this.ggPv = ggPv;
    this.dgRq = dgRq;
    this.ggRq = ggRq;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatchCompetivePlay(MatchCompetivePlay other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetWareIssue()) {
      this.wareIssue = other.wareIssue;
    }
    if (other.isSetTransferId()) {
      this.transferId = other.transferId;
    }
    if (other.isSetMatchId()) {
      this.matchId = other.matchId;
    }
    this.dgGdSaleStatus = other.dgGdSaleStatus;
    this.dgSaleStatus = other.dgSaleStatus;
    this.ggSaleStatus = other.ggSaleStatus;
    if (other.isSetDgPv()) {
      this.dgPv = other.dgPv;
    }
    if (other.isSetGgPv()) {
      this.ggPv = other.ggPv;
    }
    if (other.isSetDgRq()) {
      this.dgRq = other.dgRq;
    }
    if (other.isSetGgRq()) {
      this.ggRq = other.ggRq;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public MatchCompetivePlay deepCopy() {
    return new MatchCompetivePlay(this);
  }

  @Override
  public void clear() {
    this.lotteryId = null;
    this.wareIssue = null;
    this.transferId = null;
    this.matchId = null;
    setDgGdSaleStatusIsSet(false);
    this.dgGdSaleStatus = 0;
    setDgSaleStatusIsSet(false);
    this.dgSaleStatus = 0;
    setGgSaleStatusIsSet(false);
    this.ggSaleStatus = 0;
    this.dgPv = null;
    this.ggPv = null;
    this.dgRq = null;
    this.ggRq = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public MatchCompetivePlay setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getWareIssue() {
    return this.wareIssue;
  }

  public MatchCompetivePlay setWareIssue(String wareIssue) {
    this.wareIssue = wareIssue;
    return this;
  }

  public void unsetWareIssue() {
    this.wareIssue = null;
  }

  /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
  public boolean isSetWareIssue() {
    return this.wareIssue != null;
  }

  public void setWareIssueIsSet(boolean value) {
    if (!value) {
      this.wareIssue = null;
    }
  }

  public String getTransferId() {
    return this.transferId;
  }

  public MatchCompetivePlay setTransferId(String transferId) {
    this.transferId = transferId;
    return this;
  }

  public void unsetTransferId() {
    this.transferId = null;
  }

  /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferId() {
    return this.transferId != null;
  }

  public void setTransferIdIsSet(boolean value) {
    if (!value) {
      this.transferId = null;
    }
  }

  public String getMatchId() {
    return this.matchId;
  }

  public MatchCompetivePlay setMatchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  public void unsetMatchId() {
    this.matchId = null;
  }

  /** Returns true if field matchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchId() {
    return this.matchId != null;
  }

  public void setMatchIdIsSet(boolean value) {
    if (!value) {
      this.matchId = null;
    }
  }

  public int getDgGdSaleStatus() {
    return this.dgGdSaleStatus;
  }

  public MatchCompetivePlay setDgGdSaleStatus(int dgGdSaleStatus) {
    this.dgGdSaleStatus = dgGdSaleStatus;
    setDgGdSaleStatusIsSet(true);
    return this;
  }

  public void unsetDgGdSaleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DGGDSALESTATUS_ISSET_ID);
  }

  /** Returns true if field dgGdSaleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetDgGdSaleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __DGGDSALESTATUS_ISSET_ID);
  }

  public void setDgGdSaleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DGGDSALESTATUS_ISSET_ID, value);
  }

  public int getDgSaleStatus() {
    return this.dgSaleStatus;
  }

  public MatchCompetivePlay setDgSaleStatus(int dgSaleStatus) {
    this.dgSaleStatus = dgSaleStatus;
    setDgSaleStatusIsSet(true);
    return this;
  }

  public void unsetDgSaleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DGSALESTATUS_ISSET_ID);
  }

  /** Returns true if field dgSaleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetDgSaleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __DGSALESTATUS_ISSET_ID);
  }

  public void setDgSaleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DGSALESTATUS_ISSET_ID, value);
  }

  public int getGgSaleStatus() {
    return this.ggSaleStatus;
  }

  public MatchCompetivePlay setGgSaleStatus(int ggSaleStatus) {
    this.ggSaleStatus = ggSaleStatus;
    setGgSaleStatusIsSet(true);
    return this;
  }

  public void unsetGgSaleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GGSALESTATUS_ISSET_ID);
  }

  /** Returns true if field ggSaleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetGgSaleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __GGSALESTATUS_ISSET_ID);
  }

  public void setGgSaleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GGSALESTATUS_ISSET_ID, value);
  }

  public String getDgPv() {
    return this.dgPv;
  }

  public MatchCompetivePlay setDgPv(String dgPv) {
    this.dgPv = dgPv;
    return this;
  }

  public void unsetDgPv() {
    this.dgPv = null;
  }

  /** Returns true if field dgPv is set (has been assigned a value) and false otherwise */
  public boolean isSetDgPv() {
    return this.dgPv != null;
  }

  public void setDgPvIsSet(boolean value) {
    if (!value) {
      this.dgPv = null;
    }
  }

  public String getGgPv() {
    return this.ggPv;
  }

  public MatchCompetivePlay setGgPv(String ggPv) {
    this.ggPv = ggPv;
    return this;
  }

  public void unsetGgPv() {
    this.ggPv = null;
  }

  /** Returns true if field ggPv is set (has been assigned a value) and false otherwise */
  public boolean isSetGgPv() {
    return this.ggPv != null;
  }

  public void setGgPvIsSet(boolean value) {
    if (!value) {
      this.ggPv = null;
    }
  }

  public String getDgRq() {
    return this.dgRq;
  }

  public MatchCompetivePlay setDgRq(String dgRq) {
    this.dgRq = dgRq;
    return this;
  }

  public void unsetDgRq() {
    this.dgRq = null;
  }

  /** Returns true if field dgRq is set (has been assigned a value) and false otherwise */
  public boolean isSetDgRq() {
    return this.dgRq != null;
  }

  public void setDgRqIsSet(boolean value) {
    if (!value) {
      this.dgRq = null;
    }
  }

  public String getGgRq() {
    return this.ggRq;
  }

  public MatchCompetivePlay setGgRq(String ggRq) {
    this.ggRq = ggRq;
    return this;
  }

  public void unsetGgRq() {
    this.ggRq = null;
  }

  /** Returns true if field ggRq is set (has been assigned a value) and false otherwise */
  public boolean isSetGgRq() {
    return this.ggRq != null;
  }

  public void setGgRqIsSet(boolean value) {
    if (!value) {
      this.ggRq = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MatchCompetivePlay setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public MatchCompetivePlay setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case WARE_ISSUE:
      if (value == null) {
        unsetWareIssue();
      } else {
        setWareIssue((String)value);
      }
      break;

    case TRANSFER_ID:
      if (value == null) {
        unsetTransferId();
      } else {
        setTransferId((String)value);
      }
      break;

    case MATCH_ID:
      if (value == null) {
        unsetMatchId();
      } else {
        setMatchId((String)value);
      }
      break;

    case DG_GD_SALE_STATUS:
      if (value == null) {
        unsetDgGdSaleStatus();
      } else {
        setDgGdSaleStatus((Integer)value);
      }
      break;

    case DG_SALE_STATUS:
      if (value == null) {
        unsetDgSaleStatus();
      } else {
        setDgSaleStatus((Integer)value);
      }
      break;

    case GG_SALE_STATUS:
      if (value == null) {
        unsetGgSaleStatus();
      } else {
        setGgSaleStatus((Integer)value);
      }
      break;

    case DG_PV:
      if (value == null) {
        unsetDgPv();
      } else {
        setDgPv((String)value);
      }
      break;

    case GG_PV:
      if (value == null) {
        unsetGgPv();
      } else {
        setGgPv((String)value);
      }
      break;

    case DG_RQ:
      if (value == null) {
        unsetDgRq();
      } else {
        setDgRq((String)value);
      }
      break;

    case GG_RQ:
      if (value == null) {
        unsetGgRq();
      } else {
        setGgRq((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOTTERY_ID:
      return getLotteryId();

    case WARE_ISSUE:
      return getWareIssue();

    case TRANSFER_ID:
      return getTransferId();

    case MATCH_ID:
      return getMatchId();

    case DG_GD_SALE_STATUS:
      return Integer.valueOf(getDgGdSaleStatus());

    case DG_SALE_STATUS:
      return Integer.valueOf(getDgSaleStatus());

    case GG_SALE_STATUS:
      return Integer.valueOf(getGgSaleStatus());

    case DG_PV:
      return getDgPv();

    case GG_PV:
      return getGgPv();

    case DG_RQ:
      return getDgRq();

    case GG_RQ:
      return getGgRq();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOTTERY_ID:
      return isSetLotteryId();
    case WARE_ISSUE:
      return isSetWareIssue();
    case TRANSFER_ID:
      return isSetTransferId();
    case MATCH_ID:
      return isSetMatchId();
    case DG_GD_SALE_STATUS:
      return isSetDgGdSaleStatus();
    case DG_SALE_STATUS:
      return isSetDgSaleStatus();
    case GG_SALE_STATUS:
      return isSetGgSaleStatus();
    case DG_PV:
      return isSetDgPv();
    case GG_PV:
      return isSetGgPv();
    case DG_RQ:
      return isSetDgRq();
    case GG_RQ:
      return isSetGgRq();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MatchCompetivePlay)
      return this.equals((MatchCompetivePlay)that);
    return false;
  }

  public boolean equals(MatchCompetivePlay that) {
    if (that == null)
      return false;

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_wareIssue = true && this.isSetWareIssue();
    boolean that_present_wareIssue = true && that.isSetWareIssue();
    if (this_present_wareIssue || that_present_wareIssue) {
      if (!(this_present_wareIssue && that_present_wareIssue))
        return false;
      if (!this.wareIssue.equals(that.wareIssue))
        return false;
    }

    boolean this_present_transferId = true && this.isSetTransferId();
    boolean that_present_transferId = true && that.isSetTransferId();
    if (this_present_transferId || that_present_transferId) {
      if (!(this_present_transferId && that_present_transferId))
        return false;
      if (!this.transferId.equals(that.transferId))
        return false;
    }

    boolean this_present_matchId = true && this.isSetMatchId();
    boolean that_present_matchId = true && that.isSetMatchId();
    if (this_present_matchId || that_present_matchId) {
      if (!(this_present_matchId && that_present_matchId))
        return false;
      if (!this.matchId.equals(that.matchId))
        return false;
    }

    boolean this_present_dgGdSaleStatus = true;
    boolean that_present_dgGdSaleStatus = true;
    if (this_present_dgGdSaleStatus || that_present_dgGdSaleStatus) {
      if (!(this_present_dgGdSaleStatus && that_present_dgGdSaleStatus))
        return false;
      if (this.dgGdSaleStatus != that.dgGdSaleStatus)
        return false;
    }

    boolean this_present_dgSaleStatus = true;
    boolean that_present_dgSaleStatus = true;
    if (this_present_dgSaleStatus || that_present_dgSaleStatus) {
      if (!(this_present_dgSaleStatus && that_present_dgSaleStatus))
        return false;
      if (this.dgSaleStatus != that.dgSaleStatus)
        return false;
    }

    boolean this_present_ggSaleStatus = true;
    boolean that_present_ggSaleStatus = true;
    if (this_present_ggSaleStatus || that_present_ggSaleStatus) {
      if (!(this_present_ggSaleStatus && that_present_ggSaleStatus))
        return false;
      if (this.ggSaleStatus != that.ggSaleStatus)
        return false;
    }

    boolean this_present_dgPv = true && this.isSetDgPv();
    boolean that_present_dgPv = true && that.isSetDgPv();
    if (this_present_dgPv || that_present_dgPv) {
      if (!(this_present_dgPv && that_present_dgPv))
        return false;
      if (!this.dgPv.equals(that.dgPv))
        return false;
    }

    boolean this_present_ggPv = true && this.isSetGgPv();
    boolean that_present_ggPv = true && that.isSetGgPv();
    if (this_present_ggPv || that_present_ggPv) {
      if (!(this_present_ggPv && that_present_ggPv))
        return false;
      if (!this.ggPv.equals(that.ggPv))
        return false;
    }

    boolean this_present_dgRq = true && this.isSetDgRq();
    boolean that_present_dgRq = true && that.isSetDgRq();
    if (this_present_dgRq || that_present_dgRq) {
      if (!(this_present_dgRq && that_present_dgRq))
        return false;
      if (!this.dgRq.equals(that.dgRq))
        return false;
    }

    boolean this_present_ggRq = true && this.isSetGgRq();
    boolean that_present_ggRq = true && that.isSetGgRq();
    if (this_present_ggRq || that_present_ggRq) {
      if (!(this_present_ggRq && that_present_ggRq))
        return false;
      if (!this.ggRq.equals(that.ggRq))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MatchCompetivePlay other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchId()).compareTo(other.isSetMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchId, other.matchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgGdSaleStatus()).compareTo(other.isSetDgGdSaleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgGdSaleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgGdSaleStatus, other.dgGdSaleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgSaleStatus()).compareTo(other.isSetDgSaleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgSaleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgSaleStatus, other.dgSaleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGgSaleStatus()).compareTo(other.isSetGgSaleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGgSaleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ggSaleStatus, other.ggSaleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgPv()).compareTo(other.isSetDgPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgPv, other.dgPv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGgPv()).compareTo(other.isSetGgPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGgPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ggPv, other.ggPv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgRq()).compareTo(other.isSetDgRq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgRq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgRq, other.dgRq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGgRq()).compareTo(other.isSetGgRq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGgRq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ggRq, other.ggRq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MatchCompetivePlay(");
    boolean first = true;

    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wareIssue:");
    if (this.wareIssue == null) {
      sb.append("null");
    } else {
      sb.append(this.wareIssue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferId:");
    if (this.transferId == null) {
      sb.append("null");
    } else {
      sb.append(this.transferId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchId:");
    if (this.matchId == null) {
      sb.append("null");
    } else {
      sb.append(this.matchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgGdSaleStatus:");
    sb.append(this.dgGdSaleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgSaleStatus:");
    sb.append(this.dgSaleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ggSaleStatus:");
    sb.append(this.ggSaleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgPv:");
    if (this.dgPv == null) {
      sb.append("null");
    } else {
      sb.append(this.dgPv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ggPv:");
    if (this.ggPv == null) {
      sb.append("null");
    } else {
      sb.append(this.ggPv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgRq:");
    if (this.dgRq == null) {
      sb.append("null");
    } else {
      sb.append(this.dgRq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ggRq:");
    if (this.ggRq == null) {
      sb.append("null");
    } else {
      sb.append(this.ggRq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatchCompetivePlayStandardSchemeFactory implements SchemeFactory {
    public MatchCompetivePlayStandardScheme getScheme() {
      return new MatchCompetivePlayStandardScheme();
    }
  }

  private static class MatchCompetivePlayStandardScheme extends StandardScheme<MatchCompetivePlay> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MatchCompetivePlay struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WARE_ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareIssue = iprot.readString();
              struct.setWareIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferId = iprot.readString();
              struct.setTransferIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchId = iprot.readString();
              struct.setMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DG_GD_SALE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dgGdSaleStatus = iprot.readI32();
              struct.setDgGdSaleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DG_SALE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dgSaleStatus = iprot.readI32();
              struct.setDgSaleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GG_SALE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ggSaleStatus = iprot.readI32();
              struct.setGgSaleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DG_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dgPv = iprot.readString();
              struct.setDgPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GG_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ggPv = iprot.readString();
              struct.setGgPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DG_RQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dgRq = iprot.readString();
              struct.setDgRqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GG_RQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ggRq = iprot.readString();
              struct.setGgRqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MatchCompetivePlay struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.wareIssue != null) {
        oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
        oprot.writeString(struct.wareIssue);
        oprot.writeFieldEnd();
      }
      if (struct.transferId != null) {
        oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
        oprot.writeString(struct.transferId);
        oprot.writeFieldEnd();
      }
      if (struct.matchId != null) {
        oprot.writeFieldBegin(MATCH_ID_FIELD_DESC);
        oprot.writeString(struct.matchId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DG_GD_SALE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.dgGdSaleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DG_SALE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.dgSaleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GG_SALE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.ggSaleStatus);
      oprot.writeFieldEnd();
      if (struct.dgPv != null) {
        oprot.writeFieldBegin(DG_PV_FIELD_DESC);
        oprot.writeString(struct.dgPv);
        oprot.writeFieldEnd();
      }
      if (struct.ggPv != null) {
        oprot.writeFieldBegin(GG_PV_FIELD_DESC);
        oprot.writeString(struct.ggPv);
        oprot.writeFieldEnd();
      }
      if (struct.dgRq != null) {
        oprot.writeFieldBegin(DG_RQ_FIELD_DESC);
        oprot.writeString(struct.dgRq);
        oprot.writeFieldEnd();
      }
      if (struct.ggRq != null) {
        oprot.writeFieldBegin(GG_RQ_FIELD_DESC);
        oprot.writeString(struct.ggRq);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatchCompetivePlayTupleSchemeFactory implements SchemeFactory {
    public MatchCompetivePlayTupleScheme getScheme() {
      return new MatchCompetivePlayTupleScheme();
    }
  }

  private static class MatchCompetivePlayTupleScheme extends TupleScheme<MatchCompetivePlay> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatchCompetivePlay struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLotteryId()) {
        optionals.set(0);
      }
      if (struct.isSetWareIssue()) {
        optionals.set(1);
      }
      if (struct.isSetTransferId()) {
        optionals.set(2);
      }
      if (struct.isSetMatchId()) {
        optionals.set(3);
      }
      if (struct.isSetDgGdSaleStatus()) {
        optionals.set(4);
      }
      if (struct.isSetDgSaleStatus()) {
        optionals.set(5);
      }
      if (struct.isSetGgSaleStatus()) {
        optionals.set(6);
      }
      if (struct.isSetDgPv()) {
        optionals.set(7);
      }
      if (struct.isSetGgPv()) {
        optionals.set(8);
      }
      if (struct.isSetDgRq()) {
        optionals.set(9);
      }
      if (struct.isSetGgRq()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetWareIssue()) {
        oprot.writeString(struct.wareIssue);
      }
      if (struct.isSetTransferId()) {
        oprot.writeString(struct.transferId);
      }
      if (struct.isSetMatchId()) {
        oprot.writeString(struct.matchId);
      }
      if (struct.isSetDgGdSaleStatus()) {
        oprot.writeI32(struct.dgGdSaleStatus);
      }
      if (struct.isSetDgSaleStatus()) {
        oprot.writeI32(struct.dgSaleStatus);
      }
      if (struct.isSetGgSaleStatus()) {
        oprot.writeI32(struct.ggSaleStatus);
      }
      if (struct.isSetDgPv()) {
        oprot.writeString(struct.dgPv);
      }
      if (struct.isSetGgPv()) {
        oprot.writeString(struct.ggPv);
      }
      if (struct.isSetDgRq()) {
        oprot.writeString(struct.dgRq);
      }
      if (struct.isSetGgRq()) {
        oprot.writeString(struct.ggRq);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatchCompetivePlay struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wareIssue = iprot.readString();
        struct.setWareIssueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transferId = iprot.readString();
        struct.setTransferIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.matchId = iprot.readString();
        struct.setMatchIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dgGdSaleStatus = iprot.readI32();
        struct.setDgGdSaleStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dgSaleStatus = iprot.readI32();
        struct.setDgSaleStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ggSaleStatus = iprot.readI32();
        struct.setGgSaleStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dgPv = iprot.readString();
        struct.setDgPvIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ggPv = iprot.readString();
        struct.setGgPvIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dgRq = iprot.readString();
        struct.setDgRqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ggRq = iprot.readString();
        struct.setGgRqIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

