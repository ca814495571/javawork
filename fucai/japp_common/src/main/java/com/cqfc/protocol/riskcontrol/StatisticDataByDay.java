/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.riskcontrol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatisticDataByDay implements org.apache.thrift.TBase<StatisticDataByDay, StatisticDataByDay._Fields>, java.io.Serializable, Cloneable, Comparable<StatisticDataByDay> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatisticDataByDay");

  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_PARTNER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPartnerAccount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_USER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalUserAccount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_RECHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRecharge", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_WINNING_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalWinningMoney", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_HANSEL_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHansel", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField INVALID_HANSEL_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidHansel", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FUCAI_TOTAL_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("fucaiTotalBuy", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_WITHDRAW_FIELD_DESC = new org.apache.thrift.protocol.TField("totalWithdraw", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTicketNum", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PAYLOG_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("paylogNum", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatisticDataByDayStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatisticDataByDayTupleSchemeFactory());
  }

  public String day; // required
  public long totalPartnerAccount; // required
  public long totalUserAccount; // required
  public long totalRecharge; // required
  public long totalWinningMoney; // required
  public long totalHansel; // required
  public long invalidHansel; // required
  public long fucaiTotalBuy; // required
  public long totalWithdraw; // required
  public long totalTicketNum; // required
  public long paylogNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAY((short)1, "day"),
    TOTAL_PARTNER_ACCOUNT((short)2, "totalPartnerAccount"),
    TOTAL_USER_ACCOUNT((short)3, "totalUserAccount"),
    TOTAL_RECHARGE((short)4, "totalRecharge"),
    TOTAL_WINNING_MONEY((short)5, "totalWinningMoney"),
    TOTAL_HANSEL((short)6, "totalHansel"),
    INVALID_HANSEL((short)7, "invalidHansel"),
    FUCAI_TOTAL_BUY((short)8, "fucaiTotalBuy"),
    TOTAL_WITHDRAW((short)9, "totalWithdraw"),
    TOTAL_TICKET_NUM((short)10, "totalTicketNum"),
    PAYLOG_NUM((short)11, "paylogNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAY
          return DAY;
        case 2: // TOTAL_PARTNER_ACCOUNT
          return TOTAL_PARTNER_ACCOUNT;
        case 3: // TOTAL_USER_ACCOUNT
          return TOTAL_USER_ACCOUNT;
        case 4: // TOTAL_RECHARGE
          return TOTAL_RECHARGE;
        case 5: // TOTAL_WINNING_MONEY
          return TOTAL_WINNING_MONEY;
        case 6: // TOTAL_HANSEL
          return TOTAL_HANSEL;
        case 7: // INVALID_HANSEL
          return INVALID_HANSEL;
        case 8: // FUCAI_TOTAL_BUY
          return FUCAI_TOTAL_BUY;
        case 9: // TOTAL_WITHDRAW
          return TOTAL_WITHDRAW;
        case 10: // TOTAL_TICKET_NUM
          return TOTAL_TICKET_NUM;
        case 11: // PAYLOG_NUM
          return PAYLOG_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPARTNERACCOUNT_ISSET_ID = 0;
  private static final int __TOTALUSERACCOUNT_ISSET_ID = 1;
  private static final int __TOTALRECHARGE_ISSET_ID = 2;
  private static final int __TOTALWINNINGMONEY_ISSET_ID = 3;
  private static final int __TOTALHANSEL_ISSET_ID = 4;
  private static final int __INVALIDHANSEL_ISSET_ID = 5;
  private static final int __FUCAITOTALBUY_ISSET_ID = 6;
  private static final int __TOTALWITHDRAW_ISSET_ID = 7;
  private static final int __TOTALTICKETNUM_ISSET_ID = 8;
  private static final int __PAYLOGNUM_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PARTNER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalPartnerAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_USER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalUserAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_RECHARGE, new org.apache.thrift.meta_data.FieldMetaData("totalRecharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_WINNING_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalWinningMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_HANSEL, new org.apache.thrift.meta_data.FieldMetaData("totalHansel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INVALID_HANSEL, new org.apache.thrift.meta_data.FieldMetaData("invalidHansel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUCAI_TOTAL_BUY, new org.apache.thrift.meta_data.FieldMetaData("fucaiTotalBuy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_WITHDRAW, new org.apache.thrift.meta_data.FieldMetaData("totalWithdraw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalTicketNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYLOG_NUM, new org.apache.thrift.meta_data.FieldMetaData("paylogNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatisticDataByDay.class, metaDataMap);
  }

  public StatisticDataByDay() {
  }

  public StatisticDataByDay(
    String day,
    long totalPartnerAccount,
    long totalUserAccount,
    long totalRecharge,
    long totalWinningMoney,
    long totalHansel,
    long invalidHansel,
    long fucaiTotalBuy,
    long totalWithdraw,
    long totalTicketNum,
    long paylogNum)
  {
    this();
    this.day = day;
    this.totalPartnerAccount = totalPartnerAccount;
    setTotalPartnerAccountIsSet(true);
    this.totalUserAccount = totalUserAccount;
    setTotalUserAccountIsSet(true);
    this.totalRecharge = totalRecharge;
    setTotalRechargeIsSet(true);
    this.totalWinningMoney = totalWinningMoney;
    setTotalWinningMoneyIsSet(true);
    this.totalHansel = totalHansel;
    setTotalHanselIsSet(true);
    this.invalidHansel = invalidHansel;
    setInvalidHanselIsSet(true);
    this.fucaiTotalBuy = fucaiTotalBuy;
    setFucaiTotalBuyIsSet(true);
    this.totalWithdraw = totalWithdraw;
    setTotalWithdrawIsSet(true);
    this.totalTicketNum = totalTicketNum;
    setTotalTicketNumIsSet(true);
    this.paylogNum = paylogNum;
    setPaylogNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatisticDataByDay(StatisticDataByDay other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDay()) {
      this.day = other.day;
    }
    this.totalPartnerAccount = other.totalPartnerAccount;
    this.totalUserAccount = other.totalUserAccount;
    this.totalRecharge = other.totalRecharge;
    this.totalWinningMoney = other.totalWinningMoney;
    this.totalHansel = other.totalHansel;
    this.invalidHansel = other.invalidHansel;
    this.fucaiTotalBuy = other.fucaiTotalBuy;
    this.totalWithdraw = other.totalWithdraw;
    this.totalTicketNum = other.totalTicketNum;
    this.paylogNum = other.paylogNum;
  }

  public StatisticDataByDay deepCopy() {
    return new StatisticDataByDay(this);
  }

  @Override
  public void clear() {
    this.day = null;
    setTotalPartnerAccountIsSet(false);
    this.totalPartnerAccount = 0;
    setTotalUserAccountIsSet(false);
    this.totalUserAccount = 0;
    setTotalRechargeIsSet(false);
    this.totalRecharge = 0;
    setTotalWinningMoneyIsSet(false);
    this.totalWinningMoney = 0;
    setTotalHanselIsSet(false);
    this.totalHansel = 0;
    setInvalidHanselIsSet(false);
    this.invalidHansel = 0;
    setFucaiTotalBuyIsSet(false);
    this.fucaiTotalBuy = 0;
    setTotalWithdrawIsSet(false);
    this.totalWithdraw = 0;
    setTotalTicketNumIsSet(false);
    this.totalTicketNum = 0;
    setPaylogNumIsSet(false);
    this.paylogNum = 0;
  }

  public String getDay() {
    return this.day;
  }

  public StatisticDataByDay setDay(String day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public long getTotalPartnerAccount() {
    return this.totalPartnerAccount;
  }

  public StatisticDataByDay setTotalPartnerAccount(long totalPartnerAccount) {
    this.totalPartnerAccount = totalPartnerAccount;
    setTotalPartnerAccountIsSet(true);
    return this;
  }

  public void unsetTotalPartnerAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPARTNERACCOUNT_ISSET_ID);
  }

  /** Returns true if field totalPartnerAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPartnerAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPARTNERACCOUNT_ISSET_ID);
  }

  public void setTotalPartnerAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPARTNERACCOUNT_ISSET_ID, value);
  }

  public long getTotalUserAccount() {
    return this.totalUserAccount;
  }

  public StatisticDataByDay setTotalUserAccount(long totalUserAccount) {
    this.totalUserAccount = totalUserAccount;
    setTotalUserAccountIsSet(true);
    return this;
  }

  public void unsetTotalUserAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALUSERACCOUNT_ISSET_ID);
  }

  /** Returns true if field totalUserAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalUserAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALUSERACCOUNT_ISSET_ID);
  }

  public void setTotalUserAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALUSERACCOUNT_ISSET_ID, value);
  }

  public long getTotalRecharge() {
    return this.totalRecharge;
  }

  public StatisticDataByDay setTotalRecharge(long totalRecharge) {
    this.totalRecharge = totalRecharge;
    setTotalRechargeIsSet(true);
    return this;
  }

  public void unsetTotalRecharge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID);
  }

  /** Returns true if field totalRecharge is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRecharge() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID);
  }

  public void setTotalRechargeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALRECHARGE_ISSET_ID, value);
  }

  public long getTotalWinningMoney() {
    return this.totalWinningMoney;
  }

  public StatisticDataByDay setTotalWinningMoney(long totalWinningMoney) {
    this.totalWinningMoney = totalWinningMoney;
    setTotalWinningMoneyIsSet(true);
    return this;
  }

  public void unsetTotalWinningMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALWINNINGMONEY_ISSET_ID);
  }

  /** Returns true if field totalWinningMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalWinningMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALWINNINGMONEY_ISSET_ID);
  }

  public void setTotalWinningMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALWINNINGMONEY_ISSET_ID, value);
  }

  public long getTotalHansel() {
    return this.totalHansel;
  }

  public StatisticDataByDay setTotalHansel(long totalHansel) {
    this.totalHansel = totalHansel;
    setTotalHanselIsSet(true);
    return this;
  }

  public void unsetTotalHansel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALHANSEL_ISSET_ID);
  }

  /** Returns true if field totalHansel is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHansel() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALHANSEL_ISSET_ID);
  }

  public void setTotalHanselIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALHANSEL_ISSET_ID, value);
  }

  public long getInvalidHansel() {
    return this.invalidHansel;
  }

  public StatisticDataByDay setInvalidHansel(long invalidHansel) {
    this.invalidHansel = invalidHansel;
    setInvalidHanselIsSet(true);
    return this;
  }

  public void unsetInvalidHansel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDHANSEL_ISSET_ID);
  }

  /** Returns true if field invalidHansel is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidHansel() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDHANSEL_ISSET_ID);
  }

  public void setInvalidHanselIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDHANSEL_ISSET_ID, value);
  }

  public long getFucaiTotalBuy() {
    return this.fucaiTotalBuy;
  }

  public StatisticDataByDay setFucaiTotalBuy(long fucaiTotalBuy) {
    this.fucaiTotalBuy = fucaiTotalBuy;
    setFucaiTotalBuyIsSet(true);
    return this;
  }

  public void unsetFucaiTotalBuy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUCAITOTALBUY_ISSET_ID);
  }

  /** Returns true if field fucaiTotalBuy is set (has been assigned a value) and false otherwise */
  public boolean isSetFucaiTotalBuy() {
    return EncodingUtils.testBit(__isset_bitfield, __FUCAITOTALBUY_ISSET_ID);
  }

  public void setFucaiTotalBuyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUCAITOTALBUY_ISSET_ID, value);
  }

  public long getTotalWithdraw() {
    return this.totalWithdraw;
  }

  public StatisticDataByDay setTotalWithdraw(long totalWithdraw) {
    this.totalWithdraw = totalWithdraw;
    setTotalWithdrawIsSet(true);
    return this;
  }

  public void unsetTotalWithdraw() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALWITHDRAW_ISSET_ID);
  }

  /** Returns true if field totalWithdraw is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalWithdraw() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALWITHDRAW_ISSET_ID);
  }

  public void setTotalWithdrawIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALWITHDRAW_ISSET_ID, value);
  }

  public long getTotalTicketNum() {
    return this.totalTicketNum;
  }

  public StatisticDataByDay setTotalTicketNum(long totalTicketNum) {
    this.totalTicketNum = totalTicketNum;
    setTotalTicketNumIsSet(true);
    return this;
  }

  public void unsetTotalTicketNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTICKETNUM_ISSET_ID);
  }

  /** Returns true if field totalTicketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTicketNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTICKETNUM_ISSET_ID);
  }

  public void setTotalTicketNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTICKETNUM_ISSET_ID, value);
  }

  public long getPaylogNum() {
    return this.paylogNum;
  }

  public StatisticDataByDay setPaylogNum(long paylogNum) {
    this.paylogNum = paylogNum;
    setPaylogNumIsSet(true);
    return this;
  }

  public void unsetPaylogNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYLOGNUM_ISSET_ID);
  }

  /** Returns true if field paylogNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPaylogNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYLOGNUM_ISSET_ID);
  }

  public void setPaylogNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYLOGNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((String)value);
      }
      break;

    case TOTAL_PARTNER_ACCOUNT:
      if (value == null) {
        unsetTotalPartnerAccount();
      } else {
        setTotalPartnerAccount((Long)value);
      }
      break;

    case TOTAL_USER_ACCOUNT:
      if (value == null) {
        unsetTotalUserAccount();
      } else {
        setTotalUserAccount((Long)value);
      }
      break;

    case TOTAL_RECHARGE:
      if (value == null) {
        unsetTotalRecharge();
      } else {
        setTotalRecharge((Long)value);
      }
      break;

    case TOTAL_WINNING_MONEY:
      if (value == null) {
        unsetTotalWinningMoney();
      } else {
        setTotalWinningMoney((Long)value);
      }
      break;

    case TOTAL_HANSEL:
      if (value == null) {
        unsetTotalHansel();
      } else {
        setTotalHansel((Long)value);
      }
      break;

    case INVALID_HANSEL:
      if (value == null) {
        unsetInvalidHansel();
      } else {
        setInvalidHansel((Long)value);
      }
      break;

    case FUCAI_TOTAL_BUY:
      if (value == null) {
        unsetFucaiTotalBuy();
      } else {
        setFucaiTotalBuy((Long)value);
      }
      break;

    case TOTAL_WITHDRAW:
      if (value == null) {
        unsetTotalWithdraw();
      } else {
        setTotalWithdraw((Long)value);
      }
      break;

    case TOTAL_TICKET_NUM:
      if (value == null) {
        unsetTotalTicketNum();
      } else {
        setTotalTicketNum((Long)value);
      }
      break;

    case PAYLOG_NUM:
      if (value == null) {
        unsetPaylogNum();
      } else {
        setPaylogNum((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAY:
      return getDay();

    case TOTAL_PARTNER_ACCOUNT:
      return Long.valueOf(getTotalPartnerAccount());

    case TOTAL_USER_ACCOUNT:
      return Long.valueOf(getTotalUserAccount());

    case TOTAL_RECHARGE:
      return Long.valueOf(getTotalRecharge());

    case TOTAL_WINNING_MONEY:
      return Long.valueOf(getTotalWinningMoney());

    case TOTAL_HANSEL:
      return Long.valueOf(getTotalHansel());

    case INVALID_HANSEL:
      return Long.valueOf(getInvalidHansel());

    case FUCAI_TOTAL_BUY:
      return Long.valueOf(getFucaiTotalBuy());

    case TOTAL_WITHDRAW:
      return Long.valueOf(getTotalWithdraw());

    case TOTAL_TICKET_NUM:
      return Long.valueOf(getTotalTicketNum());

    case PAYLOG_NUM:
      return Long.valueOf(getPaylogNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAY:
      return isSetDay();
    case TOTAL_PARTNER_ACCOUNT:
      return isSetTotalPartnerAccount();
    case TOTAL_USER_ACCOUNT:
      return isSetTotalUserAccount();
    case TOTAL_RECHARGE:
      return isSetTotalRecharge();
    case TOTAL_WINNING_MONEY:
      return isSetTotalWinningMoney();
    case TOTAL_HANSEL:
      return isSetTotalHansel();
    case INVALID_HANSEL:
      return isSetInvalidHansel();
    case FUCAI_TOTAL_BUY:
      return isSetFucaiTotalBuy();
    case TOTAL_WITHDRAW:
      return isSetTotalWithdraw();
    case TOTAL_TICKET_NUM:
      return isSetTotalTicketNum();
    case PAYLOG_NUM:
      return isSetPaylogNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatisticDataByDay)
      return this.equals((StatisticDataByDay)that);
    return false;
  }

  public boolean equals(StatisticDataByDay that) {
    if (that == null)
      return false;

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_totalPartnerAccount = true;
    boolean that_present_totalPartnerAccount = true;
    if (this_present_totalPartnerAccount || that_present_totalPartnerAccount) {
      if (!(this_present_totalPartnerAccount && that_present_totalPartnerAccount))
        return false;
      if (this.totalPartnerAccount != that.totalPartnerAccount)
        return false;
    }

    boolean this_present_totalUserAccount = true;
    boolean that_present_totalUserAccount = true;
    if (this_present_totalUserAccount || that_present_totalUserAccount) {
      if (!(this_present_totalUserAccount && that_present_totalUserAccount))
        return false;
      if (this.totalUserAccount != that.totalUserAccount)
        return false;
    }

    boolean this_present_totalRecharge = true;
    boolean that_present_totalRecharge = true;
    if (this_present_totalRecharge || that_present_totalRecharge) {
      if (!(this_present_totalRecharge && that_present_totalRecharge))
        return false;
      if (this.totalRecharge != that.totalRecharge)
        return false;
    }

    boolean this_present_totalWinningMoney = true;
    boolean that_present_totalWinningMoney = true;
    if (this_present_totalWinningMoney || that_present_totalWinningMoney) {
      if (!(this_present_totalWinningMoney && that_present_totalWinningMoney))
        return false;
      if (this.totalWinningMoney != that.totalWinningMoney)
        return false;
    }

    boolean this_present_totalHansel = true;
    boolean that_present_totalHansel = true;
    if (this_present_totalHansel || that_present_totalHansel) {
      if (!(this_present_totalHansel && that_present_totalHansel))
        return false;
      if (this.totalHansel != that.totalHansel)
        return false;
    }

    boolean this_present_invalidHansel = true;
    boolean that_present_invalidHansel = true;
    if (this_present_invalidHansel || that_present_invalidHansel) {
      if (!(this_present_invalidHansel && that_present_invalidHansel))
        return false;
      if (this.invalidHansel != that.invalidHansel)
        return false;
    }

    boolean this_present_fucaiTotalBuy = true;
    boolean that_present_fucaiTotalBuy = true;
    if (this_present_fucaiTotalBuy || that_present_fucaiTotalBuy) {
      if (!(this_present_fucaiTotalBuy && that_present_fucaiTotalBuy))
        return false;
      if (this.fucaiTotalBuy != that.fucaiTotalBuy)
        return false;
    }

    boolean this_present_totalWithdraw = true;
    boolean that_present_totalWithdraw = true;
    if (this_present_totalWithdraw || that_present_totalWithdraw) {
      if (!(this_present_totalWithdraw && that_present_totalWithdraw))
        return false;
      if (this.totalWithdraw != that.totalWithdraw)
        return false;
    }

    boolean this_present_totalTicketNum = true;
    boolean that_present_totalTicketNum = true;
    if (this_present_totalTicketNum || that_present_totalTicketNum) {
      if (!(this_present_totalTicketNum && that_present_totalTicketNum))
        return false;
      if (this.totalTicketNum != that.totalTicketNum)
        return false;
    }

    boolean this_present_paylogNum = true;
    boolean that_present_paylogNum = true;
    if (this_present_paylogNum || that_present_paylogNum) {
      if (!(this_present_paylogNum && that_present_paylogNum))
        return false;
      if (this.paylogNum != that.paylogNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatisticDataByDay other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPartnerAccount()).compareTo(other.isSetTotalPartnerAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPartnerAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPartnerAccount, other.totalPartnerAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalUserAccount()).compareTo(other.isSetTotalUserAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalUserAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalUserAccount, other.totalUserAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRecharge()).compareTo(other.isSetTotalRecharge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRecharge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRecharge, other.totalRecharge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalWinningMoney()).compareTo(other.isSetTotalWinningMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalWinningMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalWinningMoney, other.totalWinningMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHansel()).compareTo(other.isSetTotalHansel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHansel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHansel, other.totalHansel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidHansel()).compareTo(other.isSetInvalidHansel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidHansel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidHansel, other.invalidHansel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFucaiTotalBuy()).compareTo(other.isSetFucaiTotalBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFucaiTotalBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fucaiTotalBuy, other.fucaiTotalBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalWithdraw()).compareTo(other.isSetTotalWithdraw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalWithdraw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalWithdraw, other.totalWithdraw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTicketNum()).compareTo(other.isSetTotalTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTicketNum, other.totalTicketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaylogNum()).compareTo(other.isSetPaylogNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaylogNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paylogNum, other.paylogNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatisticDataByDay(");
    boolean first = true;

    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPartnerAccount:");
    sb.append(this.totalPartnerAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalUserAccount:");
    sb.append(this.totalUserAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalRecharge:");
    sb.append(this.totalRecharge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalWinningMoney:");
    sb.append(this.totalWinningMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHansel:");
    sb.append(this.totalHansel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidHansel:");
    sb.append(this.invalidHansel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fucaiTotalBuy:");
    sb.append(this.fucaiTotalBuy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalWithdraw:");
    sb.append(this.totalWithdraw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTicketNum:");
    sb.append(this.totalTicketNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paylogNum:");
    sb.append(this.paylogNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatisticDataByDayStandardSchemeFactory implements SchemeFactory {
    public StatisticDataByDayStandardScheme getScheme() {
      return new StatisticDataByDayStandardScheme();
    }
  }

  private static class StatisticDataByDayStandardScheme extends StandardScheme<StatisticDataByDay> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatisticDataByDay struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.day = iprot.readString();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_PARTNER_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalPartnerAccount = iprot.readI64();
              struct.setTotalPartnerAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_USER_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalUserAccount = iprot.readI64();
              struct.setTotalUserAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_RECHARGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalRecharge = iprot.readI64();
              struct.setTotalRechargeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_WINNING_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalWinningMoney = iprot.readI64();
              struct.setTotalWinningMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_HANSEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalHansel = iprot.readI64();
              struct.setTotalHanselIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INVALID_HANSEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.invalidHansel = iprot.readI64();
              struct.setInvalidHanselIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FUCAI_TOTAL_BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fucaiTotalBuy = iprot.readI64();
              struct.setFucaiTotalBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_WITHDRAW
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalWithdraw = iprot.readI64();
              struct.setTotalWithdrawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalTicketNum = iprot.readI64();
              struct.setTotalTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAYLOG_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paylogNum = iprot.readI64();
              struct.setPaylogNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatisticDataByDay struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.day != null) {
        oprot.writeFieldBegin(DAY_FIELD_DESC);
        oprot.writeString(struct.day);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PARTNER_ACCOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalPartnerAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_USER_ACCOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalUserAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_RECHARGE_FIELD_DESC);
      oprot.writeI64(struct.totalRecharge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_WINNING_MONEY_FIELD_DESC);
      oprot.writeI64(struct.totalWinningMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_HANSEL_FIELD_DESC);
      oprot.writeI64(struct.totalHansel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVALID_HANSEL_FIELD_DESC);
      oprot.writeI64(struct.invalidHansel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUCAI_TOTAL_BUY_FIELD_DESC);
      oprot.writeI64(struct.fucaiTotalBuy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_WITHDRAW_FIELD_DESC);
      oprot.writeI64(struct.totalWithdraw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TICKET_NUM_FIELD_DESC);
      oprot.writeI64(struct.totalTicketNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYLOG_NUM_FIELD_DESC);
      oprot.writeI64(struct.paylogNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatisticDataByDayTupleSchemeFactory implements SchemeFactory {
    public StatisticDataByDayTupleScheme getScheme() {
      return new StatisticDataByDayTupleScheme();
    }
  }

  private static class StatisticDataByDayTupleScheme extends TupleScheme<StatisticDataByDay> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatisticDataByDay struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDay()) {
        optionals.set(0);
      }
      if (struct.isSetTotalPartnerAccount()) {
        optionals.set(1);
      }
      if (struct.isSetTotalUserAccount()) {
        optionals.set(2);
      }
      if (struct.isSetTotalRecharge()) {
        optionals.set(3);
      }
      if (struct.isSetTotalWinningMoney()) {
        optionals.set(4);
      }
      if (struct.isSetTotalHansel()) {
        optionals.set(5);
      }
      if (struct.isSetInvalidHansel()) {
        optionals.set(6);
      }
      if (struct.isSetFucaiTotalBuy()) {
        optionals.set(7);
      }
      if (struct.isSetTotalWithdraw()) {
        optionals.set(8);
      }
      if (struct.isSetTotalTicketNum()) {
        optionals.set(9);
      }
      if (struct.isSetPaylogNum()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetDay()) {
        oprot.writeString(struct.day);
      }
      if (struct.isSetTotalPartnerAccount()) {
        oprot.writeI64(struct.totalPartnerAccount);
      }
      if (struct.isSetTotalUserAccount()) {
        oprot.writeI64(struct.totalUserAccount);
      }
      if (struct.isSetTotalRecharge()) {
        oprot.writeI64(struct.totalRecharge);
      }
      if (struct.isSetTotalWinningMoney()) {
        oprot.writeI64(struct.totalWinningMoney);
      }
      if (struct.isSetTotalHansel()) {
        oprot.writeI64(struct.totalHansel);
      }
      if (struct.isSetInvalidHansel()) {
        oprot.writeI64(struct.invalidHansel);
      }
      if (struct.isSetFucaiTotalBuy()) {
        oprot.writeI64(struct.fucaiTotalBuy);
      }
      if (struct.isSetTotalWithdraw()) {
        oprot.writeI64(struct.totalWithdraw);
      }
      if (struct.isSetTotalTicketNum()) {
        oprot.writeI64(struct.totalTicketNum);
      }
      if (struct.isSetPaylogNum()) {
        oprot.writeI64(struct.paylogNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatisticDataByDay struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.day = iprot.readString();
        struct.setDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalPartnerAccount = iprot.readI64();
        struct.setTotalPartnerAccountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalUserAccount = iprot.readI64();
        struct.setTotalUserAccountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalRecharge = iprot.readI64();
        struct.setTotalRechargeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalWinningMoney = iprot.readI64();
        struct.setTotalWinningMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalHansel = iprot.readI64();
        struct.setTotalHanselIsSet(true);
      }
      if (incoming.get(6)) {
        struct.invalidHansel = iprot.readI64();
        struct.setInvalidHanselIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fucaiTotalBuy = iprot.readI64();
        struct.setFucaiTotalBuyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalWithdraw = iprot.readI64();
        struct.setTotalWithdrawIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalTicketNum = iprot.readI64();
        struct.setTotalTicketNumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.paylogNum = iprot.readI64();
        struct.setPaylogNumIsSet(true);
      }
    }
  }

}

