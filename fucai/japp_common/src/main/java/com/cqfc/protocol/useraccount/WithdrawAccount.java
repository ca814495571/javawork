/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WithdrawAccount implements org.apache.thrift.TBase<WithdrawAccount, WithdrawAccount._Fields>, java.io.Serializable, Cloneable, Comparable<WithdrawAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WithdrawAccount");

  private static final org.apache.thrift.protocol.TField WITHDRAW_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAccountId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BANK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PAY_ACCOUNT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payAccountState", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("accountAddress", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WithdrawAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WithdrawAccountTupleSchemeFactory());
  }

  public int withdrawAccountId; // required
  public long userId; // required
  public String realName; // required
  public int accountType; // required
  public String accountNo; // required
  public String bankType; // required
  public String bankName; // required
  public int bankCardType; // required
  public int payAccountState; // required
  public String accountAddress; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WITHDRAW_ACCOUNT_ID((short)1, "withdrawAccountId"),
    USER_ID((short)2, "userId"),
    REAL_NAME((short)3, "realName"),
    ACCOUNT_TYPE((short)4, "accountType"),
    ACCOUNT_NO((short)5, "accountNo"),
    BANK_TYPE((short)6, "bankType"),
    BANK_NAME((short)7, "bankName"),
    BANK_CARD_TYPE((short)8, "bankCardType"),
    PAY_ACCOUNT_STATE((short)9, "payAccountState"),
    ACCOUNT_ADDRESS((short)10, "accountAddress"),
    CREATE_TIME((short)11, "createTime"),
    LAST_UPDATE_TIME((short)12, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WITHDRAW_ACCOUNT_ID
          return WITHDRAW_ACCOUNT_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // REAL_NAME
          return REAL_NAME;
        case 4: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 5: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 6: // BANK_TYPE
          return BANK_TYPE;
        case 7: // BANK_NAME
          return BANK_NAME;
        case 8: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 9: // PAY_ACCOUNT_STATE
          return PAY_ACCOUNT_STATE;
        case 10: // ACCOUNT_ADDRESS
          return ACCOUNT_ADDRESS;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WITHDRAWACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ACCOUNTTYPE_ISSET_ID = 2;
  private static final int __BANKCARDTYPE_ISSET_ID = 3;
  private static final int __PAYACCOUNTSTATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WITHDRAW_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("withdrawAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_ACCOUNT_STATE, new org.apache.thrift.meta_data.FieldMetaData("payAccountState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("accountAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WithdrawAccount.class, metaDataMap);
  }

  public WithdrawAccount() {
  }

  public WithdrawAccount(
    int withdrawAccountId,
    long userId,
    String realName,
    int accountType,
    String accountNo,
    String bankType,
    String bankName,
    int bankCardType,
    int payAccountState,
    String accountAddress,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.withdrawAccountId = withdrawAccountId;
    setWithdrawAccountIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.realName = realName;
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    this.accountNo = accountNo;
    this.bankType = bankType;
    this.bankName = bankName;
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    this.payAccountState = payAccountState;
    setPayAccountStateIsSet(true);
    this.accountAddress = accountAddress;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WithdrawAccount(WithdrawAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.withdrawAccountId = other.withdrawAccountId;
    this.userId = other.userId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    this.accountType = other.accountType;
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    if (other.isSetBankType()) {
      this.bankType = other.bankType;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    this.bankCardType = other.bankCardType;
    this.payAccountState = other.payAccountState;
    if (other.isSetAccountAddress()) {
      this.accountAddress = other.accountAddress;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public WithdrawAccount deepCopy() {
    return new WithdrawAccount(this);
  }

  @Override
  public void clear() {
    setWithdrawAccountIdIsSet(false);
    this.withdrawAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.realName = null;
    setAccountTypeIsSet(false);
    this.accountType = 0;
    this.accountNo = null;
    this.bankType = null;
    this.bankName = null;
    setBankCardTypeIsSet(false);
    this.bankCardType = 0;
    setPayAccountStateIsSet(false);
    this.payAccountState = 0;
    this.accountAddress = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public int getWithdrawAccountId() {
    return this.withdrawAccountId;
  }

  public WithdrawAccount setWithdrawAccountId(int withdrawAccountId) {
    this.withdrawAccountId = withdrawAccountId;
    setWithdrawAccountIdIsSet(true);
    return this;
  }

  public void unsetWithdrawAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWACCOUNTID_ISSET_ID);
  }

  /** Returns true if field withdrawAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWACCOUNTID_ISSET_ID);
  }

  public void setWithdrawAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWACCOUNTID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public WithdrawAccount setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public WithdrawAccount setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public int getAccountType() {
    return this.accountType;
  }

  public WithdrawAccount setAccountType(int accountType) {
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    return this;
  }

  public void unsetAccountType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  public void setAccountTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID, value);
  }

  public String getAccountNo() {
    return this.accountNo;
  }

  public WithdrawAccount setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  public String getBankType() {
    return this.bankType;
  }

  public WithdrawAccount setBankType(String bankType) {
    this.bankType = bankType;
    return this;
  }

  public void unsetBankType() {
    this.bankType = null;
  }

  /** Returns true if field bankType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankType() {
    return this.bankType != null;
  }

  public void setBankTypeIsSet(boolean value) {
    if (!value) {
      this.bankType = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public WithdrawAccount setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public int getBankCardType() {
    return this.bankCardType;
  }

  public WithdrawAccount setBankCardType(int bankCardType) {
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    return this;
  }

  public void unsetBankCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  public void setBankCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID, value);
  }

  public int getPayAccountState() {
    return this.payAccountState;
  }

  public WithdrawAccount setPayAccountState(int payAccountState) {
    this.payAccountState = payAccountState;
    setPayAccountStateIsSet(true);
    return this;
  }

  public void unsetPayAccountState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYACCOUNTSTATE_ISSET_ID);
  }

  /** Returns true if field payAccountState is set (has been assigned a value) and false otherwise */
  public boolean isSetPayAccountState() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYACCOUNTSTATE_ISSET_ID);
  }

  public void setPayAccountStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYACCOUNTSTATE_ISSET_ID, value);
  }

  public String getAccountAddress() {
    return this.accountAddress;
  }

  public WithdrawAccount setAccountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
    return this;
  }

  public void unsetAccountAddress() {
    this.accountAddress = null;
  }

  /** Returns true if field accountAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountAddress() {
    return this.accountAddress != null;
  }

  public void setAccountAddressIsSet(boolean value) {
    if (!value) {
      this.accountAddress = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public WithdrawAccount setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public WithdrawAccount setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WITHDRAW_ACCOUNT_ID:
      if (value == null) {
        unsetWithdrawAccountId();
      } else {
        setWithdrawAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccountType();
      } else {
        setAccountType((Integer)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case BANK_TYPE:
      if (value == null) {
        unsetBankType();
      } else {
        setBankType((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((Integer)value);
      }
      break;

    case PAY_ACCOUNT_STATE:
      if (value == null) {
        unsetPayAccountState();
      } else {
        setPayAccountState((Integer)value);
      }
      break;

    case ACCOUNT_ADDRESS:
      if (value == null) {
        unsetAccountAddress();
      } else {
        setAccountAddress((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WITHDRAW_ACCOUNT_ID:
      return Integer.valueOf(getWithdrawAccountId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case REAL_NAME:
      return getRealName();

    case ACCOUNT_TYPE:
      return Integer.valueOf(getAccountType());

    case ACCOUNT_NO:
      return getAccountNo();

    case BANK_TYPE:
      return getBankType();

    case BANK_NAME:
      return getBankName();

    case BANK_CARD_TYPE:
      return Integer.valueOf(getBankCardType());

    case PAY_ACCOUNT_STATE:
      return Integer.valueOf(getPayAccountState());

    case ACCOUNT_ADDRESS:
      return getAccountAddress();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WITHDRAW_ACCOUNT_ID:
      return isSetWithdrawAccountId();
    case USER_ID:
      return isSetUserId();
    case REAL_NAME:
      return isSetRealName();
    case ACCOUNT_TYPE:
      return isSetAccountType();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case BANK_TYPE:
      return isSetBankType();
    case BANK_NAME:
      return isSetBankName();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case PAY_ACCOUNT_STATE:
      return isSetPayAccountState();
    case ACCOUNT_ADDRESS:
      return isSetAccountAddress();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WithdrawAccount)
      return this.equals((WithdrawAccount)that);
    return false;
  }

  public boolean equals(WithdrawAccount that) {
    if (that == null)
      return false;

    boolean this_present_withdrawAccountId = true;
    boolean that_present_withdrawAccountId = true;
    if (this_present_withdrawAccountId || that_present_withdrawAccountId) {
      if (!(this_present_withdrawAccountId && that_present_withdrawAccountId))
        return false;
      if (this.withdrawAccountId != that.withdrawAccountId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_accountType = true;
    boolean that_present_accountType = true;
    if (this_present_accountType || that_present_accountType) {
      if (!(this_present_accountType && that_present_accountType))
        return false;
      if (this.accountType != that.accountType)
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_bankType = true && this.isSetBankType();
    boolean that_present_bankType = true && that.isSetBankType();
    if (this_present_bankType || that_present_bankType) {
      if (!(this_present_bankType && that_present_bankType))
        return false;
      if (!this.bankType.equals(that.bankType))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_bankCardType = true;
    boolean that_present_bankCardType = true;
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (this.bankCardType != that.bankCardType)
        return false;
    }

    boolean this_present_payAccountState = true;
    boolean that_present_payAccountState = true;
    if (this_present_payAccountState || that_present_payAccountState) {
      if (!(this_present_payAccountState && that_present_payAccountState))
        return false;
      if (this.payAccountState != that.payAccountState)
        return false;
    }

    boolean this_present_accountAddress = true && this.isSetAccountAddress();
    boolean that_present_accountAddress = true && that.isSetAccountAddress();
    if (this_present_accountAddress || that_present_accountAddress) {
      if (!(this_present_accountAddress && that_present_accountAddress))
        return false;
      if (!this.accountAddress.equals(that.accountAddress))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WithdrawAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWithdrawAccountId()).compareTo(other.isSetWithdrawAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAccountId, other.withdrawAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountType()).compareTo(other.isSetAccountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, other.accountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankType()).compareTo(other.isSetBankType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankType, other.bankType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAccountState()).compareTo(other.isSetPayAccountState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAccountState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAccountState, other.payAccountState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountAddress()).compareTo(other.isSetAccountAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountAddress, other.accountAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WithdrawAccount(");
    boolean first = true;

    sb.append("withdrawAccountId:");
    sb.append(this.withdrawAccountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountType:");
    sb.append(this.accountType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankType:");
    if (this.bankType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    sb.append(this.bankCardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAccountState:");
    sb.append(this.payAccountState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountAddress:");
    if (this.accountAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.accountAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WithdrawAccountStandardSchemeFactory implements SchemeFactory {
    public WithdrawAccountStandardScheme getScheme() {
      return new WithdrawAccountStandardScheme();
    }
  }

  private static class WithdrawAccountStandardScheme extends StandardScheme<WithdrawAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WithdrawAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WITHDRAW_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.withdrawAccountId = iprot.readI32();
              struct.setWithdrawAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountType = iprot.readI32();
              struct.setAccountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BANK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankType = iprot.readString();
              struct.setBankTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankCardType = iprot.readI32();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAY_ACCOUNT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payAccountState = iprot.readI32();
              struct.setPayAccountStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCOUNT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountAddress = iprot.readString();
              struct.setAccountAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WithdrawAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WITHDRAW_ACCOUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.withdrawAccountId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.accountType);
      oprot.writeFieldEnd();
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      if (struct.bankType != null) {
        oprot.writeFieldBegin(BANK_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankType);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bankCardType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_ACCOUNT_STATE_FIELD_DESC);
      oprot.writeI32(struct.payAccountState);
      oprot.writeFieldEnd();
      if (struct.accountAddress != null) {
        oprot.writeFieldBegin(ACCOUNT_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.accountAddress);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WithdrawAccountTupleSchemeFactory implements SchemeFactory {
    public WithdrawAccountTupleScheme getScheme() {
      return new WithdrawAccountTupleScheme();
    }
  }

  private static class WithdrawAccountTupleScheme extends TupleScheme<WithdrawAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WithdrawAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWithdrawAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetRealName()) {
        optionals.set(2);
      }
      if (struct.isSetAccountType()) {
        optionals.set(3);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(4);
      }
      if (struct.isSetBankType()) {
        optionals.set(5);
      }
      if (struct.isSetBankName()) {
        optionals.set(6);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(7);
      }
      if (struct.isSetPayAccountState()) {
        optionals.set(8);
      }
      if (struct.isSetAccountAddress()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetWithdrawAccountId()) {
        oprot.writeI32(struct.withdrawAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetAccountType()) {
        oprot.writeI32(struct.accountType);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetBankType()) {
        oprot.writeString(struct.bankType);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeI32(struct.bankCardType);
      }
      if (struct.isSetPayAccountState()) {
        oprot.writeI32(struct.payAccountState);
      }
      if (struct.isSetAccountAddress()) {
        oprot.writeString(struct.accountAddress);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WithdrawAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.withdrawAccountId = iprot.readI32();
        struct.setWithdrawAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accountType = iprot.readI32();
        struct.setAccountTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bankType = iprot.readString();
        struct.setBankTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankCardType = iprot.readI32();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.payAccountState = iprot.readI32();
        struct.setPayAccountStateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.accountAddress = iprot.readString();
        struct.setAccountAddressIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

