/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MatchInfo implements org.apache.thrift.TBase<MatchInfo, MatchInfo._Fields>, java.io.Serializable, Cloneable, Comparable<MatchInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatchInfo");

  private static final org.apache.thrift.protocol.TField MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("gameNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GAME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("homeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AWAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("awayName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GAME_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PV_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pvList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MatchInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MatchInfoTupleSchemeFactory());
  }

  public String matchId; // required
  public String gameNo; // required
  public String gameName; // required
  public String homeName; // required
  public String awayName; // required
  public String gameTime; // required
  public String endTime; // required
  public List<Pv> pvList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATCH_ID((short)1, "matchId"),
    GAME_NO((short)2, "gameNo"),
    GAME_NAME((short)3, "gameName"),
    HOME_NAME((short)4, "homeName"),
    AWAY_NAME((short)5, "awayName"),
    GAME_TIME((short)6, "gameTime"),
    END_TIME((short)7, "endTime"),
    PV_LIST((short)8, "pvList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATCH_ID
          return MATCH_ID;
        case 2: // GAME_NO
          return GAME_NO;
        case 3: // GAME_NAME
          return GAME_NAME;
        case 4: // HOME_NAME
          return HOME_NAME;
        case 5: // AWAY_NAME
          return AWAY_NAME;
        case 6: // GAME_TIME
          return GAME_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 8: // PV_LIST
          return PV_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("matchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_NO, new org.apache.thrift.meta_data.FieldMetaData("gameNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_NAME, new org.apache.thrift.meta_data.FieldMetaData("gameName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_NAME, new org.apache.thrift.meta_data.FieldMetaData("homeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("awayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_TIME, new org.apache.thrift.meta_data.FieldMetaData("gameTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV_LIST, new org.apache.thrift.meta_data.FieldMetaData("pvList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pv.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatchInfo.class, metaDataMap);
  }

  public MatchInfo() {
  }

  public MatchInfo(
    String matchId,
    String gameNo,
    String gameName,
    String homeName,
    String awayName,
    String gameTime,
    String endTime,
    List<Pv> pvList)
  {
    this();
    this.matchId = matchId;
    this.gameNo = gameNo;
    this.gameName = gameName;
    this.homeName = homeName;
    this.awayName = awayName;
    this.gameTime = gameTime;
    this.endTime = endTime;
    this.pvList = pvList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatchInfo(MatchInfo other) {
    if (other.isSetMatchId()) {
      this.matchId = other.matchId;
    }
    if (other.isSetGameNo()) {
      this.gameNo = other.gameNo;
    }
    if (other.isSetGameName()) {
      this.gameName = other.gameName;
    }
    if (other.isSetHomeName()) {
      this.homeName = other.homeName;
    }
    if (other.isSetAwayName()) {
      this.awayName = other.awayName;
    }
    if (other.isSetGameTime()) {
      this.gameTime = other.gameTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetPvList()) {
      List<Pv> __this__pvList = new ArrayList<Pv>(other.pvList.size());
      for (Pv other_element : other.pvList) {
        __this__pvList.add(new Pv(other_element));
      }
      this.pvList = __this__pvList;
    }
  }

  public MatchInfo deepCopy() {
    return new MatchInfo(this);
  }

  @Override
  public void clear() {
    this.matchId = null;
    this.gameNo = null;
    this.gameName = null;
    this.homeName = null;
    this.awayName = null;
    this.gameTime = null;
    this.endTime = null;
    this.pvList = null;
  }

  public String getMatchId() {
    return this.matchId;
  }

  public MatchInfo setMatchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  public void unsetMatchId() {
    this.matchId = null;
  }

  /** Returns true if field matchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchId() {
    return this.matchId != null;
  }

  public void setMatchIdIsSet(boolean value) {
    if (!value) {
      this.matchId = null;
    }
  }

  public String getGameNo() {
    return this.gameNo;
  }

  public MatchInfo setGameNo(String gameNo) {
    this.gameNo = gameNo;
    return this;
  }

  public void unsetGameNo() {
    this.gameNo = null;
  }

  /** Returns true if field gameNo is set (has been assigned a value) and false otherwise */
  public boolean isSetGameNo() {
    return this.gameNo != null;
  }

  public void setGameNoIsSet(boolean value) {
    if (!value) {
      this.gameNo = null;
    }
  }

  public String getGameName() {
    return this.gameName;
  }

  public MatchInfo setGameName(String gameName) {
    this.gameName = gameName;
    return this;
  }

  public void unsetGameName() {
    this.gameName = null;
  }

  /** Returns true if field gameName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameName() {
    return this.gameName != null;
  }

  public void setGameNameIsSet(boolean value) {
    if (!value) {
      this.gameName = null;
    }
  }

  public String getHomeName() {
    return this.homeName;
  }

  public MatchInfo setHomeName(String homeName) {
    this.homeName = homeName;
    return this;
  }

  public void unsetHomeName() {
    this.homeName = null;
  }

  /** Returns true if field homeName is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeName() {
    return this.homeName != null;
  }

  public void setHomeNameIsSet(boolean value) {
    if (!value) {
      this.homeName = null;
    }
  }

  public String getAwayName() {
    return this.awayName;
  }

  public MatchInfo setAwayName(String awayName) {
    this.awayName = awayName;
    return this;
  }

  public void unsetAwayName() {
    this.awayName = null;
  }

  /** Returns true if field awayName is set (has been assigned a value) and false otherwise */
  public boolean isSetAwayName() {
    return this.awayName != null;
  }

  public void setAwayNameIsSet(boolean value) {
    if (!value) {
      this.awayName = null;
    }
  }

  public String getGameTime() {
    return this.gameTime;
  }

  public MatchInfo setGameTime(String gameTime) {
    this.gameTime = gameTime;
    return this;
  }

  public void unsetGameTime() {
    this.gameTime = null;
  }

  /** Returns true if field gameTime is set (has been assigned a value) and false otherwise */
  public boolean isSetGameTime() {
    return this.gameTime != null;
  }

  public void setGameTimeIsSet(boolean value) {
    if (!value) {
      this.gameTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public MatchInfo setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getPvListSize() {
    return (this.pvList == null) ? 0 : this.pvList.size();
  }

  public java.util.Iterator<Pv> getPvListIterator() {
    return (this.pvList == null) ? null : this.pvList.iterator();
  }

  public void addToPvList(Pv elem) {
    if (this.pvList == null) {
      this.pvList = new ArrayList<Pv>();
    }
    this.pvList.add(elem);
  }

  public List<Pv> getPvList() {
    return this.pvList;
  }

  public MatchInfo setPvList(List<Pv> pvList) {
    this.pvList = pvList;
    return this;
  }

  public void unsetPvList() {
    this.pvList = null;
  }

  /** Returns true if field pvList is set (has been assigned a value) and false otherwise */
  public boolean isSetPvList() {
    return this.pvList != null;
  }

  public void setPvListIsSet(boolean value) {
    if (!value) {
      this.pvList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MATCH_ID:
      if (value == null) {
        unsetMatchId();
      } else {
        setMatchId((String)value);
      }
      break;

    case GAME_NO:
      if (value == null) {
        unsetGameNo();
      } else {
        setGameNo((String)value);
      }
      break;

    case GAME_NAME:
      if (value == null) {
        unsetGameName();
      } else {
        setGameName((String)value);
      }
      break;

    case HOME_NAME:
      if (value == null) {
        unsetHomeName();
      } else {
        setHomeName((String)value);
      }
      break;

    case AWAY_NAME:
      if (value == null) {
        unsetAwayName();
      } else {
        setAwayName((String)value);
      }
      break;

    case GAME_TIME:
      if (value == null) {
        unsetGameTime();
      } else {
        setGameTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case PV_LIST:
      if (value == null) {
        unsetPvList();
      } else {
        setPvList((List<Pv>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MATCH_ID:
      return getMatchId();

    case GAME_NO:
      return getGameNo();

    case GAME_NAME:
      return getGameName();

    case HOME_NAME:
      return getHomeName();

    case AWAY_NAME:
      return getAwayName();

    case GAME_TIME:
      return getGameTime();

    case END_TIME:
      return getEndTime();

    case PV_LIST:
      return getPvList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MATCH_ID:
      return isSetMatchId();
    case GAME_NO:
      return isSetGameNo();
    case GAME_NAME:
      return isSetGameName();
    case HOME_NAME:
      return isSetHomeName();
    case AWAY_NAME:
      return isSetAwayName();
    case GAME_TIME:
      return isSetGameTime();
    case END_TIME:
      return isSetEndTime();
    case PV_LIST:
      return isSetPvList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MatchInfo)
      return this.equals((MatchInfo)that);
    return false;
  }

  public boolean equals(MatchInfo that) {
    if (that == null)
      return false;

    boolean this_present_matchId = true && this.isSetMatchId();
    boolean that_present_matchId = true && that.isSetMatchId();
    if (this_present_matchId || that_present_matchId) {
      if (!(this_present_matchId && that_present_matchId))
        return false;
      if (!this.matchId.equals(that.matchId))
        return false;
    }

    boolean this_present_gameNo = true && this.isSetGameNo();
    boolean that_present_gameNo = true && that.isSetGameNo();
    if (this_present_gameNo || that_present_gameNo) {
      if (!(this_present_gameNo && that_present_gameNo))
        return false;
      if (!this.gameNo.equals(that.gameNo))
        return false;
    }

    boolean this_present_gameName = true && this.isSetGameName();
    boolean that_present_gameName = true && that.isSetGameName();
    if (this_present_gameName || that_present_gameName) {
      if (!(this_present_gameName && that_present_gameName))
        return false;
      if (!this.gameName.equals(that.gameName))
        return false;
    }

    boolean this_present_homeName = true && this.isSetHomeName();
    boolean that_present_homeName = true && that.isSetHomeName();
    if (this_present_homeName || that_present_homeName) {
      if (!(this_present_homeName && that_present_homeName))
        return false;
      if (!this.homeName.equals(that.homeName))
        return false;
    }

    boolean this_present_awayName = true && this.isSetAwayName();
    boolean that_present_awayName = true && that.isSetAwayName();
    if (this_present_awayName || that_present_awayName) {
      if (!(this_present_awayName && that_present_awayName))
        return false;
      if (!this.awayName.equals(that.awayName))
        return false;
    }

    boolean this_present_gameTime = true && this.isSetGameTime();
    boolean that_present_gameTime = true && that.isSetGameTime();
    if (this_present_gameTime || that_present_gameTime) {
      if (!(this_present_gameTime && that_present_gameTime))
        return false;
      if (!this.gameTime.equals(that.gameTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_pvList = true && this.isSetPvList();
    boolean that_present_pvList = true && that.isSetPvList();
    if (this_present_pvList || that_present_pvList) {
      if (!(this_present_pvList && that_present_pvList))
        return false;
      if (!this.pvList.equals(that.pvList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MatchInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMatchId()).compareTo(other.isSetMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchId, other.matchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameNo()).compareTo(other.isSetGameNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameNo, other.gameNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameName()).compareTo(other.isSetGameName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameName, other.gameName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeName()).compareTo(other.isSetHomeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeName, other.homeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwayName()).compareTo(other.isSetAwayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awayName, other.awayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameTime()).compareTo(other.isSetGameTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameTime, other.gameTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvList()).compareTo(other.isSetPvList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvList, other.pvList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MatchInfo(");
    boolean first = true;

    sb.append("matchId:");
    if (this.matchId == null) {
      sb.append("null");
    } else {
      sb.append(this.matchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameNo:");
    if (this.gameNo == null) {
      sb.append("null");
    } else {
      sb.append(this.gameNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameName:");
    if (this.gameName == null) {
      sb.append("null");
    } else {
      sb.append(this.gameName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeName:");
    if (this.homeName == null) {
      sb.append("null");
    } else {
      sb.append(this.homeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("awayName:");
    if (this.awayName == null) {
      sb.append("null");
    } else {
      sb.append(this.awayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameTime:");
    if (this.gameTime == null) {
      sb.append("null");
    } else {
      sb.append(this.gameTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pvList:");
    if (this.pvList == null) {
      sb.append("null");
    } else {
      sb.append(this.pvList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatchInfoStandardSchemeFactory implements SchemeFactory {
    public MatchInfoStandardScheme getScheme() {
      return new MatchInfoStandardScheme();
    }
  }

  private static class MatchInfoStandardScheme extends StandardScheme<MatchInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MatchInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchId = iprot.readString();
              struct.setMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameNo = iprot.readString();
              struct.setGameNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GAME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameName = iprot.readString();
              struct.setGameNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeName = iprot.readString();
              struct.setHomeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AWAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awayName = iprot.readString();
              struct.setAwayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GAME_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameTime = iprot.readString();
              struct.setGameTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PV_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.pvList = new ArrayList<Pv>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Pv _elem2;
                  _elem2 = new Pv();
                  _elem2.read(iprot);
                  struct.pvList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPvListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MatchInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.matchId != null) {
        oprot.writeFieldBegin(MATCH_ID_FIELD_DESC);
        oprot.writeString(struct.matchId);
        oprot.writeFieldEnd();
      }
      if (struct.gameNo != null) {
        oprot.writeFieldBegin(GAME_NO_FIELD_DESC);
        oprot.writeString(struct.gameNo);
        oprot.writeFieldEnd();
      }
      if (struct.gameName != null) {
        oprot.writeFieldBegin(GAME_NAME_FIELD_DESC);
        oprot.writeString(struct.gameName);
        oprot.writeFieldEnd();
      }
      if (struct.homeName != null) {
        oprot.writeFieldBegin(HOME_NAME_FIELD_DESC);
        oprot.writeString(struct.homeName);
        oprot.writeFieldEnd();
      }
      if (struct.awayName != null) {
        oprot.writeFieldBegin(AWAY_NAME_FIELD_DESC);
        oprot.writeString(struct.awayName);
        oprot.writeFieldEnd();
      }
      if (struct.gameTime != null) {
        oprot.writeFieldBegin(GAME_TIME_FIELD_DESC);
        oprot.writeString(struct.gameTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.pvList != null) {
        oprot.writeFieldBegin(PV_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pvList.size()));
          for (Pv _iter3 : struct.pvList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatchInfoTupleSchemeFactory implements SchemeFactory {
    public MatchInfoTupleScheme getScheme() {
      return new MatchInfoTupleScheme();
    }
  }

  private static class MatchInfoTupleScheme extends TupleScheme<MatchInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatchInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMatchId()) {
        optionals.set(0);
      }
      if (struct.isSetGameNo()) {
        optionals.set(1);
      }
      if (struct.isSetGameName()) {
        optionals.set(2);
      }
      if (struct.isSetHomeName()) {
        optionals.set(3);
      }
      if (struct.isSetAwayName()) {
        optionals.set(4);
      }
      if (struct.isSetGameTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetPvList()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMatchId()) {
        oprot.writeString(struct.matchId);
      }
      if (struct.isSetGameNo()) {
        oprot.writeString(struct.gameNo);
      }
      if (struct.isSetGameName()) {
        oprot.writeString(struct.gameName);
      }
      if (struct.isSetHomeName()) {
        oprot.writeString(struct.homeName);
      }
      if (struct.isSetAwayName()) {
        oprot.writeString(struct.awayName);
      }
      if (struct.isSetGameTime()) {
        oprot.writeString(struct.gameTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetPvList()) {
        {
          oprot.writeI32(struct.pvList.size());
          for (Pv _iter4 : struct.pvList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatchInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.matchId = iprot.readString();
        struct.setMatchIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameNo = iprot.readString();
        struct.setGameNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gameName = iprot.readString();
        struct.setGameNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.homeName = iprot.readString();
        struct.setHomeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.awayName = iprot.readString();
        struct.setAwayNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gameTime = iprot.readString();
        struct.setGameTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pvList = new ArrayList<Pv>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Pv _elem7;
            _elem7 = new Pv();
            _elem7.read(iprot);
            struct.pvList.add(_elem7);
          }
        }
        struct.setPvListIsSet(true);
      }
    }
  }

}

