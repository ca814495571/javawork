/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.appendtask;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppendTask implements org.apache.thrift.TBase<AppendTask, AppendTask._Fields>, java.io.Serializable, Cloneable, Comparable<AppendTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppendTask");

  private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BALL_FIELD_DESC = new org.apache.thrift.protocol.TField("ball", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BEGIN_ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("beginIssueNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPEND_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("appendQuantity", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REMAINING_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingQuantity", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FINISHED_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("finishedNum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CANCEL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STOP_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("stopFlag", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField APPEND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("appendStatus", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField APPEND_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTotalMoney", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField FINISHED_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("finishedMoney", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CANCEL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelMoney", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField WINNING_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("winningTotalMoney", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField PER_NOTE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("perNoteNumber", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField NEW_APPEND_ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("newAppendIssueNo", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField FREEZE_SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("freezeSerialNumber", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField APPEND_TASK_DETAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskDetailList", org.apache.thrift.protocol.TType.LIST, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppendTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppendTaskTupleSchemeFactory());
  }

  public String appendTaskId; // required
  public String partnerId; // required
  public String lotteryId; // required
  public String ball; // required
  public String beginIssueNo; // required
  public int appendQuantity; // required
  public int remainingQuantity; // required
  public int finishedNum; // required
  public int cancelNum; // required
  public int stopFlag; // required
  public int appendStatus; // required
  public long appendTotalMoney; // required
  public long finishedMoney; // required
  public long cancelMoney; // required
  public long winningTotalMoney; // required
  public int perNoteNumber; // required
  public long userId; // required
  public String playType; // required
  public String newAppendIssueNo; // required
  public String freezeSerialNumber; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public List<AppendTaskDetail> appendTaskDetailList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPEND_TASK_ID((short)1, "appendTaskId"),
    PARTNER_ID((short)2, "partnerId"),
    LOTTERY_ID((short)3, "lotteryId"),
    BALL((short)4, "ball"),
    BEGIN_ISSUE_NO((short)5, "beginIssueNo"),
    APPEND_QUANTITY((short)6, "appendQuantity"),
    REMAINING_QUANTITY((short)7, "remainingQuantity"),
    FINISHED_NUM((short)8, "finishedNum"),
    CANCEL_NUM((short)9, "cancelNum"),
    STOP_FLAG((short)10, "stopFlag"),
    APPEND_STATUS((short)11, "appendStatus"),
    APPEND_TOTAL_MONEY((short)12, "appendTotalMoney"),
    FINISHED_MONEY((short)13, "finishedMoney"),
    CANCEL_MONEY((short)14, "cancelMoney"),
    WINNING_TOTAL_MONEY((short)15, "winningTotalMoney"),
    PER_NOTE_NUMBER((short)16, "perNoteNumber"),
    USER_ID((short)17, "userId"),
    PLAY_TYPE((short)18, "playType"),
    NEW_APPEND_ISSUE_NO((short)19, "newAppendIssueNo"),
    FREEZE_SERIAL_NUMBER((short)20, "freezeSerialNumber"),
    CREATE_TIME((short)21, "createTime"),
    LAST_UPDATE_TIME((short)22, "lastUpdateTime"),
    APPEND_TASK_DETAIL_LIST((short)23, "appendTaskDetailList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPEND_TASK_ID
          return APPEND_TASK_ID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // LOTTERY_ID
          return LOTTERY_ID;
        case 4: // BALL
          return BALL;
        case 5: // BEGIN_ISSUE_NO
          return BEGIN_ISSUE_NO;
        case 6: // APPEND_QUANTITY
          return APPEND_QUANTITY;
        case 7: // REMAINING_QUANTITY
          return REMAINING_QUANTITY;
        case 8: // FINISHED_NUM
          return FINISHED_NUM;
        case 9: // CANCEL_NUM
          return CANCEL_NUM;
        case 10: // STOP_FLAG
          return STOP_FLAG;
        case 11: // APPEND_STATUS
          return APPEND_STATUS;
        case 12: // APPEND_TOTAL_MONEY
          return APPEND_TOTAL_MONEY;
        case 13: // FINISHED_MONEY
          return FINISHED_MONEY;
        case 14: // CANCEL_MONEY
          return CANCEL_MONEY;
        case 15: // WINNING_TOTAL_MONEY
          return WINNING_TOTAL_MONEY;
        case 16: // PER_NOTE_NUMBER
          return PER_NOTE_NUMBER;
        case 17: // USER_ID
          return USER_ID;
        case 18: // PLAY_TYPE
          return PLAY_TYPE;
        case 19: // NEW_APPEND_ISSUE_NO
          return NEW_APPEND_ISSUE_NO;
        case 20: // FREEZE_SERIAL_NUMBER
          return FREEZE_SERIAL_NUMBER;
        case 21: // CREATE_TIME
          return CREATE_TIME;
        case 22: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 23: // APPEND_TASK_DETAIL_LIST
          return APPEND_TASK_DETAIL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPENDQUANTITY_ISSET_ID = 0;
  private static final int __REMAININGQUANTITY_ISSET_ID = 1;
  private static final int __FINISHEDNUM_ISSET_ID = 2;
  private static final int __CANCELNUM_ISSET_ID = 3;
  private static final int __STOPFLAG_ISSET_ID = 4;
  private static final int __APPENDSTATUS_ISSET_ID = 5;
  private static final int __APPENDTOTALMONEY_ISSET_ID = 6;
  private static final int __FINISHEDMONEY_ISSET_ID = 7;
  private static final int __CANCELMONEY_ISSET_ID = 8;
  private static final int __WINNINGTOTALMONEY_ISSET_ID = 9;
  private static final int __PERNOTENUMBER_ISSET_ID = 10;
  private static final int __USERID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALL, new org.apache.thrift.meta_data.FieldMetaData("ball", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("beginIssueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPEND_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("appendQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMAINING_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("remainingQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINISHED_NUM, new org.apache.thrift.meta_data.FieldMetaData("finishedNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCEL_NUM, new org.apache.thrift.meta_data.FieldMetaData("cancelNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOP_FLAG, new org.apache.thrift.meta_data.FieldMetaData("stopFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPEND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("appendStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPEND_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("appendTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISHED_MONEY, new org.apache.thrift.meta_data.FieldMetaData("finishedMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CANCEL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cancelMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WINNING_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("winningTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PER_NOTE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("perNoteNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_APPEND_ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("newAppendIssueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREEZE_SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("freezeSerialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPEND_TASK_DETAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("appendTaskDetailList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendTaskDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppendTask.class, metaDataMap);
  }

  public AppendTask() {
  }

  public AppendTask(
    String appendTaskId,
    String partnerId,
    String lotteryId,
    String ball,
    String beginIssueNo,
    int appendQuantity,
    int remainingQuantity,
    int finishedNum,
    int cancelNum,
    int stopFlag,
    int appendStatus,
    long appendTotalMoney,
    long finishedMoney,
    long cancelMoney,
    long winningTotalMoney,
    int perNoteNumber,
    long userId,
    String playType,
    String newAppendIssueNo,
    String freezeSerialNumber,
    String createTime,
    String lastUpdateTime,
    List<AppendTaskDetail> appendTaskDetailList)
  {
    this();
    this.appendTaskId = appendTaskId;
    this.partnerId = partnerId;
    this.lotteryId = lotteryId;
    this.ball = ball;
    this.beginIssueNo = beginIssueNo;
    this.appendQuantity = appendQuantity;
    setAppendQuantityIsSet(true);
    this.remainingQuantity = remainingQuantity;
    setRemainingQuantityIsSet(true);
    this.finishedNum = finishedNum;
    setFinishedNumIsSet(true);
    this.cancelNum = cancelNum;
    setCancelNumIsSet(true);
    this.stopFlag = stopFlag;
    setStopFlagIsSet(true);
    this.appendStatus = appendStatus;
    setAppendStatusIsSet(true);
    this.appendTotalMoney = appendTotalMoney;
    setAppendTotalMoneyIsSet(true);
    this.finishedMoney = finishedMoney;
    setFinishedMoneyIsSet(true);
    this.cancelMoney = cancelMoney;
    setCancelMoneyIsSet(true);
    this.winningTotalMoney = winningTotalMoney;
    setWinningTotalMoneyIsSet(true);
    this.perNoteNumber = perNoteNumber;
    setPerNoteNumberIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.playType = playType;
    this.newAppendIssueNo = newAppendIssueNo;
    this.freezeSerialNumber = freezeSerialNumber;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.appendTaskDetailList = appendTaskDetailList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppendTask(AppendTask other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppendTaskId()) {
      this.appendTaskId = other.appendTaskId;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetBall()) {
      this.ball = other.ball;
    }
    if (other.isSetBeginIssueNo()) {
      this.beginIssueNo = other.beginIssueNo;
    }
    this.appendQuantity = other.appendQuantity;
    this.remainingQuantity = other.remainingQuantity;
    this.finishedNum = other.finishedNum;
    this.cancelNum = other.cancelNum;
    this.stopFlag = other.stopFlag;
    this.appendStatus = other.appendStatus;
    this.appendTotalMoney = other.appendTotalMoney;
    this.finishedMoney = other.finishedMoney;
    this.cancelMoney = other.cancelMoney;
    this.winningTotalMoney = other.winningTotalMoney;
    this.perNoteNumber = other.perNoteNumber;
    this.userId = other.userId;
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    if (other.isSetNewAppendIssueNo()) {
      this.newAppendIssueNo = other.newAppendIssueNo;
    }
    if (other.isSetFreezeSerialNumber()) {
      this.freezeSerialNumber = other.freezeSerialNumber;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetAppendTaskDetailList()) {
      List<AppendTaskDetail> __this__appendTaskDetailList = new ArrayList<AppendTaskDetail>(other.appendTaskDetailList.size());
      for (AppendTaskDetail other_element : other.appendTaskDetailList) {
        __this__appendTaskDetailList.add(new AppendTaskDetail(other_element));
      }
      this.appendTaskDetailList = __this__appendTaskDetailList;
    }
  }

  public AppendTask deepCopy() {
    return new AppendTask(this);
  }

  @Override
  public void clear() {
    this.appendTaskId = null;
    this.partnerId = null;
    this.lotteryId = null;
    this.ball = null;
    this.beginIssueNo = null;
    setAppendQuantityIsSet(false);
    this.appendQuantity = 0;
    setRemainingQuantityIsSet(false);
    this.remainingQuantity = 0;
    setFinishedNumIsSet(false);
    this.finishedNum = 0;
    setCancelNumIsSet(false);
    this.cancelNum = 0;
    setStopFlagIsSet(false);
    this.stopFlag = 0;
    setAppendStatusIsSet(false);
    this.appendStatus = 0;
    setAppendTotalMoneyIsSet(false);
    this.appendTotalMoney = 0;
    setFinishedMoneyIsSet(false);
    this.finishedMoney = 0;
    setCancelMoneyIsSet(false);
    this.cancelMoney = 0;
    setWinningTotalMoneyIsSet(false);
    this.winningTotalMoney = 0;
    setPerNoteNumberIsSet(false);
    this.perNoteNumber = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.playType = null;
    this.newAppendIssueNo = null;
    this.freezeSerialNumber = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.appendTaskDetailList = null;
  }

  public String getAppendTaskId() {
    return this.appendTaskId;
  }

  public AppendTask setAppendTaskId(String appendTaskId) {
    this.appendTaskId = appendTaskId;
    return this;
  }

  public void unsetAppendTaskId() {
    this.appendTaskId = null;
  }

  /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendTaskId() {
    return this.appendTaskId != null;
  }

  public void setAppendTaskIdIsSet(boolean value) {
    if (!value) {
      this.appendTaskId = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public AppendTask setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public AppendTask setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getBall() {
    return this.ball;
  }

  public AppendTask setBall(String ball) {
    this.ball = ball;
    return this;
  }

  public void unsetBall() {
    this.ball = null;
  }

  /** Returns true if field ball is set (has been assigned a value) and false otherwise */
  public boolean isSetBall() {
    return this.ball != null;
  }

  public void setBallIsSet(boolean value) {
    if (!value) {
      this.ball = null;
    }
  }

  public String getBeginIssueNo() {
    return this.beginIssueNo;
  }

  public AppendTask setBeginIssueNo(String beginIssueNo) {
    this.beginIssueNo = beginIssueNo;
    return this;
  }

  public void unsetBeginIssueNo() {
    this.beginIssueNo = null;
  }

  /** Returns true if field beginIssueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginIssueNo() {
    return this.beginIssueNo != null;
  }

  public void setBeginIssueNoIsSet(boolean value) {
    if (!value) {
      this.beginIssueNo = null;
    }
  }

  public int getAppendQuantity() {
    return this.appendQuantity;
  }

  public AppendTask setAppendQuantity(int appendQuantity) {
    this.appendQuantity = appendQuantity;
    setAppendQuantityIsSet(true);
    return this;
  }

  public void unsetAppendQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDQUANTITY_ISSET_ID);
  }

  /** Returns true if field appendQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDQUANTITY_ISSET_ID);
  }

  public void setAppendQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDQUANTITY_ISSET_ID, value);
  }

  public int getRemainingQuantity() {
    return this.remainingQuantity;
  }

  public AppendTask setRemainingQuantity(int remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    setRemainingQuantityIsSet(true);
    return this;
  }

  public void unsetRemainingQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGQUANTITY_ISSET_ID);
  }

  /** Returns true if field remainingQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGQUANTITY_ISSET_ID);
  }

  public void setRemainingQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGQUANTITY_ISSET_ID, value);
  }

  public int getFinishedNum() {
    return this.finishedNum;
  }

  public AppendTask setFinishedNum(int finishedNum) {
    this.finishedNum = finishedNum;
    setFinishedNumIsSet(true);
    return this;
  }

  public void unsetFinishedNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHEDNUM_ISSET_ID);
  }

  /** Returns true if field finishedNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishedNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHEDNUM_ISSET_ID);
  }

  public void setFinishedNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHEDNUM_ISSET_ID, value);
  }

  public int getCancelNum() {
    return this.cancelNum;
  }

  public AppendTask setCancelNum(int cancelNum) {
    this.cancelNum = cancelNum;
    setCancelNumIsSet(true);
    return this;
  }

  public void unsetCancelNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELNUM_ISSET_ID);
  }

  /** Returns true if field cancelNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELNUM_ISSET_ID);
  }

  public void setCancelNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELNUM_ISSET_ID, value);
  }

  public int getStopFlag() {
    return this.stopFlag;
  }

  public AppendTask setStopFlag(int stopFlag) {
    this.stopFlag = stopFlag;
    setStopFlagIsSet(true);
    return this;
  }

  public void unsetStopFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPFLAG_ISSET_ID);
  }

  /** Returns true if field stopFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetStopFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPFLAG_ISSET_ID);
  }

  public void setStopFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPFLAG_ISSET_ID, value);
  }

  public int getAppendStatus() {
    return this.appendStatus;
  }

  public AppendTask setAppendStatus(int appendStatus) {
    this.appendStatus = appendStatus;
    setAppendStatusIsSet(true);
    return this;
  }

  public void unsetAppendStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDSTATUS_ISSET_ID);
  }

  /** Returns true if field appendStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDSTATUS_ISSET_ID);
  }

  public void setAppendStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDSTATUS_ISSET_ID, value);
  }

  public long getAppendTotalMoney() {
    return this.appendTotalMoney;
  }

  public AppendTask setAppendTotalMoney(long appendTotalMoney) {
    this.appendTotalMoney = appendTotalMoney;
    setAppendTotalMoneyIsSet(true);
    return this;
  }

  public void unsetAppendTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field appendTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDTOTALMONEY_ISSET_ID);
  }

  public void setAppendTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDTOTALMONEY_ISSET_ID, value);
  }

  public long getFinishedMoney() {
    return this.finishedMoney;
  }

  public AppendTask setFinishedMoney(long finishedMoney) {
    this.finishedMoney = finishedMoney;
    setFinishedMoneyIsSet(true);
    return this;
  }

  public void unsetFinishedMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHEDMONEY_ISSET_ID);
  }

  /** Returns true if field finishedMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishedMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHEDMONEY_ISSET_ID);
  }

  public void setFinishedMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHEDMONEY_ISSET_ID, value);
  }

  public long getCancelMoney() {
    return this.cancelMoney;
  }

  public AppendTask setCancelMoney(long cancelMoney) {
    this.cancelMoney = cancelMoney;
    setCancelMoneyIsSet(true);
    return this;
  }

  public void unsetCancelMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELMONEY_ISSET_ID);
  }

  /** Returns true if field cancelMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELMONEY_ISSET_ID);
  }

  public void setCancelMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELMONEY_ISSET_ID, value);
  }

  public long getWinningTotalMoney() {
    return this.winningTotalMoney;
  }

  public AppendTask setWinningTotalMoney(long winningTotalMoney) {
    this.winningTotalMoney = winningTotalMoney;
    setWinningTotalMoneyIsSet(true);
    return this;
  }

  public void unsetWinningTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINNINGTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field winningTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetWinningTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __WINNINGTOTALMONEY_ISSET_ID);
  }

  public void setWinningTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINNINGTOTALMONEY_ISSET_ID, value);
  }

  public int getPerNoteNumber() {
    return this.perNoteNumber;
  }

  public AppendTask setPerNoteNumber(int perNoteNumber) {
    this.perNoteNumber = perNoteNumber;
    setPerNoteNumberIsSet(true);
    return this;
  }

  public void unsetPerNoteNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERNOTENUMBER_ISSET_ID);
  }

  /** Returns true if field perNoteNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPerNoteNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PERNOTENUMBER_ISSET_ID);
  }

  public void setPerNoteNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERNOTENUMBER_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public AppendTask setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getPlayType() {
    return this.playType;
  }

  public AppendTask setPlayType(String playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  public String getNewAppendIssueNo() {
    return this.newAppendIssueNo;
  }

  public AppendTask setNewAppendIssueNo(String newAppendIssueNo) {
    this.newAppendIssueNo = newAppendIssueNo;
    return this;
  }

  public void unsetNewAppendIssueNo() {
    this.newAppendIssueNo = null;
  }

  /** Returns true if field newAppendIssueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetNewAppendIssueNo() {
    return this.newAppendIssueNo != null;
  }

  public void setNewAppendIssueNoIsSet(boolean value) {
    if (!value) {
      this.newAppendIssueNo = null;
    }
  }

  public String getFreezeSerialNumber() {
    return this.freezeSerialNumber;
  }

  public AppendTask setFreezeSerialNumber(String freezeSerialNumber) {
    this.freezeSerialNumber = freezeSerialNumber;
    return this;
  }

  public void unsetFreezeSerialNumber() {
    this.freezeSerialNumber = null;
  }

  /** Returns true if field freezeSerialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFreezeSerialNumber() {
    return this.freezeSerialNumber != null;
  }

  public void setFreezeSerialNumberIsSet(boolean value) {
    if (!value) {
      this.freezeSerialNumber = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public AppendTask setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public AppendTask setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getAppendTaskDetailListSize() {
    return (this.appendTaskDetailList == null) ? 0 : this.appendTaskDetailList.size();
  }

  public java.util.Iterator<AppendTaskDetail> getAppendTaskDetailListIterator() {
    return (this.appendTaskDetailList == null) ? null : this.appendTaskDetailList.iterator();
  }

  public void addToAppendTaskDetailList(AppendTaskDetail elem) {
    if (this.appendTaskDetailList == null) {
      this.appendTaskDetailList = new ArrayList<AppendTaskDetail>();
    }
    this.appendTaskDetailList.add(elem);
  }

  public List<AppendTaskDetail> getAppendTaskDetailList() {
    return this.appendTaskDetailList;
  }

  public AppendTask setAppendTaskDetailList(List<AppendTaskDetail> appendTaskDetailList) {
    this.appendTaskDetailList = appendTaskDetailList;
    return this;
  }

  public void unsetAppendTaskDetailList() {
    this.appendTaskDetailList = null;
  }

  /** Returns true if field appendTaskDetailList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendTaskDetailList() {
    return this.appendTaskDetailList != null;
  }

  public void setAppendTaskDetailListIsSet(boolean value) {
    if (!value) {
      this.appendTaskDetailList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPEND_TASK_ID:
      if (value == null) {
        unsetAppendTaskId();
      } else {
        setAppendTaskId((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case BALL:
      if (value == null) {
        unsetBall();
      } else {
        setBall((String)value);
      }
      break;

    case BEGIN_ISSUE_NO:
      if (value == null) {
        unsetBeginIssueNo();
      } else {
        setBeginIssueNo((String)value);
      }
      break;

    case APPEND_QUANTITY:
      if (value == null) {
        unsetAppendQuantity();
      } else {
        setAppendQuantity((Integer)value);
      }
      break;

    case REMAINING_QUANTITY:
      if (value == null) {
        unsetRemainingQuantity();
      } else {
        setRemainingQuantity((Integer)value);
      }
      break;

    case FINISHED_NUM:
      if (value == null) {
        unsetFinishedNum();
      } else {
        setFinishedNum((Integer)value);
      }
      break;

    case CANCEL_NUM:
      if (value == null) {
        unsetCancelNum();
      } else {
        setCancelNum((Integer)value);
      }
      break;

    case STOP_FLAG:
      if (value == null) {
        unsetStopFlag();
      } else {
        setStopFlag((Integer)value);
      }
      break;

    case APPEND_STATUS:
      if (value == null) {
        unsetAppendStatus();
      } else {
        setAppendStatus((Integer)value);
      }
      break;

    case APPEND_TOTAL_MONEY:
      if (value == null) {
        unsetAppendTotalMoney();
      } else {
        setAppendTotalMoney((Long)value);
      }
      break;

    case FINISHED_MONEY:
      if (value == null) {
        unsetFinishedMoney();
      } else {
        setFinishedMoney((Long)value);
      }
      break;

    case CANCEL_MONEY:
      if (value == null) {
        unsetCancelMoney();
      } else {
        setCancelMoney((Long)value);
      }
      break;

    case WINNING_TOTAL_MONEY:
      if (value == null) {
        unsetWinningTotalMoney();
      } else {
        setWinningTotalMoney((Long)value);
      }
      break;

    case PER_NOTE_NUMBER:
      if (value == null) {
        unsetPerNoteNumber();
      } else {
        setPerNoteNumber((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((String)value);
      }
      break;

    case NEW_APPEND_ISSUE_NO:
      if (value == null) {
        unsetNewAppendIssueNo();
      } else {
        setNewAppendIssueNo((String)value);
      }
      break;

    case FREEZE_SERIAL_NUMBER:
      if (value == null) {
        unsetFreezeSerialNumber();
      } else {
        setFreezeSerialNumber((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case APPEND_TASK_DETAIL_LIST:
      if (value == null) {
        unsetAppendTaskDetailList();
      } else {
        setAppendTaskDetailList((List<AppendTaskDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPEND_TASK_ID:
      return getAppendTaskId();

    case PARTNER_ID:
      return getPartnerId();

    case LOTTERY_ID:
      return getLotteryId();

    case BALL:
      return getBall();

    case BEGIN_ISSUE_NO:
      return getBeginIssueNo();

    case APPEND_QUANTITY:
      return Integer.valueOf(getAppendQuantity());

    case REMAINING_QUANTITY:
      return Integer.valueOf(getRemainingQuantity());

    case FINISHED_NUM:
      return Integer.valueOf(getFinishedNum());

    case CANCEL_NUM:
      return Integer.valueOf(getCancelNum());

    case STOP_FLAG:
      return Integer.valueOf(getStopFlag());

    case APPEND_STATUS:
      return Integer.valueOf(getAppendStatus());

    case APPEND_TOTAL_MONEY:
      return Long.valueOf(getAppendTotalMoney());

    case FINISHED_MONEY:
      return Long.valueOf(getFinishedMoney());

    case CANCEL_MONEY:
      return Long.valueOf(getCancelMoney());

    case WINNING_TOTAL_MONEY:
      return Long.valueOf(getWinningTotalMoney());

    case PER_NOTE_NUMBER:
      return Integer.valueOf(getPerNoteNumber());

    case USER_ID:
      return Long.valueOf(getUserId());

    case PLAY_TYPE:
      return getPlayType();

    case NEW_APPEND_ISSUE_NO:
      return getNewAppendIssueNo();

    case FREEZE_SERIAL_NUMBER:
      return getFreezeSerialNumber();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case APPEND_TASK_DETAIL_LIST:
      return getAppendTaskDetailList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPEND_TASK_ID:
      return isSetAppendTaskId();
    case PARTNER_ID:
      return isSetPartnerId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case BALL:
      return isSetBall();
    case BEGIN_ISSUE_NO:
      return isSetBeginIssueNo();
    case APPEND_QUANTITY:
      return isSetAppendQuantity();
    case REMAINING_QUANTITY:
      return isSetRemainingQuantity();
    case FINISHED_NUM:
      return isSetFinishedNum();
    case CANCEL_NUM:
      return isSetCancelNum();
    case STOP_FLAG:
      return isSetStopFlag();
    case APPEND_STATUS:
      return isSetAppendStatus();
    case APPEND_TOTAL_MONEY:
      return isSetAppendTotalMoney();
    case FINISHED_MONEY:
      return isSetFinishedMoney();
    case CANCEL_MONEY:
      return isSetCancelMoney();
    case WINNING_TOTAL_MONEY:
      return isSetWinningTotalMoney();
    case PER_NOTE_NUMBER:
      return isSetPerNoteNumber();
    case USER_ID:
      return isSetUserId();
    case PLAY_TYPE:
      return isSetPlayType();
    case NEW_APPEND_ISSUE_NO:
      return isSetNewAppendIssueNo();
    case FREEZE_SERIAL_NUMBER:
      return isSetFreezeSerialNumber();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case APPEND_TASK_DETAIL_LIST:
      return isSetAppendTaskDetailList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppendTask)
      return this.equals((AppendTask)that);
    return false;
  }

  public boolean equals(AppendTask that) {
    if (that == null)
      return false;

    boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
    boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
    if (this_present_appendTaskId || that_present_appendTaskId) {
      if (!(this_present_appendTaskId && that_present_appendTaskId))
        return false;
      if (!this.appendTaskId.equals(that.appendTaskId))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_ball = true && this.isSetBall();
    boolean that_present_ball = true && that.isSetBall();
    if (this_present_ball || that_present_ball) {
      if (!(this_present_ball && that_present_ball))
        return false;
      if (!this.ball.equals(that.ball))
        return false;
    }

    boolean this_present_beginIssueNo = true && this.isSetBeginIssueNo();
    boolean that_present_beginIssueNo = true && that.isSetBeginIssueNo();
    if (this_present_beginIssueNo || that_present_beginIssueNo) {
      if (!(this_present_beginIssueNo && that_present_beginIssueNo))
        return false;
      if (!this.beginIssueNo.equals(that.beginIssueNo))
        return false;
    }

    boolean this_present_appendQuantity = true;
    boolean that_present_appendQuantity = true;
    if (this_present_appendQuantity || that_present_appendQuantity) {
      if (!(this_present_appendQuantity && that_present_appendQuantity))
        return false;
      if (this.appendQuantity != that.appendQuantity)
        return false;
    }

    boolean this_present_remainingQuantity = true;
    boolean that_present_remainingQuantity = true;
    if (this_present_remainingQuantity || that_present_remainingQuantity) {
      if (!(this_present_remainingQuantity && that_present_remainingQuantity))
        return false;
      if (this.remainingQuantity != that.remainingQuantity)
        return false;
    }

    boolean this_present_finishedNum = true;
    boolean that_present_finishedNum = true;
    if (this_present_finishedNum || that_present_finishedNum) {
      if (!(this_present_finishedNum && that_present_finishedNum))
        return false;
      if (this.finishedNum != that.finishedNum)
        return false;
    }

    boolean this_present_cancelNum = true;
    boolean that_present_cancelNum = true;
    if (this_present_cancelNum || that_present_cancelNum) {
      if (!(this_present_cancelNum && that_present_cancelNum))
        return false;
      if (this.cancelNum != that.cancelNum)
        return false;
    }

    boolean this_present_stopFlag = true;
    boolean that_present_stopFlag = true;
    if (this_present_stopFlag || that_present_stopFlag) {
      if (!(this_present_stopFlag && that_present_stopFlag))
        return false;
      if (this.stopFlag != that.stopFlag)
        return false;
    }

    boolean this_present_appendStatus = true;
    boolean that_present_appendStatus = true;
    if (this_present_appendStatus || that_present_appendStatus) {
      if (!(this_present_appendStatus && that_present_appendStatus))
        return false;
      if (this.appendStatus != that.appendStatus)
        return false;
    }

    boolean this_present_appendTotalMoney = true;
    boolean that_present_appendTotalMoney = true;
    if (this_present_appendTotalMoney || that_present_appendTotalMoney) {
      if (!(this_present_appendTotalMoney && that_present_appendTotalMoney))
        return false;
      if (this.appendTotalMoney != that.appendTotalMoney)
        return false;
    }

    boolean this_present_finishedMoney = true;
    boolean that_present_finishedMoney = true;
    if (this_present_finishedMoney || that_present_finishedMoney) {
      if (!(this_present_finishedMoney && that_present_finishedMoney))
        return false;
      if (this.finishedMoney != that.finishedMoney)
        return false;
    }

    boolean this_present_cancelMoney = true;
    boolean that_present_cancelMoney = true;
    if (this_present_cancelMoney || that_present_cancelMoney) {
      if (!(this_present_cancelMoney && that_present_cancelMoney))
        return false;
      if (this.cancelMoney != that.cancelMoney)
        return false;
    }

    boolean this_present_winningTotalMoney = true;
    boolean that_present_winningTotalMoney = true;
    if (this_present_winningTotalMoney || that_present_winningTotalMoney) {
      if (!(this_present_winningTotalMoney && that_present_winningTotalMoney))
        return false;
      if (this.winningTotalMoney != that.winningTotalMoney)
        return false;
    }

    boolean this_present_perNoteNumber = true;
    boolean that_present_perNoteNumber = true;
    if (this_present_perNoteNumber || that_present_perNoteNumber) {
      if (!(this_present_perNoteNumber && that_present_perNoteNumber))
        return false;
      if (this.perNoteNumber != that.perNoteNumber)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_newAppendIssueNo = true && this.isSetNewAppendIssueNo();
    boolean that_present_newAppendIssueNo = true && that.isSetNewAppendIssueNo();
    if (this_present_newAppendIssueNo || that_present_newAppendIssueNo) {
      if (!(this_present_newAppendIssueNo && that_present_newAppendIssueNo))
        return false;
      if (!this.newAppendIssueNo.equals(that.newAppendIssueNo))
        return false;
    }

    boolean this_present_freezeSerialNumber = true && this.isSetFreezeSerialNumber();
    boolean that_present_freezeSerialNumber = true && that.isSetFreezeSerialNumber();
    if (this_present_freezeSerialNumber || that_present_freezeSerialNumber) {
      if (!(this_present_freezeSerialNumber && that_present_freezeSerialNumber))
        return false;
      if (!this.freezeSerialNumber.equals(that.freezeSerialNumber))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_appendTaskDetailList = true && this.isSetAppendTaskDetailList();
    boolean that_present_appendTaskDetailList = true && that.isSetAppendTaskDetailList();
    if (this_present_appendTaskDetailList || that_present_appendTaskDetailList) {
      if (!(this_present_appendTaskDetailList && that_present_appendTaskDetailList))
        return false;
      if (!this.appendTaskDetailList.equals(that.appendTaskDetailList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppendTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBall()).compareTo(other.isSetBall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ball, other.ball);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginIssueNo()).compareTo(other.isSetBeginIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginIssueNo, other.beginIssueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendQuantity()).compareTo(other.isSetAppendQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendQuantity, other.appendQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingQuantity()).compareTo(other.isSetRemainingQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingQuantity, other.remainingQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishedNum()).compareTo(other.isSetFinishedNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishedNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishedNum, other.finishedNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelNum()).compareTo(other.isSetCancelNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelNum, other.cancelNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopFlag()).compareTo(other.isSetStopFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopFlag, other.stopFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendStatus()).compareTo(other.isSetAppendStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendStatus, other.appendStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendTotalMoney()).compareTo(other.isSetAppendTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTotalMoney, other.appendTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishedMoney()).compareTo(other.isSetFinishedMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishedMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishedMoney, other.finishedMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelMoney()).compareTo(other.isSetCancelMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelMoney, other.cancelMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinningTotalMoney()).compareTo(other.isSetWinningTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinningTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winningTotalMoney, other.winningTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerNoteNumber()).compareTo(other.isSetPerNoteNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerNoteNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perNoteNumber, other.perNoteNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewAppendIssueNo()).compareTo(other.isSetNewAppendIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewAppendIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newAppendIssueNo, other.newAppendIssueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreezeSerialNumber()).compareTo(other.isSetFreezeSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreezeSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezeSerialNumber, other.freezeSerialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendTaskDetailList()).compareTo(other.isSetAppendTaskDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendTaskDetailList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskDetailList, other.appendTaskDetailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppendTask(");
    boolean first = true;

    sb.append("appendTaskId:");
    if (this.appendTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.appendTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ball:");
    if (this.ball == null) {
      sb.append("null");
    } else {
      sb.append(this.ball);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginIssueNo:");
    if (this.beginIssueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.beginIssueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendQuantity:");
    sb.append(this.appendQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingQuantity:");
    sb.append(this.remainingQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishedNum:");
    sb.append(this.finishedNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelNum:");
    sb.append(this.cancelNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopFlag:");
    sb.append(this.stopFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendStatus:");
    sb.append(this.appendStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendTotalMoney:");
    sb.append(this.appendTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishedMoney:");
    sb.append(this.finishedMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelMoney:");
    sb.append(this.cancelMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("winningTotalMoney:");
    sb.append(this.winningTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perNoteNumber:");
    sb.append(this.perNoteNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newAppendIssueNo:");
    if (this.newAppendIssueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.newAppendIssueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("freezeSerialNumber:");
    if (this.freezeSerialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.freezeSerialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendTaskDetailList:");
    if (this.appendTaskDetailList == null) {
      sb.append("null");
    } else {
      sb.append(this.appendTaskDetailList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppendTaskStandardSchemeFactory implements SchemeFactory {
    public AppendTaskStandardScheme getScheme() {
      return new AppendTaskStandardScheme();
    }
  }

  private static class AppendTaskStandardScheme extends StandardScheme<AppendTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppendTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPEND_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appendTaskId = iprot.readString();
              struct.setAppendTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BALL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ball = iprot.readString();
              struct.setBallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginIssueNo = iprot.readString();
              struct.setBeginIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPEND_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appendQuantity = iprot.readI32();
              struct.setAppendQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMAINING_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainingQuantity = iprot.readI32();
              struct.setRemainingQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FINISHED_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finishedNum = iprot.readI32();
              struct.setFinishedNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CANCEL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cancelNum = iprot.readI32();
              struct.setCancelNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STOP_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopFlag = iprot.readI32();
              struct.setStopFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APPEND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appendStatus = iprot.readI32();
              struct.setAppendStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // APPEND_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appendTotalMoney = iprot.readI64();
              struct.setAppendTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FINISHED_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishedMoney = iprot.readI64();
              struct.setFinishedMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CANCEL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cancelMoney = iprot.readI64();
              struct.setCancelMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WINNING_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.winningTotalMoney = iprot.readI64();
              struct.setWinningTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PER_NOTE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perNoteNumber = iprot.readI32();
              struct.setPerNoteNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playType = iprot.readString();
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // NEW_APPEND_ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newAppendIssueNo = iprot.readString();
              struct.setNewAppendIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FREEZE_SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.freezeSerialNumber = iprot.readString();
              struct.setFreezeSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // APPEND_TASK_DETAIL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.appendTaskDetailList = new ArrayList<AppendTaskDetail>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  AppendTaskDetail _elem2;
                  _elem2 = new AppendTaskDetail();
                  _elem2.read(iprot);
                  struct.appendTaskDetailList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAppendTaskDetailListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppendTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appendTaskId != null) {
        oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.appendTaskId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.ball != null) {
        oprot.writeFieldBegin(BALL_FIELD_DESC);
        oprot.writeString(struct.ball);
        oprot.writeFieldEnd();
      }
      if (struct.beginIssueNo != null) {
        oprot.writeFieldBegin(BEGIN_ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.beginIssueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPEND_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.appendQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAINING_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.remainingQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISHED_NUM_FIELD_DESC);
      oprot.writeI32(struct.finishedNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANCEL_NUM_FIELD_DESC);
      oprot.writeI32(struct.cancelNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_FLAG_FIELD_DESC);
      oprot.writeI32(struct.stopFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPEND_STATUS_FIELD_DESC);
      oprot.writeI32(struct.appendStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPEND_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.appendTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISHED_MONEY_FIELD_DESC);
      oprot.writeI64(struct.finishedMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANCEL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.cancelMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WINNING_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.winningTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_NOTE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.perNoteNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.playType);
        oprot.writeFieldEnd();
      }
      if (struct.newAppendIssueNo != null) {
        oprot.writeFieldBegin(NEW_APPEND_ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.newAppendIssueNo);
        oprot.writeFieldEnd();
      }
      if (struct.freezeSerialNumber != null) {
        oprot.writeFieldBegin(FREEZE_SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.freezeSerialNumber);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.appendTaskDetailList != null) {
        oprot.writeFieldBegin(APPEND_TASK_DETAIL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appendTaskDetailList.size()));
          for (AppendTaskDetail _iter3 : struct.appendTaskDetailList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppendTaskTupleSchemeFactory implements SchemeFactory {
    public AppendTaskTupleScheme getScheme() {
      return new AppendTaskTupleScheme();
    }
  }

  private static class AppendTaskTupleScheme extends TupleScheme<AppendTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppendTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppendTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(2);
      }
      if (struct.isSetBall()) {
        optionals.set(3);
      }
      if (struct.isSetBeginIssueNo()) {
        optionals.set(4);
      }
      if (struct.isSetAppendQuantity()) {
        optionals.set(5);
      }
      if (struct.isSetRemainingQuantity()) {
        optionals.set(6);
      }
      if (struct.isSetFinishedNum()) {
        optionals.set(7);
      }
      if (struct.isSetCancelNum()) {
        optionals.set(8);
      }
      if (struct.isSetStopFlag()) {
        optionals.set(9);
      }
      if (struct.isSetAppendStatus()) {
        optionals.set(10);
      }
      if (struct.isSetAppendTotalMoney()) {
        optionals.set(11);
      }
      if (struct.isSetFinishedMoney()) {
        optionals.set(12);
      }
      if (struct.isSetCancelMoney()) {
        optionals.set(13);
      }
      if (struct.isSetWinningTotalMoney()) {
        optionals.set(14);
      }
      if (struct.isSetPerNoteNumber()) {
        optionals.set(15);
      }
      if (struct.isSetUserId()) {
        optionals.set(16);
      }
      if (struct.isSetPlayType()) {
        optionals.set(17);
      }
      if (struct.isSetNewAppendIssueNo()) {
        optionals.set(18);
      }
      if (struct.isSetFreezeSerialNumber()) {
        optionals.set(19);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(20);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(21);
      }
      if (struct.isSetAppendTaskDetailList()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetAppendTaskId()) {
        oprot.writeString(struct.appendTaskId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetBall()) {
        oprot.writeString(struct.ball);
      }
      if (struct.isSetBeginIssueNo()) {
        oprot.writeString(struct.beginIssueNo);
      }
      if (struct.isSetAppendQuantity()) {
        oprot.writeI32(struct.appendQuantity);
      }
      if (struct.isSetRemainingQuantity()) {
        oprot.writeI32(struct.remainingQuantity);
      }
      if (struct.isSetFinishedNum()) {
        oprot.writeI32(struct.finishedNum);
      }
      if (struct.isSetCancelNum()) {
        oprot.writeI32(struct.cancelNum);
      }
      if (struct.isSetStopFlag()) {
        oprot.writeI32(struct.stopFlag);
      }
      if (struct.isSetAppendStatus()) {
        oprot.writeI32(struct.appendStatus);
      }
      if (struct.isSetAppendTotalMoney()) {
        oprot.writeI64(struct.appendTotalMoney);
      }
      if (struct.isSetFinishedMoney()) {
        oprot.writeI64(struct.finishedMoney);
      }
      if (struct.isSetCancelMoney()) {
        oprot.writeI64(struct.cancelMoney);
      }
      if (struct.isSetWinningTotalMoney()) {
        oprot.writeI64(struct.winningTotalMoney);
      }
      if (struct.isSetPerNoteNumber()) {
        oprot.writeI32(struct.perNoteNumber);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetPlayType()) {
        oprot.writeString(struct.playType);
      }
      if (struct.isSetNewAppendIssueNo()) {
        oprot.writeString(struct.newAppendIssueNo);
      }
      if (struct.isSetFreezeSerialNumber()) {
        oprot.writeString(struct.freezeSerialNumber);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetAppendTaskDetailList()) {
        {
          oprot.writeI32(struct.appendTaskDetailList.size());
          for (AppendTaskDetail _iter4 : struct.appendTaskDetailList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppendTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.appendTaskId = iprot.readString();
        struct.setAppendTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ball = iprot.readString();
        struct.setBallIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginIssueNo = iprot.readString();
        struct.setBeginIssueNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appendQuantity = iprot.readI32();
        struct.setAppendQuantityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remainingQuantity = iprot.readI32();
        struct.setRemainingQuantityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.finishedNum = iprot.readI32();
        struct.setFinishedNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cancelNum = iprot.readI32();
        struct.setCancelNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stopFlag = iprot.readI32();
        struct.setStopFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.appendStatus = iprot.readI32();
        struct.setAppendStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.appendTotalMoney = iprot.readI64();
        struct.setAppendTotalMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.finishedMoney = iprot.readI64();
        struct.setFinishedMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cancelMoney = iprot.readI64();
        struct.setCancelMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.winningTotalMoney = iprot.readI64();
        struct.setWinningTotalMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.perNoteNumber = iprot.readI32();
        struct.setPerNoteNumberIsSet(true);
      }
      if (incoming.get(16)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.playType = iprot.readString();
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.newAppendIssueNo = iprot.readString();
        struct.setNewAppendIssueNoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.freezeSerialNumber = iprot.readString();
        struct.setFreezeSerialNumberIsSet(true);
      }
      if (incoming.get(20)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appendTaskDetailList = new ArrayList<AppendTaskDetail>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            AppendTaskDetail _elem7;
            _elem7 = new AppendTaskDetail();
            _elem7.read(iprot);
            struct.appendTaskDetailList.add(_elem7);
          }
        }
        struct.setAppendTaskDetailListIsSet(true);
      }
    }
  }

}

