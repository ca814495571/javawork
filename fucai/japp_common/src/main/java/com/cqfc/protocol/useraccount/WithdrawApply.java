/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WithdrawApply implements org.apache.thrift.TBase<WithdrawApply, WithdrawApply._Fields>, java.io.Serializable, Cloneable, Comparable<WithdrawApply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WithdrawApply");

  private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WITHDRAW_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAccountId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField WITHDRAW_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAmount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditState", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField AUDIT_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("auditRemark", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AUDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField AUDIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("auditName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PARTNER_APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerApplyId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField WITHDRAW_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawMsgId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SEARCH_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchBeginTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SEARCH_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEndTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField WITHDRAW_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAccount", org.apache.thrift.protocol.TType.STRUCT, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WithdrawApplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WithdrawApplyTupleSchemeFactory());
  }

  public int applyId; // required
  public long userId; // required
  public String realName; // required
  public String partnerId; // required
  public String serialNumber; // required
  public int withdrawAccountId; // required
  public long withdrawAmount; // required
  public long totalAmount; // required
  public int auditState; // required
  public String auditRemark; // required
  public String auditTime; // required
  public int auditId; // required
  public String auditName; // required
  public String partnerApplyId; // required
  public String withdrawMsgId; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public String searchBeginTime; // required
  public String searchEndTime; // required
  public WithdrawAccount withdrawAccount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLY_ID((short)1, "applyId"),
    USER_ID((short)2, "userId"),
    REAL_NAME((short)3, "realName"),
    PARTNER_ID((short)4, "partnerId"),
    SERIAL_NUMBER((short)5, "serialNumber"),
    WITHDRAW_ACCOUNT_ID((short)6, "withdrawAccountId"),
    WITHDRAW_AMOUNT((short)7, "withdrawAmount"),
    TOTAL_AMOUNT((short)8, "totalAmount"),
    AUDIT_STATE((short)9, "auditState"),
    AUDIT_REMARK((short)10, "auditRemark"),
    AUDIT_TIME((short)11, "auditTime"),
    AUDIT_ID((short)12, "auditId"),
    AUDIT_NAME((short)13, "auditName"),
    PARTNER_APPLY_ID((short)14, "partnerApplyId"),
    WITHDRAW_MSG_ID((short)15, "withdrawMsgId"),
    CREATE_TIME((short)16, "createTime"),
    LAST_UPDATE_TIME((short)17, "lastUpdateTime"),
    SEARCH_BEGIN_TIME((short)18, "searchBeginTime"),
    SEARCH_END_TIME((short)19, "searchEndTime"),
    WITHDRAW_ACCOUNT((short)20, "withdrawAccount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLY_ID
          return APPLY_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // REAL_NAME
          return REAL_NAME;
        case 4: // PARTNER_ID
          return PARTNER_ID;
        case 5: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 6: // WITHDRAW_ACCOUNT_ID
          return WITHDRAW_ACCOUNT_ID;
        case 7: // WITHDRAW_AMOUNT
          return WITHDRAW_AMOUNT;
        case 8: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 9: // AUDIT_STATE
          return AUDIT_STATE;
        case 10: // AUDIT_REMARK
          return AUDIT_REMARK;
        case 11: // AUDIT_TIME
          return AUDIT_TIME;
        case 12: // AUDIT_ID
          return AUDIT_ID;
        case 13: // AUDIT_NAME
          return AUDIT_NAME;
        case 14: // PARTNER_APPLY_ID
          return PARTNER_APPLY_ID;
        case 15: // WITHDRAW_MSG_ID
          return WITHDRAW_MSG_ID;
        case 16: // CREATE_TIME
          return CREATE_TIME;
        case 17: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 18: // SEARCH_BEGIN_TIME
          return SEARCH_BEGIN_TIME;
        case 19: // SEARCH_END_TIME
          return SEARCH_END_TIME;
        case 20: // WITHDRAW_ACCOUNT
          return WITHDRAW_ACCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLYID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __WITHDRAWACCOUNTID_ISSET_ID = 2;
  private static final int __WITHDRAWAMOUNT_ISSET_ID = 3;
  private static final int __TOTALAMOUNT_ISSET_ID = 4;
  private static final int __AUDITSTATE_ISSET_ID = 5;
  private static final int __AUDITID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITHDRAW_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("withdrawAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WITHDRAW_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("withdrawAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("auditState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDIT_REMARK, new org.apache.thrift.meta_data.FieldMetaData("auditRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("auditTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("auditName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerApplyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITHDRAW_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("withdrawMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("searchBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("searchEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITHDRAW_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("withdrawAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WithdrawAccount.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WithdrawApply.class, metaDataMap);
  }

  public WithdrawApply() {
  }

  public WithdrawApply(
    int applyId,
    long userId,
    String realName,
    String partnerId,
    String serialNumber,
    int withdrawAccountId,
    long withdrawAmount,
    long totalAmount,
    int auditState,
    String auditRemark,
    String auditTime,
    int auditId,
    String auditName,
    String partnerApplyId,
    String withdrawMsgId,
    String createTime,
    String lastUpdateTime,
    String searchBeginTime,
    String searchEndTime,
    WithdrawAccount withdrawAccount)
  {
    this();
    this.applyId = applyId;
    setApplyIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.realName = realName;
    this.partnerId = partnerId;
    this.serialNumber = serialNumber;
    this.withdrawAccountId = withdrawAccountId;
    setWithdrawAccountIdIsSet(true);
    this.withdrawAmount = withdrawAmount;
    setWithdrawAmountIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.auditState = auditState;
    setAuditStateIsSet(true);
    this.auditRemark = auditRemark;
    this.auditTime = auditTime;
    this.auditId = auditId;
    setAuditIdIsSet(true);
    this.auditName = auditName;
    this.partnerApplyId = partnerApplyId;
    this.withdrawMsgId = withdrawMsgId;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.searchBeginTime = searchBeginTime;
    this.searchEndTime = searchEndTime;
    this.withdrawAccount = withdrawAccount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WithdrawApply(WithdrawApply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.applyId = other.applyId;
    this.userId = other.userId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    this.withdrawAccountId = other.withdrawAccountId;
    this.withdrawAmount = other.withdrawAmount;
    this.totalAmount = other.totalAmount;
    this.auditState = other.auditState;
    if (other.isSetAuditRemark()) {
      this.auditRemark = other.auditRemark;
    }
    if (other.isSetAuditTime()) {
      this.auditTime = other.auditTime;
    }
    this.auditId = other.auditId;
    if (other.isSetAuditName()) {
      this.auditName = other.auditName;
    }
    if (other.isSetPartnerApplyId()) {
      this.partnerApplyId = other.partnerApplyId;
    }
    if (other.isSetWithdrawMsgId()) {
      this.withdrawMsgId = other.withdrawMsgId;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetSearchBeginTime()) {
      this.searchBeginTime = other.searchBeginTime;
    }
    if (other.isSetSearchEndTime()) {
      this.searchEndTime = other.searchEndTime;
    }
    if (other.isSetWithdrawAccount()) {
      this.withdrawAccount = new WithdrawAccount(other.withdrawAccount);
    }
  }

  public WithdrawApply deepCopy() {
    return new WithdrawApply(this);
  }

  @Override
  public void clear() {
    setApplyIdIsSet(false);
    this.applyId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.realName = null;
    this.partnerId = null;
    this.serialNumber = null;
    setWithdrawAccountIdIsSet(false);
    this.withdrawAccountId = 0;
    setWithdrawAmountIsSet(false);
    this.withdrawAmount = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setAuditStateIsSet(false);
    this.auditState = 0;
    this.auditRemark = null;
    this.auditTime = null;
    setAuditIdIsSet(false);
    this.auditId = 0;
    this.auditName = null;
    this.partnerApplyId = null;
    this.withdrawMsgId = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.searchBeginTime = null;
    this.searchEndTime = null;
    this.withdrawAccount = null;
  }

  public int getApplyId() {
    return this.applyId;
  }

  public WithdrawApply setApplyId(int applyId) {
    this.applyId = applyId;
    setApplyIdIsSet(true);
    return this;
  }

  public void unsetApplyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYID_ISSET_ID);
  }

  public void setApplyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public WithdrawApply setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public WithdrawApply setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public WithdrawApply setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getSerialNumber() {
    return this.serialNumber;
  }

  public WithdrawApply setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public int getWithdrawAccountId() {
    return this.withdrawAccountId;
  }

  public WithdrawApply setWithdrawAccountId(int withdrawAccountId) {
    this.withdrawAccountId = withdrawAccountId;
    setWithdrawAccountIdIsSet(true);
    return this;
  }

  public void unsetWithdrawAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWACCOUNTID_ISSET_ID);
  }

  /** Returns true if field withdrawAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWACCOUNTID_ISSET_ID);
  }

  public void setWithdrawAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWACCOUNTID_ISSET_ID, value);
  }

  public long getWithdrawAmount() {
    return this.withdrawAmount;
  }

  public WithdrawApply setWithdrawAmount(long withdrawAmount) {
    this.withdrawAmount = withdrawAmount;
    setWithdrawAmountIsSet(true);
    return this;
  }

  public void unsetWithdrawAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID);
  }

  /** Returns true if field withdrawAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID);
  }

  public void setWithdrawAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID, value);
  }

  public long getTotalAmount() {
    return this.totalAmount;
  }

  public WithdrawApply setTotalAmount(long totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public int getAuditState() {
    return this.auditState;
  }

  public WithdrawApply setAuditState(int auditState) {
    this.auditState = auditState;
    setAuditStateIsSet(true);
    return this;
  }

  public void unsetAuditState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITSTATE_ISSET_ID);
  }

  /** Returns true if field auditState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditState() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITSTATE_ISSET_ID);
  }

  public void setAuditStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITSTATE_ISSET_ID, value);
  }

  public String getAuditRemark() {
    return this.auditRemark;
  }

  public WithdrawApply setAuditRemark(String auditRemark) {
    this.auditRemark = auditRemark;
    return this;
  }

  public void unsetAuditRemark() {
    this.auditRemark = null;
  }

  /** Returns true if field auditRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditRemark() {
    return this.auditRemark != null;
  }

  public void setAuditRemarkIsSet(boolean value) {
    if (!value) {
      this.auditRemark = null;
    }
  }

  public String getAuditTime() {
    return this.auditTime;
  }

  public WithdrawApply setAuditTime(String auditTime) {
    this.auditTime = auditTime;
    return this;
  }

  public void unsetAuditTime() {
    this.auditTime = null;
  }

  /** Returns true if field auditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditTime() {
    return this.auditTime != null;
  }

  public void setAuditTimeIsSet(boolean value) {
    if (!value) {
      this.auditTime = null;
    }
  }

  public int getAuditId() {
    return this.auditId;
  }

  public WithdrawApply setAuditId(int auditId) {
    this.auditId = auditId;
    setAuditIdIsSet(true);
    return this;
  }

  public void unsetAuditId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITID_ISSET_ID);
  }

  /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditId() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITID_ISSET_ID);
  }

  public void setAuditIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITID_ISSET_ID, value);
  }

  public String getAuditName() {
    return this.auditName;
  }

  public WithdrawApply setAuditName(String auditName) {
    this.auditName = auditName;
    return this;
  }

  public void unsetAuditName() {
    this.auditName = null;
  }

  /** Returns true if field auditName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditName() {
    return this.auditName != null;
  }

  public void setAuditNameIsSet(boolean value) {
    if (!value) {
      this.auditName = null;
    }
  }

  public String getPartnerApplyId() {
    return this.partnerApplyId;
  }

  public WithdrawApply setPartnerApplyId(String partnerApplyId) {
    this.partnerApplyId = partnerApplyId;
    return this;
  }

  public void unsetPartnerApplyId() {
    this.partnerApplyId = null;
  }

  /** Returns true if field partnerApplyId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerApplyId() {
    return this.partnerApplyId != null;
  }

  public void setPartnerApplyIdIsSet(boolean value) {
    if (!value) {
      this.partnerApplyId = null;
    }
  }

  public String getWithdrawMsgId() {
    return this.withdrawMsgId;
  }

  public WithdrawApply setWithdrawMsgId(String withdrawMsgId) {
    this.withdrawMsgId = withdrawMsgId;
    return this;
  }

  public void unsetWithdrawMsgId() {
    this.withdrawMsgId = null;
  }

  /** Returns true if field withdrawMsgId is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawMsgId() {
    return this.withdrawMsgId != null;
  }

  public void setWithdrawMsgIdIsSet(boolean value) {
    if (!value) {
      this.withdrawMsgId = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public WithdrawApply setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public WithdrawApply setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public String getSearchBeginTime() {
    return this.searchBeginTime;
  }

  public WithdrawApply setSearchBeginTime(String searchBeginTime) {
    this.searchBeginTime = searchBeginTime;
    return this;
  }

  public void unsetSearchBeginTime() {
    this.searchBeginTime = null;
  }

  /** Returns true if field searchBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchBeginTime() {
    return this.searchBeginTime != null;
  }

  public void setSearchBeginTimeIsSet(boolean value) {
    if (!value) {
      this.searchBeginTime = null;
    }
  }

  public String getSearchEndTime() {
    return this.searchEndTime;
  }

  public WithdrawApply setSearchEndTime(String searchEndTime) {
    this.searchEndTime = searchEndTime;
    return this;
  }

  public void unsetSearchEndTime() {
    this.searchEndTime = null;
  }

  /** Returns true if field searchEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchEndTime() {
    return this.searchEndTime != null;
  }

  public void setSearchEndTimeIsSet(boolean value) {
    if (!value) {
      this.searchEndTime = null;
    }
  }

  public WithdrawAccount getWithdrawAccount() {
    return this.withdrawAccount;
  }

  public WithdrawApply setWithdrawAccount(WithdrawAccount withdrawAccount) {
    this.withdrawAccount = withdrawAccount;
    return this;
  }

  public void unsetWithdrawAccount() {
    this.withdrawAccount = null;
  }

  /** Returns true if field withdrawAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAccount() {
    return this.withdrawAccount != null;
  }

  public void setWithdrawAccountIsSet(boolean value) {
    if (!value) {
      this.withdrawAccount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((String)value);
      }
      break;

    case WITHDRAW_ACCOUNT_ID:
      if (value == null) {
        unsetWithdrawAccountId();
      } else {
        setWithdrawAccountId((Integer)value);
      }
      break;

    case WITHDRAW_AMOUNT:
      if (value == null) {
        unsetWithdrawAmount();
      } else {
        setWithdrawAmount((Long)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Long)value);
      }
      break;

    case AUDIT_STATE:
      if (value == null) {
        unsetAuditState();
      } else {
        setAuditState((Integer)value);
      }
      break;

    case AUDIT_REMARK:
      if (value == null) {
        unsetAuditRemark();
      } else {
        setAuditRemark((String)value);
      }
      break;

    case AUDIT_TIME:
      if (value == null) {
        unsetAuditTime();
      } else {
        setAuditTime((String)value);
      }
      break;

    case AUDIT_ID:
      if (value == null) {
        unsetAuditId();
      } else {
        setAuditId((Integer)value);
      }
      break;

    case AUDIT_NAME:
      if (value == null) {
        unsetAuditName();
      } else {
        setAuditName((String)value);
      }
      break;

    case PARTNER_APPLY_ID:
      if (value == null) {
        unsetPartnerApplyId();
      } else {
        setPartnerApplyId((String)value);
      }
      break;

    case WITHDRAW_MSG_ID:
      if (value == null) {
        unsetWithdrawMsgId();
      } else {
        setWithdrawMsgId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case SEARCH_BEGIN_TIME:
      if (value == null) {
        unsetSearchBeginTime();
      } else {
        setSearchBeginTime((String)value);
      }
      break;

    case SEARCH_END_TIME:
      if (value == null) {
        unsetSearchEndTime();
      } else {
        setSearchEndTime((String)value);
      }
      break;

    case WITHDRAW_ACCOUNT:
      if (value == null) {
        unsetWithdrawAccount();
      } else {
        setWithdrawAccount((WithdrawAccount)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLY_ID:
      return Integer.valueOf(getApplyId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case REAL_NAME:
      return getRealName();

    case PARTNER_ID:
      return getPartnerId();

    case SERIAL_NUMBER:
      return getSerialNumber();

    case WITHDRAW_ACCOUNT_ID:
      return Integer.valueOf(getWithdrawAccountId());

    case WITHDRAW_AMOUNT:
      return Long.valueOf(getWithdrawAmount());

    case TOTAL_AMOUNT:
      return Long.valueOf(getTotalAmount());

    case AUDIT_STATE:
      return Integer.valueOf(getAuditState());

    case AUDIT_REMARK:
      return getAuditRemark();

    case AUDIT_TIME:
      return getAuditTime();

    case AUDIT_ID:
      return Integer.valueOf(getAuditId());

    case AUDIT_NAME:
      return getAuditName();

    case PARTNER_APPLY_ID:
      return getPartnerApplyId();

    case WITHDRAW_MSG_ID:
      return getWithdrawMsgId();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case SEARCH_BEGIN_TIME:
      return getSearchBeginTime();

    case SEARCH_END_TIME:
      return getSearchEndTime();

    case WITHDRAW_ACCOUNT:
      return getWithdrawAccount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLY_ID:
      return isSetApplyId();
    case USER_ID:
      return isSetUserId();
    case REAL_NAME:
      return isSetRealName();
    case PARTNER_ID:
      return isSetPartnerId();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case WITHDRAW_ACCOUNT_ID:
      return isSetWithdrawAccountId();
    case WITHDRAW_AMOUNT:
      return isSetWithdrawAmount();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case AUDIT_STATE:
      return isSetAuditState();
    case AUDIT_REMARK:
      return isSetAuditRemark();
    case AUDIT_TIME:
      return isSetAuditTime();
    case AUDIT_ID:
      return isSetAuditId();
    case AUDIT_NAME:
      return isSetAuditName();
    case PARTNER_APPLY_ID:
      return isSetPartnerApplyId();
    case WITHDRAW_MSG_ID:
      return isSetWithdrawMsgId();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case SEARCH_BEGIN_TIME:
      return isSetSearchBeginTime();
    case SEARCH_END_TIME:
      return isSetSearchEndTime();
    case WITHDRAW_ACCOUNT:
      return isSetWithdrawAccount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WithdrawApply)
      return this.equals((WithdrawApply)that);
    return false;
  }

  public boolean equals(WithdrawApply that) {
    if (that == null)
      return false;

    boolean this_present_applyId = true;
    boolean that_present_applyId = true;
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (this.applyId != that.applyId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_withdrawAccountId = true;
    boolean that_present_withdrawAccountId = true;
    if (this_present_withdrawAccountId || that_present_withdrawAccountId) {
      if (!(this_present_withdrawAccountId && that_present_withdrawAccountId))
        return false;
      if (this.withdrawAccountId != that.withdrawAccountId)
        return false;
    }

    boolean this_present_withdrawAmount = true;
    boolean that_present_withdrawAmount = true;
    if (this_present_withdrawAmount || that_present_withdrawAmount) {
      if (!(this_present_withdrawAmount && that_present_withdrawAmount))
        return false;
      if (this.withdrawAmount != that.withdrawAmount)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_auditState = true;
    boolean that_present_auditState = true;
    if (this_present_auditState || that_present_auditState) {
      if (!(this_present_auditState && that_present_auditState))
        return false;
      if (this.auditState != that.auditState)
        return false;
    }

    boolean this_present_auditRemark = true && this.isSetAuditRemark();
    boolean that_present_auditRemark = true && that.isSetAuditRemark();
    if (this_present_auditRemark || that_present_auditRemark) {
      if (!(this_present_auditRemark && that_present_auditRemark))
        return false;
      if (!this.auditRemark.equals(that.auditRemark))
        return false;
    }

    boolean this_present_auditTime = true && this.isSetAuditTime();
    boolean that_present_auditTime = true && that.isSetAuditTime();
    if (this_present_auditTime || that_present_auditTime) {
      if (!(this_present_auditTime && that_present_auditTime))
        return false;
      if (!this.auditTime.equals(that.auditTime))
        return false;
    }

    boolean this_present_auditId = true;
    boolean that_present_auditId = true;
    if (this_present_auditId || that_present_auditId) {
      if (!(this_present_auditId && that_present_auditId))
        return false;
      if (this.auditId != that.auditId)
        return false;
    }

    boolean this_present_auditName = true && this.isSetAuditName();
    boolean that_present_auditName = true && that.isSetAuditName();
    if (this_present_auditName || that_present_auditName) {
      if (!(this_present_auditName && that_present_auditName))
        return false;
      if (!this.auditName.equals(that.auditName))
        return false;
    }

    boolean this_present_partnerApplyId = true && this.isSetPartnerApplyId();
    boolean that_present_partnerApplyId = true && that.isSetPartnerApplyId();
    if (this_present_partnerApplyId || that_present_partnerApplyId) {
      if (!(this_present_partnerApplyId && that_present_partnerApplyId))
        return false;
      if (!this.partnerApplyId.equals(that.partnerApplyId))
        return false;
    }

    boolean this_present_withdrawMsgId = true && this.isSetWithdrawMsgId();
    boolean that_present_withdrawMsgId = true && that.isSetWithdrawMsgId();
    if (this_present_withdrawMsgId || that_present_withdrawMsgId) {
      if (!(this_present_withdrawMsgId && that_present_withdrawMsgId))
        return false;
      if (!this.withdrawMsgId.equals(that.withdrawMsgId))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_searchBeginTime = true && this.isSetSearchBeginTime();
    boolean that_present_searchBeginTime = true && that.isSetSearchBeginTime();
    if (this_present_searchBeginTime || that_present_searchBeginTime) {
      if (!(this_present_searchBeginTime && that_present_searchBeginTime))
        return false;
      if (!this.searchBeginTime.equals(that.searchBeginTime))
        return false;
    }

    boolean this_present_searchEndTime = true && this.isSetSearchEndTime();
    boolean that_present_searchEndTime = true && that.isSetSearchEndTime();
    if (this_present_searchEndTime || that_present_searchEndTime) {
      if (!(this_present_searchEndTime && that_present_searchEndTime))
        return false;
      if (!this.searchEndTime.equals(that.searchEndTime))
        return false;
    }

    boolean this_present_withdrawAccount = true && this.isSetWithdrawAccount();
    boolean that_present_withdrawAccount = true && that.isSetWithdrawAccount();
    if (this_present_withdrawAccount || that_present_withdrawAccount) {
      if (!(this_present_withdrawAccount && that_present_withdrawAccount))
        return false;
      if (!this.withdrawAccount.equals(that.withdrawAccount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WithdrawApply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAccountId()).compareTo(other.isSetWithdrawAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAccountId, other.withdrawAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAmount()).compareTo(other.isSetWithdrawAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAmount, other.withdrawAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditState()).compareTo(other.isSetAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditState, other.auditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditRemark()).compareTo(other.isSetAuditRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditRemark, other.auditRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditTime()).compareTo(other.isSetAuditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTime, other.auditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditName()).compareTo(other.isSetAuditName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditName, other.auditName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerApplyId()).compareTo(other.isSetPartnerApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerApplyId, other.partnerApplyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawMsgId()).compareTo(other.isSetWithdrawMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawMsgId, other.withdrawMsgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchBeginTime()).compareTo(other.isSetSearchBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchBeginTime, other.searchBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchEndTime()).compareTo(other.isSetSearchEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEndTime, other.searchEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAccount()).compareTo(other.isSetWithdrawAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAccount, other.withdrawAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WithdrawApply(");
    boolean first = true;

    sb.append("applyId:");
    sb.append(this.applyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawAccountId:");
    sb.append(this.withdrawAccountId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawAmount:");
    sb.append(this.withdrawAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditState:");
    sb.append(this.auditState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditRemark:");
    if (this.auditRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.auditRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditTime:");
    if (this.auditTime == null) {
      sb.append("null");
    } else {
      sb.append(this.auditTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditId:");
    sb.append(this.auditId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditName:");
    if (this.auditName == null) {
      sb.append("null");
    } else {
      sb.append(this.auditName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerApplyId:");
    if (this.partnerApplyId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerApplyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawMsgId:");
    if (this.withdrawMsgId == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawMsgId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchBeginTime:");
    if (this.searchBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.searchBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchEndTime:");
    if (this.searchEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.searchEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawAccount:");
    if (this.withdrawAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawAccount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (withdrawAccount != null) {
      withdrawAccount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WithdrawApplyStandardSchemeFactory implements SchemeFactory {
    public WithdrawApplyStandardScheme getScheme() {
      return new WithdrawApplyStandardScheme();
    }
  }

  private static class WithdrawApplyStandardScheme extends StandardScheme<WithdrawApply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WithdrawApply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyId = iprot.readI32();
              struct.setApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WITHDRAW_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.withdrawAccountId = iprot.readI32();
              struct.setWithdrawAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WITHDRAW_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.withdrawAmount = iprot.readI64();
              struct.setWithdrawAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalAmount = iprot.readI64();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditState = iprot.readI32();
              struct.setAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUDIT_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditRemark = iprot.readString();
              struct.setAuditRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AUDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditTime = iprot.readString();
              struct.setAuditTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AUDIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditId = iprot.readI32();
              struct.setAuditIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AUDIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditName = iprot.readString();
              struct.setAuditNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARTNER_APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerApplyId = iprot.readString();
              struct.setPartnerApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WITHDRAW_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.withdrawMsgId = iprot.readString();
              struct.setWithdrawMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SEARCH_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchBeginTime = iprot.readString();
              struct.setSearchBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SEARCH_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchEndTime = iprot.readString();
              struct.setSearchEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // WITHDRAW_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.withdrawAccount = new WithdrawAccount();
              struct.withdrawAccount.read(iprot);
              struct.setWithdrawAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WithdrawApply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
      oprot.writeI32(struct.applyId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITHDRAW_ACCOUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.withdrawAccountId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITHDRAW_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.withdrawAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIT_STATE_FIELD_DESC);
      oprot.writeI32(struct.auditState);
      oprot.writeFieldEnd();
      if (struct.auditRemark != null) {
        oprot.writeFieldBegin(AUDIT_REMARK_FIELD_DESC);
        oprot.writeString(struct.auditRemark);
        oprot.writeFieldEnd();
      }
      if (struct.auditTime != null) {
        oprot.writeFieldBegin(AUDIT_TIME_FIELD_DESC);
        oprot.writeString(struct.auditTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
      oprot.writeI32(struct.auditId);
      oprot.writeFieldEnd();
      if (struct.auditName != null) {
        oprot.writeFieldBegin(AUDIT_NAME_FIELD_DESC);
        oprot.writeString(struct.auditName);
        oprot.writeFieldEnd();
      }
      if (struct.partnerApplyId != null) {
        oprot.writeFieldBegin(PARTNER_APPLY_ID_FIELD_DESC);
        oprot.writeString(struct.partnerApplyId);
        oprot.writeFieldEnd();
      }
      if (struct.withdrawMsgId != null) {
        oprot.writeFieldBegin(WITHDRAW_MSG_ID_FIELD_DESC);
        oprot.writeString(struct.withdrawMsgId);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.searchBeginTime != null) {
        oprot.writeFieldBegin(SEARCH_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.searchBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.searchEndTime != null) {
        oprot.writeFieldBegin(SEARCH_END_TIME_FIELD_DESC);
        oprot.writeString(struct.searchEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.withdrawAccount != null) {
        oprot.writeFieldBegin(WITHDRAW_ACCOUNT_FIELD_DESC);
        struct.withdrawAccount.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WithdrawApplyTupleSchemeFactory implements SchemeFactory {
    public WithdrawApplyTupleScheme getScheme() {
      return new WithdrawApplyTupleScheme();
    }
  }

  private static class WithdrawApplyTupleScheme extends TupleScheme<WithdrawApply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WithdrawApply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApplyId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetRealName()) {
        optionals.set(2);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(3);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(4);
      }
      if (struct.isSetWithdrawAccountId()) {
        optionals.set(5);
      }
      if (struct.isSetWithdrawAmount()) {
        optionals.set(6);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(7);
      }
      if (struct.isSetAuditState()) {
        optionals.set(8);
      }
      if (struct.isSetAuditRemark()) {
        optionals.set(9);
      }
      if (struct.isSetAuditTime()) {
        optionals.set(10);
      }
      if (struct.isSetAuditId()) {
        optionals.set(11);
      }
      if (struct.isSetAuditName()) {
        optionals.set(12);
      }
      if (struct.isSetPartnerApplyId()) {
        optionals.set(13);
      }
      if (struct.isSetWithdrawMsgId()) {
        optionals.set(14);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(15);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(16);
      }
      if (struct.isSetSearchBeginTime()) {
        optionals.set(17);
      }
      if (struct.isSetSearchEndTime()) {
        optionals.set(18);
      }
      if (struct.isSetWithdrawAccount()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetApplyId()) {
        oprot.writeI32(struct.applyId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetWithdrawAccountId()) {
        oprot.writeI32(struct.withdrawAccountId);
      }
      if (struct.isSetWithdrawAmount()) {
        oprot.writeI64(struct.withdrawAmount);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI64(struct.totalAmount);
      }
      if (struct.isSetAuditState()) {
        oprot.writeI32(struct.auditState);
      }
      if (struct.isSetAuditRemark()) {
        oprot.writeString(struct.auditRemark);
      }
      if (struct.isSetAuditTime()) {
        oprot.writeString(struct.auditTime);
      }
      if (struct.isSetAuditId()) {
        oprot.writeI32(struct.auditId);
      }
      if (struct.isSetAuditName()) {
        oprot.writeString(struct.auditName);
      }
      if (struct.isSetPartnerApplyId()) {
        oprot.writeString(struct.partnerApplyId);
      }
      if (struct.isSetWithdrawMsgId()) {
        oprot.writeString(struct.withdrawMsgId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetSearchBeginTime()) {
        oprot.writeString(struct.searchBeginTime);
      }
      if (struct.isSetSearchEndTime()) {
        oprot.writeString(struct.searchEndTime);
      }
      if (struct.isSetWithdrawAccount()) {
        struct.withdrawAccount.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WithdrawApply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.applyId = iprot.readI32();
        struct.setApplyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.withdrawAccountId = iprot.readI32();
        struct.setWithdrawAccountIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.withdrawAmount = iprot.readI64();
        struct.setWithdrawAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalAmount = iprot.readI64();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.auditState = iprot.readI32();
        struct.setAuditStateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.auditRemark = iprot.readString();
        struct.setAuditRemarkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.auditTime = iprot.readString();
        struct.setAuditTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.auditId = iprot.readI32();
        struct.setAuditIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.auditName = iprot.readString();
        struct.setAuditNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.partnerApplyId = iprot.readString();
        struct.setPartnerApplyIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.withdrawMsgId = iprot.readString();
        struct.setWithdrawMsgIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.searchBeginTime = iprot.readString();
        struct.setSearchBeginTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.searchEndTime = iprot.readString();
        struct.setSearchEndTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.withdrawAccount = new WithdrawAccount();
        struct.withdrawAccount.read(iprot);
        struct.setWithdrawAccountIsSet(true);
      }
    }
  }

}

