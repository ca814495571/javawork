/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.businesscontroller;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VoteTicket implements org.apache.thrift.TBase<VoteTicket, VoteTicket._Fields>, java.io.Serializable, Cloneable, Comparable<VoteTicket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VoteTicket");

  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiple", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BALL_FIELD_DESC = new org.apache.thrift.protocol.TField("ball", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VoteTicketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VoteTicketTupleSchemeFactory());
  }

  public String ticketId; // required
  public int multiple; // required
  public String issueNo; // required
  public String playType; // required
  public int money; // required
  public String ball; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TICKET_ID((short)1, "ticketId"),
    MULTIPLE((short)2, "multiple"),
    ISSUE_NO((short)3, "issueNo"),
    PLAY_TYPE((short)4, "playType"),
    MONEY((short)5, "money"),
    BALL((short)6, "ball");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TICKET_ID
          return TICKET_ID;
        case 2: // MULTIPLE
          return MULTIPLE;
        case 3: // ISSUE_NO
          return ISSUE_NO;
        case 4: // PLAY_TYPE
          return PLAY_TYPE;
        case 5: // MONEY
          return MONEY;
        case 6: // BALL
          return BALL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MULTIPLE_ISSET_ID = 0;
  private static final int __MONEY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("multiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BALL, new org.apache.thrift.meta_data.FieldMetaData("ball", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VoteTicket.class, metaDataMap);
  }

  public VoteTicket() {
  }

  public VoteTicket(
    String ticketId,
    int multiple,
    String issueNo,
    String playType,
    int money,
    String ball)
  {
    this();
    this.ticketId = ticketId;
    this.multiple = multiple;
    setMultipleIsSet(true);
    this.issueNo = issueNo;
    this.playType = playType;
    this.money = money;
    setMoneyIsSet(true);
    this.ball = ball;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VoteTicket(VoteTicket other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTicketId()) {
      this.ticketId = other.ticketId;
    }
    this.multiple = other.multiple;
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    this.money = other.money;
    if (other.isSetBall()) {
      this.ball = other.ball;
    }
  }

  public VoteTicket deepCopy() {
    return new VoteTicket(this);
  }

  @Override
  public void clear() {
    this.ticketId = null;
    setMultipleIsSet(false);
    this.multiple = 0;
    this.issueNo = null;
    this.playType = null;
    setMoneyIsSet(false);
    this.money = 0;
    this.ball = null;
  }

  public String getTicketId() {
    return this.ticketId;
  }

  public VoteTicket setTicketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  public void unsetTicketId() {
    this.ticketId = null;
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return this.ticketId != null;
  }

  public void setTicketIdIsSet(boolean value) {
    if (!value) {
      this.ticketId = null;
    }
  }

  public int getMultiple() {
    return this.multiple;
  }

  public VoteTicket setMultiple(int multiple) {
    this.multiple = multiple;
    setMultipleIsSet(true);
    return this;
  }

  public void unsetMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  /** Returns true if field multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  public void setMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIPLE_ISSET_ID, value);
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public VoteTicket setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public String getPlayType() {
    return this.playType;
  }

  public VoteTicket setPlayType(String playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  public int getMoney() {
    return this.money;
  }

  public VoteTicket setMoney(int money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public String getBall() {
    return this.ball;
  }

  public VoteTicket setBall(String ball) {
    this.ball = ball;
    return this;
  }

  public void unsetBall() {
    this.ball = null;
  }

  /** Returns true if field ball is set (has been assigned a value) and false otherwise */
  public boolean isSetBall() {
    return this.ball != null;
  }

  public void setBallIsSet(boolean value) {
    if (!value) {
      this.ball = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((String)value);
      }
      break;

    case MULTIPLE:
      if (value == null) {
        unsetMultiple();
      } else {
        setMultiple((Integer)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Integer)value);
      }
      break;

    case BALL:
      if (value == null) {
        unsetBall();
      } else {
        setBall((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TICKET_ID:
      return getTicketId();

    case MULTIPLE:
      return Integer.valueOf(getMultiple());

    case ISSUE_NO:
      return getIssueNo();

    case PLAY_TYPE:
      return getPlayType();

    case MONEY:
      return Integer.valueOf(getMoney());

    case BALL:
      return getBall();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TICKET_ID:
      return isSetTicketId();
    case MULTIPLE:
      return isSetMultiple();
    case ISSUE_NO:
      return isSetIssueNo();
    case PLAY_TYPE:
      return isSetPlayType();
    case MONEY:
      return isSetMoney();
    case BALL:
      return isSetBall();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VoteTicket)
      return this.equals((VoteTicket)that);
    return false;
  }

  public boolean equals(VoteTicket that) {
    if (that == null)
      return false;

    boolean this_present_ticketId = true && this.isSetTicketId();
    boolean that_present_ticketId = true && that.isSetTicketId();
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (!this.ticketId.equals(that.ticketId))
        return false;
    }

    boolean this_present_multiple = true;
    boolean that_present_multiple = true;
    if (this_present_multiple || that_present_multiple) {
      if (!(this_present_multiple && that_present_multiple))
        return false;
      if (this.multiple != that.multiple)
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_ball = true && this.isSetBall();
    boolean that_present_ball = true && that.isSetBall();
    if (this_present_ball || that_present_ball) {
      if (!(this_present_ball && that_present_ball))
        return false;
      if (!this.ball.equals(that.ball))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(VoteTicket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiple()).compareTo(other.isSetMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiple, other.multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBall()).compareTo(other.isSetBall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ball, other.ball);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VoteTicket(");
    boolean first = true;

    sb.append("ticketId:");
    if (this.ticketId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiple:");
    sb.append(this.multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ball:");
    if (this.ball == null) {
      sb.append("null");
    } else {
      sb.append(this.ball);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VoteTicketStandardSchemeFactory implements SchemeFactory {
    public VoteTicketStandardScheme getScheme() {
      return new VoteTicketStandardScheme();
    }
  }

  private static class VoteTicketStandardScheme extends StandardScheme<VoteTicket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VoteTicket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketId = iprot.readString();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiple = iprot.readI32();
              struct.setMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playType = iprot.readString();
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.money = iprot.readI32();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BALL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ball = iprot.readString();
              struct.setBallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VoteTicket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ticketId != null) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeString(struct.ticketId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MULTIPLE_FIELD_DESC);
      oprot.writeI32(struct.multiple);
      oprot.writeFieldEnd();
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.playType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI32(struct.money);
      oprot.writeFieldEnd();
      if (struct.ball != null) {
        oprot.writeFieldBegin(BALL_FIELD_DESC);
        oprot.writeString(struct.ball);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VoteTicketTupleSchemeFactory implements SchemeFactory {
    public VoteTicketTupleScheme getScheme() {
      return new VoteTicketTupleScheme();
    }
  }

  private static class VoteTicketTupleScheme extends TupleScheme<VoteTicket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VoteTicket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTicketId()) {
        optionals.set(0);
      }
      if (struct.isSetMultiple()) {
        optionals.set(1);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(2);
      }
      if (struct.isSetPlayType()) {
        optionals.set(3);
      }
      if (struct.isSetMoney()) {
        optionals.set(4);
      }
      if (struct.isSetBall()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTicketId()) {
        oprot.writeString(struct.ticketId);
      }
      if (struct.isSetMultiple()) {
        oprot.writeI32(struct.multiple);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetPlayType()) {
        oprot.writeString(struct.playType);
      }
      if (struct.isSetMoney()) {
        oprot.writeI32(struct.money);
      }
      if (struct.isSetBall()) {
        oprot.writeString(struct.ball);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VoteTicket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.ticketId = iprot.readString();
        struct.setTicketIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.multiple = iprot.readI32();
        struct.setMultipleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.playType = iprot.readString();
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.money = iprot.readI32();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ball = iprot.readString();
        struct.setBallIsSet(true);
      }
    }
  }

}

