/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partneraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerAccountService {

  public interface Iface {

    public int addPartnerAccount(PartnerAccount partnerAccount) throws org.apache.thrift.TException;

    public PartnerAccountData getPartnerAccountList(PartnerAccount partnerAccount, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public PartnerAccount findPartnerAccountByPartnerId(String partnerId) throws org.apache.thrift.TException;

    public int updatePartnerAccountState(String partnerId, int state) throws org.apache.thrift.TException;

    public int updatePartnerAccountCreditLimit(String partnerId, long creditLimit) throws org.apache.thrift.TException;

    public int payPartnerAccount(String partnerId, long amount, String serialNumber) throws org.apache.thrift.TException;

    public PartnerAccountLogData getPartnerAccountLogList(PartnerAccountLog partnerAccountLog, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int addPartnerRecharge(PartnerRecharge partnerRecharge) throws org.apache.thrift.TException;

    public int modifyRefund(String partnerId, long amount, String paySerialNumber, String refundSerialNumber) throws org.apache.thrift.TException;

    public int sendPrize(String partnerId, long amount, String serialNumber) throws org.apache.thrift.TException;

    public long countPartnerRechargeByDate(String partnerId, String dateTime) throws org.apache.thrift.TException;

    public int createPartnerPreApply(PartnerPreApply partnerPreApply) throws org.apache.thrift.TException;

    public PartnerPreApply findPartnerPreApply(String partnerId, String partnerUniqueNo) throws org.apache.thrift.TException;

    public PartnerPreApplyData getPartnerPreApplyList(PartnerPreApply partnerPreApply, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int auditPartnerPreApply(long preApplyId, int status) throws org.apache.thrift.TException;

    public Map<String,Long> statisticRecharge(String date) throws org.apache.thrift.TException;

    public long totalAccountMoney() throws org.apache.thrift.TException;

    public long totalPaylogNum(String date) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addPartnerAccount(PartnerAccount partnerAccount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPartnerAccountList(PartnerAccount partnerAccount, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPartnerAccountByPartnerId(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePartnerAccountState(String partnerId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePartnerAccountCreditLimit(String partnerId, long creditLimit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void payPartnerAccount(String partnerId, long amount, String serialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPartnerAccountLogList(PartnerAccountLog partnerAccountLog, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPartnerRecharge(PartnerRecharge partnerRecharge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifyRefund(String partnerId, long amount, String paySerialNumber, String refundSerialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendPrize(String partnerId, long amount, String serialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countPartnerRechargeByDate(String partnerId, String dateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createPartnerPreApply(PartnerPreApply partnerPreApply, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPartnerPreApply(String partnerId, String partnerUniqueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPartnerPreApplyList(PartnerPreApply partnerPreApply, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void auditPartnerPreApply(long preApplyId, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statisticRecharge(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void totalAccountMoney(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void totalPaylogNum(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addPartnerAccount(PartnerAccount partnerAccount) throws org.apache.thrift.TException
    {
      send_addPartnerAccount(partnerAccount);
      return recv_addPartnerAccount();
    }

    public void send_addPartnerAccount(PartnerAccount partnerAccount) throws org.apache.thrift.TException
    {
      addPartnerAccount_args args = new addPartnerAccount_args();
      args.setPartnerAccount(partnerAccount);
      sendBase("addPartnerAccount", args);
    }

    public int recv_addPartnerAccount() throws org.apache.thrift.TException
    {
      addPartnerAccount_result result = new addPartnerAccount_result();
      receiveBase(result, "addPartnerAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPartnerAccount failed: unknown result");
    }

    public PartnerAccountData getPartnerAccountList(PartnerAccount partnerAccount, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getPartnerAccountList(partnerAccount, currentPage, pageSize);
      return recv_getPartnerAccountList();
    }

    public void send_getPartnerAccountList(PartnerAccount partnerAccount, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getPartnerAccountList_args args = new getPartnerAccountList_args();
      args.setPartnerAccount(partnerAccount);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getPartnerAccountList", args);
    }

    public PartnerAccountData recv_getPartnerAccountList() throws org.apache.thrift.TException
    {
      getPartnerAccountList_result result = new getPartnerAccountList_result();
      receiveBase(result, "getPartnerAccountList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartnerAccountList failed: unknown result");
    }

    public PartnerAccount findPartnerAccountByPartnerId(String partnerId) throws org.apache.thrift.TException
    {
      send_findPartnerAccountByPartnerId(partnerId);
      return recv_findPartnerAccountByPartnerId();
    }

    public void send_findPartnerAccountByPartnerId(String partnerId) throws org.apache.thrift.TException
    {
      findPartnerAccountByPartnerId_args args = new findPartnerAccountByPartnerId_args();
      args.setPartnerId(partnerId);
      sendBase("findPartnerAccountByPartnerId", args);
    }

    public PartnerAccount recv_findPartnerAccountByPartnerId() throws org.apache.thrift.TException
    {
      findPartnerAccountByPartnerId_result result = new findPartnerAccountByPartnerId_result();
      receiveBase(result, "findPartnerAccountByPartnerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPartnerAccountByPartnerId failed: unknown result");
    }

    public int updatePartnerAccountState(String partnerId, int state) throws org.apache.thrift.TException
    {
      send_updatePartnerAccountState(partnerId, state);
      return recv_updatePartnerAccountState();
    }

    public void send_updatePartnerAccountState(String partnerId, int state) throws org.apache.thrift.TException
    {
      updatePartnerAccountState_args args = new updatePartnerAccountState_args();
      args.setPartnerId(partnerId);
      args.setState(state);
      sendBase("updatePartnerAccountState", args);
    }

    public int recv_updatePartnerAccountState() throws org.apache.thrift.TException
    {
      updatePartnerAccountState_result result = new updatePartnerAccountState_result();
      receiveBase(result, "updatePartnerAccountState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePartnerAccountState failed: unknown result");
    }

    public int updatePartnerAccountCreditLimit(String partnerId, long creditLimit) throws org.apache.thrift.TException
    {
      send_updatePartnerAccountCreditLimit(partnerId, creditLimit);
      return recv_updatePartnerAccountCreditLimit();
    }

    public void send_updatePartnerAccountCreditLimit(String partnerId, long creditLimit) throws org.apache.thrift.TException
    {
      updatePartnerAccountCreditLimit_args args = new updatePartnerAccountCreditLimit_args();
      args.setPartnerId(partnerId);
      args.setCreditLimit(creditLimit);
      sendBase("updatePartnerAccountCreditLimit", args);
    }

    public int recv_updatePartnerAccountCreditLimit() throws org.apache.thrift.TException
    {
      updatePartnerAccountCreditLimit_result result = new updatePartnerAccountCreditLimit_result();
      receiveBase(result, "updatePartnerAccountCreditLimit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePartnerAccountCreditLimit failed: unknown result");
    }

    public int payPartnerAccount(String partnerId, long amount, String serialNumber) throws org.apache.thrift.TException
    {
      send_payPartnerAccount(partnerId, amount, serialNumber);
      return recv_payPartnerAccount();
    }

    public void send_payPartnerAccount(String partnerId, long amount, String serialNumber) throws org.apache.thrift.TException
    {
      payPartnerAccount_args args = new payPartnerAccount_args();
      args.setPartnerId(partnerId);
      args.setAmount(amount);
      args.setSerialNumber(serialNumber);
      sendBase("payPartnerAccount", args);
    }

    public int recv_payPartnerAccount() throws org.apache.thrift.TException
    {
      payPartnerAccount_result result = new payPartnerAccount_result();
      receiveBase(result, "payPartnerAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "payPartnerAccount failed: unknown result");
    }

    public PartnerAccountLogData getPartnerAccountLogList(PartnerAccountLog partnerAccountLog, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getPartnerAccountLogList(partnerAccountLog, currentPage, pageSize);
      return recv_getPartnerAccountLogList();
    }

    public void send_getPartnerAccountLogList(PartnerAccountLog partnerAccountLog, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getPartnerAccountLogList_args args = new getPartnerAccountLogList_args();
      args.setPartnerAccountLog(partnerAccountLog);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getPartnerAccountLogList", args);
    }

    public PartnerAccountLogData recv_getPartnerAccountLogList() throws org.apache.thrift.TException
    {
      getPartnerAccountLogList_result result = new getPartnerAccountLogList_result();
      receiveBase(result, "getPartnerAccountLogList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartnerAccountLogList failed: unknown result");
    }

    public int addPartnerRecharge(PartnerRecharge partnerRecharge) throws org.apache.thrift.TException
    {
      send_addPartnerRecharge(partnerRecharge);
      return recv_addPartnerRecharge();
    }

    public void send_addPartnerRecharge(PartnerRecharge partnerRecharge) throws org.apache.thrift.TException
    {
      addPartnerRecharge_args args = new addPartnerRecharge_args();
      args.setPartnerRecharge(partnerRecharge);
      sendBase("addPartnerRecharge", args);
    }

    public int recv_addPartnerRecharge() throws org.apache.thrift.TException
    {
      addPartnerRecharge_result result = new addPartnerRecharge_result();
      receiveBase(result, "addPartnerRecharge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPartnerRecharge failed: unknown result");
    }

    public int modifyRefund(String partnerId, long amount, String paySerialNumber, String refundSerialNumber) throws org.apache.thrift.TException
    {
      send_modifyRefund(partnerId, amount, paySerialNumber, refundSerialNumber);
      return recv_modifyRefund();
    }

    public void send_modifyRefund(String partnerId, long amount, String paySerialNumber, String refundSerialNumber) throws org.apache.thrift.TException
    {
      modifyRefund_args args = new modifyRefund_args();
      args.setPartnerId(partnerId);
      args.setAmount(amount);
      args.setPaySerialNumber(paySerialNumber);
      args.setRefundSerialNumber(refundSerialNumber);
      sendBase("modifyRefund", args);
    }

    public int recv_modifyRefund() throws org.apache.thrift.TException
    {
      modifyRefund_result result = new modifyRefund_result();
      receiveBase(result, "modifyRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyRefund failed: unknown result");
    }

    public int sendPrize(String partnerId, long amount, String serialNumber) throws org.apache.thrift.TException
    {
      send_sendPrize(partnerId, amount, serialNumber);
      return recv_sendPrize();
    }

    public void send_sendPrize(String partnerId, long amount, String serialNumber) throws org.apache.thrift.TException
    {
      sendPrize_args args = new sendPrize_args();
      args.setPartnerId(partnerId);
      args.setAmount(amount);
      args.setSerialNumber(serialNumber);
      sendBase("sendPrize", args);
    }

    public int recv_sendPrize() throws org.apache.thrift.TException
    {
      sendPrize_result result = new sendPrize_result();
      receiveBase(result, "sendPrize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendPrize failed: unknown result");
    }

    public long countPartnerRechargeByDate(String partnerId, String dateTime) throws org.apache.thrift.TException
    {
      send_countPartnerRechargeByDate(partnerId, dateTime);
      return recv_countPartnerRechargeByDate();
    }

    public void send_countPartnerRechargeByDate(String partnerId, String dateTime) throws org.apache.thrift.TException
    {
      countPartnerRechargeByDate_args args = new countPartnerRechargeByDate_args();
      args.setPartnerId(partnerId);
      args.setDateTime(dateTime);
      sendBase("countPartnerRechargeByDate", args);
    }

    public long recv_countPartnerRechargeByDate() throws org.apache.thrift.TException
    {
      countPartnerRechargeByDate_result result = new countPartnerRechargeByDate_result();
      receiveBase(result, "countPartnerRechargeByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countPartnerRechargeByDate failed: unknown result");
    }

    public int createPartnerPreApply(PartnerPreApply partnerPreApply) throws org.apache.thrift.TException
    {
      send_createPartnerPreApply(partnerPreApply);
      return recv_createPartnerPreApply();
    }

    public void send_createPartnerPreApply(PartnerPreApply partnerPreApply) throws org.apache.thrift.TException
    {
      createPartnerPreApply_args args = new createPartnerPreApply_args();
      args.setPartnerPreApply(partnerPreApply);
      sendBase("createPartnerPreApply", args);
    }

    public int recv_createPartnerPreApply() throws org.apache.thrift.TException
    {
      createPartnerPreApply_result result = new createPartnerPreApply_result();
      receiveBase(result, "createPartnerPreApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPartnerPreApply failed: unknown result");
    }

    public PartnerPreApply findPartnerPreApply(String partnerId, String partnerUniqueNo) throws org.apache.thrift.TException
    {
      send_findPartnerPreApply(partnerId, partnerUniqueNo);
      return recv_findPartnerPreApply();
    }

    public void send_findPartnerPreApply(String partnerId, String partnerUniqueNo) throws org.apache.thrift.TException
    {
      findPartnerPreApply_args args = new findPartnerPreApply_args();
      args.setPartnerId(partnerId);
      args.setPartnerUniqueNo(partnerUniqueNo);
      sendBase("findPartnerPreApply", args);
    }

    public PartnerPreApply recv_findPartnerPreApply() throws org.apache.thrift.TException
    {
      findPartnerPreApply_result result = new findPartnerPreApply_result();
      receiveBase(result, "findPartnerPreApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPartnerPreApply failed: unknown result");
    }

    public PartnerPreApplyData getPartnerPreApplyList(PartnerPreApply partnerPreApply, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getPartnerPreApplyList(partnerPreApply, currentPage, pageSize);
      return recv_getPartnerPreApplyList();
    }

    public void send_getPartnerPreApplyList(PartnerPreApply partnerPreApply, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getPartnerPreApplyList_args args = new getPartnerPreApplyList_args();
      args.setPartnerPreApply(partnerPreApply);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getPartnerPreApplyList", args);
    }

    public PartnerPreApplyData recv_getPartnerPreApplyList() throws org.apache.thrift.TException
    {
      getPartnerPreApplyList_result result = new getPartnerPreApplyList_result();
      receiveBase(result, "getPartnerPreApplyList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartnerPreApplyList failed: unknown result");
    }

    public int auditPartnerPreApply(long preApplyId, int status) throws org.apache.thrift.TException
    {
      send_auditPartnerPreApply(preApplyId, status);
      return recv_auditPartnerPreApply();
    }

    public void send_auditPartnerPreApply(long preApplyId, int status) throws org.apache.thrift.TException
    {
      auditPartnerPreApply_args args = new auditPartnerPreApply_args();
      args.setPreApplyId(preApplyId);
      args.setStatus(status);
      sendBase("auditPartnerPreApply", args);
    }

    public int recv_auditPartnerPreApply() throws org.apache.thrift.TException
    {
      auditPartnerPreApply_result result = new auditPartnerPreApply_result();
      receiveBase(result, "auditPartnerPreApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditPartnerPreApply failed: unknown result");
    }

    public Map<String,Long> statisticRecharge(String date) throws org.apache.thrift.TException
    {
      send_statisticRecharge(date);
      return recv_statisticRecharge();
    }

    public void send_statisticRecharge(String date) throws org.apache.thrift.TException
    {
      statisticRecharge_args args = new statisticRecharge_args();
      args.setDate(date);
      sendBase("statisticRecharge", args);
    }

    public Map<String,Long> recv_statisticRecharge() throws org.apache.thrift.TException
    {
      statisticRecharge_result result = new statisticRecharge_result();
      receiveBase(result, "statisticRecharge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statisticRecharge failed: unknown result");
    }

    public long totalAccountMoney() throws org.apache.thrift.TException
    {
      send_totalAccountMoney();
      return recv_totalAccountMoney();
    }

    public void send_totalAccountMoney() throws org.apache.thrift.TException
    {
      totalAccountMoney_args args = new totalAccountMoney_args();
      sendBase("totalAccountMoney", args);
    }

    public long recv_totalAccountMoney() throws org.apache.thrift.TException
    {
      totalAccountMoney_result result = new totalAccountMoney_result();
      receiveBase(result, "totalAccountMoney");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "totalAccountMoney failed: unknown result");
    }

    public long totalPaylogNum(String date) throws org.apache.thrift.TException
    {
      send_totalPaylogNum(date);
      return recv_totalPaylogNum();
    }

    public void send_totalPaylogNum(String date) throws org.apache.thrift.TException
    {
      totalPaylogNum_args args = new totalPaylogNum_args();
      args.setDate(date);
      sendBase("totalPaylogNum", args);
    }

    public long recv_totalPaylogNum() throws org.apache.thrift.TException
    {
      totalPaylogNum_result result = new totalPaylogNum_result();
      receiveBase(result, "totalPaylogNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "totalPaylogNum failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addPartnerAccount(PartnerAccount partnerAccount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPartnerAccount_call method_call = new addPartnerAccount_call(partnerAccount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPartnerAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PartnerAccount partnerAccount;
      public addPartnerAccount_call(PartnerAccount partnerAccount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerAccount = partnerAccount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPartnerAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPartnerAccount_args args = new addPartnerAccount_args();
        args.setPartnerAccount(partnerAccount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPartnerAccount();
      }
    }

    public void getPartnerAccountList(PartnerAccount partnerAccount, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartnerAccountList_call method_call = new getPartnerAccountList_call(partnerAccount, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartnerAccountList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PartnerAccount partnerAccount;
      private int currentPage;
      private int pageSize;
      public getPartnerAccountList_call(PartnerAccount partnerAccount, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerAccount = partnerAccount;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartnerAccountList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartnerAccountList_args args = new getPartnerAccountList_args();
        args.setPartnerAccount(partnerAccount);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PartnerAccountData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartnerAccountList();
      }
    }

    public void findPartnerAccountByPartnerId(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPartnerAccountByPartnerId_call method_call = new findPartnerAccountByPartnerId_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPartnerAccountByPartnerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public findPartnerAccountByPartnerId_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPartnerAccountByPartnerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPartnerAccountByPartnerId_args args = new findPartnerAccountByPartnerId_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PartnerAccount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPartnerAccountByPartnerId();
      }
    }

    public void updatePartnerAccountState(String partnerId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePartnerAccountState_call method_call = new updatePartnerAccountState_call(partnerId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePartnerAccountState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private int state;
      public updatePartnerAccountState_call(String partnerId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePartnerAccountState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePartnerAccountState_args args = new updatePartnerAccountState_args();
        args.setPartnerId(partnerId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePartnerAccountState();
      }
    }

    public void updatePartnerAccountCreditLimit(String partnerId, long creditLimit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePartnerAccountCreditLimit_call method_call = new updatePartnerAccountCreditLimit_call(partnerId, creditLimit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePartnerAccountCreditLimit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private long creditLimit;
      public updatePartnerAccountCreditLimit_call(String partnerId, long creditLimit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.creditLimit = creditLimit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePartnerAccountCreditLimit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePartnerAccountCreditLimit_args args = new updatePartnerAccountCreditLimit_args();
        args.setPartnerId(partnerId);
        args.setCreditLimit(creditLimit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePartnerAccountCreditLimit();
      }
    }

    public void payPartnerAccount(String partnerId, long amount, String serialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      payPartnerAccount_call method_call = new payPartnerAccount_call(partnerId, amount, serialNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class payPartnerAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private long amount;
      private String serialNumber;
      public payPartnerAccount_call(String partnerId, long amount, String serialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.amount = amount;
        this.serialNumber = serialNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("payPartnerAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        payPartnerAccount_args args = new payPartnerAccount_args();
        args.setPartnerId(partnerId);
        args.setAmount(amount);
        args.setSerialNumber(serialNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_payPartnerAccount();
      }
    }

    public void getPartnerAccountLogList(PartnerAccountLog partnerAccountLog, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartnerAccountLogList_call method_call = new getPartnerAccountLogList_call(partnerAccountLog, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartnerAccountLogList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PartnerAccountLog partnerAccountLog;
      private int currentPage;
      private int pageSize;
      public getPartnerAccountLogList_call(PartnerAccountLog partnerAccountLog, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerAccountLog = partnerAccountLog;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartnerAccountLogList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartnerAccountLogList_args args = new getPartnerAccountLogList_args();
        args.setPartnerAccountLog(partnerAccountLog);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PartnerAccountLogData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartnerAccountLogList();
      }
    }

    public void addPartnerRecharge(PartnerRecharge partnerRecharge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPartnerRecharge_call method_call = new addPartnerRecharge_call(partnerRecharge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPartnerRecharge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PartnerRecharge partnerRecharge;
      public addPartnerRecharge_call(PartnerRecharge partnerRecharge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerRecharge = partnerRecharge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPartnerRecharge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPartnerRecharge_args args = new addPartnerRecharge_args();
        args.setPartnerRecharge(partnerRecharge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPartnerRecharge();
      }
    }

    public void modifyRefund(String partnerId, long amount, String paySerialNumber, String refundSerialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyRefund_call method_call = new modifyRefund_call(partnerId, amount, paySerialNumber, refundSerialNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private long amount;
      private String paySerialNumber;
      private String refundSerialNumber;
      public modifyRefund_call(String partnerId, long amount, String paySerialNumber, String refundSerialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.amount = amount;
        this.paySerialNumber = paySerialNumber;
        this.refundSerialNumber = refundSerialNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyRefund_args args = new modifyRefund_args();
        args.setPartnerId(partnerId);
        args.setAmount(amount);
        args.setPaySerialNumber(paySerialNumber);
        args.setRefundSerialNumber(refundSerialNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyRefund();
      }
    }

    public void sendPrize(String partnerId, long amount, String serialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendPrize_call method_call = new sendPrize_call(partnerId, amount, serialNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendPrize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private long amount;
      private String serialNumber;
      public sendPrize_call(String partnerId, long amount, String serialNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.amount = amount;
        this.serialNumber = serialNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendPrize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendPrize_args args = new sendPrize_args();
        args.setPartnerId(partnerId);
        args.setAmount(amount);
        args.setSerialNumber(serialNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendPrize();
      }
    }

    public void countPartnerRechargeByDate(String partnerId, String dateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countPartnerRechargeByDate_call method_call = new countPartnerRechargeByDate_call(partnerId, dateTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countPartnerRechargeByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String dateTime;
      public countPartnerRechargeByDate_call(String partnerId, String dateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.dateTime = dateTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countPartnerRechargeByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countPartnerRechargeByDate_args args = new countPartnerRechargeByDate_args();
        args.setPartnerId(partnerId);
        args.setDateTime(dateTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countPartnerRechargeByDate();
      }
    }

    public void createPartnerPreApply(PartnerPreApply partnerPreApply, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPartnerPreApply_call method_call = new createPartnerPreApply_call(partnerPreApply, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPartnerPreApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PartnerPreApply partnerPreApply;
      public createPartnerPreApply_call(PartnerPreApply partnerPreApply, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerPreApply = partnerPreApply;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPartnerPreApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPartnerPreApply_args args = new createPartnerPreApply_args();
        args.setPartnerPreApply(partnerPreApply);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPartnerPreApply();
      }
    }

    public void findPartnerPreApply(String partnerId, String partnerUniqueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPartnerPreApply_call method_call = new findPartnerPreApply_call(partnerId, partnerUniqueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPartnerPreApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String partnerUniqueNo;
      public findPartnerPreApply_call(String partnerId, String partnerUniqueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.partnerUniqueNo = partnerUniqueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPartnerPreApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPartnerPreApply_args args = new findPartnerPreApply_args();
        args.setPartnerId(partnerId);
        args.setPartnerUniqueNo(partnerUniqueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PartnerPreApply getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPartnerPreApply();
      }
    }

    public void getPartnerPreApplyList(PartnerPreApply partnerPreApply, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartnerPreApplyList_call method_call = new getPartnerPreApplyList_call(partnerPreApply, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartnerPreApplyList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PartnerPreApply partnerPreApply;
      private int currentPage;
      private int pageSize;
      public getPartnerPreApplyList_call(PartnerPreApply partnerPreApply, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerPreApply = partnerPreApply;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartnerPreApplyList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartnerPreApplyList_args args = new getPartnerPreApplyList_args();
        args.setPartnerPreApply(partnerPreApply);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PartnerPreApplyData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartnerPreApplyList();
      }
    }

    public void auditPartnerPreApply(long preApplyId, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditPartnerPreApply_call method_call = new auditPartnerPreApply_call(preApplyId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditPartnerPreApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long preApplyId;
      private int status;
      public auditPartnerPreApply_call(long preApplyId, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.preApplyId = preApplyId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditPartnerPreApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditPartnerPreApply_args args = new auditPartnerPreApply_args();
        args.setPreApplyId(preApplyId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditPartnerPreApply();
      }
    }

    public void statisticRecharge(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statisticRecharge_call method_call = new statisticRecharge_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statisticRecharge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String date;
      public statisticRecharge_call(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statisticRecharge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statisticRecharge_args args = new statisticRecharge_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statisticRecharge();
      }
    }

    public void totalAccountMoney(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      totalAccountMoney_call method_call = new totalAccountMoney_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class totalAccountMoney_call extends org.apache.thrift.async.TAsyncMethodCall {
      public totalAccountMoney_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("totalAccountMoney", org.apache.thrift.protocol.TMessageType.CALL, 0));
        totalAccountMoney_args args = new totalAccountMoney_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_totalAccountMoney();
      }
    }

    public void totalPaylogNum(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      totalPaylogNum_call method_call = new totalPaylogNum_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class totalPaylogNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String date;
      public totalPaylogNum_call(String date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("totalPaylogNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        totalPaylogNum_args args = new totalPaylogNum_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_totalPaylogNum();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addPartnerAccount", new addPartnerAccount());
      processMap.put("getPartnerAccountList", new getPartnerAccountList());
      processMap.put("findPartnerAccountByPartnerId", new findPartnerAccountByPartnerId());
      processMap.put("updatePartnerAccountState", new updatePartnerAccountState());
      processMap.put("updatePartnerAccountCreditLimit", new updatePartnerAccountCreditLimit());
      processMap.put("payPartnerAccount", new payPartnerAccount());
      processMap.put("getPartnerAccountLogList", new getPartnerAccountLogList());
      processMap.put("addPartnerRecharge", new addPartnerRecharge());
      processMap.put("modifyRefund", new modifyRefund());
      processMap.put("sendPrize", new sendPrize());
      processMap.put("countPartnerRechargeByDate", new countPartnerRechargeByDate());
      processMap.put("createPartnerPreApply", new createPartnerPreApply());
      processMap.put("findPartnerPreApply", new findPartnerPreApply());
      processMap.put("getPartnerPreApplyList", new getPartnerPreApplyList());
      processMap.put("auditPartnerPreApply", new auditPartnerPreApply());
      processMap.put("statisticRecharge", new statisticRecharge());
      processMap.put("totalAccountMoney", new totalAccountMoney());
      processMap.put("totalPaylogNum", new totalPaylogNum());
      return processMap;
    }

    public static class addPartnerAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPartnerAccount_args> {
      public addPartnerAccount() {
        super("addPartnerAccount");
      }

      public addPartnerAccount_args getEmptyArgsInstance() {
        return new addPartnerAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPartnerAccount_result getResult(I iface, addPartnerAccount_args args) throws org.apache.thrift.TException {
        addPartnerAccount_result result = new addPartnerAccount_result();
        result.success = iface.addPartnerAccount(args.partnerAccount);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPartnerAccountList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartnerAccountList_args> {
      public getPartnerAccountList() {
        super("getPartnerAccountList");
      }

      public getPartnerAccountList_args getEmptyArgsInstance() {
        return new getPartnerAccountList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartnerAccountList_result getResult(I iface, getPartnerAccountList_args args) throws org.apache.thrift.TException {
        getPartnerAccountList_result result = new getPartnerAccountList_result();
        result.success = iface.getPartnerAccountList(args.partnerAccount, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class findPartnerAccountByPartnerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPartnerAccountByPartnerId_args> {
      public findPartnerAccountByPartnerId() {
        super("findPartnerAccountByPartnerId");
      }

      public findPartnerAccountByPartnerId_args getEmptyArgsInstance() {
        return new findPartnerAccountByPartnerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPartnerAccountByPartnerId_result getResult(I iface, findPartnerAccountByPartnerId_args args) throws org.apache.thrift.TException {
        findPartnerAccountByPartnerId_result result = new findPartnerAccountByPartnerId_result();
        result.success = iface.findPartnerAccountByPartnerId(args.partnerId);
        return result;
      }
    }

    public static class updatePartnerAccountState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePartnerAccountState_args> {
      public updatePartnerAccountState() {
        super("updatePartnerAccountState");
      }

      public updatePartnerAccountState_args getEmptyArgsInstance() {
        return new updatePartnerAccountState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePartnerAccountState_result getResult(I iface, updatePartnerAccountState_args args) throws org.apache.thrift.TException {
        updatePartnerAccountState_result result = new updatePartnerAccountState_result();
        result.success = iface.updatePartnerAccountState(args.partnerId, args.state);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updatePartnerAccountCreditLimit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePartnerAccountCreditLimit_args> {
      public updatePartnerAccountCreditLimit() {
        super("updatePartnerAccountCreditLimit");
      }

      public updatePartnerAccountCreditLimit_args getEmptyArgsInstance() {
        return new updatePartnerAccountCreditLimit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePartnerAccountCreditLimit_result getResult(I iface, updatePartnerAccountCreditLimit_args args) throws org.apache.thrift.TException {
        updatePartnerAccountCreditLimit_result result = new updatePartnerAccountCreditLimit_result();
        result.success = iface.updatePartnerAccountCreditLimit(args.partnerId, args.creditLimit);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class payPartnerAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, payPartnerAccount_args> {
      public payPartnerAccount() {
        super("payPartnerAccount");
      }

      public payPartnerAccount_args getEmptyArgsInstance() {
        return new payPartnerAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public payPartnerAccount_result getResult(I iface, payPartnerAccount_args args) throws org.apache.thrift.TException {
        payPartnerAccount_result result = new payPartnerAccount_result();
        result.success = iface.payPartnerAccount(args.partnerId, args.amount, args.serialNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPartnerAccountLogList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartnerAccountLogList_args> {
      public getPartnerAccountLogList() {
        super("getPartnerAccountLogList");
      }

      public getPartnerAccountLogList_args getEmptyArgsInstance() {
        return new getPartnerAccountLogList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartnerAccountLogList_result getResult(I iface, getPartnerAccountLogList_args args) throws org.apache.thrift.TException {
        getPartnerAccountLogList_result result = new getPartnerAccountLogList_result();
        result.success = iface.getPartnerAccountLogList(args.partnerAccountLog, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class addPartnerRecharge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPartnerRecharge_args> {
      public addPartnerRecharge() {
        super("addPartnerRecharge");
      }

      public addPartnerRecharge_args getEmptyArgsInstance() {
        return new addPartnerRecharge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPartnerRecharge_result getResult(I iface, addPartnerRecharge_args args) throws org.apache.thrift.TException {
        addPartnerRecharge_result result = new addPartnerRecharge_result();
        result.success = iface.addPartnerRecharge(args.partnerRecharge);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class modifyRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyRefund_args> {
      public modifyRefund() {
        super("modifyRefund");
      }

      public modifyRefund_args getEmptyArgsInstance() {
        return new modifyRefund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyRefund_result getResult(I iface, modifyRefund_args args) throws org.apache.thrift.TException {
        modifyRefund_result result = new modifyRefund_result();
        result.success = iface.modifyRefund(args.partnerId, args.amount, args.paySerialNumber, args.refundSerialNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendPrize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendPrize_args> {
      public sendPrize() {
        super("sendPrize");
      }

      public sendPrize_args getEmptyArgsInstance() {
        return new sendPrize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendPrize_result getResult(I iface, sendPrize_args args) throws org.apache.thrift.TException {
        sendPrize_result result = new sendPrize_result();
        result.success = iface.sendPrize(args.partnerId, args.amount, args.serialNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class countPartnerRechargeByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countPartnerRechargeByDate_args> {
      public countPartnerRechargeByDate() {
        super("countPartnerRechargeByDate");
      }

      public countPartnerRechargeByDate_args getEmptyArgsInstance() {
        return new countPartnerRechargeByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countPartnerRechargeByDate_result getResult(I iface, countPartnerRechargeByDate_args args) throws org.apache.thrift.TException {
        countPartnerRechargeByDate_result result = new countPartnerRechargeByDate_result();
        result.success = iface.countPartnerRechargeByDate(args.partnerId, args.dateTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createPartnerPreApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPartnerPreApply_args> {
      public createPartnerPreApply() {
        super("createPartnerPreApply");
      }

      public createPartnerPreApply_args getEmptyArgsInstance() {
        return new createPartnerPreApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPartnerPreApply_result getResult(I iface, createPartnerPreApply_args args) throws org.apache.thrift.TException {
        createPartnerPreApply_result result = new createPartnerPreApply_result();
        result.success = iface.createPartnerPreApply(args.partnerPreApply);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findPartnerPreApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPartnerPreApply_args> {
      public findPartnerPreApply() {
        super("findPartnerPreApply");
      }

      public findPartnerPreApply_args getEmptyArgsInstance() {
        return new findPartnerPreApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPartnerPreApply_result getResult(I iface, findPartnerPreApply_args args) throws org.apache.thrift.TException {
        findPartnerPreApply_result result = new findPartnerPreApply_result();
        result.success = iface.findPartnerPreApply(args.partnerId, args.partnerUniqueNo);
        return result;
      }
    }

    public static class getPartnerPreApplyList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartnerPreApplyList_args> {
      public getPartnerPreApplyList() {
        super("getPartnerPreApplyList");
      }

      public getPartnerPreApplyList_args getEmptyArgsInstance() {
        return new getPartnerPreApplyList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartnerPreApplyList_result getResult(I iface, getPartnerPreApplyList_args args) throws org.apache.thrift.TException {
        getPartnerPreApplyList_result result = new getPartnerPreApplyList_result();
        result.success = iface.getPartnerPreApplyList(args.partnerPreApply, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class auditPartnerPreApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditPartnerPreApply_args> {
      public auditPartnerPreApply() {
        super("auditPartnerPreApply");
      }

      public auditPartnerPreApply_args getEmptyArgsInstance() {
        return new auditPartnerPreApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditPartnerPreApply_result getResult(I iface, auditPartnerPreApply_args args) throws org.apache.thrift.TException {
        auditPartnerPreApply_result result = new auditPartnerPreApply_result();
        result.success = iface.auditPartnerPreApply(args.preApplyId, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class statisticRecharge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statisticRecharge_args> {
      public statisticRecharge() {
        super("statisticRecharge");
      }

      public statisticRecharge_args getEmptyArgsInstance() {
        return new statisticRecharge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statisticRecharge_result getResult(I iface, statisticRecharge_args args) throws org.apache.thrift.TException {
        statisticRecharge_result result = new statisticRecharge_result();
        result.success = iface.statisticRecharge(args.date);
        return result;
      }
    }

    public static class totalAccountMoney<I extends Iface> extends org.apache.thrift.ProcessFunction<I, totalAccountMoney_args> {
      public totalAccountMoney() {
        super("totalAccountMoney");
      }

      public totalAccountMoney_args getEmptyArgsInstance() {
        return new totalAccountMoney_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public totalAccountMoney_result getResult(I iface, totalAccountMoney_args args) throws org.apache.thrift.TException {
        totalAccountMoney_result result = new totalAccountMoney_result();
        result.success = iface.totalAccountMoney();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class totalPaylogNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, totalPaylogNum_args> {
      public totalPaylogNum() {
        super("totalPaylogNum");
      }

      public totalPaylogNum_args getEmptyArgsInstance() {
        return new totalPaylogNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public totalPaylogNum_result getResult(I iface, totalPaylogNum_args args) throws org.apache.thrift.TException {
        totalPaylogNum_result result = new totalPaylogNum_result();
        result.success = iface.totalPaylogNum(args.date);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addPartnerAccount", new addPartnerAccount());
      processMap.put("getPartnerAccountList", new getPartnerAccountList());
      processMap.put("findPartnerAccountByPartnerId", new findPartnerAccountByPartnerId());
      processMap.put("updatePartnerAccountState", new updatePartnerAccountState());
      processMap.put("updatePartnerAccountCreditLimit", new updatePartnerAccountCreditLimit());
      processMap.put("payPartnerAccount", new payPartnerAccount());
      processMap.put("getPartnerAccountLogList", new getPartnerAccountLogList());
      processMap.put("addPartnerRecharge", new addPartnerRecharge());
      processMap.put("modifyRefund", new modifyRefund());
      processMap.put("sendPrize", new sendPrize());
      processMap.put("countPartnerRechargeByDate", new countPartnerRechargeByDate());
      processMap.put("createPartnerPreApply", new createPartnerPreApply());
      processMap.put("findPartnerPreApply", new findPartnerPreApply());
      processMap.put("getPartnerPreApplyList", new getPartnerPreApplyList());
      processMap.put("auditPartnerPreApply", new auditPartnerPreApply());
      processMap.put("statisticRecharge", new statisticRecharge());
      processMap.put("totalAccountMoney", new totalAccountMoney());
      processMap.put("totalPaylogNum", new totalPaylogNum());
      return processMap;
    }

    public static class addPartnerAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPartnerAccount_args, Integer> {
      public addPartnerAccount() {
        super("addPartnerAccount");
      }

      public addPartnerAccount_args getEmptyArgsInstance() {
        return new addPartnerAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addPartnerAccount_result result = new addPartnerAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPartnerAccount_result result = new addPartnerAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPartnerAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addPartnerAccount(args.partnerAccount,resultHandler);
      }
    }

    public static class getPartnerAccountList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartnerAccountList_args, PartnerAccountData> {
      public getPartnerAccountList() {
        super("getPartnerAccountList");
      }

      public getPartnerAccountList_args getEmptyArgsInstance() {
        return new getPartnerAccountList_args();
      }

      public AsyncMethodCallback<PartnerAccountData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PartnerAccountData>() { 
          public void onComplete(PartnerAccountData o) {
            getPartnerAccountList_result result = new getPartnerAccountList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartnerAccountList_result result = new getPartnerAccountList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartnerAccountList_args args, org.apache.thrift.async.AsyncMethodCallback<PartnerAccountData> resultHandler) throws TException {
        iface.getPartnerAccountList(args.partnerAccount, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class findPartnerAccountByPartnerId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPartnerAccountByPartnerId_args, PartnerAccount> {
      public findPartnerAccountByPartnerId() {
        super("findPartnerAccountByPartnerId");
      }

      public findPartnerAccountByPartnerId_args getEmptyArgsInstance() {
        return new findPartnerAccountByPartnerId_args();
      }

      public AsyncMethodCallback<PartnerAccount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PartnerAccount>() { 
          public void onComplete(PartnerAccount o) {
            findPartnerAccountByPartnerId_result result = new findPartnerAccountByPartnerId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPartnerAccountByPartnerId_result result = new findPartnerAccountByPartnerId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPartnerAccountByPartnerId_args args, org.apache.thrift.async.AsyncMethodCallback<PartnerAccount> resultHandler) throws TException {
        iface.findPartnerAccountByPartnerId(args.partnerId,resultHandler);
      }
    }

    public static class updatePartnerAccountState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePartnerAccountState_args, Integer> {
      public updatePartnerAccountState() {
        super("updatePartnerAccountState");
      }

      public updatePartnerAccountState_args getEmptyArgsInstance() {
        return new updatePartnerAccountState_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updatePartnerAccountState_result result = new updatePartnerAccountState_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePartnerAccountState_result result = new updatePartnerAccountState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePartnerAccountState_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updatePartnerAccountState(args.partnerId, args.state,resultHandler);
      }
    }

    public static class updatePartnerAccountCreditLimit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePartnerAccountCreditLimit_args, Integer> {
      public updatePartnerAccountCreditLimit() {
        super("updatePartnerAccountCreditLimit");
      }

      public updatePartnerAccountCreditLimit_args getEmptyArgsInstance() {
        return new updatePartnerAccountCreditLimit_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updatePartnerAccountCreditLimit_result result = new updatePartnerAccountCreditLimit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePartnerAccountCreditLimit_result result = new updatePartnerAccountCreditLimit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePartnerAccountCreditLimit_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updatePartnerAccountCreditLimit(args.partnerId, args.creditLimit,resultHandler);
      }
    }

    public static class payPartnerAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, payPartnerAccount_args, Integer> {
      public payPartnerAccount() {
        super("payPartnerAccount");
      }

      public payPartnerAccount_args getEmptyArgsInstance() {
        return new payPartnerAccount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            payPartnerAccount_result result = new payPartnerAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            payPartnerAccount_result result = new payPartnerAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, payPartnerAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.payPartnerAccount(args.partnerId, args.amount, args.serialNumber,resultHandler);
      }
    }

    public static class getPartnerAccountLogList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartnerAccountLogList_args, PartnerAccountLogData> {
      public getPartnerAccountLogList() {
        super("getPartnerAccountLogList");
      }

      public getPartnerAccountLogList_args getEmptyArgsInstance() {
        return new getPartnerAccountLogList_args();
      }

      public AsyncMethodCallback<PartnerAccountLogData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PartnerAccountLogData>() { 
          public void onComplete(PartnerAccountLogData o) {
            getPartnerAccountLogList_result result = new getPartnerAccountLogList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartnerAccountLogList_result result = new getPartnerAccountLogList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartnerAccountLogList_args args, org.apache.thrift.async.AsyncMethodCallback<PartnerAccountLogData> resultHandler) throws TException {
        iface.getPartnerAccountLogList(args.partnerAccountLog, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class addPartnerRecharge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPartnerRecharge_args, Integer> {
      public addPartnerRecharge() {
        super("addPartnerRecharge");
      }

      public addPartnerRecharge_args getEmptyArgsInstance() {
        return new addPartnerRecharge_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addPartnerRecharge_result result = new addPartnerRecharge_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPartnerRecharge_result result = new addPartnerRecharge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPartnerRecharge_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addPartnerRecharge(args.partnerRecharge,resultHandler);
      }
    }

    public static class modifyRefund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyRefund_args, Integer> {
      public modifyRefund() {
        super("modifyRefund");
      }

      public modifyRefund_args getEmptyArgsInstance() {
        return new modifyRefund_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            modifyRefund_result result = new modifyRefund_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifyRefund_result result = new modifyRefund_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyRefund_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.modifyRefund(args.partnerId, args.amount, args.paySerialNumber, args.refundSerialNumber,resultHandler);
      }
    }

    public static class sendPrize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendPrize_args, Integer> {
      public sendPrize() {
        super("sendPrize");
      }

      public sendPrize_args getEmptyArgsInstance() {
        return new sendPrize_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            sendPrize_result result = new sendPrize_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendPrize_result result = new sendPrize_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendPrize_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.sendPrize(args.partnerId, args.amount, args.serialNumber,resultHandler);
      }
    }

    public static class countPartnerRechargeByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countPartnerRechargeByDate_args, Long> {
      public countPartnerRechargeByDate() {
        super("countPartnerRechargeByDate");
      }

      public countPartnerRechargeByDate_args getEmptyArgsInstance() {
        return new countPartnerRechargeByDate_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            countPartnerRechargeByDate_result result = new countPartnerRechargeByDate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countPartnerRechargeByDate_result result = new countPartnerRechargeByDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countPartnerRechargeByDate_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.countPartnerRechargeByDate(args.partnerId, args.dateTime,resultHandler);
      }
    }

    public static class createPartnerPreApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createPartnerPreApply_args, Integer> {
      public createPartnerPreApply() {
        super("createPartnerPreApply");
      }

      public createPartnerPreApply_args getEmptyArgsInstance() {
        return new createPartnerPreApply_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createPartnerPreApply_result result = new createPartnerPreApply_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createPartnerPreApply_result result = new createPartnerPreApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createPartnerPreApply_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createPartnerPreApply(args.partnerPreApply,resultHandler);
      }
    }

    public static class findPartnerPreApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPartnerPreApply_args, PartnerPreApply> {
      public findPartnerPreApply() {
        super("findPartnerPreApply");
      }

      public findPartnerPreApply_args getEmptyArgsInstance() {
        return new findPartnerPreApply_args();
      }

      public AsyncMethodCallback<PartnerPreApply> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PartnerPreApply>() { 
          public void onComplete(PartnerPreApply o) {
            findPartnerPreApply_result result = new findPartnerPreApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPartnerPreApply_result result = new findPartnerPreApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPartnerPreApply_args args, org.apache.thrift.async.AsyncMethodCallback<PartnerPreApply> resultHandler) throws TException {
        iface.findPartnerPreApply(args.partnerId, args.partnerUniqueNo,resultHandler);
      }
    }

    public static class getPartnerPreApplyList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartnerPreApplyList_args, PartnerPreApplyData> {
      public getPartnerPreApplyList() {
        super("getPartnerPreApplyList");
      }

      public getPartnerPreApplyList_args getEmptyArgsInstance() {
        return new getPartnerPreApplyList_args();
      }

      public AsyncMethodCallback<PartnerPreApplyData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PartnerPreApplyData>() { 
          public void onComplete(PartnerPreApplyData o) {
            getPartnerPreApplyList_result result = new getPartnerPreApplyList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartnerPreApplyList_result result = new getPartnerPreApplyList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartnerPreApplyList_args args, org.apache.thrift.async.AsyncMethodCallback<PartnerPreApplyData> resultHandler) throws TException {
        iface.getPartnerPreApplyList(args.partnerPreApply, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class auditPartnerPreApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditPartnerPreApply_args, Integer> {
      public auditPartnerPreApply() {
        super("auditPartnerPreApply");
      }

      public auditPartnerPreApply_args getEmptyArgsInstance() {
        return new auditPartnerPreApply_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            auditPartnerPreApply_result result = new auditPartnerPreApply_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditPartnerPreApply_result result = new auditPartnerPreApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditPartnerPreApply_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.auditPartnerPreApply(args.preApplyId, args.status,resultHandler);
      }
    }

    public static class statisticRecharge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statisticRecharge_args, Map<String,Long>> {
      public statisticRecharge() {
        super("statisticRecharge");
      }

      public statisticRecharge_args getEmptyArgsInstance() {
        return new statisticRecharge_args();
      }

      public AsyncMethodCallback<Map<String,Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Long>>() { 
          public void onComplete(Map<String,Long> o) {
            statisticRecharge_result result = new statisticRecharge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statisticRecharge_result result = new statisticRecharge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statisticRecharge_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Long>> resultHandler) throws TException {
        iface.statisticRecharge(args.date,resultHandler);
      }
    }

    public static class totalAccountMoney<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, totalAccountMoney_args, Long> {
      public totalAccountMoney() {
        super("totalAccountMoney");
      }

      public totalAccountMoney_args getEmptyArgsInstance() {
        return new totalAccountMoney_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            totalAccountMoney_result result = new totalAccountMoney_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            totalAccountMoney_result result = new totalAccountMoney_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, totalAccountMoney_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.totalAccountMoney(resultHandler);
      }
    }

    public static class totalPaylogNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, totalPaylogNum_args, Long> {
      public totalPaylogNum() {
        super("totalPaylogNum");
      }

      public totalPaylogNum_args getEmptyArgsInstance() {
        return new totalPaylogNum_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            totalPaylogNum_result result = new totalPaylogNum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            totalPaylogNum_result result = new totalPaylogNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, totalPaylogNum_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.totalPaylogNum(args.date,resultHandler);
      }
    }

  }

  public static class addPartnerAccount_args implements org.apache.thrift.TBase<addPartnerAccount_args, addPartnerAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPartnerAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPartnerAccount_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPartnerAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPartnerAccount_argsTupleSchemeFactory());
    }

    public PartnerAccount partnerAccount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ACCOUNT((short)1, "partnerAccount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ACCOUNT
            return PARTNER_ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("partnerAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerAccount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPartnerAccount_args.class, metaDataMap);
    }

    public addPartnerAccount_args() {
    }

    public addPartnerAccount_args(
      PartnerAccount partnerAccount)
    {
      this();
      this.partnerAccount = partnerAccount;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPartnerAccount_args(addPartnerAccount_args other) {
      if (other.isSetPartnerAccount()) {
        this.partnerAccount = new PartnerAccount(other.partnerAccount);
      }
    }

    public addPartnerAccount_args deepCopy() {
      return new addPartnerAccount_args(this);
    }

    @Override
    public void clear() {
      this.partnerAccount = null;
    }

    public PartnerAccount getPartnerAccount() {
      return this.partnerAccount;
    }

    public addPartnerAccount_args setPartnerAccount(PartnerAccount partnerAccount) {
      this.partnerAccount = partnerAccount;
      return this;
    }

    public void unsetPartnerAccount() {
      this.partnerAccount = null;
    }

    /** Returns true if field partnerAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerAccount() {
      return this.partnerAccount != null;
    }

    public void setPartnerAccountIsSet(boolean value) {
      if (!value) {
        this.partnerAccount = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ACCOUNT:
        if (value == null) {
          unsetPartnerAccount();
        } else {
          setPartnerAccount((PartnerAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ACCOUNT:
        return getPartnerAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ACCOUNT:
        return isSetPartnerAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPartnerAccount_args)
        return this.equals((addPartnerAccount_args)that);
      return false;
    }

    public boolean equals(addPartnerAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerAccount = true && this.isSetPartnerAccount();
      boolean that_present_partnerAccount = true && that.isSetPartnerAccount();
      if (this_present_partnerAccount || that_present_partnerAccount) {
        if (!(this_present_partnerAccount && that_present_partnerAccount))
          return false;
        if (!this.partnerAccount.equals(that.partnerAccount))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPartnerAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerAccount()).compareTo(other.isSetPartnerAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerAccount, other.partnerAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPartnerAccount_args(");
      boolean first = true;

      sb.append("partnerAccount:");
      if (this.partnerAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerAccount);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (partnerAccount != null) {
        partnerAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPartnerAccount_argsStandardSchemeFactory implements SchemeFactory {
      public addPartnerAccount_argsStandardScheme getScheme() {
        return new addPartnerAccount_argsStandardScheme();
      }
    }

    private static class addPartnerAccount_argsStandardScheme extends StandardScheme<addPartnerAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPartnerAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerAccount = new PartnerAccount();
                struct.partnerAccount.read(iprot);
                struct.setPartnerAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPartnerAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerAccount != null) {
          oprot.writeFieldBegin(PARTNER_ACCOUNT_FIELD_DESC);
          struct.partnerAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPartnerAccount_argsTupleSchemeFactory implements SchemeFactory {
      public addPartnerAccount_argsTupleScheme getScheme() {
        return new addPartnerAccount_argsTupleScheme();
      }
    }

    private static class addPartnerAccount_argsTupleScheme extends TupleScheme<addPartnerAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPartnerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerAccount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerAccount()) {
          struct.partnerAccount.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPartnerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerAccount = new PartnerAccount();
          struct.partnerAccount.read(iprot);
          struct.setPartnerAccountIsSet(true);
        }
      }
    }

  }

  public static class addPartnerAccount_result implements org.apache.thrift.TBase<addPartnerAccount_result, addPartnerAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPartnerAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPartnerAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPartnerAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPartnerAccount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPartnerAccount_result.class, metaDataMap);
    }

    public addPartnerAccount_result() {
    }

    public addPartnerAccount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPartnerAccount_result(addPartnerAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addPartnerAccount_result deepCopy() {
      return new addPartnerAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addPartnerAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPartnerAccount_result)
        return this.equals((addPartnerAccount_result)that);
      return false;
    }

    public boolean equals(addPartnerAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPartnerAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPartnerAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPartnerAccount_resultStandardSchemeFactory implements SchemeFactory {
      public addPartnerAccount_resultStandardScheme getScheme() {
        return new addPartnerAccount_resultStandardScheme();
      }
    }

    private static class addPartnerAccount_resultStandardScheme extends StandardScheme<addPartnerAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPartnerAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPartnerAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPartnerAccount_resultTupleSchemeFactory implements SchemeFactory {
      public addPartnerAccount_resultTupleScheme getScheme() {
        return new addPartnerAccount_resultTupleScheme();
      }
    }

    private static class addPartnerAccount_resultTupleScheme extends TupleScheme<addPartnerAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPartnerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPartnerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartnerAccountList_args implements org.apache.thrift.TBase<getPartnerAccountList_args, getPartnerAccountList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerAccountList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerAccountList_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerAccountList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerAccountList_argsTupleSchemeFactory());
    }

    public PartnerAccount partnerAccount; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ACCOUNT((short)1, "partnerAccount"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ACCOUNT
            return PARTNER_ACCOUNT;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("partnerAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerAccount.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerAccountList_args.class, metaDataMap);
    }

    public getPartnerAccountList_args() {
    }

    public getPartnerAccountList_args(
      PartnerAccount partnerAccount,
      int currentPage,
      int pageSize)
    {
      this();
      this.partnerAccount = partnerAccount;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerAccountList_args(getPartnerAccountList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerAccount()) {
        this.partnerAccount = new PartnerAccount(other.partnerAccount);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getPartnerAccountList_args deepCopy() {
      return new getPartnerAccountList_args(this);
    }

    @Override
    public void clear() {
      this.partnerAccount = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public PartnerAccount getPartnerAccount() {
      return this.partnerAccount;
    }

    public getPartnerAccountList_args setPartnerAccount(PartnerAccount partnerAccount) {
      this.partnerAccount = partnerAccount;
      return this;
    }

    public void unsetPartnerAccount() {
      this.partnerAccount = null;
    }

    /** Returns true if field partnerAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerAccount() {
      return this.partnerAccount != null;
    }

    public void setPartnerAccountIsSet(boolean value) {
      if (!value) {
        this.partnerAccount = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getPartnerAccountList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getPartnerAccountList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ACCOUNT:
        if (value == null) {
          unsetPartnerAccount();
        } else {
          setPartnerAccount((PartnerAccount)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ACCOUNT:
        return getPartnerAccount();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ACCOUNT:
        return isSetPartnerAccount();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerAccountList_args)
        return this.equals((getPartnerAccountList_args)that);
      return false;
    }

    public boolean equals(getPartnerAccountList_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerAccount = true && this.isSetPartnerAccount();
      boolean that_present_partnerAccount = true && that.isSetPartnerAccount();
      if (this_present_partnerAccount || that_present_partnerAccount) {
        if (!(this_present_partnerAccount && that_present_partnerAccount))
          return false;
        if (!this.partnerAccount.equals(that.partnerAccount))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerAccountList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerAccount()).compareTo(other.isSetPartnerAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerAccount, other.partnerAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerAccountList_args(");
      boolean first = true;

      sb.append("partnerAccount:");
      if (this.partnerAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerAccount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (partnerAccount != null) {
        partnerAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerAccountList_argsStandardSchemeFactory implements SchemeFactory {
      public getPartnerAccountList_argsStandardScheme getScheme() {
        return new getPartnerAccountList_argsStandardScheme();
      }
    }

    private static class getPartnerAccountList_argsStandardScheme extends StandardScheme<getPartnerAccountList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerAccountList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerAccount = new PartnerAccount();
                struct.partnerAccount.read(iprot);
                struct.setPartnerAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerAccountList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerAccount != null) {
          oprot.writeFieldBegin(PARTNER_ACCOUNT_FIELD_DESC);
          struct.partnerAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerAccountList_argsTupleSchemeFactory implements SchemeFactory {
      public getPartnerAccountList_argsTupleScheme getScheme() {
        return new getPartnerAccountList_argsTupleScheme();
      }
    }

    private static class getPartnerAccountList_argsTupleScheme extends TupleScheme<getPartnerAccountList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerAccount()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerAccount()) {
          struct.partnerAccount.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerAccount = new PartnerAccount();
          struct.partnerAccount.read(iprot);
          struct.setPartnerAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getPartnerAccountList_result implements org.apache.thrift.TBase<getPartnerAccountList_result, getPartnerAccountList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerAccountList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerAccountList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerAccountList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerAccountList_resultTupleSchemeFactory());
    }

    public PartnerAccountData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerAccountData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerAccountList_result.class, metaDataMap);
    }

    public getPartnerAccountList_result() {
    }

    public getPartnerAccountList_result(
      PartnerAccountData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerAccountList_result(getPartnerAccountList_result other) {
      if (other.isSetSuccess()) {
        this.success = new PartnerAccountData(other.success);
      }
    }

    public getPartnerAccountList_result deepCopy() {
      return new getPartnerAccountList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PartnerAccountData getSuccess() {
      return this.success;
    }

    public getPartnerAccountList_result setSuccess(PartnerAccountData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PartnerAccountData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerAccountList_result)
        return this.equals((getPartnerAccountList_result)that);
      return false;
    }

    public boolean equals(getPartnerAccountList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerAccountList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerAccountList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerAccountList_resultStandardSchemeFactory implements SchemeFactory {
      public getPartnerAccountList_resultStandardScheme getScheme() {
        return new getPartnerAccountList_resultStandardScheme();
      }
    }

    private static class getPartnerAccountList_resultStandardScheme extends StandardScheme<getPartnerAccountList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerAccountList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PartnerAccountData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerAccountList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerAccountList_resultTupleSchemeFactory implements SchemeFactory {
      public getPartnerAccountList_resultTupleScheme getScheme() {
        return new getPartnerAccountList_resultTupleScheme();
      }
    }

    private static class getPartnerAccountList_resultTupleScheme extends TupleScheme<getPartnerAccountList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PartnerAccountData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPartnerAccountByPartnerId_args implements org.apache.thrift.TBase<findPartnerAccountByPartnerId_args, findPartnerAccountByPartnerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPartnerAccountByPartnerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPartnerAccountByPartnerId_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPartnerAccountByPartnerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPartnerAccountByPartnerId_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPartnerAccountByPartnerId_args.class, metaDataMap);
    }

    public findPartnerAccountByPartnerId_args() {
    }

    public findPartnerAccountByPartnerId_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPartnerAccountByPartnerId_args(findPartnerAccountByPartnerId_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public findPartnerAccountByPartnerId_args deepCopy() {
      return new findPartnerAccountByPartnerId_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public findPartnerAccountByPartnerId_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPartnerAccountByPartnerId_args)
        return this.equals((findPartnerAccountByPartnerId_args)that);
      return false;
    }

    public boolean equals(findPartnerAccountByPartnerId_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findPartnerAccountByPartnerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPartnerAccountByPartnerId_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPartnerAccountByPartnerId_argsStandardSchemeFactory implements SchemeFactory {
      public findPartnerAccountByPartnerId_argsStandardScheme getScheme() {
        return new findPartnerAccountByPartnerId_argsStandardScheme();
      }
    }

    private static class findPartnerAccountByPartnerId_argsStandardScheme extends StandardScheme<findPartnerAccountByPartnerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPartnerAccountByPartnerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPartnerAccountByPartnerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPartnerAccountByPartnerId_argsTupleSchemeFactory implements SchemeFactory {
      public findPartnerAccountByPartnerId_argsTupleScheme getScheme() {
        return new findPartnerAccountByPartnerId_argsTupleScheme();
      }
    }

    private static class findPartnerAccountByPartnerId_argsTupleScheme extends TupleScheme<findPartnerAccountByPartnerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPartnerAccountByPartnerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPartnerAccountByPartnerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class findPartnerAccountByPartnerId_result implements org.apache.thrift.TBase<findPartnerAccountByPartnerId_result, findPartnerAccountByPartnerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPartnerAccountByPartnerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPartnerAccountByPartnerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPartnerAccountByPartnerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPartnerAccountByPartnerId_resultTupleSchemeFactory());
    }

    public PartnerAccount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerAccount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPartnerAccountByPartnerId_result.class, metaDataMap);
    }

    public findPartnerAccountByPartnerId_result() {
    }

    public findPartnerAccountByPartnerId_result(
      PartnerAccount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPartnerAccountByPartnerId_result(findPartnerAccountByPartnerId_result other) {
      if (other.isSetSuccess()) {
        this.success = new PartnerAccount(other.success);
      }
    }

    public findPartnerAccountByPartnerId_result deepCopy() {
      return new findPartnerAccountByPartnerId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PartnerAccount getSuccess() {
      return this.success;
    }

    public findPartnerAccountByPartnerId_result setSuccess(PartnerAccount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PartnerAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPartnerAccountByPartnerId_result)
        return this.equals((findPartnerAccountByPartnerId_result)that);
      return false;
    }

    public boolean equals(findPartnerAccountByPartnerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findPartnerAccountByPartnerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPartnerAccountByPartnerId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPartnerAccountByPartnerId_resultStandardSchemeFactory implements SchemeFactory {
      public findPartnerAccountByPartnerId_resultStandardScheme getScheme() {
        return new findPartnerAccountByPartnerId_resultStandardScheme();
      }
    }

    private static class findPartnerAccountByPartnerId_resultStandardScheme extends StandardScheme<findPartnerAccountByPartnerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPartnerAccountByPartnerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PartnerAccount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPartnerAccountByPartnerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPartnerAccountByPartnerId_resultTupleSchemeFactory implements SchemeFactory {
      public findPartnerAccountByPartnerId_resultTupleScheme getScheme() {
        return new findPartnerAccountByPartnerId_resultTupleScheme();
      }
    }

    private static class findPartnerAccountByPartnerId_resultTupleScheme extends TupleScheme<findPartnerAccountByPartnerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPartnerAccountByPartnerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPartnerAccountByPartnerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PartnerAccount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePartnerAccountState_args implements org.apache.thrift.TBase<updatePartnerAccountState_args, updatePartnerAccountState_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePartnerAccountState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePartnerAccountState_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePartnerAccountState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePartnerAccountState_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      STATE((short)2, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePartnerAccountState_args.class, metaDataMap);
    }

    public updatePartnerAccountState_args() {
    }

    public updatePartnerAccountState_args(
      String partnerId,
      int state)
    {
      this();
      this.partnerId = partnerId;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePartnerAccountState_args(updatePartnerAccountState_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      this.state = other.state;
    }

    public updatePartnerAccountState_args deepCopy() {
      return new updatePartnerAccountState_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public updatePartnerAccountState_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public updatePartnerAccountState_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case STATE:
        return Integer.valueOf(getState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePartnerAccountState_args)
        return this.equals((updatePartnerAccountState_args)that);
      return false;
    }

    public boolean equals(updatePartnerAccountState_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updatePartnerAccountState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePartnerAccountState_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePartnerAccountState_argsStandardSchemeFactory implements SchemeFactory {
      public updatePartnerAccountState_argsStandardScheme getScheme() {
        return new updatePartnerAccountState_argsStandardScheme();
      }
    }

    private static class updatePartnerAccountState_argsStandardScheme extends StandardScheme<updatePartnerAccountState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePartnerAccountState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePartnerAccountState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePartnerAccountState_argsTupleSchemeFactory implements SchemeFactory {
      public updatePartnerAccountState_argsTupleScheme getScheme() {
        return new updatePartnerAccountState_argsTupleScheme();
      }
    }

    private static class updatePartnerAccountState_argsTupleScheme extends TupleScheme<updatePartnerAccountState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class updatePartnerAccountState_result implements org.apache.thrift.TBase<updatePartnerAccountState_result, updatePartnerAccountState_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePartnerAccountState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePartnerAccountState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePartnerAccountState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePartnerAccountState_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePartnerAccountState_result.class, metaDataMap);
    }

    public updatePartnerAccountState_result() {
    }

    public updatePartnerAccountState_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePartnerAccountState_result(updatePartnerAccountState_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updatePartnerAccountState_result deepCopy() {
      return new updatePartnerAccountState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updatePartnerAccountState_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePartnerAccountState_result)
        return this.equals((updatePartnerAccountState_result)that);
      return false;
    }

    public boolean equals(updatePartnerAccountState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updatePartnerAccountState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePartnerAccountState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePartnerAccountState_resultStandardSchemeFactory implements SchemeFactory {
      public updatePartnerAccountState_resultStandardScheme getScheme() {
        return new updatePartnerAccountState_resultStandardScheme();
      }
    }

    private static class updatePartnerAccountState_resultStandardScheme extends StandardScheme<updatePartnerAccountState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePartnerAccountState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePartnerAccountState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePartnerAccountState_resultTupleSchemeFactory implements SchemeFactory {
      public updatePartnerAccountState_resultTupleScheme getScheme() {
        return new updatePartnerAccountState_resultTupleScheme();
      }
    }

    private static class updatePartnerAccountState_resultTupleScheme extends TupleScheme<updatePartnerAccountState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePartnerAccountCreditLimit_args implements org.apache.thrift.TBase<updatePartnerAccountCreditLimit_args, updatePartnerAccountCreditLimit_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePartnerAccountCreditLimit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePartnerAccountCreditLimit_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditLimit", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePartnerAccountCreditLimit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePartnerAccountCreditLimit_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public long creditLimit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      CREDIT_LIMIT((short)2, "creditLimit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // CREDIT_LIMIT
            return CREDIT_LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CREDITLIMIT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePartnerAccountCreditLimit_args.class, metaDataMap);
    }

    public updatePartnerAccountCreditLimit_args() {
    }

    public updatePartnerAccountCreditLimit_args(
      String partnerId,
      long creditLimit)
    {
      this();
      this.partnerId = partnerId;
      this.creditLimit = creditLimit;
      setCreditLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePartnerAccountCreditLimit_args(updatePartnerAccountCreditLimit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      this.creditLimit = other.creditLimit;
    }

    public updatePartnerAccountCreditLimit_args deepCopy() {
      return new updatePartnerAccountCreditLimit_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      setCreditLimitIsSet(false);
      this.creditLimit = 0;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public updatePartnerAccountCreditLimit_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public long getCreditLimit() {
      return this.creditLimit;
    }

    public updatePartnerAccountCreditLimit_args setCreditLimit(long creditLimit) {
      this.creditLimit = creditLimit;
      setCreditLimitIsSet(true);
      return this;
    }

    public void unsetCreditLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
    }

    /** Returns true if field creditLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetCreditLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
    }

    public void setCreditLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case CREDIT_LIMIT:
        if (value == null) {
          unsetCreditLimit();
        } else {
          setCreditLimit((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case CREDIT_LIMIT:
        return Long.valueOf(getCreditLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case CREDIT_LIMIT:
        return isSetCreditLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePartnerAccountCreditLimit_args)
        return this.equals((updatePartnerAccountCreditLimit_args)that);
      return false;
    }

    public boolean equals(updatePartnerAccountCreditLimit_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_creditLimit = true;
      boolean that_present_creditLimit = true;
      if (this_present_creditLimit || that_present_creditLimit) {
        if (!(this_present_creditLimit && that_present_creditLimit))
          return false;
        if (this.creditLimit != that.creditLimit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updatePartnerAccountCreditLimit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreditLimit()).compareTo(other.isSetCreditLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreditLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditLimit, other.creditLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePartnerAccountCreditLimit_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("creditLimit:");
      sb.append(this.creditLimit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePartnerAccountCreditLimit_argsStandardSchemeFactory implements SchemeFactory {
      public updatePartnerAccountCreditLimit_argsStandardScheme getScheme() {
        return new updatePartnerAccountCreditLimit_argsStandardScheme();
      }
    }

    private static class updatePartnerAccountCreditLimit_argsStandardScheme extends StandardScheme<updatePartnerAccountCreditLimit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePartnerAccountCreditLimit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CREDIT_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.creditLimit = iprot.readI64();
                struct.setCreditLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePartnerAccountCreditLimit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CREDIT_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.creditLimit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePartnerAccountCreditLimit_argsTupleSchemeFactory implements SchemeFactory {
      public updatePartnerAccountCreditLimit_argsTupleScheme getScheme() {
        return new updatePartnerAccountCreditLimit_argsTupleScheme();
      }
    }

    private static class updatePartnerAccountCreditLimit_argsTupleScheme extends TupleScheme<updatePartnerAccountCreditLimit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountCreditLimit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetCreditLimit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetCreditLimit()) {
          oprot.writeI64(struct.creditLimit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountCreditLimit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.creditLimit = iprot.readI64();
          struct.setCreditLimitIsSet(true);
        }
      }
    }

  }

  public static class updatePartnerAccountCreditLimit_result implements org.apache.thrift.TBase<updatePartnerAccountCreditLimit_result, updatePartnerAccountCreditLimit_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePartnerAccountCreditLimit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePartnerAccountCreditLimit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePartnerAccountCreditLimit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePartnerAccountCreditLimit_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePartnerAccountCreditLimit_result.class, metaDataMap);
    }

    public updatePartnerAccountCreditLimit_result() {
    }

    public updatePartnerAccountCreditLimit_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePartnerAccountCreditLimit_result(updatePartnerAccountCreditLimit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updatePartnerAccountCreditLimit_result deepCopy() {
      return new updatePartnerAccountCreditLimit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updatePartnerAccountCreditLimit_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePartnerAccountCreditLimit_result)
        return this.equals((updatePartnerAccountCreditLimit_result)that);
      return false;
    }

    public boolean equals(updatePartnerAccountCreditLimit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updatePartnerAccountCreditLimit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePartnerAccountCreditLimit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePartnerAccountCreditLimit_resultStandardSchemeFactory implements SchemeFactory {
      public updatePartnerAccountCreditLimit_resultStandardScheme getScheme() {
        return new updatePartnerAccountCreditLimit_resultStandardScheme();
      }
    }

    private static class updatePartnerAccountCreditLimit_resultStandardScheme extends StandardScheme<updatePartnerAccountCreditLimit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePartnerAccountCreditLimit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePartnerAccountCreditLimit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePartnerAccountCreditLimit_resultTupleSchemeFactory implements SchemeFactory {
      public updatePartnerAccountCreditLimit_resultTupleScheme getScheme() {
        return new updatePartnerAccountCreditLimit_resultTupleScheme();
      }
    }

    private static class updatePartnerAccountCreditLimit_resultTupleScheme extends TupleScheme<updatePartnerAccountCreditLimit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountCreditLimit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePartnerAccountCreditLimit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class payPartnerAccount_args implements org.apache.thrift.TBase<payPartnerAccount_args, payPartnerAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<payPartnerAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payPartnerAccount_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payPartnerAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payPartnerAccount_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public long amount; // required
    public String serialNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      AMOUNT((short)2, "amount"),
      SERIAL_NUMBER((short)3, "serialNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // AMOUNT
            return AMOUNT;
          case 3: // SERIAL_NUMBER
            return SERIAL_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payPartnerAccount_args.class, metaDataMap);
    }

    public payPartnerAccount_args() {
    }

    public payPartnerAccount_args(
      String partnerId,
      long amount,
      String serialNumber)
    {
      this();
      this.partnerId = partnerId;
      this.amount = amount;
      setAmountIsSet(true);
      this.serialNumber = serialNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payPartnerAccount_args(payPartnerAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      this.amount = other.amount;
      if (other.isSetSerialNumber()) {
        this.serialNumber = other.serialNumber;
      }
    }

    public payPartnerAccount_args deepCopy() {
      return new payPartnerAccount_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      setAmountIsSet(false);
      this.amount = 0;
      this.serialNumber = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public payPartnerAccount_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public long getAmount() {
      return this.amount;
    }

    public payPartnerAccount_args setAmount(long amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public String getSerialNumber() {
      return this.serialNumber;
    }

    public payPartnerAccount_args setSerialNumber(String serialNumber) {
      this.serialNumber = serialNumber;
      return this;
    }

    public void unsetSerialNumber() {
      this.serialNumber = null;
    }

    /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetSerialNumber() {
      return this.serialNumber != null;
    }

    public void setSerialNumberIsSet(boolean value) {
      if (!value) {
        this.serialNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Long)value);
        }
        break;

      case SERIAL_NUMBER:
        if (value == null) {
          unsetSerialNumber();
        } else {
          setSerialNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case AMOUNT:
        return Long.valueOf(getAmount());

      case SERIAL_NUMBER:
        return getSerialNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case AMOUNT:
        return isSetAmount();
      case SERIAL_NUMBER:
        return isSetSerialNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payPartnerAccount_args)
        return this.equals((payPartnerAccount_args)that);
      return false;
    }

    public boolean equals(payPartnerAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_serialNumber = true && this.isSetSerialNumber();
      boolean that_present_serialNumber = true && that.isSetSerialNumber();
      if (this_present_serialNumber || that_present_serialNumber) {
        if (!(this_present_serialNumber && that_present_serialNumber))
          return false;
        if (!this.serialNumber.equals(that.serialNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(payPartnerAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSerialNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payPartnerAccount_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serialNumber:");
      if (this.serialNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.serialNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payPartnerAccount_argsStandardSchemeFactory implements SchemeFactory {
      public payPartnerAccount_argsStandardScheme getScheme() {
        return new payPartnerAccount_argsStandardScheme();
      }
    }

    private static class payPartnerAccount_argsStandardScheme extends StandardScheme<payPartnerAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payPartnerAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.amount = iprot.readI64();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERIAL_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serialNumber = iprot.readString();
                struct.setSerialNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payPartnerAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.amount);
        oprot.writeFieldEnd();
        if (struct.serialNumber != null) {
          oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
          oprot.writeString(struct.serialNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payPartnerAccount_argsTupleSchemeFactory implements SchemeFactory {
      public payPartnerAccount_argsTupleScheme getScheme() {
        return new payPartnerAccount_argsTupleScheme();
      }
    }

    private static class payPartnerAccount_argsTupleScheme extends TupleScheme<payPartnerAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payPartnerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetAmount()) {
          optionals.set(1);
        }
        if (struct.isSetSerialNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetAmount()) {
          oprot.writeI64(struct.amount);
        }
        if (struct.isSetSerialNumber()) {
          oprot.writeString(struct.serialNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payPartnerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.amount = iprot.readI64();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serialNumber = iprot.readString();
          struct.setSerialNumberIsSet(true);
        }
      }
    }

  }

  public static class payPartnerAccount_result implements org.apache.thrift.TBase<payPartnerAccount_result, payPartnerAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<payPartnerAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payPartnerAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payPartnerAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payPartnerAccount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payPartnerAccount_result.class, metaDataMap);
    }

    public payPartnerAccount_result() {
    }

    public payPartnerAccount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payPartnerAccount_result(payPartnerAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public payPartnerAccount_result deepCopy() {
      return new payPartnerAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public payPartnerAccount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payPartnerAccount_result)
        return this.equals((payPartnerAccount_result)that);
      return false;
    }

    public boolean equals(payPartnerAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(payPartnerAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payPartnerAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payPartnerAccount_resultStandardSchemeFactory implements SchemeFactory {
      public payPartnerAccount_resultStandardScheme getScheme() {
        return new payPartnerAccount_resultStandardScheme();
      }
    }

    private static class payPartnerAccount_resultStandardScheme extends StandardScheme<payPartnerAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payPartnerAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payPartnerAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payPartnerAccount_resultTupleSchemeFactory implements SchemeFactory {
      public payPartnerAccount_resultTupleScheme getScheme() {
        return new payPartnerAccount_resultTupleScheme();
      }
    }

    private static class payPartnerAccount_resultTupleScheme extends TupleScheme<payPartnerAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payPartnerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payPartnerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartnerAccountLogList_args implements org.apache.thrift.TBase<getPartnerAccountLogList_args, getPartnerAccountLogList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerAccountLogList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerAccountLogList_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ACCOUNT_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerAccountLog", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerAccountLogList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerAccountLogList_argsTupleSchemeFactory());
    }

    public PartnerAccountLog partnerAccountLog; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ACCOUNT_LOG((short)1, "partnerAccountLog"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ACCOUNT_LOG
            return PARTNER_ACCOUNT_LOG;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ACCOUNT_LOG, new org.apache.thrift.meta_data.FieldMetaData("partnerAccountLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerAccountLog.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerAccountLogList_args.class, metaDataMap);
    }

    public getPartnerAccountLogList_args() {
    }

    public getPartnerAccountLogList_args(
      PartnerAccountLog partnerAccountLog,
      int currentPage,
      int pageSize)
    {
      this();
      this.partnerAccountLog = partnerAccountLog;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerAccountLogList_args(getPartnerAccountLogList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerAccountLog()) {
        this.partnerAccountLog = new PartnerAccountLog(other.partnerAccountLog);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getPartnerAccountLogList_args deepCopy() {
      return new getPartnerAccountLogList_args(this);
    }

    @Override
    public void clear() {
      this.partnerAccountLog = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public PartnerAccountLog getPartnerAccountLog() {
      return this.partnerAccountLog;
    }

    public getPartnerAccountLogList_args setPartnerAccountLog(PartnerAccountLog partnerAccountLog) {
      this.partnerAccountLog = partnerAccountLog;
      return this;
    }

    public void unsetPartnerAccountLog() {
      this.partnerAccountLog = null;
    }

    /** Returns true if field partnerAccountLog is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerAccountLog() {
      return this.partnerAccountLog != null;
    }

    public void setPartnerAccountLogIsSet(boolean value) {
      if (!value) {
        this.partnerAccountLog = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getPartnerAccountLogList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getPartnerAccountLogList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ACCOUNT_LOG:
        if (value == null) {
          unsetPartnerAccountLog();
        } else {
          setPartnerAccountLog((PartnerAccountLog)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ACCOUNT_LOG:
        return getPartnerAccountLog();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ACCOUNT_LOG:
        return isSetPartnerAccountLog();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerAccountLogList_args)
        return this.equals((getPartnerAccountLogList_args)that);
      return false;
    }

    public boolean equals(getPartnerAccountLogList_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerAccountLog = true && this.isSetPartnerAccountLog();
      boolean that_present_partnerAccountLog = true && that.isSetPartnerAccountLog();
      if (this_present_partnerAccountLog || that_present_partnerAccountLog) {
        if (!(this_present_partnerAccountLog && that_present_partnerAccountLog))
          return false;
        if (!this.partnerAccountLog.equals(that.partnerAccountLog))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerAccountLogList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerAccountLog()).compareTo(other.isSetPartnerAccountLog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerAccountLog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerAccountLog, other.partnerAccountLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerAccountLogList_args(");
      boolean first = true;

      sb.append("partnerAccountLog:");
      if (this.partnerAccountLog == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerAccountLog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (partnerAccountLog != null) {
        partnerAccountLog.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerAccountLogList_argsStandardSchemeFactory implements SchemeFactory {
      public getPartnerAccountLogList_argsStandardScheme getScheme() {
        return new getPartnerAccountLogList_argsStandardScheme();
      }
    }

    private static class getPartnerAccountLogList_argsStandardScheme extends StandardScheme<getPartnerAccountLogList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerAccountLogList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ACCOUNT_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerAccountLog = new PartnerAccountLog();
                struct.partnerAccountLog.read(iprot);
                struct.setPartnerAccountLogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerAccountLogList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerAccountLog != null) {
          oprot.writeFieldBegin(PARTNER_ACCOUNT_LOG_FIELD_DESC);
          struct.partnerAccountLog.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerAccountLogList_argsTupleSchemeFactory implements SchemeFactory {
      public getPartnerAccountLogList_argsTupleScheme getScheme() {
        return new getPartnerAccountLogList_argsTupleScheme();
      }
    }

    private static class getPartnerAccountLogList_argsTupleScheme extends TupleScheme<getPartnerAccountLogList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountLogList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerAccountLog()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerAccountLog()) {
          struct.partnerAccountLog.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountLogList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerAccountLog = new PartnerAccountLog();
          struct.partnerAccountLog.read(iprot);
          struct.setPartnerAccountLogIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getPartnerAccountLogList_result implements org.apache.thrift.TBase<getPartnerAccountLogList_result, getPartnerAccountLogList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerAccountLogList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerAccountLogList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerAccountLogList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerAccountLogList_resultTupleSchemeFactory());
    }

    public PartnerAccountLogData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerAccountLogData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerAccountLogList_result.class, metaDataMap);
    }

    public getPartnerAccountLogList_result() {
    }

    public getPartnerAccountLogList_result(
      PartnerAccountLogData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerAccountLogList_result(getPartnerAccountLogList_result other) {
      if (other.isSetSuccess()) {
        this.success = new PartnerAccountLogData(other.success);
      }
    }

    public getPartnerAccountLogList_result deepCopy() {
      return new getPartnerAccountLogList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PartnerAccountLogData getSuccess() {
      return this.success;
    }

    public getPartnerAccountLogList_result setSuccess(PartnerAccountLogData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PartnerAccountLogData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerAccountLogList_result)
        return this.equals((getPartnerAccountLogList_result)that);
      return false;
    }

    public boolean equals(getPartnerAccountLogList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerAccountLogList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerAccountLogList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerAccountLogList_resultStandardSchemeFactory implements SchemeFactory {
      public getPartnerAccountLogList_resultStandardScheme getScheme() {
        return new getPartnerAccountLogList_resultStandardScheme();
      }
    }

    private static class getPartnerAccountLogList_resultStandardScheme extends StandardScheme<getPartnerAccountLogList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerAccountLogList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PartnerAccountLogData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerAccountLogList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerAccountLogList_resultTupleSchemeFactory implements SchemeFactory {
      public getPartnerAccountLogList_resultTupleScheme getScheme() {
        return new getPartnerAccountLogList_resultTupleScheme();
      }
    }

    private static class getPartnerAccountLogList_resultTupleScheme extends TupleScheme<getPartnerAccountLogList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountLogList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerAccountLogList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PartnerAccountLogData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPartnerRecharge_args implements org.apache.thrift.TBase<addPartnerRecharge_args, addPartnerRecharge_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPartnerRecharge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPartnerRecharge_args");

    private static final org.apache.thrift.protocol.TField PARTNER_RECHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRecharge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPartnerRecharge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPartnerRecharge_argsTupleSchemeFactory());
    }

    public PartnerRecharge partnerRecharge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_RECHARGE((short)1, "partnerRecharge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_RECHARGE
            return PARTNER_RECHARGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_RECHARGE, new org.apache.thrift.meta_data.FieldMetaData("partnerRecharge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerRecharge.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPartnerRecharge_args.class, metaDataMap);
    }

    public addPartnerRecharge_args() {
    }

    public addPartnerRecharge_args(
      PartnerRecharge partnerRecharge)
    {
      this();
      this.partnerRecharge = partnerRecharge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPartnerRecharge_args(addPartnerRecharge_args other) {
      if (other.isSetPartnerRecharge()) {
        this.partnerRecharge = new PartnerRecharge(other.partnerRecharge);
      }
    }

    public addPartnerRecharge_args deepCopy() {
      return new addPartnerRecharge_args(this);
    }

    @Override
    public void clear() {
      this.partnerRecharge = null;
    }

    public PartnerRecharge getPartnerRecharge() {
      return this.partnerRecharge;
    }

    public addPartnerRecharge_args setPartnerRecharge(PartnerRecharge partnerRecharge) {
      this.partnerRecharge = partnerRecharge;
      return this;
    }

    public void unsetPartnerRecharge() {
      this.partnerRecharge = null;
    }

    /** Returns true if field partnerRecharge is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerRecharge() {
      return this.partnerRecharge != null;
    }

    public void setPartnerRechargeIsSet(boolean value) {
      if (!value) {
        this.partnerRecharge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_RECHARGE:
        if (value == null) {
          unsetPartnerRecharge();
        } else {
          setPartnerRecharge((PartnerRecharge)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_RECHARGE:
        return getPartnerRecharge();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_RECHARGE:
        return isSetPartnerRecharge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPartnerRecharge_args)
        return this.equals((addPartnerRecharge_args)that);
      return false;
    }

    public boolean equals(addPartnerRecharge_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerRecharge = true && this.isSetPartnerRecharge();
      boolean that_present_partnerRecharge = true && that.isSetPartnerRecharge();
      if (this_present_partnerRecharge || that_present_partnerRecharge) {
        if (!(this_present_partnerRecharge && that_present_partnerRecharge))
          return false;
        if (!this.partnerRecharge.equals(that.partnerRecharge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPartnerRecharge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerRecharge()).compareTo(other.isSetPartnerRecharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerRecharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRecharge, other.partnerRecharge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPartnerRecharge_args(");
      boolean first = true;

      sb.append("partnerRecharge:");
      if (this.partnerRecharge == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerRecharge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (partnerRecharge != null) {
        partnerRecharge.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPartnerRecharge_argsStandardSchemeFactory implements SchemeFactory {
      public addPartnerRecharge_argsStandardScheme getScheme() {
        return new addPartnerRecharge_argsStandardScheme();
      }
    }

    private static class addPartnerRecharge_argsStandardScheme extends StandardScheme<addPartnerRecharge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPartnerRecharge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_RECHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerRecharge = new PartnerRecharge();
                struct.partnerRecharge.read(iprot);
                struct.setPartnerRechargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPartnerRecharge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerRecharge != null) {
          oprot.writeFieldBegin(PARTNER_RECHARGE_FIELD_DESC);
          struct.partnerRecharge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPartnerRecharge_argsTupleSchemeFactory implements SchemeFactory {
      public addPartnerRecharge_argsTupleScheme getScheme() {
        return new addPartnerRecharge_argsTupleScheme();
      }
    }

    private static class addPartnerRecharge_argsTupleScheme extends TupleScheme<addPartnerRecharge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPartnerRecharge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerRecharge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerRecharge()) {
          struct.partnerRecharge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPartnerRecharge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerRecharge = new PartnerRecharge();
          struct.partnerRecharge.read(iprot);
          struct.setPartnerRechargeIsSet(true);
        }
      }
    }

  }

  public static class addPartnerRecharge_result implements org.apache.thrift.TBase<addPartnerRecharge_result, addPartnerRecharge_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPartnerRecharge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPartnerRecharge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPartnerRecharge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPartnerRecharge_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPartnerRecharge_result.class, metaDataMap);
    }

    public addPartnerRecharge_result() {
    }

    public addPartnerRecharge_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPartnerRecharge_result(addPartnerRecharge_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addPartnerRecharge_result deepCopy() {
      return new addPartnerRecharge_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addPartnerRecharge_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPartnerRecharge_result)
        return this.equals((addPartnerRecharge_result)that);
      return false;
    }

    public boolean equals(addPartnerRecharge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPartnerRecharge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPartnerRecharge_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPartnerRecharge_resultStandardSchemeFactory implements SchemeFactory {
      public addPartnerRecharge_resultStandardScheme getScheme() {
        return new addPartnerRecharge_resultStandardScheme();
      }
    }

    private static class addPartnerRecharge_resultStandardScheme extends StandardScheme<addPartnerRecharge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPartnerRecharge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPartnerRecharge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPartnerRecharge_resultTupleSchemeFactory implements SchemeFactory {
      public addPartnerRecharge_resultTupleScheme getScheme() {
        return new addPartnerRecharge_resultTupleScheme();
      }
    }

    private static class addPartnerRecharge_resultTupleScheme extends TupleScheme<addPartnerRecharge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPartnerRecharge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPartnerRecharge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class modifyRefund_args implements org.apache.thrift.TBase<modifyRefund_args, modifyRefund_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyRefund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyRefund_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAY_SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("paySerialNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REFUND_SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("refundSerialNumber", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyRefund_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public long amount; // required
    public String paySerialNumber; // required
    public String refundSerialNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      AMOUNT((short)2, "amount"),
      PAY_SERIAL_NUMBER((short)3, "paySerialNumber"),
      REFUND_SERIAL_NUMBER((short)4, "refundSerialNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // AMOUNT
            return AMOUNT;
          case 3: // PAY_SERIAL_NUMBER
            return PAY_SERIAL_NUMBER;
          case 4: // REFUND_SERIAL_NUMBER
            return REFUND_SERIAL_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAY_SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("paySerialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REFUND_SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("refundSerialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyRefund_args.class, metaDataMap);
    }

    public modifyRefund_args() {
    }

    public modifyRefund_args(
      String partnerId,
      long amount,
      String paySerialNumber,
      String refundSerialNumber)
    {
      this();
      this.partnerId = partnerId;
      this.amount = amount;
      setAmountIsSet(true);
      this.paySerialNumber = paySerialNumber;
      this.refundSerialNumber = refundSerialNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyRefund_args(modifyRefund_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      this.amount = other.amount;
      if (other.isSetPaySerialNumber()) {
        this.paySerialNumber = other.paySerialNumber;
      }
      if (other.isSetRefundSerialNumber()) {
        this.refundSerialNumber = other.refundSerialNumber;
      }
    }

    public modifyRefund_args deepCopy() {
      return new modifyRefund_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      setAmountIsSet(false);
      this.amount = 0;
      this.paySerialNumber = null;
      this.refundSerialNumber = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public modifyRefund_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public long getAmount() {
      return this.amount;
    }

    public modifyRefund_args setAmount(long amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public String getPaySerialNumber() {
      return this.paySerialNumber;
    }

    public modifyRefund_args setPaySerialNumber(String paySerialNumber) {
      this.paySerialNumber = paySerialNumber;
      return this;
    }

    public void unsetPaySerialNumber() {
      this.paySerialNumber = null;
    }

    /** Returns true if field paySerialNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPaySerialNumber() {
      return this.paySerialNumber != null;
    }

    public void setPaySerialNumberIsSet(boolean value) {
      if (!value) {
        this.paySerialNumber = null;
      }
    }

    public String getRefundSerialNumber() {
      return this.refundSerialNumber;
    }

    public modifyRefund_args setRefundSerialNumber(String refundSerialNumber) {
      this.refundSerialNumber = refundSerialNumber;
      return this;
    }

    public void unsetRefundSerialNumber() {
      this.refundSerialNumber = null;
    }

    /** Returns true if field refundSerialNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundSerialNumber() {
      return this.refundSerialNumber != null;
    }

    public void setRefundSerialNumberIsSet(boolean value) {
      if (!value) {
        this.refundSerialNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Long)value);
        }
        break;

      case PAY_SERIAL_NUMBER:
        if (value == null) {
          unsetPaySerialNumber();
        } else {
          setPaySerialNumber((String)value);
        }
        break;

      case REFUND_SERIAL_NUMBER:
        if (value == null) {
          unsetRefundSerialNumber();
        } else {
          setRefundSerialNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case AMOUNT:
        return Long.valueOf(getAmount());

      case PAY_SERIAL_NUMBER:
        return getPaySerialNumber();

      case REFUND_SERIAL_NUMBER:
        return getRefundSerialNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case AMOUNT:
        return isSetAmount();
      case PAY_SERIAL_NUMBER:
        return isSetPaySerialNumber();
      case REFUND_SERIAL_NUMBER:
        return isSetRefundSerialNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyRefund_args)
        return this.equals((modifyRefund_args)that);
      return false;
    }

    public boolean equals(modifyRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_paySerialNumber = true && this.isSetPaySerialNumber();
      boolean that_present_paySerialNumber = true && that.isSetPaySerialNumber();
      if (this_present_paySerialNumber || that_present_paySerialNumber) {
        if (!(this_present_paySerialNumber && that_present_paySerialNumber))
          return false;
        if (!this.paySerialNumber.equals(that.paySerialNumber))
          return false;
      }

      boolean this_present_refundSerialNumber = true && this.isSetRefundSerialNumber();
      boolean that_present_refundSerialNumber = true && that.isSetRefundSerialNumber();
      if (this_present_refundSerialNumber || that_present_refundSerialNumber) {
        if (!(this_present_refundSerialNumber && that_present_refundSerialNumber))
          return false;
        if (!this.refundSerialNumber.equals(that.refundSerialNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaySerialNumber()).compareTo(other.isSetPaySerialNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaySerialNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paySerialNumber, other.paySerialNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefundSerialNumber()).compareTo(other.isSetRefundSerialNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundSerialNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundSerialNumber, other.refundSerialNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyRefund_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("paySerialNumber:");
      if (this.paySerialNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.paySerialNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("refundSerialNumber:");
      if (this.refundSerialNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.refundSerialNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyRefund_argsStandardSchemeFactory implements SchemeFactory {
      public modifyRefund_argsStandardScheme getScheme() {
        return new modifyRefund_argsStandardScheme();
      }
    }

    private static class modifyRefund_argsStandardScheme extends StandardScheme<modifyRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.amount = iprot.readI64();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAY_SERIAL_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paySerialNumber = iprot.readString();
                struct.setPaySerialNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFUND_SERIAL_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.refundSerialNumber = iprot.readString();
                struct.setRefundSerialNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.amount);
        oprot.writeFieldEnd();
        if (struct.paySerialNumber != null) {
          oprot.writeFieldBegin(PAY_SERIAL_NUMBER_FIELD_DESC);
          oprot.writeString(struct.paySerialNumber);
          oprot.writeFieldEnd();
        }
        if (struct.refundSerialNumber != null) {
          oprot.writeFieldBegin(REFUND_SERIAL_NUMBER_FIELD_DESC);
          oprot.writeString(struct.refundSerialNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyRefund_argsTupleSchemeFactory implements SchemeFactory {
      public modifyRefund_argsTupleScheme getScheme() {
        return new modifyRefund_argsTupleScheme();
      }
    }

    private static class modifyRefund_argsTupleScheme extends TupleScheme<modifyRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetAmount()) {
          optionals.set(1);
        }
        if (struct.isSetPaySerialNumber()) {
          optionals.set(2);
        }
        if (struct.isSetRefundSerialNumber()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetAmount()) {
          oprot.writeI64(struct.amount);
        }
        if (struct.isSetPaySerialNumber()) {
          oprot.writeString(struct.paySerialNumber);
        }
        if (struct.isSetRefundSerialNumber()) {
          oprot.writeString(struct.refundSerialNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.amount = iprot.readI64();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.paySerialNumber = iprot.readString();
          struct.setPaySerialNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.refundSerialNumber = iprot.readString();
          struct.setRefundSerialNumberIsSet(true);
        }
      }
    }

  }

  public static class modifyRefund_result implements org.apache.thrift.TBase<modifyRefund_result, modifyRefund_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyRefund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyRefund_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyRefund_result.class, metaDataMap);
    }

    public modifyRefund_result() {
    }

    public modifyRefund_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyRefund_result(modifyRefund_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public modifyRefund_result deepCopy() {
      return new modifyRefund_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public modifyRefund_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyRefund_result)
        return this.equals((modifyRefund_result)that);
      return false;
    }

    public boolean equals(modifyRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyRefund_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyRefund_resultStandardSchemeFactory implements SchemeFactory {
      public modifyRefund_resultStandardScheme getScheme() {
        return new modifyRefund_resultStandardScheme();
      }
    }

    private static class modifyRefund_resultStandardScheme extends StandardScheme<modifyRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyRefund_resultTupleSchemeFactory implements SchemeFactory {
      public modifyRefund_resultTupleScheme getScheme() {
        return new modifyRefund_resultTupleScheme();
      }
    }

    private static class modifyRefund_resultTupleScheme extends TupleScheme<modifyRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendPrize_args implements org.apache.thrift.TBase<sendPrize_args, sendPrize_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendPrize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPrize_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPrize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPrize_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public long amount; // required
    public String serialNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      AMOUNT((short)2, "amount"),
      SERIAL_NUMBER((short)3, "serialNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // AMOUNT
            return AMOUNT;
          case 3: // SERIAL_NUMBER
            return SERIAL_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPrize_args.class, metaDataMap);
    }

    public sendPrize_args() {
    }

    public sendPrize_args(
      String partnerId,
      long amount,
      String serialNumber)
    {
      this();
      this.partnerId = partnerId;
      this.amount = amount;
      setAmountIsSet(true);
      this.serialNumber = serialNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPrize_args(sendPrize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      this.amount = other.amount;
      if (other.isSetSerialNumber()) {
        this.serialNumber = other.serialNumber;
      }
    }

    public sendPrize_args deepCopy() {
      return new sendPrize_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      setAmountIsSet(false);
      this.amount = 0;
      this.serialNumber = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public sendPrize_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public long getAmount() {
      return this.amount;
    }

    public sendPrize_args setAmount(long amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public String getSerialNumber() {
      return this.serialNumber;
    }

    public sendPrize_args setSerialNumber(String serialNumber) {
      this.serialNumber = serialNumber;
      return this;
    }

    public void unsetSerialNumber() {
      this.serialNumber = null;
    }

    /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetSerialNumber() {
      return this.serialNumber != null;
    }

    public void setSerialNumberIsSet(boolean value) {
      if (!value) {
        this.serialNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Long)value);
        }
        break;

      case SERIAL_NUMBER:
        if (value == null) {
          unsetSerialNumber();
        } else {
          setSerialNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case AMOUNT:
        return Long.valueOf(getAmount());

      case SERIAL_NUMBER:
        return getSerialNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case AMOUNT:
        return isSetAmount();
      case SERIAL_NUMBER:
        return isSetSerialNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPrize_args)
        return this.equals((sendPrize_args)that);
      return false;
    }

    public boolean equals(sendPrize_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_serialNumber = true && this.isSetSerialNumber();
      boolean that_present_serialNumber = true && that.isSetSerialNumber();
      if (this_present_serialNumber || that_present_serialNumber) {
        if (!(this_present_serialNumber && that_present_serialNumber))
          return false;
        if (!this.serialNumber.equals(that.serialNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendPrize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSerialNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPrize_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serialNumber:");
      if (this.serialNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.serialNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPrize_argsStandardSchemeFactory implements SchemeFactory {
      public sendPrize_argsStandardScheme getScheme() {
        return new sendPrize_argsStandardScheme();
      }
    }

    private static class sendPrize_argsStandardScheme extends StandardScheme<sendPrize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPrize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.amount = iprot.readI64();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERIAL_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serialNumber = iprot.readString();
                struct.setSerialNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPrize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.amount);
        oprot.writeFieldEnd();
        if (struct.serialNumber != null) {
          oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
          oprot.writeString(struct.serialNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPrize_argsTupleSchemeFactory implements SchemeFactory {
      public sendPrize_argsTupleScheme getScheme() {
        return new sendPrize_argsTupleScheme();
      }
    }

    private static class sendPrize_argsTupleScheme extends TupleScheme<sendPrize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPrize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetAmount()) {
          optionals.set(1);
        }
        if (struct.isSetSerialNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetAmount()) {
          oprot.writeI64(struct.amount);
        }
        if (struct.isSetSerialNumber()) {
          oprot.writeString(struct.serialNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPrize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.amount = iprot.readI64();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serialNumber = iprot.readString();
          struct.setSerialNumberIsSet(true);
        }
      }
    }

  }

  public static class sendPrize_result implements org.apache.thrift.TBase<sendPrize_result, sendPrize_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendPrize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPrize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPrize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPrize_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPrize_result.class, metaDataMap);
    }

    public sendPrize_result() {
    }

    public sendPrize_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPrize_result(sendPrize_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendPrize_result deepCopy() {
      return new sendPrize_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public sendPrize_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPrize_result)
        return this.equals((sendPrize_result)that);
      return false;
    }

    public boolean equals(sendPrize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendPrize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPrize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPrize_resultStandardSchemeFactory implements SchemeFactory {
      public sendPrize_resultStandardScheme getScheme() {
        return new sendPrize_resultStandardScheme();
      }
    }

    private static class sendPrize_resultStandardScheme extends StandardScheme<sendPrize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPrize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPrize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPrize_resultTupleSchemeFactory implements SchemeFactory {
      public sendPrize_resultTupleScheme getScheme() {
        return new sendPrize_resultTupleScheme();
      }
    }

    private static class sendPrize_resultTupleScheme extends TupleScheme<sendPrize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPrize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPrize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countPartnerRechargeByDate_args implements org.apache.thrift.TBase<countPartnerRechargeByDate_args, countPartnerRechargeByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<countPartnerRechargeByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countPartnerRechargeByDate_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countPartnerRechargeByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countPartnerRechargeByDate_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String dateTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      DATE_TIME((short)2, "dateTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // DATE_TIME
            return DATE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countPartnerRechargeByDate_args.class, metaDataMap);
    }

    public countPartnerRechargeByDate_args() {
    }

    public countPartnerRechargeByDate_args(
      String partnerId,
      String dateTime)
    {
      this();
      this.partnerId = partnerId;
      this.dateTime = dateTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countPartnerRechargeByDate_args(countPartnerRechargeByDate_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetDateTime()) {
        this.dateTime = other.dateTime;
      }
    }

    public countPartnerRechargeByDate_args deepCopy() {
      return new countPartnerRechargeByDate_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.dateTime = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public countPartnerRechargeByDate_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getDateTime() {
      return this.dateTime;
    }

    public countPartnerRechargeByDate_args setDateTime(String dateTime) {
      this.dateTime = dateTime;
      return this;
    }

    public void unsetDateTime() {
      this.dateTime = null;
    }

    /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetDateTime() {
      return this.dateTime != null;
    }

    public void setDateTimeIsSet(boolean value) {
      if (!value) {
        this.dateTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case DATE_TIME:
        if (value == null) {
          unsetDateTime();
        } else {
          setDateTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case DATE_TIME:
        return getDateTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case DATE_TIME:
        return isSetDateTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countPartnerRechargeByDate_args)
        return this.equals((countPartnerRechargeByDate_args)that);
      return false;
    }

    public boolean equals(countPartnerRechargeByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_dateTime = true && this.isSetDateTime();
      boolean that_present_dateTime = true && that.isSetDateTime();
      if (this_present_dateTime || that_present_dateTime) {
        if (!(this_present_dateTime && that_present_dateTime))
          return false;
        if (!this.dateTime.equals(that.dateTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(countPartnerRechargeByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(other.isSetDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, other.dateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countPartnerRechargeByDate_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateTime:");
      if (this.dateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.dateTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countPartnerRechargeByDate_argsStandardSchemeFactory implements SchemeFactory {
      public countPartnerRechargeByDate_argsStandardScheme getScheme() {
        return new countPartnerRechargeByDate_argsStandardScheme();
      }
    }

    private static class countPartnerRechargeByDate_argsStandardScheme extends StandardScheme<countPartnerRechargeByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countPartnerRechargeByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dateTime = iprot.readString();
                struct.setDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countPartnerRechargeByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.dateTime != null) {
          oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
          oprot.writeString(struct.dateTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countPartnerRechargeByDate_argsTupleSchemeFactory implements SchemeFactory {
      public countPartnerRechargeByDate_argsTupleScheme getScheme() {
        return new countPartnerRechargeByDate_argsTupleScheme();
      }
    }

    private static class countPartnerRechargeByDate_argsTupleScheme extends TupleScheme<countPartnerRechargeByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countPartnerRechargeByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetDateTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetDateTime()) {
          oprot.writeString(struct.dateTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countPartnerRechargeByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dateTime = iprot.readString();
          struct.setDateTimeIsSet(true);
        }
      }
    }

  }

  public static class countPartnerRechargeByDate_result implements org.apache.thrift.TBase<countPartnerRechargeByDate_result, countPartnerRechargeByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<countPartnerRechargeByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countPartnerRechargeByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countPartnerRechargeByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countPartnerRechargeByDate_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countPartnerRechargeByDate_result.class, metaDataMap);
    }

    public countPartnerRechargeByDate_result() {
    }

    public countPartnerRechargeByDate_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countPartnerRechargeByDate_result(countPartnerRechargeByDate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countPartnerRechargeByDate_result deepCopy() {
      return new countPartnerRechargeByDate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public countPartnerRechargeByDate_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countPartnerRechargeByDate_result)
        return this.equals((countPartnerRechargeByDate_result)that);
      return false;
    }

    public boolean equals(countPartnerRechargeByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(countPartnerRechargeByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countPartnerRechargeByDate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countPartnerRechargeByDate_resultStandardSchemeFactory implements SchemeFactory {
      public countPartnerRechargeByDate_resultStandardScheme getScheme() {
        return new countPartnerRechargeByDate_resultStandardScheme();
      }
    }

    private static class countPartnerRechargeByDate_resultStandardScheme extends StandardScheme<countPartnerRechargeByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countPartnerRechargeByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countPartnerRechargeByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countPartnerRechargeByDate_resultTupleSchemeFactory implements SchemeFactory {
      public countPartnerRechargeByDate_resultTupleScheme getScheme() {
        return new countPartnerRechargeByDate_resultTupleScheme();
      }
    }

    private static class countPartnerRechargeByDate_resultTupleScheme extends TupleScheme<countPartnerRechargeByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countPartnerRechargeByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countPartnerRechargeByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createPartnerPreApply_args implements org.apache.thrift.TBase<createPartnerPreApply_args, createPartnerPreApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<createPartnerPreApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPartnerPreApply_args");

    private static final org.apache.thrift.protocol.TField PARTNER_PRE_APPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerPreApply", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createPartnerPreApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createPartnerPreApply_argsTupleSchemeFactory());
    }

    public PartnerPreApply partnerPreApply; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_PRE_APPLY((short)1, "partnerPreApply");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_PRE_APPLY
            return PARTNER_PRE_APPLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_PRE_APPLY, new org.apache.thrift.meta_data.FieldMetaData("partnerPreApply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerPreApply.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPartnerPreApply_args.class, metaDataMap);
    }

    public createPartnerPreApply_args() {
    }

    public createPartnerPreApply_args(
      PartnerPreApply partnerPreApply)
    {
      this();
      this.partnerPreApply = partnerPreApply;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPartnerPreApply_args(createPartnerPreApply_args other) {
      if (other.isSetPartnerPreApply()) {
        this.partnerPreApply = new PartnerPreApply(other.partnerPreApply);
      }
    }

    public createPartnerPreApply_args deepCopy() {
      return new createPartnerPreApply_args(this);
    }

    @Override
    public void clear() {
      this.partnerPreApply = null;
    }

    public PartnerPreApply getPartnerPreApply() {
      return this.partnerPreApply;
    }

    public createPartnerPreApply_args setPartnerPreApply(PartnerPreApply partnerPreApply) {
      this.partnerPreApply = partnerPreApply;
      return this;
    }

    public void unsetPartnerPreApply() {
      this.partnerPreApply = null;
    }

    /** Returns true if field partnerPreApply is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerPreApply() {
      return this.partnerPreApply != null;
    }

    public void setPartnerPreApplyIsSet(boolean value) {
      if (!value) {
        this.partnerPreApply = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_PRE_APPLY:
        if (value == null) {
          unsetPartnerPreApply();
        } else {
          setPartnerPreApply((PartnerPreApply)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_PRE_APPLY:
        return getPartnerPreApply();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_PRE_APPLY:
        return isSetPartnerPreApply();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createPartnerPreApply_args)
        return this.equals((createPartnerPreApply_args)that);
      return false;
    }

    public boolean equals(createPartnerPreApply_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerPreApply = true && this.isSetPartnerPreApply();
      boolean that_present_partnerPreApply = true && that.isSetPartnerPreApply();
      if (this_present_partnerPreApply || that_present_partnerPreApply) {
        if (!(this_present_partnerPreApply && that_present_partnerPreApply))
          return false;
        if (!this.partnerPreApply.equals(that.partnerPreApply))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createPartnerPreApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerPreApply()).compareTo(other.isSetPartnerPreApply());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerPreApply()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerPreApply, other.partnerPreApply);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createPartnerPreApply_args(");
      boolean first = true;

      sb.append("partnerPreApply:");
      if (this.partnerPreApply == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerPreApply);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (partnerPreApply != null) {
        partnerPreApply.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPartnerPreApply_argsStandardSchemeFactory implements SchemeFactory {
      public createPartnerPreApply_argsStandardScheme getScheme() {
        return new createPartnerPreApply_argsStandardScheme();
      }
    }

    private static class createPartnerPreApply_argsStandardScheme extends StandardScheme<createPartnerPreApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPartnerPreApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_PRE_APPLY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerPreApply = new PartnerPreApply();
                struct.partnerPreApply.read(iprot);
                struct.setPartnerPreApplyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPartnerPreApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerPreApply != null) {
          oprot.writeFieldBegin(PARTNER_PRE_APPLY_FIELD_DESC);
          struct.partnerPreApply.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPartnerPreApply_argsTupleSchemeFactory implements SchemeFactory {
      public createPartnerPreApply_argsTupleScheme getScheme() {
        return new createPartnerPreApply_argsTupleScheme();
      }
    }

    private static class createPartnerPreApply_argsTupleScheme extends TupleScheme<createPartnerPreApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPartnerPreApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerPreApply()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerPreApply()) {
          struct.partnerPreApply.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPartnerPreApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerPreApply = new PartnerPreApply();
          struct.partnerPreApply.read(iprot);
          struct.setPartnerPreApplyIsSet(true);
        }
      }
    }

  }

  public static class createPartnerPreApply_result implements org.apache.thrift.TBase<createPartnerPreApply_result, createPartnerPreApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<createPartnerPreApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPartnerPreApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createPartnerPreApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createPartnerPreApply_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPartnerPreApply_result.class, metaDataMap);
    }

    public createPartnerPreApply_result() {
    }

    public createPartnerPreApply_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPartnerPreApply_result(createPartnerPreApply_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createPartnerPreApply_result deepCopy() {
      return new createPartnerPreApply_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createPartnerPreApply_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createPartnerPreApply_result)
        return this.equals((createPartnerPreApply_result)that);
      return false;
    }

    public boolean equals(createPartnerPreApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createPartnerPreApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createPartnerPreApply_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPartnerPreApply_resultStandardSchemeFactory implements SchemeFactory {
      public createPartnerPreApply_resultStandardScheme getScheme() {
        return new createPartnerPreApply_resultStandardScheme();
      }
    }

    private static class createPartnerPreApply_resultStandardScheme extends StandardScheme<createPartnerPreApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPartnerPreApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPartnerPreApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPartnerPreApply_resultTupleSchemeFactory implements SchemeFactory {
      public createPartnerPreApply_resultTupleScheme getScheme() {
        return new createPartnerPreApply_resultTupleScheme();
      }
    }

    private static class createPartnerPreApply_resultTupleScheme extends TupleScheme<createPartnerPreApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPartnerPreApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPartnerPreApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPartnerPreApply_args implements org.apache.thrift.TBase<findPartnerPreApply_args, findPartnerPreApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPartnerPreApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPartnerPreApply_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_UNIQUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerUniqueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPartnerPreApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPartnerPreApply_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String partnerUniqueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      PARTNER_UNIQUE_NO((short)2, "partnerUniqueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // PARTNER_UNIQUE_NO
            return PARTNER_UNIQUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTNER_UNIQUE_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerUniqueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPartnerPreApply_args.class, metaDataMap);
    }

    public findPartnerPreApply_args() {
    }

    public findPartnerPreApply_args(
      String partnerId,
      String partnerUniqueNo)
    {
      this();
      this.partnerId = partnerId;
      this.partnerUniqueNo = partnerUniqueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPartnerPreApply_args(findPartnerPreApply_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetPartnerUniqueNo()) {
        this.partnerUniqueNo = other.partnerUniqueNo;
      }
    }

    public findPartnerPreApply_args deepCopy() {
      return new findPartnerPreApply_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.partnerUniqueNo = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public findPartnerPreApply_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getPartnerUniqueNo() {
      return this.partnerUniqueNo;
    }

    public findPartnerPreApply_args setPartnerUniqueNo(String partnerUniqueNo) {
      this.partnerUniqueNo = partnerUniqueNo;
      return this;
    }

    public void unsetPartnerUniqueNo() {
      this.partnerUniqueNo = null;
    }

    /** Returns true if field partnerUniqueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerUniqueNo() {
      return this.partnerUniqueNo != null;
    }

    public void setPartnerUniqueNoIsSet(boolean value) {
      if (!value) {
        this.partnerUniqueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case PARTNER_UNIQUE_NO:
        if (value == null) {
          unsetPartnerUniqueNo();
        } else {
          setPartnerUniqueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case PARTNER_UNIQUE_NO:
        return getPartnerUniqueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case PARTNER_UNIQUE_NO:
        return isSetPartnerUniqueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPartnerPreApply_args)
        return this.equals((findPartnerPreApply_args)that);
      return false;
    }

    public boolean equals(findPartnerPreApply_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_partnerUniqueNo = true && this.isSetPartnerUniqueNo();
      boolean that_present_partnerUniqueNo = true && that.isSetPartnerUniqueNo();
      if (this_present_partnerUniqueNo || that_present_partnerUniqueNo) {
        if (!(this_present_partnerUniqueNo && that_present_partnerUniqueNo))
          return false;
        if (!this.partnerUniqueNo.equals(that.partnerUniqueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findPartnerPreApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerUniqueNo()).compareTo(other.isSetPartnerUniqueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerUniqueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerUniqueNo, other.partnerUniqueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPartnerPreApply_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerUniqueNo:");
      if (this.partnerUniqueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerUniqueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPartnerPreApply_argsStandardSchemeFactory implements SchemeFactory {
      public findPartnerPreApply_argsStandardScheme getScheme() {
        return new findPartnerPreApply_argsStandardScheme();
      }
    }

    private static class findPartnerPreApply_argsStandardScheme extends StandardScheme<findPartnerPreApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPartnerPreApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_UNIQUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerUniqueNo = iprot.readString();
                struct.setPartnerUniqueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPartnerPreApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.partnerUniqueNo != null) {
          oprot.writeFieldBegin(PARTNER_UNIQUE_NO_FIELD_DESC);
          oprot.writeString(struct.partnerUniqueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPartnerPreApply_argsTupleSchemeFactory implements SchemeFactory {
      public findPartnerPreApply_argsTupleScheme getScheme() {
        return new findPartnerPreApply_argsTupleScheme();
      }
    }

    private static class findPartnerPreApply_argsTupleScheme extends TupleScheme<findPartnerPreApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPartnerPreApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerUniqueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetPartnerUniqueNo()) {
          oprot.writeString(struct.partnerUniqueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPartnerPreApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerUniqueNo = iprot.readString();
          struct.setPartnerUniqueNoIsSet(true);
        }
      }
    }

  }

  public static class findPartnerPreApply_result implements org.apache.thrift.TBase<findPartnerPreApply_result, findPartnerPreApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPartnerPreApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPartnerPreApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPartnerPreApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPartnerPreApply_resultTupleSchemeFactory());
    }

    public PartnerPreApply success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerPreApply.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPartnerPreApply_result.class, metaDataMap);
    }

    public findPartnerPreApply_result() {
    }

    public findPartnerPreApply_result(
      PartnerPreApply success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPartnerPreApply_result(findPartnerPreApply_result other) {
      if (other.isSetSuccess()) {
        this.success = new PartnerPreApply(other.success);
      }
    }

    public findPartnerPreApply_result deepCopy() {
      return new findPartnerPreApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PartnerPreApply getSuccess() {
      return this.success;
    }

    public findPartnerPreApply_result setSuccess(PartnerPreApply success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PartnerPreApply)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPartnerPreApply_result)
        return this.equals((findPartnerPreApply_result)that);
      return false;
    }

    public boolean equals(findPartnerPreApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findPartnerPreApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPartnerPreApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPartnerPreApply_resultStandardSchemeFactory implements SchemeFactory {
      public findPartnerPreApply_resultStandardScheme getScheme() {
        return new findPartnerPreApply_resultStandardScheme();
      }
    }

    private static class findPartnerPreApply_resultStandardScheme extends StandardScheme<findPartnerPreApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPartnerPreApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PartnerPreApply();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPartnerPreApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPartnerPreApply_resultTupleSchemeFactory implements SchemeFactory {
      public findPartnerPreApply_resultTupleScheme getScheme() {
        return new findPartnerPreApply_resultTupleScheme();
      }
    }

    private static class findPartnerPreApply_resultTupleScheme extends TupleScheme<findPartnerPreApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPartnerPreApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPartnerPreApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PartnerPreApply();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartnerPreApplyList_args implements org.apache.thrift.TBase<getPartnerPreApplyList_args, getPartnerPreApplyList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerPreApplyList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerPreApplyList_args");

    private static final org.apache.thrift.protocol.TField PARTNER_PRE_APPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerPreApply", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerPreApplyList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerPreApplyList_argsTupleSchemeFactory());
    }

    public PartnerPreApply partnerPreApply; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_PRE_APPLY((short)1, "partnerPreApply"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_PRE_APPLY
            return PARTNER_PRE_APPLY;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_PRE_APPLY, new org.apache.thrift.meta_data.FieldMetaData("partnerPreApply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerPreApply.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerPreApplyList_args.class, metaDataMap);
    }

    public getPartnerPreApplyList_args() {
    }

    public getPartnerPreApplyList_args(
      PartnerPreApply partnerPreApply,
      int currentPage,
      int pageSize)
    {
      this();
      this.partnerPreApply = partnerPreApply;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerPreApplyList_args(getPartnerPreApplyList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerPreApply()) {
        this.partnerPreApply = new PartnerPreApply(other.partnerPreApply);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getPartnerPreApplyList_args deepCopy() {
      return new getPartnerPreApplyList_args(this);
    }

    @Override
    public void clear() {
      this.partnerPreApply = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public PartnerPreApply getPartnerPreApply() {
      return this.partnerPreApply;
    }

    public getPartnerPreApplyList_args setPartnerPreApply(PartnerPreApply partnerPreApply) {
      this.partnerPreApply = partnerPreApply;
      return this;
    }

    public void unsetPartnerPreApply() {
      this.partnerPreApply = null;
    }

    /** Returns true if field partnerPreApply is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerPreApply() {
      return this.partnerPreApply != null;
    }

    public void setPartnerPreApplyIsSet(boolean value) {
      if (!value) {
        this.partnerPreApply = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getPartnerPreApplyList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getPartnerPreApplyList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_PRE_APPLY:
        if (value == null) {
          unsetPartnerPreApply();
        } else {
          setPartnerPreApply((PartnerPreApply)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_PRE_APPLY:
        return getPartnerPreApply();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_PRE_APPLY:
        return isSetPartnerPreApply();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerPreApplyList_args)
        return this.equals((getPartnerPreApplyList_args)that);
      return false;
    }

    public boolean equals(getPartnerPreApplyList_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerPreApply = true && this.isSetPartnerPreApply();
      boolean that_present_partnerPreApply = true && that.isSetPartnerPreApply();
      if (this_present_partnerPreApply || that_present_partnerPreApply) {
        if (!(this_present_partnerPreApply && that_present_partnerPreApply))
          return false;
        if (!this.partnerPreApply.equals(that.partnerPreApply))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerPreApplyList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerPreApply()).compareTo(other.isSetPartnerPreApply());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerPreApply()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerPreApply, other.partnerPreApply);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerPreApplyList_args(");
      boolean first = true;

      sb.append("partnerPreApply:");
      if (this.partnerPreApply == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerPreApply);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (partnerPreApply != null) {
        partnerPreApply.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerPreApplyList_argsStandardSchemeFactory implements SchemeFactory {
      public getPartnerPreApplyList_argsStandardScheme getScheme() {
        return new getPartnerPreApplyList_argsStandardScheme();
      }
    }

    private static class getPartnerPreApplyList_argsStandardScheme extends StandardScheme<getPartnerPreApplyList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerPreApplyList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_PRE_APPLY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.partnerPreApply = new PartnerPreApply();
                struct.partnerPreApply.read(iprot);
                struct.setPartnerPreApplyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerPreApplyList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerPreApply != null) {
          oprot.writeFieldBegin(PARTNER_PRE_APPLY_FIELD_DESC);
          struct.partnerPreApply.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerPreApplyList_argsTupleSchemeFactory implements SchemeFactory {
      public getPartnerPreApplyList_argsTupleScheme getScheme() {
        return new getPartnerPreApplyList_argsTupleScheme();
      }
    }

    private static class getPartnerPreApplyList_argsTupleScheme extends TupleScheme<getPartnerPreApplyList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerPreApplyList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerPreApply()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartnerPreApply()) {
          struct.partnerPreApply.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerPreApplyList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partnerPreApply = new PartnerPreApply();
          struct.partnerPreApply.read(iprot);
          struct.setPartnerPreApplyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getPartnerPreApplyList_result implements org.apache.thrift.TBase<getPartnerPreApplyList_result, getPartnerPreApplyList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerPreApplyList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerPreApplyList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerPreApplyList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerPreApplyList_resultTupleSchemeFactory());
    }

    public PartnerPreApplyData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerPreApplyData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerPreApplyList_result.class, metaDataMap);
    }

    public getPartnerPreApplyList_result() {
    }

    public getPartnerPreApplyList_result(
      PartnerPreApplyData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerPreApplyList_result(getPartnerPreApplyList_result other) {
      if (other.isSetSuccess()) {
        this.success = new PartnerPreApplyData(other.success);
      }
    }

    public getPartnerPreApplyList_result deepCopy() {
      return new getPartnerPreApplyList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PartnerPreApplyData getSuccess() {
      return this.success;
    }

    public getPartnerPreApplyList_result setSuccess(PartnerPreApplyData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PartnerPreApplyData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerPreApplyList_result)
        return this.equals((getPartnerPreApplyList_result)that);
      return false;
    }

    public boolean equals(getPartnerPreApplyList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerPreApplyList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerPreApplyList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerPreApplyList_resultStandardSchemeFactory implements SchemeFactory {
      public getPartnerPreApplyList_resultStandardScheme getScheme() {
        return new getPartnerPreApplyList_resultStandardScheme();
      }
    }

    private static class getPartnerPreApplyList_resultStandardScheme extends StandardScheme<getPartnerPreApplyList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerPreApplyList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PartnerPreApplyData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerPreApplyList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerPreApplyList_resultTupleSchemeFactory implements SchemeFactory {
      public getPartnerPreApplyList_resultTupleScheme getScheme() {
        return new getPartnerPreApplyList_resultTupleScheme();
      }
    }

    private static class getPartnerPreApplyList_resultTupleScheme extends TupleScheme<getPartnerPreApplyList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerPreApplyList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerPreApplyList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PartnerPreApplyData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class auditPartnerPreApply_args implements org.apache.thrift.TBase<auditPartnerPreApply_args, auditPartnerPreApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditPartnerPreApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditPartnerPreApply_args");

    private static final org.apache.thrift.protocol.TField PRE_APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preApplyId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditPartnerPreApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditPartnerPreApply_argsTupleSchemeFactory());
    }

    public long preApplyId; // required
    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRE_APPLY_ID((short)1, "preApplyId"),
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRE_APPLY_ID
            return PRE_APPLY_ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREAPPLYID_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRE_APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("preApplyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditPartnerPreApply_args.class, metaDataMap);
    }

    public auditPartnerPreApply_args() {
    }

    public auditPartnerPreApply_args(
      long preApplyId,
      int status)
    {
      this();
      this.preApplyId = preApplyId;
      setPreApplyIdIsSet(true);
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditPartnerPreApply_args(auditPartnerPreApply_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.preApplyId = other.preApplyId;
      this.status = other.status;
    }

    public auditPartnerPreApply_args deepCopy() {
      return new auditPartnerPreApply_args(this);
    }

    @Override
    public void clear() {
      setPreApplyIdIsSet(false);
      this.preApplyId = 0;
      setStatusIsSet(false);
      this.status = 0;
    }

    public long getPreApplyId() {
      return this.preApplyId;
    }

    public auditPartnerPreApply_args setPreApplyId(long preApplyId) {
      this.preApplyId = preApplyId;
      setPreApplyIdIsSet(true);
      return this;
    }

    public void unsetPreApplyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREAPPLYID_ISSET_ID);
    }

    /** Returns true if field preApplyId is set (has been assigned a value) and false otherwise */
    public boolean isSetPreApplyId() {
      return EncodingUtils.testBit(__isset_bitfield, __PREAPPLYID_ISSET_ID);
    }

    public void setPreApplyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREAPPLYID_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public auditPartnerPreApply_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRE_APPLY_ID:
        if (value == null) {
          unsetPreApplyId();
        } else {
          setPreApplyId((Long)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRE_APPLY_ID:
        return Long.valueOf(getPreApplyId());

      case STATUS:
        return Integer.valueOf(getStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRE_APPLY_ID:
        return isSetPreApplyId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditPartnerPreApply_args)
        return this.equals((auditPartnerPreApply_args)that);
      return false;
    }

    public boolean equals(auditPartnerPreApply_args that) {
      if (that == null)
        return false;

      boolean this_present_preApplyId = true;
      boolean that_present_preApplyId = true;
      if (this_present_preApplyId || that_present_preApplyId) {
        if (!(this_present_preApplyId && that_present_preApplyId))
          return false;
        if (this.preApplyId != that.preApplyId)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(auditPartnerPreApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPreApplyId()).compareTo(other.isSetPreApplyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPreApplyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preApplyId, other.preApplyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditPartnerPreApply_args(");
      boolean first = true;

      sb.append("preApplyId:");
      sb.append(this.preApplyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditPartnerPreApply_argsStandardSchemeFactory implements SchemeFactory {
      public auditPartnerPreApply_argsStandardScheme getScheme() {
        return new auditPartnerPreApply_argsStandardScheme();
      }
    }

    private static class auditPartnerPreApply_argsStandardScheme extends StandardScheme<auditPartnerPreApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditPartnerPreApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRE_APPLY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.preApplyId = iprot.readI64();
                struct.setPreApplyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditPartnerPreApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRE_APPLY_ID_FIELD_DESC);
        oprot.writeI64(struct.preApplyId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditPartnerPreApply_argsTupleSchemeFactory implements SchemeFactory {
      public auditPartnerPreApply_argsTupleScheme getScheme() {
        return new auditPartnerPreApply_argsTupleScheme();
      }
    }

    private static class auditPartnerPreApply_argsTupleScheme extends TupleScheme<auditPartnerPreApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditPartnerPreApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPreApplyId()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPreApplyId()) {
          oprot.writeI64(struct.preApplyId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditPartnerPreApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.preApplyId = iprot.readI64();
          struct.setPreApplyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class auditPartnerPreApply_result implements org.apache.thrift.TBase<auditPartnerPreApply_result, auditPartnerPreApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditPartnerPreApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditPartnerPreApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditPartnerPreApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditPartnerPreApply_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditPartnerPreApply_result.class, metaDataMap);
    }

    public auditPartnerPreApply_result() {
    }

    public auditPartnerPreApply_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditPartnerPreApply_result(auditPartnerPreApply_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public auditPartnerPreApply_result deepCopy() {
      return new auditPartnerPreApply_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public auditPartnerPreApply_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditPartnerPreApply_result)
        return this.equals((auditPartnerPreApply_result)that);
      return false;
    }

    public boolean equals(auditPartnerPreApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(auditPartnerPreApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditPartnerPreApply_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditPartnerPreApply_resultStandardSchemeFactory implements SchemeFactory {
      public auditPartnerPreApply_resultStandardScheme getScheme() {
        return new auditPartnerPreApply_resultStandardScheme();
      }
    }

    private static class auditPartnerPreApply_resultStandardScheme extends StandardScheme<auditPartnerPreApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditPartnerPreApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditPartnerPreApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditPartnerPreApply_resultTupleSchemeFactory implements SchemeFactory {
      public auditPartnerPreApply_resultTupleScheme getScheme() {
        return new auditPartnerPreApply_resultTupleScheme();
      }
    }

    private static class auditPartnerPreApply_resultTupleScheme extends TupleScheme<auditPartnerPreApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditPartnerPreApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditPartnerPreApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statisticRecharge_args implements org.apache.thrift.TBase<statisticRecharge_args, statisticRecharge_args._Fields>, java.io.Serializable, Cloneable, Comparable<statisticRecharge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticRecharge_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticRecharge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticRecharge_argsTupleSchemeFactory());
    }

    public String date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticRecharge_args.class, metaDataMap);
    }

    public statisticRecharge_args() {
    }

    public statisticRecharge_args(
      String date)
    {
      this();
      this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticRecharge_args(statisticRecharge_args other) {
      if (other.isSetDate()) {
        this.date = other.date;
      }
    }

    public statisticRecharge_args deepCopy() {
      return new statisticRecharge_args(this);
    }

    @Override
    public void clear() {
      this.date = null;
    }

    public String getDate() {
      return this.date;
    }

    public statisticRecharge_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticRecharge_args)
        return this.equals((statisticRecharge_args)that);
      return false;
    }

    public boolean equals(statisticRecharge_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticRecharge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticRecharge_args(");
      boolean first = true;

      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticRecharge_argsStandardSchemeFactory implements SchemeFactory {
      public statisticRecharge_argsStandardScheme getScheme() {
        return new statisticRecharge_argsStandardScheme();
      }
    }

    private static class statisticRecharge_argsStandardScheme extends StandardScheme<statisticRecharge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticRecharge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticRecharge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticRecharge_argsTupleSchemeFactory implements SchemeFactory {
      public statisticRecharge_argsTupleScheme getScheme() {
        return new statisticRecharge_argsTupleScheme();
      }
    }

    private static class statisticRecharge_argsTupleScheme extends TupleScheme<statisticRecharge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticRecharge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticRecharge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class statisticRecharge_result implements org.apache.thrift.TBase<statisticRecharge_result, statisticRecharge_result._Fields>, java.io.Serializable, Cloneable, Comparable<statisticRecharge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statisticRecharge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statisticRecharge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statisticRecharge_resultTupleSchemeFactory());
    }

    public Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statisticRecharge_result.class, metaDataMap);
    }

    public statisticRecharge_result() {
    }

    public statisticRecharge_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statisticRecharge_result(statisticRecharge_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>(other.success);
        this.success = __this__success;
      }
    }

    public statisticRecharge_result deepCopy() {
      return new statisticRecharge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public statisticRecharge_result setSuccess(Map<String,Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statisticRecharge_result)
        return this.equals((statisticRecharge_result)that);
      return false;
    }

    public boolean equals(statisticRecharge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(statisticRecharge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statisticRecharge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statisticRecharge_resultStandardSchemeFactory implements SchemeFactory {
      public statisticRecharge_resultStandardScheme getScheme() {
        return new statisticRecharge_resultStandardScheme();
      }
    }

    private static class statisticRecharge_resultStandardScheme extends StandardScheme<statisticRecharge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statisticRecharge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map24.size);
                  for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                  {
                    String _key26;
                    long _val27;
                    _key26 = iprot.readString();
                    _val27 = iprot.readI64();
                    struct.success.put(_key26, _val27);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statisticRecharge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter28 : struct.success.entrySet())
            {
              oprot.writeString(_iter28.getKey());
              oprot.writeI64(_iter28.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statisticRecharge_resultTupleSchemeFactory implements SchemeFactory {
      public statisticRecharge_resultTupleScheme getScheme() {
        return new statisticRecharge_resultTupleScheme();
      }
    }

    private static class statisticRecharge_resultTupleScheme extends TupleScheme<statisticRecharge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statisticRecharge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter29 : struct.success.entrySet())
            {
              oprot.writeString(_iter29.getKey());
              oprot.writeI64(_iter29.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statisticRecharge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map30.size);
            for (int _i31 = 0; _i31 < _map30.size; ++_i31)
            {
              String _key32;
              long _val33;
              _key32 = iprot.readString();
              _val33 = iprot.readI64();
              struct.success.put(_key32, _val33);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class totalAccountMoney_args implements org.apache.thrift.TBase<totalAccountMoney_args, totalAccountMoney_args._Fields>, java.io.Serializable, Cloneable, Comparable<totalAccountMoney_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("totalAccountMoney_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new totalAccountMoney_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new totalAccountMoney_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(totalAccountMoney_args.class, metaDataMap);
    }

    public totalAccountMoney_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public totalAccountMoney_args(totalAccountMoney_args other) {
    }

    public totalAccountMoney_args deepCopy() {
      return new totalAccountMoney_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof totalAccountMoney_args)
        return this.equals((totalAccountMoney_args)that);
      return false;
    }

    public boolean equals(totalAccountMoney_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(totalAccountMoney_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("totalAccountMoney_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class totalAccountMoney_argsStandardSchemeFactory implements SchemeFactory {
      public totalAccountMoney_argsStandardScheme getScheme() {
        return new totalAccountMoney_argsStandardScheme();
      }
    }

    private static class totalAccountMoney_argsStandardScheme extends StandardScheme<totalAccountMoney_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, totalAccountMoney_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, totalAccountMoney_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class totalAccountMoney_argsTupleSchemeFactory implements SchemeFactory {
      public totalAccountMoney_argsTupleScheme getScheme() {
        return new totalAccountMoney_argsTupleScheme();
      }
    }

    private static class totalAccountMoney_argsTupleScheme extends TupleScheme<totalAccountMoney_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, totalAccountMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, totalAccountMoney_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class totalAccountMoney_result implements org.apache.thrift.TBase<totalAccountMoney_result, totalAccountMoney_result._Fields>, java.io.Serializable, Cloneable, Comparable<totalAccountMoney_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("totalAccountMoney_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new totalAccountMoney_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new totalAccountMoney_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(totalAccountMoney_result.class, metaDataMap);
    }

    public totalAccountMoney_result() {
    }

    public totalAccountMoney_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public totalAccountMoney_result(totalAccountMoney_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public totalAccountMoney_result deepCopy() {
      return new totalAccountMoney_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public totalAccountMoney_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof totalAccountMoney_result)
        return this.equals((totalAccountMoney_result)that);
      return false;
    }

    public boolean equals(totalAccountMoney_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(totalAccountMoney_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("totalAccountMoney_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class totalAccountMoney_resultStandardSchemeFactory implements SchemeFactory {
      public totalAccountMoney_resultStandardScheme getScheme() {
        return new totalAccountMoney_resultStandardScheme();
      }
    }

    private static class totalAccountMoney_resultStandardScheme extends StandardScheme<totalAccountMoney_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, totalAccountMoney_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, totalAccountMoney_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class totalAccountMoney_resultTupleSchemeFactory implements SchemeFactory {
      public totalAccountMoney_resultTupleScheme getScheme() {
        return new totalAccountMoney_resultTupleScheme();
      }
    }

    private static class totalAccountMoney_resultTupleScheme extends TupleScheme<totalAccountMoney_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, totalAccountMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, totalAccountMoney_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class totalPaylogNum_args implements org.apache.thrift.TBase<totalPaylogNum_args, totalPaylogNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<totalPaylogNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("totalPaylogNum_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new totalPaylogNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new totalPaylogNum_argsTupleSchemeFactory());
    }

    public String date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(totalPaylogNum_args.class, metaDataMap);
    }

    public totalPaylogNum_args() {
    }

    public totalPaylogNum_args(
      String date)
    {
      this();
      this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public totalPaylogNum_args(totalPaylogNum_args other) {
      if (other.isSetDate()) {
        this.date = other.date;
      }
    }

    public totalPaylogNum_args deepCopy() {
      return new totalPaylogNum_args(this);
    }

    @Override
    public void clear() {
      this.date = null;
    }

    public String getDate() {
      return this.date;
    }

    public totalPaylogNum_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof totalPaylogNum_args)
        return this.equals((totalPaylogNum_args)that);
      return false;
    }

    public boolean equals(totalPaylogNum_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(totalPaylogNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("totalPaylogNum_args(");
      boolean first = true;

      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class totalPaylogNum_argsStandardSchemeFactory implements SchemeFactory {
      public totalPaylogNum_argsStandardScheme getScheme() {
        return new totalPaylogNum_argsStandardScheme();
      }
    }

    private static class totalPaylogNum_argsStandardScheme extends StandardScheme<totalPaylogNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, totalPaylogNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, totalPaylogNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class totalPaylogNum_argsTupleSchemeFactory implements SchemeFactory {
      public totalPaylogNum_argsTupleScheme getScheme() {
        return new totalPaylogNum_argsTupleScheme();
      }
    }

    private static class totalPaylogNum_argsTupleScheme extends TupleScheme<totalPaylogNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, totalPaylogNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, totalPaylogNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class totalPaylogNum_result implements org.apache.thrift.TBase<totalPaylogNum_result, totalPaylogNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<totalPaylogNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("totalPaylogNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new totalPaylogNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new totalPaylogNum_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(totalPaylogNum_result.class, metaDataMap);
    }

    public totalPaylogNum_result() {
    }

    public totalPaylogNum_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public totalPaylogNum_result(totalPaylogNum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public totalPaylogNum_result deepCopy() {
      return new totalPaylogNum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public totalPaylogNum_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof totalPaylogNum_result)
        return this.equals((totalPaylogNum_result)that);
      return false;
    }

    public boolean equals(totalPaylogNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(totalPaylogNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("totalPaylogNum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class totalPaylogNum_resultStandardSchemeFactory implements SchemeFactory {
      public totalPaylogNum_resultStandardScheme getScheme() {
        return new totalPaylogNum_resultStandardScheme();
      }
    }

    private static class totalPaylogNum_resultStandardScheme extends StandardScheme<totalPaylogNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, totalPaylogNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, totalPaylogNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class totalPaylogNum_resultTupleSchemeFactory implements SchemeFactory {
      public totalPaylogNum_resultTupleScheme getScheme() {
        return new totalPaylogNum_resultTupleScheme();
      }
    }

    private static class totalPaylogNum_resultTupleScheme extends TupleScheme<totalPaylogNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, totalPaylogNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, totalPaylogNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
