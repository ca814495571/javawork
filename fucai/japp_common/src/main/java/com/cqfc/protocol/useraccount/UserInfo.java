/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REGISTER_TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTerminal", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PARTNER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerUserId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PRIZE_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("prizePassword", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField USER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAccount", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField USER_HANDSEL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userHandselList", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  public long userId; // required
  public String nickName; // required
  public int cardType; // required
  public String cardNo; // required
  public String mobile; // required
  public String email; // required
  public String userName; // required
  public int sex; // required
  public String birthday; // required
  public int age; // required
  public int userType; // required
  public int registerTerminal; // required
  public int accountType; // required
  public String partnerId; // required
  public String partnerUserId; // required
  public String prizePassword; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public UserAccount userAccount; // required
  public List<UserHandsel> userHandselList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    NICK_NAME((short)2, "nickName"),
    CARD_TYPE((short)3, "cardType"),
    CARD_NO((short)4, "cardNo"),
    MOBILE((short)5, "mobile"),
    EMAIL((short)6, "email"),
    USER_NAME((short)7, "userName"),
    SEX((short)8, "sex"),
    BIRTHDAY((short)9, "birthday"),
    AGE((short)10, "age"),
    USER_TYPE((short)11, "userType"),
    REGISTER_TERMINAL((short)12, "registerTerminal"),
    ACCOUNT_TYPE((short)13, "accountType"),
    PARTNER_ID((short)14, "partnerId"),
    PARTNER_USER_ID((short)15, "partnerUserId"),
    PRIZE_PASSWORD((short)16, "prizePassword"),
    CREATE_TIME((short)17, "createTime"),
    LAST_UPDATE_TIME((short)18, "lastUpdateTime"),
    USER_ACCOUNT((short)19, "userAccount"),
    USER_HANDSEL_LIST((short)20, "userHandselList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // NICK_NAME
          return NICK_NAME;
        case 3: // CARD_TYPE
          return CARD_TYPE;
        case 4: // CARD_NO
          return CARD_NO;
        case 5: // MOBILE
          return MOBILE;
        case 6: // EMAIL
          return EMAIL;
        case 7: // USER_NAME
          return USER_NAME;
        case 8: // SEX
          return SEX;
        case 9: // BIRTHDAY
          return BIRTHDAY;
        case 10: // AGE
          return AGE;
        case 11: // USER_TYPE
          return USER_TYPE;
        case 12: // REGISTER_TERMINAL
          return REGISTER_TERMINAL;
        case 13: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 14: // PARTNER_ID
          return PARTNER_ID;
        case 15: // PARTNER_USER_ID
          return PARTNER_USER_ID;
        case 16: // PRIZE_PASSWORD
          return PRIZE_PASSWORD;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 19: // USER_ACCOUNT
          return USER_ACCOUNT;
        case 20: // USER_HANDSEL_LIST
          return USER_HANDSEL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __CARDTYPE_ISSET_ID = 1;
  private static final int __SEX_ISSET_ID = 2;
  private static final int __AGE_ISSET_ID = 3;
  private static final int __USERTYPE_ISSET_ID = 4;
  private static final int __REGISTERTERMINAL_ISSET_ID = 5;
  private static final int __ACCOUNTTYPE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTER_TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("registerTerminal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIZE_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("prizePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("userAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserAccount.class)));
    tmpMap.put(_Fields.USER_HANDSEL_LIST, new org.apache.thrift.meta_data.FieldMetaData("userHandselList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserHandsel.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    long userId,
    String nickName,
    int cardType,
    String cardNo,
    String mobile,
    String email,
    String userName,
    int sex,
    String birthday,
    int age,
    int userType,
    int registerTerminal,
    int accountType,
    String partnerId,
    String partnerUserId,
    String prizePassword,
    String createTime,
    String lastUpdateTime,
    UserAccount userAccount,
    List<UserHandsel> userHandselList)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.nickName = nickName;
    this.cardType = cardType;
    setCardTypeIsSet(true);
    this.cardNo = cardNo;
    this.mobile = mobile;
    this.email = email;
    this.userName = userName;
    this.sex = sex;
    setSexIsSet(true);
    this.birthday = birthday;
    this.age = age;
    setAgeIsSet(true);
    this.userType = userType;
    setUserTypeIsSet(true);
    this.registerTerminal = registerTerminal;
    setRegisterTerminalIsSet(true);
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    this.partnerId = partnerId;
    this.partnerUserId = partnerUserId;
    this.prizePassword = prizePassword;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.userAccount = userAccount;
    this.userHandselList = userHandselList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    this.cardType = other.cardType;
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    this.sex = other.sex;
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    this.age = other.age;
    this.userType = other.userType;
    this.registerTerminal = other.registerTerminal;
    this.accountType = other.accountType;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetPartnerUserId()) {
      this.partnerUserId = other.partnerUserId;
    }
    if (other.isSetPrizePassword()) {
      this.prizePassword = other.prizePassword;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetUserAccount()) {
      this.userAccount = new UserAccount(other.userAccount);
    }
    if (other.isSetUserHandselList()) {
      List<UserHandsel> __this__userHandselList = new ArrayList<UserHandsel>(other.userHandselList.size());
      for (UserHandsel other_element : other.userHandselList) {
        __this__userHandselList.add(new UserHandsel(other_element));
      }
      this.userHandselList = __this__userHandselList;
    }
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.nickName = null;
    setCardTypeIsSet(false);
    this.cardType = 0;
    this.cardNo = null;
    this.mobile = null;
    this.email = null;
    this.userName = null;
    setSexIsSet(false);
    this.sex = 0;
    this.birthday = null;
    setAgeIsSet(false);
    this.age = 0;
    setUserTypeIsSet(false);
    this.userType = 0;
    setRegisterTerminalIsSet(false);
    this.registerTerminal = 0;
    setAccountTypeIsSet(false);
    this.accountType = 0;
    this.partnerId = null;
    this.partnerUserId = null;
    this.prizePassword = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.userAccount = null;
    this.userHandselList = null;
  }

  public long getUserId() {
    return this.userId;
  }

  public UserInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getNickName() {
    return this.nickName;
  }

  public UserInfo setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public int getCardType() {
    return this.cardType;
  }

  public UserInfo setCardType(int cardType) {
    this.cardType = cardType;
    setCardTypeIsSet(true);
    return this;
  }

  public void unsetCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __CARDTYPE_ISSET_ID);
  }

  public void setCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARDTYPE_ISSET_ID, value);
  }

  public String getCardNo() {
    return this.cardNo;
  }

  public UserInfo setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public UserInfo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserInfo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public UserInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public UserInfo setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getBirthday() {
    return this.birthday;
  }

  public UserInfo setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public UserInfo setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getUserType() {
    return this.userType;
  }

  public UserInfo setUserType(int userType) {
    this.userType = userType;
    setUserTypeIsSet(true);
    return this;
  }

  public void unsetUserType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  public void setUserTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
  }

  public int getRegisterTerminal() {
    return this.registerTerminal;
  }

  public UserInfo setRegisterTerminal(int registerTerminal) {
    this.registerTerminal = registerTerminal;
    setRegisterTerminalIsSet(true);
    return this;
  }

  public void unsetRegisterTerminal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTERTERMINAL_ISSET_ID);
  }

  /** Returns true if field registerTerminal is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterTerminal() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTERTERMINAL_ISSET_ID);
  }

  public void setRegisterTerminalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTERTERMINAL_ISSET_ID, value);
  }

  public int getAccountType() {
    return this.accountType;
  }

  public UserInfo setAccountType(int accountType) {
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    return this;
  }

  public void unsetAccountType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  public void setAccountTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID, value);
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public UserInfo setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getPartnerUserId() {
    return this.partnerUserId;
  }

  public UserInfo setPartnerUserId(String partnerUserId) {
    this.partnerUserId = partnerUserId;
    return this;
  }

  public void unsetPartnerUserId() {
    this.partnerUserId = null;
  }

  /** Returns true if field partnerUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerUserId() {
    return this.partnerUserId != null;
  }

  public void setPartnerUserIdIsSet(boolean value) {
    if (!value) {
      this.partnerUserId = null;
    }
  }

  public String getPrizePassword() {
    return this.prizePassword;
  }

  public UserInfo setPrizePassword(String prizePassword) {
    this.prizePassword = prizePassword;
    return this;
  }

  public void unsetPrizePassword() {
    this.prizePassword = null;
  }

  /** Returns true if field prizePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizePassword() {
    return this.prizePassword != null;
  }

  public void setPrizePasswordIsSet(boolean value) {
    if (!value) {
      this.prizePassword = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public UserInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public UserInfo setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public UserAccount getUserAccount() {
    return this.userAccount;
  }

  public UserInfo setUserAccount(UserAccount userAccount) {
    this.userAccount = userAccount;
    return this;
  }

  public void unsetUserAccount() {
    this.userAccount = null;
  }

  /** Returns true if field userAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAccount() {
    return this.userAccount != null;
  }

  public void setUserAccountIsSet(boolean value) {
    if (!value) {
      this.userAccount = null;
    }
  }

  public int getUserHandselListSize() {
    return (this.userHandselList == null) ? 0 : this.userHandselList.size();
  }

  public java.util.Iterator<UserHandsel> getUserHandselListIterator() {
    return (this.userHandselList == null) ? null : this.userHandselList.iterator();
  }

  public void addToUserHandselList(UserHandsel elem) {
    if (this.userHandselList == null) {
      this.userHandselList = new ArrayList<UserHandsel>();
    }
    this.userHandselList.add(elem);
  }

  public List<UserHandsel> getUserHandselList() {
    return this.userHandselList;
  }

  public UserInfo setUserHandselList(List<UserHandsel> userHandselList) {
    this.userHandselList = userHandselList;
    return this;
  }

  public void unsetUserHandselList() {
    this.userHandselList = null;
  }

  /** Returns true if field userHandselList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserHandselList() {
    return this.userHandselList != null;
  }

  public void setUserHandselListIsSet(boolean value) {
    if (!value) {
      this.userHandselList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((Integer)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((Integer)value);
      }
      break;

    case REGISTER_TERMINAL:
      if (value == null) {
        unsetRegisterTerminal();
      } else {
        setRegisterTerminal((Integer)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccountType();
      } else {
        setAccountType((Integer)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case PARTNER_USER_ID:
      if (value == null) {
        unsetPartnerUserId();
      } else {
        setPartnerUserId((String)value);
      }
      break;

    case PRIZE_PASSWORD:
      if (value == null) {
        unsetPrizePassword();
      } else {
        setPrizePassword((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case USER_ACCOUNT:
      if (value == null) {
        unsetUserAccount();
      } else {
        setUserAccount((UserAccount)value);
      }
      break;

    case USER_HANDSEL_LIST:
      if (value == null) {
        unsetUserHandselList();
      } else {
        setUserHandselList((List<UserHandsel>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case NICK_NAME:
      return getNickName();

    case CARD_TYPE:
      return Integer.valueOf(getCardType());

    case CARD_NO:
      return getCardNo();

    case MOBILE:
      return getMobile();

    case EMAIL:
      return getEmail();

    case USER_NAME:
      return getUserName();

    case SEX:
      return Integer.valueOf(getSex());

    case BIRTHDAY:
      return getBirthday();

    case AGE:
      return Integer.valueOf(getAge());

    case USER_TYPE:
      return Integer.valueOf(getUserType());

    case REGISTER_TERMINAL:
      return Integer.valueOf(getRegisterTerminal());

    case ACCOUNT_TYPE:
      return Integer.valueOf(getAccountType());

    case PARTNER_ID:
      return getPartnerId();

    case PARTNER_USER_ID:
      return getPartnerUserId();

    case PRIZE_PASSWORD:
      return getPrizePassword();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case USER_ACCOUNT:
      return getUserAccount();

    case USER_HANDSEL_LIST:
      return getUserHandselList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case NICK_NAME:
      return isSetNickName();
    case CARD_TYPE:
      return isSetCardType();
    case CARD_NO:
      return isSetCardNo();
    case MOBILE:
      return isSetMobile();
    case EMAIL:
      return isSetEmail();
    case USER_NAME:
      return isSetUserName();
    case SEX:
      return isSetSex();
    case BIRTHDAY:
      return isSetBirthday();
    case AGE:
      return isSetAge();
    case USER_TYPE:
      return isSetUserType();
    case REGISTER_TERMINAL:
      return isSetRegisterTerminal();
    case ACCOUNT_TYPE:
      return isSetAccountType();
    case PARTNER_ID:
      return isSetPartnerId();
    case PARTNER_USER_ID:
      return isSetPartnerUserId();
    case PRIZE_PASSWORD:
      return isSetPrizePassword();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case USER_ACCOUNT:
      return isSetUserAccount();
    case USER_HANDSEL_LIST:
      return isSetUserHandselList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_cardType = true;
    boolean that_present_cardType = true;
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (this.cardType != that.cardType)
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_userType = true;
    boolean that_present_userType = true;
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (this.userType != that.userType)
        return false;
    }

    boolean this_present_registerTerminal = true;
    boolean that_present_registerTerminal = true;
    if (this_present_registerTerminal || that_present_registerTerminal) {
      if (!(this_present_registerTerminal && that_present_registerTerminal))
        return false;
      if (this.registerTerminal != that.registerTerminal)
        return false;
    }

    boolean this_present_accountType = true;
    boolean that_present_accountType = true;
    if (this_present_accountType || that_present_accountType) {
      if (!(this_present_accountType && that_present_accountType))
        return false;
      if (this.accountType != that.accountType)
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_partnerUserId = true && this.isSetPartnerUserId();
    boolean that_present_partnerUserId = true && that.isSetPartnerUserId();
    if (this_present_partnerUserId || that_present_partnerUserId) {
      if (!(this_present_partnerUserId && that_present_partnerUserId))
        return false;
      if (!this.partnerUserId.equals(that.partnerUserId))
        return false;
    }

    boolean this_present_prizePassword = true && this.isSetPrizePassword();
    boolean that_present_prizePassword = true && that.isSetPrizePassword();
    if (this_present_prizePassword || that_present_prizePassword) {
      if (!(this_present_prizePassword && that_present_prizePassword))
        return false;
      if (!this.prizePassword.equals(that.prizePassword))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_userAccount = true && this.isSetUserAccount();
    boolean that_present_userAccount = true && that.isSetUserAccount();
    if (this_present_userAccount || that_present_userAccount) {
      if (!(this_present_userAccount && that_present_userAccount))
        return false;
      if (!this.userAccount.equals(that.userAccount))
        return false;
    }

    boolean this_present_userHandselList = true && this.isSetUserHandselList();
    boolean that_present_userHandselList = true && that.isSetUserHandselList();
    if (this_present_userHandselList || that_present_userHandselList) {
      if (!(this_present_userHandselList && that_present_userHandselList))
        return false;
      if (!this.userHandselList.equals(that.userHandselList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterTerminal()).compareTo(other.isSetRegisterTerminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTerminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTerminal, other.registerTerminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountType()).compareTo(other.isSetAccountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, other.accountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerUserId()).compareTo(other.isSetPartnerUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerUserId, other.partnerUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizePassword()).compareTo(other.isSetPrizePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizePassword, other.prizePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAccount()).compareTo(other.isSetUserAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAccount, other.userAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserHandselList()).compareTo(other.isSetUserHandselList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserHandselList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userHandselList, other.userHandselList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardType:");
    sb.append(this.cardType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    sb.append(this.userType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerTerminal:");
    sb.append(this.registerTerminal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountType:");
    sb.append(this.accountType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerUserId:");
    if (this.partnerUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizePassword:");
    if (this.prizePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.prizePassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userAccount:");
    if (this.userAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.userAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userHandselList:");
    if (this.userHandselList == null) {
      sb.append("null");
    } else {
      sb.append(this.userHandselList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userAccount != null) {
      userAccount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cardType = iprot.readI32();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userType = iprot.readI32();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REGISTER_TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registerTerminal = iprot.readI32();
              struct.setRegisterTerminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountType = iprot.readI32();
              struct.setAccountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARTNER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerUserId = iprot.readString();
              struct.setPartnerUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRIZE_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prizePassword = iprot.readString();
              struct.setPrizePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USER_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userAccount = new UserAccount();
              struct.userAccount.read(iprot);
              struct.setUserAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // USER_HANDSEL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.userHandselList = new ArrayList<UserHandsel>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  UserHandsel _elem10;
                  _elem10 = new UserHandsel();
                  _elem10.read(iprot);
                  struct.userHandselList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setUserHandselListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cardType);
      oprot.writeFieldEnd();
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.userType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGISTER_TERMINAL_FIELD_DESC);
      oprot.writeI32(struct.registerTerminal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.accountType);
      oprot.writeFieldEnd();
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerUserId != null) {
        oprot.writeFieldBegin(PARTNER_USER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerUserId);
        oprot.writeFieldEnd();
      }
      if (struct.prizePassword != null) {
        oprot.writeFieldBegin(PRIZE_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.prizePassword);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.userAccount != null) {
        oprot.writeFieldBegin(USER_ACCOUNT_FIELD_DESC);
        struct.userAccount.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.userHandselList != null) {
        oprot.writeFieldBegin(USER_HANDSEL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userHandselList.size()));
          for (UserHandsel _iter11 : struct.userHandselList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetNickName()) {
        optionals.set(1);
      }
      if (struct.isSetCardType()) {
        optionals.set(2);
      }
      if (struct.isSetCardNo()) {
        optionals.set(3);
      }
      if (struct.isSetMobile()) {
        optionals.set(4);
      }
      if (struct.isSetEmail()) {
        optionals.set(5);
      }
      if (struct.isSetUserName()) {
        optionals.set(6);
      }
      if (struct.isSetSex()) {
        optionals.set(7);
      }
      if (struct.isSetBirthday()) {
        optionals.set(8);
      }
      if (struct.isSetAge()) {
        optionals.set(9);
      }
      if (struct.isSetUserType()) {
        optionals.set(10);
      }
      if (struct.isSetRegisterTerminal()) {
        optionals.set(11);
      }
      if (struct.isSetAccountType()) {
        optionals.set(12);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(13);
      }
      if (struct.isSetPartnerUserId()) {
        optionals.set(14);
      }
      if (struct.isSetPrizePassword()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(17);
      }
      if (struct.isSetUserAccount()) {
        optionals.set(18);
      }
      if (struct.isSetUserHandselList()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetCardType()) {
        oprot.writeI32(struct.cardType);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetUserType()) {
        oprot.writeI32(struct.userType);
      }
      if (struct.isSetRegisterTerminal()) {
        oprot.writeI32(struct.registerTerminal);
      }
      if (struct.isSetAccountType()) {
        oprot.writeI32(struct.accountType);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetPartnerUserId()) {
        oprot.writeString(struct.partnerUserId);
      }
      if (struct.isSetPrizePassword()) {
        oprot.writeString(struct.prizePassword);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetUserAccount()) {
        struct.userAccount.write(oprot);
      }
      if (struct.isSetUserHandselList()) {
        {
          oprot.writeI32(struct.userHandselList.size());
          for (UserHandsel _iter12 : struct.userHandselList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cardType = iprot.readI32();
        struct.setCardTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(5)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userType = iprot.readI32();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.registerTerminal = iprot.readI32();
        struct.setRegisterTerminalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.accountType = iprot.readI32();
        struct.setAccountTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.partnerUserId = iprot.readString();
        struct.setPartnerUserIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.prizePassword = iprot.readString();
        struct.setPrizePasswordIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.userAccount = new UserAccount();
        struct.userAccount.read(iprot);
        struct.setUserAccountIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userHandselList = new ArrayList<UserHandsel>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            UserHandsel _elem15;
            _elem15 = new UserHandsel();
            _elem15.read(iprot);
            struct.userHandselList.add(_elem15);
          }
        }
        struct.setUserHandselListIsSet(true);
      }
    }
  }

}

