/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.businesscontroller;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SportPrint implements org.apache.thrift.TBase<SportPrint, SportPrint._Fields>, java.io.Serializable, Cloneable, Comparable<SportPrint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SportPrint");

  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRINT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("printStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRINT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("printTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MATCH_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SportPrintStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SportPrintTupleSchemeFactory());
  }

  public long orderNo; // required
  public int printStatus; // required
  public String ticketNo; // required
  public String printTime; // required
  public List<PrintMatch> matchList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_NO((short)1, "orderNo"),
    PRINT_STATUS((short)2, "printStatus"),
    TICKET_NO((short)3, "ticketNo"),
    PRINT_TIME((short)4, "printTime"),
    MATCH_LIST((short)5, "matchList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_NO
          return ORDER_NO;
        case 2: // PRINT_STATUS
          return PRINT_STATUS;
        case 3: // TICKET_NO
          return TICKET_NO;
        case 4: // PRINT_TIME
          return PRINT_TIME;
        case 5: // MATCH_LIST
          return MATCH_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERNO_ISSET_ID = 0;
  private static final int __PRINTSTATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRINT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("printStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TICKET_NO, new org.apache.thrift.meta_data.FieldMetaData("ticketNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINT_TIME, new org.apache.thrift.meta_data.FieldMetaData("printTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrintMatch.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SportPrint.class, metaDataMap);
  }

  public SportPrint() {
  }

  public SportPrint(
    long orderNo,
    int printStatus,
    String ticketNo,
    String printTime,
    List<PrintMatch> matchList)
  {
    this();
    this.orderNo = orderNo;
    setOrderNoIsSet(true);
    this.printStatus = printStatus;
    setPrintStatusIsSet(true);
    this.ticketNo = ticketNo;
    this.printTime = printTime;
    this.matchList = matchList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SportPrint(SportPrint other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderNo = other.orderNo;
    this.printStatus = other.printStatus;
    if (other.isSetTicketNo()) {
      this.ticketNo = other.ticketNo;
    }
    if (other.isSetPrintTime()) {
      this.printTime = other.printTime;
    }
    if (other.isSetMatchList()) {
      List<PrintMatch> __this__matchList = new ArrayList<PrintMatch>(other.matchList.size());
      for (PrintMatch other_element : other.matchList) {
        __this__matchList.add(new PrintMatch(other_element));
      }
      this.matchList = __this__matchList;
    }
  }

  public SportPrint deepCopy() {
    return new SportPrint(this);
  }

  @Override
  public void clear() {
    setOrderNoIsSet(false);
    this.orderNo = 0;
    setPrintStatusIsSet(false);
    this.printStatus = 0;
    this.ticketNo = null;
    this.printTime = null;
    this.matchList = null;
  }

  public long getOrderNo() {
    return this.orderNo;
  }

  public SportPrint setOrderNo(long orderNo) {
    this.orderNo = orderNo;
    setOrderNoIsSet(true);
    return this;
  }

  public void unsetOrderNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERNO_ISSET_ID);
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERNO_ISSET_ID);
  }

  public void setOrderNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERNO_ISSET_ID, value);
  }

  public int getPrintStatus() {
    return this.printStatus;
  }

  public SportPrint setPrintStatus(int printStatus) {
    this.printStatus = printStatus;
    setPrintStatusIsSet(true);
    return this;
  }

  public void unsetPrintStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINTSTATUS_ISSET_ID);
  }

  /** Returns true if field printStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINTSTATUS_ISSET_ID);
  }

  public void setPrintStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINTSTATUS_ISSET_ID, value);
  }

  public String getTicketNo() {
    return this.ticketNo;
  }

  public SportPrint setTicketNo(String ticketNo) {
    this.ticketNo = ticketNo;
    return this;
  }

  public void unsetTicketNo() {
    this.ticketNo = null;
  }

  /** Returns true if field ticketNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketNo() {
    return this.ticketNo != null;
  }

  public void setTicketNoIsSet(boolean value) {
    if (!value) {
      this.ticketNo = null;
    }
  }

  public String getPrintTime() {
    return this.printTime;
  }

  public SportPrint setPrintTime(String printTime) {
    this.printTime = printTime;
    return this;
  }

  public void unsetPrintTime() {
    this.printTime = null;
  }

  /** Returns true if field printTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintTime() {
    return this.printTime != null;
  }

  public void setPrintTimeIsSet(boolean value) {
    if (!value) {
      this.printTime = null;
    }
  }

  public int getMatchListSize() {
    return (this.matchList == null) ? 0 : this.matchList.size();
  }

  public java.util.Iterator<PrintMatch> getMatchListIterator() {
    return (this.matchList == null) ? null : this.matchList.iterator();
  }

  public void addToMatchList(PrintMatch elem) {
    if (this.matchList == null) {
      this.matchList = new ArrayList<PrintMatch>();
    }
    this.matchList.add(elem);
  }

  public List<PrintMatch> getMatchList() {
    return this.matchList;
  }

  public SportPrint setMatchList(List<PrintMatch> matchList) {
    this.matchList = matchList;
    return this;
  }

  public void unsetMatchList() {
    this.matchList = null;
  }

  /** Returns true if field matchList is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchList() {
    return this.matchList != null;
  }

  public void setMatchListIsSet(boolean value) {
    if (!value) {
      this.matchList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((Long)value);
      }
      break;

    case PRINT_STATUS:
      if (value == null) {
        unsetPrintStatus();
      } else {
        setPrintStatus((Integer)value);
      }
      break;

    case TICKET_NO:
      if (value == null) {
        unsetTicketNo();
      } else {
        setTicketNo((String)value);
      }
      break;

    case PRINT_TIME:
      if (value == null) {
        unsetPrintTime();
      } else {
        setPrintTime((String)value);
      }
      break;

    case MATCH_LIST:
      if (value == null) {
        unsetMatchList();
      } else {
        setMatchList((List<PrintMatch>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_NO:
      return Long.valueOf(getOrderNo());

    case PRINT_STATUS:
      return Integer.valueOf(getPrintStatus());

    case TICKET_NO:
      return getTicketNo();

    case PRINT_TIME:
      return getPrintTime();

    case MATCH_LIST:
      return getMatchList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_NO:
      return isSetOrderNo();
    case PRINT_STATUS:
      return isSetPrintStatus();
    case TICKET_NO:
      return isSetTicketNo();
    case PRINT_TIME:
      return isSetPrintTime();
    case MATCH_LIST:
      return isSetMatchList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SportPrint)
      return this.equals((SportPrint)that);
    return false;
  }

  public boolean equals(SportPrint that) {
    if (that == null)
      return false;

    boolean this_present_orderNo = true;
    boolean that_present_orderNo = true;
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (this.orderNo != that.orderNo)
        return false;
    }

    boolean this_present_printStatus = true;
    boolean that_present_printStatus = true;
    if (this_present_printStatus || that_present_printStatus) {
      if (!(this_present_printStatus && that_present_printStatus))
        return false;
      if (this.printStatus != that.printStatus)
        return false;
    }

    boolean this_present_ticketNo = true && this.isSetTicketNo();
    boolean that_present_ticketNo = true && that.isSetTicketNo();
    if (this_present_ticketNo || that_present_ticketNo) {
      if (!(this_present_ticketNo && that_present_ticketNo))
        return false;
      if (!this.ticketNo.equals(that.ticketNo))
        return false;
    }

    boolean this_present_printTime = true && this.isSetPrintTime();
    boolean that_present_printTime = true && that.isSetPrintTime();
    if (this_present_printTime || that_present_printTime) {
      if (!(this_present_printTime && that_present_printTime))
        return false;
      if (!this.printTime.equals(that.printTime))
        return false;
    }

    boolean this_present_matchList = true && this.isSetMatchList();
    boolean that_present_matchList = true && that.isSetMatchList();
    if (this_present_matchList || that_present_matchList) {
      if (!(this_present_matchList && that_present_matchList))
        return false;
      if (!this.matchList.equals(that.matchList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SportPrint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintStatus()).compareTo(other.isSetPrintStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printStatus, other.printStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketNo()).compareTo(other.isSetTicketNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketNo, other.ticketNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintTime()).compareTo(other.isSetPrintTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printTime, other.printTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchList()).compareTo(other.isSetMatchList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchList, other.matchList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SportPrint(");
    boolean first = true;

    sb.append("orderNo:");
    sb.append(this.orderNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("printStatus:");
    sb.append(this.printStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketNo:");
    if (this.ticketNo == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printTime:");
    if (this.printTime == null) {
      sb.append("null");
    } else {
      sb.append(this.printTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchList:");
    if (this.matchList == null) {
      sb.append("null");
    } else {
      sb.append(this.matchList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SportPrintStandardSchemeFactory implements SchemeFactory {
    public SportPrintStandardScheme getScheme() {
      return new SportPrintStandardScheme();
    }
  }

  private static class SportPrintStandardScheme extends StandardScheme<SportPrint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SportPrint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderNo = iprot.readI64();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.printStatus = iprot.readI32();
              struct.setPrintStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketNo = iprot.readString();
              struct.setTicketNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRINT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.printTime = iprot.readString();
              struct.setPrintTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATCH_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.matchList = new ArrayList<PrintMatch>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  PrintMatch _elem20;
                  _elem20 = new PrintMatch();
                  _elem20.read(iprot);
                  struct.matchList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setMatchListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SportPrint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
      oprot.writeI64(struct.orderNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.printStatus);
      oprot.writeFieldEnd();
      if (struct.ticketNo != null) {
        oprot.writeFieldBegin(TICKET_NO_FIELD_DESC);
        oprot.writeString(struct.ticketNo);
        oprot.writeFieldEnd();
      }
      if (struct.printTime != null) {
        oprot.writeFieldBegin(PRINT_TIME_FIELD_DESC);
        oprot.writeString(struct.printTime);
        oprot.writeFieldEnd();
      }
      if (struct.matchList != null) {
        oprot.writeFieldBegin(MATCH_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchList.size()));
          for (PrintMatch _iter21 : struct.matchList)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SportPrintTupleSchemeFactory implements SchemeFactory {
    public SportPrintTupleScheme getScheme() {
      return new SportPrintTupleScheme();
    }
  }

  private static class SportPrintTupleScheme extends TupleScheme<SportPrint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SportPrint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderNo()) {
        optionals.set(0);
      }
      if (struct.isSetPrintStatus()) {
        optionals.set(1);
      }
      if (struct.isSetTicketNo()) {
        optionals.set(2);
      }
      if (struct.isSetPrintTime()) {
        optionals.set(3);
      }
      if (struct.isSetMatchList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrderNo()) {
        oprot.writeI64(struct.orderNo);
      }
      if (struct.isSetPrintStatus()) {
        oprot.writeI32(struct.printStatus);
      }
      if (struct.isSetTicketNo()) {
        oprot.writeString(struct.ticketNo);
      }
      if (struct.isSetPrintTime()) {
        oprot.writeString(struct.printTime);
      }
      if (struct.isSetMatchList()) {
        {
          oprot.writeI32(struct.matchList.size());
          for (PrintMatch _iter22 : struct.matchList)
          {
            _iter22.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SportPrint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.orderNo = iprot.readI64();
        struct.setOrderNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.printStatus = iprot.readI32();
        struct.setPrintStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ticketNo = iprot.readString();
        struct.setTicketNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.printTime = iprot.readString();
        struct.setPrintTimeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchList = new ArrayList<PrintMatch>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            PrintMatch _elem25;
            _elem25 = new PrintMatch();
            _elem25.read(iprot);
            struct.matchList.add(_elem25);
          }
        }
        struct.setMatchListIsSet(true);
      }
    }
  }

}

