/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partneraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerAccountLog implements org.apache.thrift.TBase<PartnerAccountLog, PartnerAccountLog._Fields>, java.io.Serializable, Cloneable, Comparable<PartnerAccountLog> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartnerAccountLog");

  private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACCOUNT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("accountAmount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REMAIN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("remainAmount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SEARCH_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchBeginTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SEARCH_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEndTime", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartnerAccountLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartnerAccountLogTupleSchemeFactory());
  }

  public int logId; // required
  public String partnerId; // required
  public int state; // required
  public long totalAmount; // required
  public long accountAmount; // required
  public long remainAmount; // required
  public String serialNumber; // required
  public String ext; // required
  public String remark; // required
  public String createTime; // required
  public String searchBeginTime; // required
  public String searchEndTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_ID((short)1, "logId"),
    PARTNER_ID((short)2, "partnerId"),
    STATE((short)3, "state"),
    TOTAL_AMOUNT((short)4, "totalAmount"),
    ACCOUNT_AMOUNT((short)5, "accountAmount"),
    REMAIN_AMOUNT((short)6, "remainAmount"),
    SERIAL_NUMBER((short)7, "serialNumber"),
    EXT((short)8, "ext"),
    REMARK((short)9, "remark"),
    CREATE_TIME((short)10, "createTime"),
    SEARCH_BEGIN_TIME((short)11, "searchBeginTime"),
    SEARCH_END_TIME((short)12, "searchEndTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_ID
          return LOG_ID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // STATE
          return STATE;
        case 4: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 5: // ACCOUNT_AMOUNT
          return ACCOUNT_AMOUNT;
        case 6: // REMAIN_AMOUNT
          return REMAIN_AMOUNT;
        case 7: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 8: // EXT
          return EXT;
        case 9: // REMARK
          return REMARK;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // SEARCH_BEGIN_TIME
          return SEARCH_BEGIN_TIME;
        case 12: // SEARCH_END_TIME
          return SEARCH_END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOGID_ISSET_ID = 0;
  private static final int __STATE_ISSET_ID = 1;
  private static final int __TOTALAMOUNT_ISSET_ID = 2;
  private static final int __ACCOUNTAMOUNT_ISSET_ID = 3;
  private static final int __REMAINAMOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_ID, new org.apache.thrift.meta_data.FieldMetaData("logId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCOUNT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("accountAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMAIN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("remainAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("searchBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("searchEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartnerAccountLog.class, metaDataMap);
  }

  public PartnerAccountLog() {
  }

  public PartnerAccountLog(
    int logId,
    String partnerId,
    int state,
    long totalAmount,
    long accountAmount,
    long remainAmount,
    String serialNumber,
    String ext,
    String remark,
    String createTime,
    String searchBeginTime,
    String searchEndTime)
  {
    this();
    this.logId = logId;
    setLogIdIsSet(true);
    this.partnerId = partnerId;
    this.state = state;
    setStateIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.accountAmount = accountAmount;
    setAccountAmountIsSet(true);
    this.remainAmount = remainAmount;
    setRemainAmountIsSet(true);
    this.serialNumber = serialNumber;
    this.ext = ext;
    this.remark = remark;
    this.createTime = createTime;
    this.searchBeginTime = searchBeginTime;
    this.searchEndTime = searchEndTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartnerAccountLog(PartnerAccountLog other) {
    __isset_bitfield = other.__isset_bitfield;
    this.logId = other.logId;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.state = other.state;
    this.totalAmount = other.totalAmount;
    this.accountAmount = other.accountAmount;
    this.remainAmount = other.remainAmount;
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetSearchBeginTime()) {
      this.searchBeginTime = other.searchBeginTime;
    }
    if (other.isSetSearchEndTime()) {
      this.searchEndTime = other.searchEndTime;
    }
  }

  public PartnerAccountLog deepCopy() {
    return new PartnerAccountLog(this);
  }

  @Override
  public void clear() {
    setLogIdIsSet(false);
    this.logId = 0;
    this.partnerId = null;
    setStateIsSet(false);
    this.state = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setAccountAmountIsSet(false);
    this.accountAmount = 0;
    setRemainAmountIsSet(false);
    this.remainAmount = 0;
    this.serialNumber = null;
    this.ext = null;
    this.remark = null;
    this.createTime = null;
    this.searchBeginTime = null;
    this.searchEndTime = null;
  }

  public int getLogId() {
    return this.logId;
  }

  public PartnerAccountLog setLogId(int logId) {
    this.logId = logId;
    setLogIdIsSet(true);
    return this;
  }

  public void unsetLogId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGID_ISSET_ID);
  }

  /** Returns true if field logId is set (has been assigned a value) and false otherwise */
  public boolean isSetLogId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGID_ISSET_ID);
  }

  public void setLogIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGID_ISSET_ID, value);
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public PartnerAccountLog setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public PartnerAccountLog setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public long getTotalAmount() {
    return this.totalAmount;
  }

  public PartnerAccountLog setTotalAmount(long totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public long getAccountAmount() {
    return this.accountAmount;
  }

  public PartnerAccountLog setAccountAmount(long accountAmount) {
    this.accountAmount = accountAmount;
    setAccountAmountIsSet(true);
    return this;
  }

  public void unsetAccountAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTAMOUNT_ISSET_ID);
  }

  /** Returns true if field accountAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTAMOUNT_ISSET_ID);
  }

  public void setAccountAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTAMOUNT_ISSET_ID, value);
  }

  public long getRemainAmount() {
    return this.remainAmount;
  }

  public PartnerAccountLog setRemainAmount(long remainAmount) {
    this.remainAmount = remainAmount;
    setRemainAmountIsSet(true);
    return this;
  }

  public void unsetRemainAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINAMOUNT_ISSET_ID);
  }

  /** Returns true if field remainAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINAMOUNT_ISSET_ID);
  }

  public void setRemainAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINAMOUNT_ISSET_ID, value);
  }

  public String getSerialNumber() {
    return this.serialNumber;
  }

  public PartnerAccountLog setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public String getExt() {
    return this.ext;
  }

  public PartnerAccountLog setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public PartnerAccountLog setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public PartnerAccountLog setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getSearchBeginTime() {
    return this.searchBeginTime;
  }

  public PartnerAccountLog setSearchBeginTime(String searchBeginTime) {
    this.searchBeginTime = searchBeginTime;
    return this;
  }

  public void unsetSearchBeginTime() {
    this.searchBeginTime = null;
  }

  /** Returns true if field searchBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchBeginTime() {
    return this.searchBeginTime != null;
  }

  public void setSearchBeginTimeIsSet(boolean value) {
    if (!value) {
      this.searchBeginTime = null;
    }
  }

  public String getSearchEndTime() {
    return this.searchEndTime;
  }

  public PartnerAccountLog setSearchEndTime(String searchEndTime) {
    this.searchEndTime = searchEndTime;
    return this;
  }

  public void unsetSearchEndTime() {
    this.searchEndTime = null;
  }

  /** Returns true if field searchEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchEndTime() {
    return this.searchEndTime != null;
  }

  public void setSearchEndTimeIsSet(boolean value) {
    if (!value) {
      this.searchEndTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOG_ID:
      if (value == null) {
        unsetLogId();
      } else {
        setLogId((Integer)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Long)value);
      }
      break;

    case ACCOUNT_AMOUNT:
      if (value == null) {
        unsetAccountAmount();
      } else {
        setAccountAmount((Long)value);
      }
      break;

    case REMAIN_AMOUNT:
      if (value == null) {
        unsetRemainAmount();
      } else {
        setRemainAmount((Long)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case SEARCH_BEGIN_TIME:
      if (value == null) {
        unsetSearchBeginTime();
      } else {
        setSearchBeginTime((String)value);
      }
      break;

    case SEARCH_END_TIME:
      if (value == null) {
        unsetSearchEndTime();
      } else {
        setSearchEndTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_ID:
      return Integer.valueOf(getLogId());

    case PARTNER_ID:
      return getPartnerId();

    case STATE:
      return Integer.valueOf(getState());

    case TOTAL_AMOUNT:
      return Long.valueOf(getTotalAmount());

    case ACCOUNT_AMOUNT:
      return Long.valueOf(getAccountAmount());

    case REMAIN_AMOUNT:
      return Long.valueOf(getRemainAmount());

    case SERIAL_NUMBER:
      return getSerialNumber();

    case EXT:
      return getExt();

    case REMARK:
      return getRemark();

    case CREATE_TIME:
      return getCreateTime();

    case SEARCH_BEGIN_TIME:
      return getSearchBeginTime();

    case SEARCH_END_TIME:
      return getSearchEndTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOG_ID:
      return isSetLogId();
    case PARTNER_ID:
      return isSetPartnerId();
    case STATE:
      return isSetState();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case ACCOUNT_AMOUNT:
      return isSetAccountAmount();
    case REMAIN_AMOUNT:
      return isSetRemainAmount();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case EXT:
      return isSetExt();
    case REMARK:
      return isSetRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case SEARCH_BEGIN_TIME:
      return isSetSearchBeginTime();
    case SEARCH_END_TIME:
      return isSetSearchEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartnerAccountLog)
      return this.equals((PartnerAccountLog)that);
    return false;
  }

  public boolean equals(PartnerAccountLog that) {
    if (that == null)
      return false;

    boolean this_present_logId = true;
    boolean that_present_logId = true;
    if (this_present_logId || that_present_logId) {
      if (!(this_present_logId && that_present_logId))
        return false;
      if (this.logId != that.logId)
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_accountAmount = true;
    boolean that_present_accountAmount = true;
    if (this_present_accountAmount || that_present_accountAmount) {
      if (!(this_present_accountAmount && that_present_accountAmount))
        return false;
      if (this.accountAmount != that.accountAmount)
        return false;
    }

    boolean this_present_remainAmount = true;
    boolean that_present_remainAmount = true;
    if (this_present_remainAmount || that_present_remainAmount) {
      if (!(this_present_remainAmount && that_present_remainAmount))
        return false;
      if (this.remainAmount != that.remainAmount)
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_searchBeginTime = true && this.isSetSearchBeginTime();
    boolean that_present_searchBeginTime = true && that.isSetSearchBeginTime();
    if (this_present_searchBeginTime || that_present_searchBeginTime) {
      if (!(this_present_searchBeginTime && that_present_searchBeginTime))
        return false;
      if (!this.searchBeginTime.equals(that.searchBeginTime))
        return false;
    }

    boolean this_present_searchEndTime = true && this.isSetSearchEndTime();
    boolean that_present_searchEndTime = true && that.isSetSearchEndTime();
    if (this_present_searchEndTime || that_present_searchEndTime) {
      if (!(this_present_searchEndTime && that_present_searchEndTime))
        return false;
      if (!this.searchEndTime.equals(that.searchEndTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PartnerAccountLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLogId()).compareTo(other.isSetLogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logId, other.logId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountAmount()).compareTo(other.isSetAccountAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountAmount, other.accountAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainAmount()).compareTo(other.isSetRemainAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainAmount, other.remainAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchBeginTime()).compareTo(other.isSetSearchBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchBeginTime, other.searchBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchEndTime()).compareTo(other.isSetSearchEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEndTime, other.searchEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartnerAccountLog(");
    boolean first = true;

    sb.append("logId:");
    sb.append(this.logId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountAmount:");
    sb.append(this.accountAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainAmount:");
    sb.append(this.remainAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchBeginTime:");
    if (this.searchBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.searchBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchEndTime:");
    if (this.searchEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.searchEndTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartnerAccountLogStandardSchemeFactory implements SchemeFactory {
    public PartnerAccountLogStandardScheme getScheme() {
      return new PartnerAccountLogStandardScheme();
    }
  }

  private static class PartnerAccountLogStandardScheme extends StandardScheme<PartnerAccountLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartnerAccountLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.logId = iprot.readI32();
              struct.setLogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalAmount = iprot.readI64();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCOUNT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountAmount = iprot.readI64();
              struct.setAccountAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMAIN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.remainAmount = iprot.readI64();
              struct.setRemainAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEARCH_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchBeginTime = iprot.readString();
              struct.setSearchBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SEARCH_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchEndTime = iprot.readString();
              struct.setSearchEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartnerAccountLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
      oprot.writeI32(struct.logId);
      oprot.writeFieldEnd();
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.accountAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.remainAmount);
      oprot.writeFieldEnd();
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.searchBeginTime != null) {
        oprot.writeFieldBegin(SEARCH_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.searchBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.searchEndTime != null) {
        oprot.writeFieldBegin(SEARCH_END_TIME_FIELD_DESC);
        oprot.writeString(struct.searchEndTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartnerAccountLogTupleSchemeFactory implements SchemeFactory {
    public PartnerAccountLogTupleScheme getScheme() {
      return new PartnerAccountLogTupleScheme();
    }
  }

  private static class PartnerAccountLogTupleScheme extends TupleScheme<PartnerAccountLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartnerAccountLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLogId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(3);
      }
      if (struct.isSetAccountAmount()) {
        optionals.set(4);
      }
      if (struct.isSetRemainAmount()) {
        optionals.set(5);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(6);
      }
      if (struct.isSetExt()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetSearchBeginTime()) {
        optionals.set(10);
      }
      if (struct.isSetSearchEndTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetLogId()) {
        oprot.writeI32(struct.logId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI64(struct.totalAmount);
      }
      if (struct.isSetAccountAmount()) {
        oprot.writeI64(struct.accountAmount);
      }
      if (struct.isSetRemainAmount()) {
        oprot.writeI64(struct.remainAmount);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetSearchBeginTime()) {
        oprot.writeString(struct.searchBeginTime);
      }
      if (struct.isSetSearchEndTime()) {
        oprot.writeString(struct.searchEndTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartnerAccountLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.logId = iprot.readI32();
        struct.setLogIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalAmount = iprot.readI64();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accountAmount = iprot.readI64();
        struct.setAccountAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remainAmount = iprot.readI64();
        struct.setRemainAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.searchBeginTime = iprot.readString();
        struct.setSearchBeginTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.searchEndTime = iprot.readString();
        struct.setSearchEndTimeIsSet(true);
      }
    }
  }

}

