/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DailyAwardCount implements org.apache.thrift.TBase<DailyAwardCount, DailyAwardCount._Fields>, java.io.Serializable, Cloneable, Comparable<DailyAwardCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DailyAwardCount");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AWARD_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("awardPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField AFTER_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("afterPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DailyAwardCountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DailyAwardCountTupleSchemeFactory());
  }

  public long id; // required
  public String partnerId; // required
  public String lotteryId; // required
  public long awardPrizeMoney; // required
  public long afterPrizeMoney; // required
  public String countTime; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PARTNER_ID((short)2, "partnerId"),
    LOTTERY_ID((short)3, "lotteryId"),
    AWARD_PRIZE_MONEY((short)4, "awardPrizeMoney"),
    AFTER_PRIZE_MONEY((short)5, "afterPrizeMoney"),
    COUNT_TIME((short)6, "countTime"),
    CREATE_TIME((short)7, "createTime"),
    LAST_UPDATE_TIME((short)8, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // LOTTERY_ID
          return LOTTERY_ID;
        case 4: // AWARD_PRIZE_MONEY
          return AWARD_PRIZE_MONEY;
        case 5: // AFTER_PRIZE_MONEY
          return AFTER_PRIZE_MONEY;
        case 6: // COUNT_TIME
          return COUNT_TIME;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AWARDPRIZEMONEY_ISSET_ID = 1;
  private static final int __AFTERPRIZEMONEY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWARD_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("awardPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AFTER_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("afterPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DailyAwardCount.class, metaDataMap);
  }

  public DailyAwardCount() {
  }

  public DailyAwardCount(
    long id,
    String partnerId,
    String lotteryId,
    long awardPrizeMoney,
    long afterPrizeMoney,
    String countTime,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.partnerId = partnerId;
    this.lotteryId = lotteryId;
    this.awardPrizeMoney = awardPrizeMoney;
    setAwardPrizeMoneyIsSet(true);
    this.afterPrizeMoney = afterPrizeMoney;
    setAfterPrizeMoneyIsSet(true);
    this.countTime = countTime;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DailyAwardCount(DailyAwardCount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    this.awardPrizeMoney = other.awardPrizeMoney;
    this.afterPrizeMoney = other.afterPrizeMoney;
    if (other.isSetCountTime()) {
      this.countTime = other.countTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public DailyAwardCount deepCopy() {
    return new DailyAwardCount(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.partnerId = null;
    this.lotteryId = null;
    setAwardPrizeMoneyIsSet(false);
    this.awardPrizeMoney = 0;
    setAfterPrizeMoneyIsSet(false);
    this.afterPrizeMoney = 0;
    this.countTime = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public long getId() {
    return this.id;
  }

  public DailyAwardCount setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public DailyAwardCount setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public DailyAwardCount setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public long getAwardPrizeMoney() {
    return this.awardPrizeMoney;
  }

  public DailyAwardCount setAwardPrizeMoney(long awardPrizeMoney) {
    this.awardPrizeMoney = awardPrizeMoney;
    setAwardPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetAwardPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field awardPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID);
  }

  public void setAwardPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID, value);
  }

  public long getAfterPrizeMoney() {
    return this.afterPrizeMoney;
  }

  public DailyAwardCount setAfterPrizeMoney(long afterPrizeMoney) {
    this.afterPrizeMoney = afterPrizeMoney;
    setAfterPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetAfterPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field afterPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AFTERPRIZEMONEY_ISSET_ID);
  }

  public void setAfterPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERPRIZEMONEY_ISSET_ID, value);
  }

  public String getCountTime() {
    return this.countTime;
  }

  public DailyAwardCount setCountTime(String countTime) {
    this.countTime = countTime;
    return this;
  }

  public void unsetCountTime() {
    this.countTime = null;
  }

  /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCountTime() {
    return this.countTime != null;
  }

  public void setCountTimeIsSet(boolean value) {
    if (!value) {
      this.countTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public DailyAwardCount setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public DailyAwardCount setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case AWARD_PRIZE_MONEY:
      if (value == null) {
        unsetAwardPrizeMoney();
      } else {
        setAwardPrizeMoney((Long)value);
      }
      break;

    case AFTER_PRIZE_MONEY:
      if (value == null) {
        unsetAfterPrizeMoney();
      } else {
        setAfterPrizeMoney((Long)value);
      }
      break;

    case COUNT_TIME:
      if (value == null) {
        unsetCountTime();
      } else {
        setCountTime((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case PARTNER_ID:
      return getPartnerId();

    case LOTTERY_ID:
      return getLotteryId();

    case AWARD_PRIZE_MONEY:
      return Long.valueOf(getAwardPrizeMoney());

    case AFTER_PRIZE_MONEY:
      return Long.valueOf(getAfterPrizeMoney());

    case COUNT_TIME:
      return getCountTime();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARTNER_ID:
      return isSetPartnerId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case AWARD_PRIZE_MONEY:
      return isSetAwardPrizeMoney();
    case AFTER_PRIZE_MONEY:
      return isSetAfterPrizeMoney();
    case COUNT_TIME:
      return isSetCountTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DailyAwardCount)
      return this.equals((DailyAwardCount)that);
    return false;
  }

  public boolean equals(DailyAwardCount that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_awardPrizeMoney = true;
    boolean that_present_awardPrizeMoney = true;
    if (this_present_awardPrizeMoney || that_present_awardPrizeMoney) {
      if (!(this_present_awardPrizeMoney && that_present_awardPrizeMoney))
        return false;
      if (this.awardPrizeMoney != that.awardPrizeMoney)
        return false;
    }

    boolean this_present_afterPrizeMoney = true;
    boolean that_present_afterPrizeMoney = true;
    if (this_present_afterPrizeMoney || that_present_afterPrizeMoney) {
      if (!(this_present_afterPrizeMoney && that_present_afterPrizeMoney))
        return false;
      if (this.afterPrizeMoney != that.afterPrizeMoney)
        return false;
    }

    boolean this_present_countTime = true && this.isSetCountTime();
    boolean that_present_countTime = true && that.isSetCountTime();
    if (this_present_countTime || that_present_countTime) {
      if (!(this_present_countTime && that_present_countTime))
        return false;
      if (!this.countTime.equals(that.countTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DailyAwardCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardPrizeMoney()).compareTo(other.isSetAwardPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardPrizeMoney, other.awardPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterPrizeMoney()).compareTo(other.isSetAfterPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterPrizeMoney, other.afterPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DailyAwardCount(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("awardPrizeMoney:");
    sb.append(this.awardPrizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterPrizeMoney:");
    sb.append(this.afterPrizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countTime:");
    if (this.countTime == null) {
      sb.append("null");
    } else {
      sb.append(this.countTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DailyAwardCountStandardSchemeFactory implements SchemeFactory {
    public DailyAwardCountStandardScheme getScheme() {
      return new DailyAwardCountStandardScheme();
    }
  }

  private static class DailyAwardCountStandardScheme extends StandardScheme<DailyAwardCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DailyAwardCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AWARD_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.awardPrizeMoney = iprot.readI64();
              struct.setAwardPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AFTER_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.afterPrizeMoney = iprot.readI64();
              struct.setAfterPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countTime = iprot.readString();
              struct.setCountTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DailyAwardCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AWARD_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.awardPrizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTER_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.afterPrizeMoney);
      oprot.writeFieldEnd();
      if (struct.countTime != null) {
        oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
        oprot.writeString(struct.countTime);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DailyAwardCountTupleSchemeFactory implements SchemeFactory {
    public DailyAwardCountTupleScheme getScheme() {
      return new DailyAwardCountTupleScheme();
    }
  }

  private static class DailyAwardCountTupleScheme extends TupleScheme<DailyAwardCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DailyAwardCount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(2);
      }
      if (struct.isSetAwardPrizeMoney()) {
        optionals.set(3);
      }
      if (struct.isSetAfterPrizeMoney()) {
        optionals.set(4);
      }
      if (struct.isSetCountTime()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetAwardPrizeMoney()) {
        oprot.writeI64(struct.awardPrizeMoney);
      }
      if (struct.isSetAfterPrizeMoney()) {
        oprot.writeI64(struct.afterPrizeMoney);
      }
      if (struct.isSetCountTime()) {
        oprot.writeString(struct.countTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DailyAwardCount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.awardPrizeMoney = iprot.readI64();
        struct.setAwardPrizeMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.afterPrizeMoney = iprot.readI64();
        struct.setAfterPrizeMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.countTime = iprot.readString();
        struct.setCountTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

