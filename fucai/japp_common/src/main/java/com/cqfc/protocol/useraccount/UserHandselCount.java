/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserHandselCount implements org.apache.thrift.TBase<UserHandselCount, UserHandselCount._Fields>, java.io.Serializable, Cloneable, Comparable<UserHandselCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserHandselCount");

  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_INVALID_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalInvalidMoney", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserHandselCountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserHandselCountTupleSchemeFactory());
  }

  public String day; // required
  public long totalMoney; // required
  public long totalInvalidMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAY((short)1, "day"),
    TOTAL_MONEY((short)2, "totalMoney"),
    TOTAL_INVALID_MONEY((short)3, "totalInvalidMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAY
          return DAY;
        case 2: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 3: // TOTAL_INVALID_MONEY
          return TOTAL_INVALID_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALMONEY_ISSET_ID = 0;
  private static final int __TOTALINVALIDMONEY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_INVALID_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalInvalidMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserHandselCount.class, metaDataMap);
  }

  public UserHandselCount() {
  }

  public UserHandselCount(
    String day,
    long totalMoney,
    long totalInvalidMoney)
  {
    this();
    this.day = day;
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.totalInvalidMoney = totalInvalidMoney;
    setTotalInvalidMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserHandselCount(UserHandselCount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDay()) {
      this.day = other.day;
    }
    this.totalMoney = other.totalMoney;
    this.totalInvalidMoney = other.totalInvalidMoney;
  }

  public UserHandselCount deepCopy() {
    return new UserHandselCount(this);
  }

  @Override
  public void clear() {
    this.day = null;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0;
    setTotalInvalidMoneyIsSet(false);
    this.totalInvalidMoney = 0;
  }

  public String getDay() {
    return this.day;
  }

  public UserHandselCount setDay(String day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public long getTotalMoney() {
    return this.totalMoney;
  }

  public UserHandselCount setTotalMoney(long totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public long getTotalInvalidMoney() {
    return this.totalInvalidMoney;
  }

  public UserHandselCount setTotalInvalidMoney(long totalInvalidMoney) {
    this.totalInvalidMoney = totalInvalidMoney;
    setTotalInvalidMoneyIsSet(true);
    return this;
  }

  public void unsetTotalInvalidMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALINVALIDMONEY_ISSET_ID);
  }

  /** Returns true if field totalInvalidMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalInvalidMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALINVALIDMONEY_ISSET_ID);
  }

  public void setTotalInvalidMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALINVALIDMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((String)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Long)value);
      }
      break;

    case TOTAL_INVALID_MONEY:
      if (value == null) {
        unsetTotalInvalidMoney();
      } else {
        setTotalInvalidMoney((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAY:
      return getDay();

    case TOTAL_MONEY:
      return Long.valueOf(getTotalMoney());

    case TOTAL_INVALID_MONEY:
      return Long.valueOf(getTotalInvalidMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAY:
      return isSetDay();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case TOTAL_INVALID_MONEY:
      return isSetTotalInvalidMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserHandselCount)
      return this.equals((UserHandselCount)that);
    return false;
  }

  public boolean equals(UserHandselCount that) {
    if (that == null)
      return false;

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_totalInvalidMoney = true;
    boolean that_present_totalInvalidMoney = true;
    if (this_present_totalInvalidMoney || that_present_totalInvalidMoney) {
      if (!(this_present_totalInvalidMoney && that_present_totalInvalidMoney))
        return false;
      if (this.totalInvalidMoney != that.totalInvalidMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserHandselCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalInvalidMoney()).compareTo(other.isSetTotalInvalidMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalInvalidMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalInvalidMoney, other.totalInvalidMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserHandselCount(");
    boolean first = true;

    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalInvalidMoney:");
    sb.append(this.totalInvalidMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserHandselCountStandardSchemeFactory implements SchemeFactory {
    public UserHandselCountStandardScheme getScheme() {
      return new UserHandselCountStandardScheme();
    }
  }

  private static class UserHandselCountStandardScheme extends StandardScheme<UserHandselCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserHandselCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.day = iprot.readString();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMoney = iprot.readI64();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_INVALID_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalInvalidMoney = iprot.readI64();
              struct.setTotalInvalidMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserHandselCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.day != null) {
        oprot.writeFieldBegin(DAY_FIELD_DESC);
        oprot.writeString(struct.day);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_INVALID_MONEY_FIELD_DESC);
      oprot.writeI64(struct.totalInvalidMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserHandselCountTupleSchemeFactory implements SchemeFactory {
    public UserHandselCountTupleScheme getScheme() {
      return new UserHandselCountTupleScheme();
    }
  }

  private static class UserHandselCountTupleScheme extends TupleScheme<UserHandselCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserHandselCount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDay()) {
        optionals.set(0);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(1);
      }
      if (struct.isSetTotalInvalidMoney()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDay()) {
        oprot.writeString(struct.day);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeI64(struct.totalMoney);
      }
      if (struct.isSetTotalInvalidMoney()) {
        oprot.writeI64(struct.totalInvalidMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserHandselCount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.day = iprot.readString();
        struct.setDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalMoney = iprot.readI64();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalInvalidMoney = iprot.readI64();
        struct.setTotalInvalidMoneyIsSet(true);
      }
    }
  }

}

