/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerService {

  public interface Iface {

    public ReturnData getLotteryPartnerList(LotteryPartner lotteryPartner, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int addLotteryPartner(LotteryPartner lotteryPartner) throws org.apache.thrift.TException;

    public LotteryPartner findLotteryPartnerById(String partnerId) throws org.apache.thrift.TException;

    public int updateState(String partnerId, int state) throws org.apache.thrift.TException;

    public boolean isPartnerAccount(String partnerId) throws org.apache.thrift.TException;

    public int updateLotteryPartner(LotteryPartner lotteryPartner, String oldPartnerId) throws org.apache.thrift.TException;

    public boolean verifyPartnerIsExist(String partnerId) throws org.apache.thrift.TException;

    public boolean verifyCanBindUser(String partnerId) throws org.apache.thrift.TException;

    public LotteryPartner findPartnerForCheck(String partnerId) throws org.apache.thrift.TException;

    public List<String> getCallBackUrlListByPartnerId(String partnerId) throws org.apache.thrift.TException;

    public List<PartnerIpAddress> getPartnerIpAddressList(String partnerId) throws org.apache.thrift.TException;

    public boolean isExistIpAddress(String partnerId, String ipAddress) throws org.apache.thrift.TException;

    public int deletePartnerByPartnerId(String partnerId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getLotteryPartnerList(LotteryPartner lotteryPartner, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addLotteryPartner(LotteryPartner lotteryPartner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findLotteryPartnerById(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateState(String partnerId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isPartnerAccount(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLotteryPartner(LotteryPartner lotteryPartner, String oldPartnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyPartnerIsExist(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyCanBindUser(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPartnerForCheck(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCallBackUrlListByPartnerId(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPartnerIpAddressList(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isExistIpAddress(String partnerId, String ipAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deletePartnerByPartnerId(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ReturnData getLotteryPartnerList(LotteryPartner lotteryPartner, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getLotteryPartnerList(lotteryPartner, currentPage, pageSize);
      return recv_getLotteryPartnerList();
    }

    public void send_getLotteryPartnerList(LotteryPartner lotteryPartner, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getLotteryPartnerList_args args = new getLotteryPartnerList_args();
      args.setLotteryPartner(lotteryPartner);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getLotteryPartnerList", args);
    }

    public ReturnData recv_getLotteryPartnerList() throws org.apache.thrift.TException
    {
      getLotteryPartnerList_result result = new getLotteryPartnerList_result();
      receiveBase(result, "getLotteryPartnerList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryPartnerList failed: unknown result");
    }

    public int addLotteryPartner(LotteryPartner lotteryPartner) throws org.apache.thrift.TException
    {
      send_addLotteryPartner(lotteryPartner);
      return recv_addLotteryPartner();
    }

    public void send_addLotteryPartner(LotteryPartner lotteryPartner) throws org.apache.thrift.TException
    {
      addLotteryPartner_args args = new addLotteryPartner_args();
      args.setLotteryPartner(lotteryPartner);
      sendBase("addLotteryPartner", args);
    }

    public int recv_addLotteryPartner() throws org.apache.thrift.TException
    {
      addLotteryPartner_result result = new addLotteryPartner_result();
      receiveBase(result, "addLotteryPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLotteryPartner failed: unknown result");
    }

    public LotteryPartner findLotteryPartnerById(String partnerId) throws org.apache.thrift.TException
    {
      send_findLotteryPartnerById(partnerId);
      return recv_findLotteryPartnerById();
    }

    public void send_findLotteryPartnerById(String partnerId) throws org.apache.thrift.TException
    {
      findLotteryPartnerById_args args = new findLotteryPartnerById_args();
      args.setPartnerId(partnerId);
      sendBase("findLotteryPartnerById", args);
    }

    public LotteryPartner recv_findLotteryPartnerById() throws org.apache.thrift.TException
    {
      findLotteryPartnerById_result result = new findLotteryPartnerById_result();
      receiveBase(result, "findLotteryPartnerById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLotteryPartnerById failed: unknown result");
    }

    public int updateState(String partnerId, int state) throws org.apache.thrift.TException
    {
      send_updateState(partnerId, state);
      return recv_updateState();
    }

    public void send_updateState(String partnerId, int state) throws org.apache.thrift.TException
    {
      updateState_args args = new updateState_args();
      args.setPartnerId(partnerId);
      args.setState(state);
      sendBase("updateState", args);
    }

    public int recv_updateState() throws org.apache.thrift.TException
    {
      updateState_result result = new updateState_result();
      receiveBase(result, "updateState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateState failed: unknown result");
    }

    public boolean isPartnerAccount(String partnerId) throws org.apache.thrift.TException
    {
      send_isPartnerAccount(partnerId);
      return recv_isPartnerAccount();
    }

    public void send_isPartnerAccount(String partnerId) throws org.apache.thrift.TException
    {
      isPartnerAccount_args args = new isPartnerAccount_args();
      args.setPartnerId(partnerId);
      sendBase("isPartnerAccount", args);
    }

    public boolean recv_isPartnerAccount() throws org.apache.thrift.TException
    {
      isPartnerAccount_result result = new isPartnerAccount_result();
      receiveBase(result, "isPartnerAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isPartnerAccount failed: unknown result");
    }

    public int updateLotteryPartner(LotteryPartner lotteryPartner, String oldPartnerId) throws org.apache.thrift.TException
    {
      send_updateLotteryPartner(lotteryPartner, oldPartnerId);
      return recv_updateLotteryPartner();
    }

    public void send_updateLotteryPartner(LotteryPartner lotteryPartner, String oldPartnerId) throws org.apache.thrift.TException
    {
      updateLotteryPartner_args args = new updateLotteryPartner_args();
      args.setLotteryPartner(lotteryPartner);
      args.setOldPartnerId(oldPartnerId);
      sendBase("updateLotteryPartner", args);
    }

    public int recv_updateLotteryPartner() throws org.apache.thrift.TException
    {
      updateLotteryPartner_result result = new updateLotteryPartner_result();
      receiveBase(result, "updateLotteryPartner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLotteryPartner failed: unknown result");
    }

    public boolean verifyPartnerIsExist(String partnerId) throws org.apache.thrift.TException
    {
      send_verifyPartnerIsExist(partnerId);
      return recv_verifyPartnerIsExist();
    }

    public void send_verifyPartnerIsExist(String partnerId) throws org.apache.thrift.TException
    {
      verifyPartnerIsExist_args args = new verifyPartnerIsExist_args();
      args.setPartnerId(partnerId);
      sendBase("verifyPartnerIsExist", args);
    }

    public boolean recv_verifyPartnerIsExist() throws org.apache.thrift.TException
    {
      verifyPartnerIsExist_result result = new verifyPartnerIsExist_result();
      receiveBase(result, "verifyPartnerIsExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyPartnerIsExist failed: unknown result");
    }

    public boolean verifyCanBindUser(String partnerId) throws org.apache.thrift.TException
    {
      send_verifyCanBindUser(partnerId);
      return recv_verifyCanBindUser();
    }

    public void send_verifyCanBindUser(String partnerId) throws org.apache.thrift.TException
    {
      verifyCanBindUser_args args = new verifyCanBindUser_args();
      args.setPartnerId(partnerId);
      sendBase("verifyCanBindUser", args);
    }

    public boolean recv_verifyCanBindUser() throws org.apache.thrift.TException
    {
      verifyCanBindUser_result result = new verifyCanBindUser_result();
      receiveBase(result, "verifyCanBindUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyCanBindUser failed: unknown result");
    }

    public LotteryPartner findPartnerForCheck(String partnerId) throws org.apache.thrift.TException
    {
      send_findPartnerForCheck(partnerId);
      return recv_findPartnerForCheck();
    }

    public void send_findPartnerForCheck(String partnerId) throws org.apache.thrift.TException
    {
      findPartnerForCheck_args args = new findPartnerForCheck_args();
      args.setPartnerId(partnerId);
      sendBase("findPartnerForCheck", args);
    }

    public LotteryPartner recv_findPartnerForCheck() throws org.apache.thrift.TException
    {
      findPartnerForCheck_result result = new findPartnerForCheck_result();
      receiveBase(result, "findPartnerForCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPartnerForCheck failed: unknown result");
    }

    public List<String> getCallBackUrlListByPartnerId(String partnerId) throws org.apache.thrift.TException
    {
      send_getCallBackUrlListByPartnerId(partnerId);
      return recv_getCallBackUrlListByPartnerId();
    }

    public void send_getCallBackUrlListByPartnerId(String partnerId) throws org.apache.thrift.TException
    {
      getCallBackUrlListByPartnerId_args args = new getCallBackUrlListByPartnerId_args();
      args.setPartnerId(partnerId);
      sendBase("getCallBackUrlListByPartnerId", args);
    }

    public List<String> recv_getCallBackUrlListByPartnerId() throws org.apache.thrift.TException
    {
      getCallBackUrlListByPartnerId_result result = new getCallBackUrlListByPartnerId_result();
      receiveBase(result, "getCallBackUrlListByPartnerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCallBackUrlListByPartnerId failed: unknown result");
    }

    public List<PartnerIpAddress> getPartnerIpAddressList(String partnerId) throws org.apache.thrift.TException
    {
      send_getPartnerIpAddressList(partnerId);
      return recv_getPartnerIpAddressList();
    }

    public void send_getPartnerIpAddressList(String partnerId) throws org.apache.thrift.TException
    {
      getPartnerIpAddressList_args args = new getPartnerIpAddressList_args();
      args.setPartnerId(partnerId);
      sendBase("getPartnerIpAddressList", args);
    }

    public List<PartnerIpAddress> recv_getPartnerIpAddressList() throws org.apache.thrift.TException
    {
      getPartnerIpAddressList_result result = new getPartnerIpAddressList_result();
      receiveBase(result, "getPartnerIpAddressList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartnerIpAddressList failed: unknown result");
    }

    public boolean isExistIpAddress(String partnerId, String ipAddress) throws org.apache.thrift.TException
    {
      send_isExistIpAddress(partnerId, ipAddress);
      return recv_isExistIpAddress();
    }

    public void send_isExistIpAddress(String partnerId, String ipAddress) throws org.apache.thrift.TException
    {
      isExistIpAddress_args args = new isExistIpAddress_args();
      args.setPartnerId(partnerId);
      args.setIpAddress(ipAddress);
      sendBase("isExistIpAddress", args);
    }

    public boolean recv_isExistIpAddress() throws org.apache.thrift.TException
    {
      isExistIpAddress_result result = new isExistIpAddress_result();
      receiveBase(result, "isExistIpAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isExistIpAddress failed: unknown result");
    }

    public int deletePartnerByPartnerId(String partnerId) throws org.apache.thrift.TException
    {
      send_deletePartnerByPartnerId(partnerId);
      return recv_deletePartnerByPartnerId();
    }

    public void send_deletePartnerByPartnerId(String partnerId) throws org.apache.thrift.TException
    {
      deletePartnerByPartnerId_args args = new deletePartnerByPartnerId_args();
      args.setPartnerId(partnerId);
      sendBase("deletePartnerByPartnerId", args);
    }

    public int recv_deletePartnerByPartnerId() throws org.apache.thrift.TException
    {
      deletePartnerByPartnerId_result result = new deletePartnerByPartnerId_result();
      receiveBase(result, "deletePartnerByPartnerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deletePartnerByPartnerId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLotteryPartnerList(LotteryPartner lotteryPartner, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryPartnerList_call method_call = new getLotteryPartnerList_call(lotteryPartner, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryPartnerList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryPartner lotteryPartner;
      private int currentPage;
      private int pageSize;
      public getLotteryPartnerList_call(LotteryPartner lotteryPartner, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryPartner = lotteryPartner;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryPartnerList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryPartnerList_args args = new getLotteryPartnerList_args();
        args.setLotteryPartner(lotteryPartner);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryPartnerList();
      }
    }

    public void addLotteryPartner(LotteryPartner lotteryPartner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLotteryPartner_call method_call = new addLotteryPartner_call(lotteryPartner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLotteryPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryPartner lotteryPartner;
      public addLotteryPartner_call(LotteryPartner lotteryPartner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryPartner = lotteryPartner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLotteryPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLotteryPartner_args args = new addLotteryPartner_args();
        args.setLotteryPartner(lotteryPartner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLotteryPartner();
      }
    }

    public void findLotteryPartnerById(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLotteryPartnerById_call method_call = new findLotteryPartnerById_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLotteryPartnerById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public findLotteryPartnerById_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLotteryPartnerById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLotteryPartnerById_args args = new findLotteryPartnerById_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LotteryPartner getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLotteryPartnerById();
      }
    }

    public void updateState(String partnerId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateState_call method_call = new updateState_call(partnerId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private int state;
      public updateState_call(String partnerId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateState_args args = new updateState_args();
        args.setPartnerId(partnerId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateState();
      }
    }

    public void isPartnerAccount(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isPartnerAccount_call method_call = new isPartnerAccount_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isPartnerAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public isPartnerAccount_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isPartnerAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isPartnerAccount_args args = new isPartnerAccount_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isPartnerAccount();
      }
    }

    public void updateLotteryPartner(LotteryPartner lotteryPartner, String oldPartnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLotteryPartner_call method_call = new updateLotteryPartner_call(lotteryPartner, oldPartnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLotteryPartner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryPartner lotteryPartner;
      private String oldPartnerId;
      public updateLotteryPartner_call(LotteryPartner lotteryPartner, String oldPartnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryPartner = lotteryPartner;
        this.oldPartnerId = oldPartnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLotteryPartner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLotteryPartner_args args = new updateLotteryPartner_args();
        args.setLotteryPartner(lotteryPartner);
        args.setOldPartnerId(oldPartnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLotteryPartner();
      }
    }

    public void verifyPartnerIsExist(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyPartnerIsExist_call method_call = new verifyPartnerIsExist_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyPartnerIsExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public verifyPartnerIsExist_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyPartnerIsExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyPartnerIsExist_args args = new verifyPartnerIsExist_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyPartnerIsExist();
      }
    }

    public void verifyCanBindUser(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyCanBindUser_call method_call = new verifyCanBindUser_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyCanBindUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public verifyCanBindUser_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyCanBindUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyCanBindUser_args args = new verifyCanBindUser_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyCanBindUser();
      }
    }

    public void findPartnerForCheck(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPartnerForCheck_call method_call = new findPartnerForCheck_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPartnerForCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public findPartnerForCheck_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPartnerForCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPartnerForCheck_args args = new findPartnerForCheck_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LotteryPartner getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPartnerForCheck();
      }
    }

    public void getCallBackUrlListByPartnerId(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCallBackUrlListByPartnerId_call method_call = new getCallBackUrlListByPartnerId_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCallBackUrlListByPartnerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public getCallBackUrlListByPartnerId_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCallBackUrlListByPartnerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCallBackUrlListByPartnerId_args args = new getCallBackUrlListByPartnerId_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCallBackUrlListByPartnerId();
      }
    }

    public void getPartnerIpAddressList(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartnerIpAddressList_call method_call = new getPartnerIpAddressList_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartnerIpAddressList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public getPartnerIpAddressList_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartnerIpAddressList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartnerIpAddressList_args args = new getPartnerIpAddressList_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PartnerIpAddress> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartnerIpAddressList();
      }
    }

    public void isExistIpAddress(String partnerId, String ipAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isExistIpAddress_call method_call = new isExistIpAddress_call(partnerId, ipAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isExistIpAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String ipAddress;
      public isExistIpAddress_call(String partnerId, String ipAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.ipAddress = ipAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isExistIpAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isExistIpAddress_args args = new isExistIpAddress_args();
        args.setPartnerId(partnerId);
        args.setIpAddress(ipAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExistIpAddress();
      }
    }

    public void deletePartnerByPartnerId(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePartnerByPartnerId_call method_call = new deletePartnerByPartnerId_call(partnerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePartnerByPartnerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      public deletePartnerByPartnerId_call(String partnerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePartnerByPartnerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePartnerByPartnerId_args args = new deletePartnerByPartnerId_args();
        args.setPartnerId(partnerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deletePartnerByPartnerId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLotteryPartnerList", new getLotteryPartnerList());
      processMap.put("addLotteryPartner", new addLotteryPartner());
      processMap.put("findLotteryPartnerById", new findLotteryPartnerById());
      processMap.put("updateState", new updateState());
      processMap.put("isPartnerAccount", new isPartnerAccount());
      processMap.put("updateLotteryPartner", new updateLotteryPartner());
      processMap.put("verifyPartnerIsExist", new verifyPartnerIsExist());
      processMap.put("verifyCanBindUser", new verifyCanBindUser());
      processMap.put("findPartnerForCheck", new findPartnerForCheck());
      processMap.put("getCallBackUrlListByPartnerId", new getCallBackUrlListByPartnerId());
      processMap.put("getPartnerIpAddressList", new getPartnerIpAddressList());
      processMap.put("isExistIpAddress", new isExistIpAddress());
      processMap.put("deletePartnerByPartnerId", new deletePartnerByPartnerId());
      return processMap;
    }

    public static class getLotteryPartnerList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryPartnerList_args> {
      public getLotteryPartnerList() {
        super("getLotteryPartnerList");
      }

      public getLotteryPartnerList_args getEmptyArgsInstance() {
        return new getLotteryPartnerList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryPartnerList_result getResult(I iface, getLotteryPartnerList_args args) throws org.apache.thrift.TException {
        getLotteryPartnerList_result result = new getLotteryPartnerList_result();
        result.success = iface.getLotteryPartnerList(args.lotteryPartner, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class addLotteryPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLotteryPartner_args> {
      public addLotteryPartner() {
        super("addLotteryPartner");
      }

      public addLotteryPartner_args getEmptyArgsInstance() {
        return new addLotteryPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLotteryPartner_result getResult(I iface, addLotteryPartner_args args) throws org.apache.thrift.TException {
        addLotteryPartner_result result = new addLotteryPartner_result();
        result.success = iface.addLotteryPartner(args.lotteryPartner);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findLotteryPartnerById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLotteryPartnerById_args> {
      public findLotteryPartnerById() {
        super("findLotteryPartnerById");
      }

      public findLotteryPartnerById_args getEmptyArgsInstance() {
        return new findLotteryPartnerById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findLotteryPartnerById_result getResult(I iface, findLotteryPartnerById_args args) throws org.apache.thrift.TException {
        findLotteryPartnerById_result result = new findLotteryPartnerById_result();
        result.success = iface.findLotteryPartnerById(args.partnerId);
        return result;
      }
    }

    public static class updateState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateState_args> {
      public updateState() {
        super("updateState");
      }

      public updateState_args getEmptyArgsInstance() {
        return new updateState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateState_result getResult(I iface, updateState_args args) throws org.apache.thrift.TException {
        updateState_result result = new updateState_result();
        result.success = iface.updateState(args.partnerId, args.state);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class isPartnerAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isPartnerAccount_args> {
      public isPartnerAccount() {
        super("isPartnerAccount");
      }

      public isPartnerAccount_args getEmptyArgsInstance() {
        return new isPartnerAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isPartnerAccount_result getResult(I iface, isPartnerAccount_args args) throws org.apache.thrift.TException {
        isPartnerAccount_result result = new isPartnerAccount_result();
        result.success = iface.isPartnerAccount(args.partnerId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateLotteryPartner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLotteryPartner_args> {
      public updateLotteryPartner() {
        super("updateLotteryPartner");
      }

      public updateLotteryPartner_args getEmptyArgsInstance() {
        return new updateLotteryPartner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLotteryPartner_result getResult(I iface, updateLotteryPartner_args args) throws org.apache.thrift.TException {
        updateLotteryPartner_result result = new updateLotteryPartner_result();
        result.success = iface.updateLotteryPartner(args.lotteryPartner, args.oldPartnerId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class verifyPartnerIsExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyPartnerIsExist_args> {
      public verifyPartnerIsExist() {
        super("verifyPartnerIsExist");
      }

      public verifyPartnerIsExist_args getEmptyArgsInstance() {
        return new verifyPartnerIsExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyPartnerIsExist_result getResult(I iface, verifyPartnerIsExist_args args) throws org.apache.thrift.TException {
        verifyPartnerIsExist_result result = new verifyPartnerIsExist_result();
        result.success = iface.verifyPartnerIsExist(args.partnerId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class verifyCanBindUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyCanBindUser_args> {
      public verifyCanBindUser() {
        super("verifyCanBindUser");
      }

      public verifyCanBindUser_args getEmptyArgsInstance() {
        return new verifyCanBindUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyCanBindUser_result getResult(I iface, verifyCanBindUser_args args) throws org.apache.thrift.TException {
        verifyCanBindUser_result result = new verifyCanBindUser_result();
        result.success = iface.verifyCanBindUser(args.partnerId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findPartnerForCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPartnerForCheck_args> {
      public findPartnerForCheck() {
        super("findPartnerForCheck");
      }

      public findPartnerForCheck_args getEmptyArgsInstance() {
        return new findPartnerForCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPartnerForCheck_result getResult(I iface, findPartnerForCheck_args args) throws org.apache.thrift.TException {
        findPartnerForCheck_result result = new findPartnerForCheck_result();
        result.success = iface.findPartnerForCheck(args.partnerId);
        return result;
      }
    }

    public static class getCallBackUrlListByPartnerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCallBackUrlListByPartnerId_args> {
      public getCallBackUrlListByPartnerId() {
        super("getCallBackUrlListByPartnerId");
      }

      public getCallBackUrlListByPartnerId_args getEmptyArgsInstance() {
        return new getCallBackUrlListByPartnerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCallBackUrlListByPartnerId_result getResult(I iface, getCallBackUrlListByPartnerId_args args) throws org.apache.thrift.TException {
        getCallBackUrlListByPartnerId_result result = new getCallBackUrlListByPartnerId_result();
        result.success = iface.getCallBackUrlListByPartnerId(args.partnerId);
        return result;
      }
    }

    public static class getPartnerIpAddressList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartnerIpAddressList_args> {
      public getPartnerIpAddressList() {
        super("getPartnerIpAddressList");
      }

      public getPartnerIpAddressList_args getEmptyArgsInstance() {
        return new getPartnerIpAddressList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartnerIpAddressList_result getResult(I iface, getPartnerIpAddressList_args args) throws org.apache.thrift.TException {
        getPartnerIpAddressList_result result = new getPartnerIpAddressList_result();
        result.success = iface.getPartnerIpAddressList(args.partnerId);
        return result;
      }
    }

    public static class isExistIpAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isExistIpAddress_args> {
      public isExistIpAddress() {
        super("isExistIpAddress");
      }

      public isExistIpAddress_args getEmptyArgsInstance() {
        return new isExistIpAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isExistIpAddress_result getResult(I iface, isExistIpAddress_args args) throws org.apache.thrift.TException {
        isExistIpAddress_result result = new isExistIpAddress_result();
        result.success = iface.isExistIpAddress(args.partnerId, args.ipAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deletePartnerByPartnerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePartnerByPartnerId_args> {
      public deletePartnerByPartnerId() {
        super("deletePartnerByPartnerId");
      }

      public deletePartnerByPartnerId_args getEmptyArgsInstance() {
        return new deletePartnerByPartnerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletePartnerByPartnerId_result getResult(I iface, deletePartnerByPartnerId_args args) throws org.apache.thrift.TException {
        deletePartnerByPartnerId_result result = new deletePartnerByPartnerId_result();
        result.success = iface.deletePartnerByPartnerId(args.partnerId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getLotteryPartnerList", new getLotteryPartnerList());
      processMap.put("addLotteryPartner", new addLotteryPartner());
      processMap.put("findLotteryPartnerById", new findLotteryPartnerById());
      processMap.put("updateState", new updateState());
      processMap.put("isPartnerAccount", new isPartnerAccount());
      processMap.put("updateLotteryPartner", new updateLotteryPartner());
      processMap.put("verifyPartnerIsExist", new verifyPartnerIsExist());
      processMap.put("verifyCanBindUser", new verifyCanBindUser());
      processMap.put("findPartnerForCheck", new findPartnerForCheck());
      processMap.put("getCallBackUrlListByPartnerId", new getCallBackUrlListByPartnerId());
      processMap.put("getPartnerIpAddressList", new getPartnerIpAddressList());
      processMap.put("isExistIpAddress", new isExistIpAddress());
      processMap.put("deletePartnerByPartnerId", new deletePartnerByPartnerId());
      return processMap;
    }

    public static class getLotteryPartnerList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryPartnerList_args, ReturnData> {
      public getLotteryPartnerList() {
        super("getLotteryPartnerList");
      }

      public getLotteryPartnerList_args getEmptyArgsInstance() {
        return new getLotteryPartnerList_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getLotteryPartnerList_result result = new getLotteryPartnerList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryPartnerList_result result = new getLotteryPartnerList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryPartnerList_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getLotteryPartnerList(args.lotteryPartner, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class addLotteryPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLotteryPartner_args, Integer> {
      public addLotteryPartner() {
        super("addLotteryPartner");
      }

      public addLotteryPartner_args getEmptyArgsInstance() {
        return new addLotteryPartner_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addLotteryPartner_result result = new addLotteryPartner_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addLotteryPartner_result result = new addLotteryPartner_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addLotteryPartner_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addLotteryPartner(args.lotteryPartner,resultHandler);
      }
    }

    public static class findLotteryPartnerById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLotteryPartnerById_args, LotteryPartner> {
      public findLotteryPartnerById() {
        super("findLotteryPartnerById");
      }

      public findLotteryPartnerById_args getEmptyArgsInstance() {
        return new findLotteryPartnerById_args();
      }

      public AsyncMethodCallback<LotteryPartner> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LotteryPartner>() { 
          public void onComplete(LotteryPartner o) {
            findLotteryPartnerById_result result = new findLotteryPartnerById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findLotteryPartnerById_result result = new findLotteryPartnerById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLotteryPartnerById_args args, org.apache.thrift.async.AsyncMethodCallback<LotteryPartner> resultHandler) throws TException {
        iface.findLotteryPartnerById(args.partnerId,resultHandler);
      }
    }

    public static class updateState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateState_args, Integer> {
      public updateState() {
        super("updateState");
      }

      public updateState_args getEmptyArgsInstance() {
        return new updateState_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateState_result result = new updateState_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateState_result result = new updateState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateState_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateState(args.partnerId, args.state,resultHandler);
      }
    }

    public static class isPartnerAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isPartnerAccount_args, Boolean> {
      public isPartnerAccount() {
        super("isPartnerAccount");
      }

      public isPartnerAccount_args getEmptyArgsInstance() {
        return new isPartnerAccount_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isPartnerAccount_result result = new isPartnerAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isPartnerAccount_result result = new isPartnerAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isPartnerAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isPartnerAccount(args.partnerId,resultHandler);
      }
    }

    public static class updateLotteryPartner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLotteryPartner_args, Integer> {
      public updateLotteryPartner() {
        super("updateLotteryPartner");
      }

      public updateLotteryPartner_args getEmptyArgsInstance() {
        return new updateLotteryPartner_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateLotteryPartner_result result = new updateLotteryPartner_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLotteryPartner_result result = new updateLotteryPartner_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLotteryPartner_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateLotteryPartner(args.lotteryPartner, args.oldPartnerId,resultHandler);
      }
    }

    public static class verifyPartnerIsExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyPartnerIsExist_args, Boolean> {
      public verifyPartnerIsExist() {
        super("verifyPartnerIsExist");
      }

      public verifyPartnerIsExist_args getEmptyArgsInstance() {
        return new verifyPartnerIsExist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            verifyPartnerIsExist_result result = new verifyPartnerIsExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyPartnerIsExist_result result = new verifyPartnerIsExist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyPartnerIsExist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.verifyPartnerIsExist(args.partnerId,resultHandler);
      }
    }

    public static class verifyCanBindUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyCanBindUser_args, Boolean> {
      public verifyCanBindUser() {
        super("verifyCanBindUser");
      }

      public verifyCanBindUser_args getEmptyArgsInstance() {
        return new verifyCanBindUser_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            verifyCanBindUser_result result = new verifyCanBindUser_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyCanBindUser_result result = new verifyCanBindUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyCanBindUser_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.verifyCanBindUser(args.partnerId,resultHandler);
      }
    }

    public static class findPartnerForCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPartnerForCheck_args, LotteryPartner> {
      public findPartnerForCheck() {
        super("findPartnerForCheck");
      }

      public findPartnerForCheck_args getEmptyArgsInstance() {
        return new findPartnerForCheck_args();
      }

      public AsyncMethodCallback<LotteryPartner> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LotteryPartner>() { 
          public void onComplete(LotteryPartner o) {
            findPartnerForCheck_result result = new findPartnerForCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPartnerForCheck_result result = new findPartnerForCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPartnerForCheck_args args, org.apache.thrift.async.AsyncMethodCallback<LotteryPartner> resultHandler) throws TException {
        iface.findPartnerForCheck(args.partnerId,resultHandler);
      }
    }

    public static class getCallBackUrlListByPartnerId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCallBackUrlListByPartnerId_args, List<String>> {
      public getCallBackUrlListByPartnerId() {
        super("getCallBackUrlListByPartnerId");
      }

      public getCallBackUrlListByPartnerId_args getEmptyArgsInstance() {
        return new getCallBackUrlListByPartnerId_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getCallBackUrlListByPartnerId_result result = new getCallBackUrlListByPartnerId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCallBackUrlListByPartnerId_result result = new getCallBackUrlListByPartnerId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCallBackUrlListByPartnerId_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getCallBackUrlListByPartnerId(args.partnerId,resultHandler);
      }
    }

    public static class getPartnerIpAddressList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartnerIpAddressList_args, List<PartnerIpAddress>> {
      public getPartnerIpAddressList() {
        super("getPartnerIpAddressList");
      }

      public getPartnerIpAddressList_args getEmptyArgsInstance() {
        return new getPartnerIpAddressList_args();
      }

      public AsyncMethodCallback<List<PartnerIpAddress>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PartnerIpAddress>>() { 
          public void onComplete(List<PartnerIpAddress> o) {
            getPartnerIpAddressList_result result = new getPartnerIpAddressList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartnerIpAddressList_result result = new getPartnerIpAddressList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartnerIpAddressList_args args, org.apache.thrift.async.AsyncMethodCallback<List<PartnerIpAddress>> resultHandler) throws TException {
        iface.getPartnerIpAddressList(args.partnerId,resultHandler);
      }
    }

    public static class isExistIpAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isExistIpAddress_args, Boolean> {
      public isExistIpAddress() {
        super("isExistIpAddress");
      }

      public isExistIpAddress_args getEmptyArgsInstance() {
        return new isExistIpAddress_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isExistIpAddress_result result = new isExistIpAddress_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isExistIpAddress_result result = new isExistIpAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isExistIpAddress_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isExistIpAddress(args.partnerId, args.ipAddress,resultHandler);
      }
    }

    public static class deletePartnerByPartnerId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePartnerByPartnerId_args, Integer> {
      public deletePartnerByPartnerId() {
        super("deletePartnerByPartnerId");
      }

      public deletePartnerByPartnerId_args getEmptyArgsInstance() {
        return new deletePartnerByPartnerId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deletePartnerByPartnerId_result result = new deletePartnerByPartnerId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deletePartnerByPartnerId_result result = new deletePartnerByPartnerId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletePartnerByPartnerId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deletePartnerByPartnerId(args.partnerId,resultHandler);
      }
    }

  }

  public static class getLotteryPartnerList_args implements org.apache.thrift.TBase<getLotteryPartnerList_args, getLotteryPartnerList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryPartnerList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryPartnerList_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryPartner", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryPartnerList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryPartnerList_argsTupleSchemeFactory());
    }

    public LotteryPartner lotteryPartner; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_PARTNER((short)1, "lotteryPartner"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_PARTNER
            return LOTTERY_PARTNER;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("lotteryPartner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryPartner.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryPartnerList_args.class, metaDataMap);
    }

    public getLotteryPartnerList_args() {
    }

    public getLotteryPartnerList_args(
      LotteryPartner lotteryPartner,
      int currentPage,
      int pageSize)
    {
      this();
      this.lotteryPartner = lotteryPartner;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryPartnerList_args(getLotteryPartnerList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryPartner()) {
        this.lotteryPartner = new LotteryPartner(other.lotteryPartner);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getLotteryPartnerList_args deepCopy() {
      return new getLotteryPartnerList_args(this);
    }

    @Override
    public void clear() {
      this.lotteryPartner = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public LotteryPartner getLotteryPartner() {
      return this.lotteryPartner;
    }

    public getLotteryPartnerList_args setLotteryPartner(LotteryPartner lotteryPartner) {
      this.lotteryPartner = lotteryPartner;
      return this;
    }

    public void unsetLotteryPartner() {
      this.lotteryPartner = null;
    }

    /** Returns true if field lotteryPartner is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryPartner() {
      return this.lotteryPartner != null;
    }

    public void setLotteryPartnerIsSet(boolean value) {
      if (!value) {
        this.lotteryPartner = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getLotteryPartnerList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getLotteryPartnerList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_PARTNER:
        if (value == null) {
          unsetLotteryPartner();
        } else {
          setLotteryPartner((LotteryPartner)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_PARTNER:
        return getLotteryPartner();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_PARTNER:
        return isSetLotteryPartner();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryPartnerList_args)
        return this.equals((getLotteryPartnerList_args)that);
      return false;
    }

    public boolean equals(getLotteryPartnerList_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryPartner = true && this.isSetLotteryPartner();
      boolean that_present_lotteryPartner = true && that.isSetLotteryPartner();
      if (this_present_lotteryPartner || that_present_lotteryPartner) {
        if (!(this_present_lotteryPartner && that_present_lotteryPartner))
          return false;
        if (!this.lotteryPartner.equals(that.lotteryPartner))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryPartnerList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryPartner()).compareTo(other.isSetLotteryPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryPartner, other.lotteryPartner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryPartnerList_args(");
      boolean first = true;

      sb.append("lotteryPartner:");
      if (this.lotteryPartner == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryPartner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryPartner != null) {
        lotteryPartner.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryPartnerList_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryPartnerList_argsStandardScheme getScheme() {
        return new getLotteryPartnerList_argsStandardScheme();
      }
    }

    private static class getLotteryPartnerList_argsStandardScheme extends StandardScheme<getLotteryPartnerList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryPartnerList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryPartner = new LotteryPartner();
                struct.lotteryPartner.read(iprot);
                struct.setLotteryPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryPartnerList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryPartner != null) {
          oprot.writeFieldBegin(LOTTERY_PARTNER_FIELD_DESC);
          struct.lotteryPartner.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryPartnerList_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryPartnerList_argsTupleScheme getScheme() {
        return new getLotteryPartnerList_argsTupleScheme();
      }
    }

    private static class getLotteryPartnerList_argsTupleScheme extends TupleScheme<getLotteryPartnerList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryPartnerList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryPartner()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryPartner()) {
          struct.lotteryPartner.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryPartnerList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryPartner = new LotteryPartner();
          struct.lotteryPartner.read(iprot);
          struct.setLotteryPartnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getLotteryPartnerList_result implements org.apache.thrift.TBase<getLotteryPartnerList_result, getLotteryPartnerList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryPartnerList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryPartnerList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryPartnerList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryPartnerList_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryPartnerList_result.class, metaDataMap);
    }

    public getLotteryPartnerList_result() {
    }

    public getLotteryPartnerList_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryPartnerList_result(getLotteryPartnerList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getLotteryPartnerList_result deepCopy() {
      return new getLotteryPartnerList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getLotteryPartnerList_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryPartnerList_result)
        return this.equals((getLotteryPartnerList_result)that);
      return false;
    }

    public boolean equals(getLotteryPartnerList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryPartnerList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryPartnerList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryPartnerList_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryPartnerList_resultStandardScheme getScheme() {
        return new getLotteryPartnerList_resultStandardScheme();
      }
    }

    private static class getLotteryPartnerList_resultStandardScheme extends StandardScheme<getLotteryPartnerList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryPartnerList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryPartnerList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryPartnerList_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryPartnerList_resultTupleScheme getScheme() {
        return new getLotteryPartnerList_resultTupleScheme();
      }
    }

    private static class getLotteryPartnerList_resultTupleScheme extends TupleScheme<getLotteryPartnerList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryPartnerList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryPartnerList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addLotteryPartner_args implements org.apache.thrift.TBase<addLotteryPartner_args, addLotteryPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLotteryPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLotteryPartner_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryPartner", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLotteryPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLotteryPartner_argsTupleSchemeFactory());
    }

    public LotteryPartner lotteryPartner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_PARTNER((short)1, "lotteryPartner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_PARTNER
            return LOTTERY_PARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("lotteryPartner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryPartner.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLotteryPartner_args.class, metaDataMap);
    }

    public addLotteryPartner_args() {
    }

    public addLotteryPartner_args(
      LotteryPartner lotteryPartner)
    {
      this();
      this.lotteryPartner = lotteryPartner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLotteryPartner_args(addLotteryPartner_args other) {
      if (other.isSetLotteryPartner()) {
        this.lotteryPartner = new LotteryPartner(other.lotteryPartner);
      }
    }

    public addLotteryPartner_args deepCopy() {
      return new addLotteryPartner_args(this);
    }

    @Override
    public void clear() {
      this.lotteryPartner = null;
    }

    public LotteryPartner getLotteryPartner() {
      return this.lotteryPartner;
    }

    public addLotteryPartner_args setLotteryPartner(LotteryPartner lotteryPartner) {
      this.lotteryPartner = lotteryPartner;
      return this;
    }

    public void unsetLotteryPartner() {
      this.lotteryPartner = null;
    }

    /** Returns true if field lotteryPartner is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryPartner() {
      return this.lotteryPartner != null;
    }

    public void setLotteryPartnerIsSet(boolean value) {
      if (!value) {
        this.lotteryPartner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_PARTNER:
        if (value == null) {
          unsetLotteryPartner();
        } else {
          setLotteryPartner((LotteryPartner)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_PARTNER:
        return getLotteryPartner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_PARTNER:
        return isSetLotteryPartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLotteryPartner_args)
        return this.equals((addLotteryPartner_args)that);
      return false;
    }

    public boolean equals(addLotteryPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryPartner = true && this.isSetLotteryPartner();
      boolean that_present_lotteryPartner = true && that.isSetLotteryPartner();
      if (this_present_lotteryPartner || that_present_lotteryPartner) {
        if (!(this_present_lotteryPartner && that_present_lotteryPartner))
          return false;
        if (!this.lotteryPartner.equals(that.lotteryPartner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addLotteryPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryPartner()).compareTo(other.isSetLotteryPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryPartner, other.lotteryPartner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLotteryPartner_args(");
      boolean first = true;

      sb.append("lotteryPartner:");
      if (this.lotteryPartner == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryPartner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryPartner != null) {
        lotteryPartner.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLotteryPartner_argsStandardSchemeFactory implements SchemeFactory {
      public addLotteryPartner_argsStandardScheme getScheme() {
        return new addLotteryPartner_argsStandardScheme();
      }
    }

    private static class addLotteryPartner_argsStandardScheme extends StandardScheme<addLotteryPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLotteryPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryPartner = new LotteryPartner();
                struct.lotteryPartner.read(iprot);
                struct.setLotteryPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLotteryPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryPartner != null) {
          oprot.writeFieldBegin(LOTTERY_PARTNER_FIELD_DESC);
          struct.lotteryPartner.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLotteryPartner_argsTupleSchemeFactory implements SchemeFactory {
      public addLotteryPartner_argsTupleScheme getScheme() {
        return new addLotteryPartner_argsTupleScheme();
      }
    }

    private static class addLotteryPartner_argsTupleScheme extends TupleScheme<addLotteryPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLotteryPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryPartner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryPartner()) {
          struct.lotteryPartner.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLotteryPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryPartner = new LotteryPartner();
          struct.lotteryPartner.read(iprot);
          struct.setLotteryPartnerIsSet(true);
        }
      }
    }

  }

  public static class addLotteryPartner_result implements org.apache.thrift.TBase<addLotteryPartner_result, addLotteryPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLotteryPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLotteryPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLotteryPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLotteryPartner_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLotteryPartner_result.class, metaDataMap);
    }

    public addLotteryPartner_result() {
    }

    public addLotteryPartner_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLotteryPartner_result(addLotteryPartner_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addLotteryPartner_result deepCopy() {
      return new addLotteryPartner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addLotteryPartner_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLotteryPartner_result)
        return this.equals((addLotteryPartner_result)that);
      return false;
    }

    public boolean equals(addLotteryPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addLotteryPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLotteryPartner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLotteryPartner_resultStandardSchemeFactory implements SchemeFactory {
      public addLotteryPartner_resultStandardScheme getScheme() {
        return new addLotteryPartner_resultStandardScheme();
      }
    }

    private static class addLotteryPartner_resultStandardScheme extends StandardScheme<addLotteryPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLotteryPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLotteryPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLotteryPartner_resultTupleSchemeFactory implements SchemeFactory {
      public addLotteryPartner_resultTupleScheme getScheme() {
        return new addLotteryPartner_resultTupleScheme();
      }
    }

    private static class addLotteryPartner_resultTupleScheme extends TupleScheme<addLotteryPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLotteryPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLotteryPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findLotteryPartnerById_args implements org.apache.thrift.TBase<findLotteryPartnerById_args, findLotteryPartnerById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryPartnerById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryPartnerById_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryPartnerById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryPartnerById_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryPartnerById_args.class, metaDataMap);
    }

    public findLotteryPartnerById_args() {
    }

    public findLotteryPartnerById_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryPartnerById_args(findLotteryPartnerById_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public findLotteryPartnerById_args deepCopy() {
      return new findLotteryPartnerById_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public findLotteryPartnerById_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryPartnerById_args)
        return this.equals((findLotteryPartnerById_args)that);
      return false;
    }

    public boolean equals(findLotteryPartnerById_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryPartnerById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryPartnerById_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryPartnerById_argsStandardSchemeFactory implements SchemeFactory {
      public findLotteryPartnerById_argsStandardScheme getScheme() {
        return new findLotteryPartnerById_argsStandardScheme();
      }
    }

    private static class findLotteryPartnerById_argsStandardScheme extends StandardScheme<findLotteryPartnerById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryPartnerById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryPartnerById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryPartnerById_argsTupleSchemeFactory implements SchemeFactory {
      public findLotteryPartnerById_argsTupleScheme getScheme() {
        return new findLotteryPartnerById_argsTupleScheme();
      }
    }

    private static class findLotteryPartnerById_argsTupleScheme extends TupleScheme<findLotteryPartnerById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryPartnerById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryPartnerById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class findLotteryPartnerById_result implements org.apache.thrift.TBase<findLotteryPartnerById_result, findLotteryPartnerById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryPartnerById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryPartnerById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryPartnerById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryPartnerById_resultTupleSchemeFactory());
    }

    public LotteryPartner success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryPartner.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryPartnerById_result.class, metaDataMap);
    }

    public findLotteryPartnerById_result() {
    }

    public findLotteryPartnerById_result(
      LotteryPartner success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryPartnerById_result(findLotteryPartnerById_result other) {
      if (other.isSetSuccess()) {
        this.success = new LotteryPartner(other.success);
      }
    }

    public findLotteryPartnerById_result deepCopy() {
      return new findLotteryPartnerById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LotteryPartner getSuccess() {
      return this.success;
    }

    public findLotteryPartnerById_result setSuccess(LotteryPartner success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LotteryPartner)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryPartnerById_result)
        return this.equals((findLotteryPartnerById_result)that);
      return false;
    }

    public boolean equals(findLotteryPartnerById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryPartnerById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryPartnerById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryPartnerById_resultStandardSchemeFactory implements SchemeFactory {
      public findLotteryPartnerById_resultStandardScheme getScheme() {
        return new findLotteryPartnerById_resultStandardScheme();
      }
    }

    private static class findLotteryPartnerById_resultStandardScheme extends StandardScheme<findLotteryPartnerById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryPartnerById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LotteryPartner();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryPartnerById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryPartnerById_resultTupleSchemeFactory implements SchemeFactory {
      public findLotteryPartnerById_resultTupleScheme getScheme() {
        return new findLotteryPartnerById_resultTupleScheme();
      }
    }

    private static class findLotteryPartnerById_resultTupleScheme extends TupleScheme<findLotteryPartnerById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryPartnerById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryPartnerById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LotteryPartner();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateState_args implements org.apache.thrift.TBase<updateState_args, updateState_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateState_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateState_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      STATE((short)2, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateState_args.class, metaDataMap);
    }

    public updateState_args() {
    }

    public updateState_args(
      String partnerId,
      int state)
    {
      this();
      this.partnerId = partnerId;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateState_args(updateState_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      this.state = other.state;
    }

    public updateState_args deepCopy() {
      return new updateState_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public updateState_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public updateState_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case STATE:
        return Integer.valueOf(getState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateState_args)
        return this.equals((updateState_args)that);
      return false;
    }

    public boolean equals(updateState_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateState_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateState_argsStandardSchemeFactory implements SchemeFactory {
      public updateState_argsStandardScheme getScheme() {
        return new updateState_argsStandardScheme();
      }
    }

    private static class updateState_argsStandardScheme extends StandardScheme<updateState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateState_argsTupleSchemeFactory implements SchemeFactory {
      public updateState_argsTupleScheme getScheme() {
        return new updateState_argsTupleScheme();
      }
    }

    private static class updateState_argsTupleScheme extends TupleScheme<updateState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class updateState_result implements org.apache.thrift.TBase<updateState_result, updateState_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateState_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateState_result.class, metaDataMap);
    }

    public updateState_result() {
    }

    public updateState_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateState_result(updateState_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateState_result deepCopy() {
      return new updateState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateState_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateState_result)
        return this.equals((updateState_result)that);
      return false;
    }

    public boolean equals(updateState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateState_resultStandardSchemeFactory implements SchemeFactory {
      public updateState_resultStandardScheme getScheme() {
        return new updateState_resultStandardScheme();
      }
    }

    private static class updateState_resultStandardScheme extends StandardScheme<updateState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateState_resultTupleSchemeFactory implements SchemeFactory {
      public updateState_resultTupleScheme getScheme() {
        return new updateState_resultTupleScheme();
      }
    }

    private static class updateState_resultTupleScheme extends TupleScheme<updateState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isPartnerAccount_args implements org.apache.thrift.TBase<isPartnerAccount_args, isPartnerAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<isPartnerAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isPartnerAccount_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isPartnerAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isPartnerAccount_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isPartnerAccount_args.class, metaDataMap);
    }

    public isPartnerAccount_args() {
    }

    public isPartnerAccount_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isPartnerAccount_args(isPartnerAccount_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public isPartnerAccount_args deepCopy() {
      return new isPartnerAccount_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public isPartnerAccount_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isPartnerAccount_args)
        return this.equals((isPartnerAccount_args)that);
      return false;
    }

    public boolean equals(isPartnerAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isPartnerAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isPartnerAccount_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isPartnerAccount_argsStandardSchemeFactory implements SchemeFactory {
      public isPartnerAccount_argsStandardScheme getScheme() {
        return new isPartnerAccount_argsStandardScheme();
      }
    }

    private static class isPartnerAccount_argsStandardScheme extends StandardScheme<isPartnerAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isPartnerAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isPartnerAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isPartnerAccount_argsTupleSchemeFactory implements SchemeFactory {
      public isPartnerAccount_argsTupleScheme getScheme() {
        return new isPartnerAccount_argsTupleScheme();
      }
    }

    private static class isPartnerAccount_argsTupleScheme extends TupleScheme<isPartnerAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isPartnerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isPartnerAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class isPartnerAccount_result implements org.apache.thrift.TBase<isPartnerAccount_result, isPartnerAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<isPartnerAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isPartnerAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isPartnerAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isPartnerAccount_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isPartnerAccount_result.class, metaDataMap);
    }

    public isPartnerAccount_result() {
    }

    public isPartnerAccount_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isPartnerAccount_result(isPartnerAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isPartnerAccount_result deepCopy() {
      return new isPartnerAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isPartnerAccount_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isPartnerAccount_result)
        return this.equals((isPartnerAccount_result)that);
      return false;
    }

    public boolean equals(isPartnerAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isPartnerAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isPartnerAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isPartnerAccount_resultStandardSchemeFactory implements SchemeFactory {
      public isPartnerAccount_resultStandardScheme getScheme() {
        return new isPartnerAccount_resultStandardScheme();
      }
    }

    private static class isPartnerAccount_resultStandardScheme extends StandardScheme<isPartnerAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isPartnerAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isPartnerAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isPartnerAccount_resultTupleSchemeFactory implements SchemeFactory {
      public isPartnerAccount_resultTupleScheme getScheme() {
        return new isPartnerAccount_resultTupleScheme();
      }
    }

    private static class isPartnerAccount_resultTupleScheme extends TupleScheme<isPartnerAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isPartnerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isPartnerAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryPartner_args implements org.apache.thrift.TBase<updateLotteryPartner_args, updateLotteryPartner_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryPartner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryPartner_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryPartner", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPartnerId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryPartner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryPartner_argsTupleSchemeFactory());
    }

    public LotteryPartner lotteryPartner; // required
    public String oldPartnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_PARTNER((short)1, "lotteryPartner"),
      OLD_PARTNER_ID((short)2, "oldPartnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_PARTNER
            return LOTTERY_PARTNER;
          case 2: // OLD_PARTNER_ID
            return OLD_PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("lotteryPartner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryPartner.class)));
      tmpMap.put(_Fields.OLD_PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("oldPartnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryPartner_args.class, metaDataMap);
    }

    public updateLotteryPartner_args() {
    }

    public updateLotteryPartner_args(
      LotteryPartner lotteryPartner,
      String oldPartnerId)
    {
      this();
      this.lotteryPartner = lotteryPartner;
      this.oldPartnerId = oldPartnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryPartner_args(updateLotteryPartner_args other) {
      if (other.isSetLotteryPartner()) {
        this.lotteryPartner = new LotteryPartner(other.lotteryPartner);
      }
      if (other.isSetOldPartnerId()) {
        this.oldPartnerId = other.oldPartnerId;
      }
    }

    public updateLotteryPartner_args deepCopy() {
      return new updateLotteryPartner_args(this);
    }

    @Override
    public void clear() {
      this.lotteryPartner = null;
      this.oldPartnerId = null;
    }

    public LotteryPartner getLotteryPartner() {
      return this.lotteryPartner;
    }

    public updateLotteryPartner_args setLotteryPartner(LotteryPartner lotteryPartner) {
      this.lotteryPartner = lotteryPartner;
      return this;
    }

    public void unsetLotteryPartner() {
      this.lotteryPartner = null;
    }

    /** Returns true if field lotteryPartner is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryPartner() {
      return this.lotteryPartner != null;
    }

    public void setLotteryPartnerIsSet(boolean value) {
      if (!value) {
        this.lotteryPartner = null;
      }
    }

    public String getOldPartnerId() {
      return this.oldPartnerId;
    }

    public updateLotteryPartner_args setOldPartnerId(String oldPartnerId) {
      this.oldPartnerId = oldPartnerId;
      return this;
    }

    public void unsetOldPartnerId() {
      this.oldPartnerId = null;
    }

    /** Returns true if field oldPartnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPartnerId() {
      return this.oldPartnerId != null;
    }

    public void setOldPartnerIdIsSet(boolean value) {
      if (!value) {
        this.oldPartnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_PARTNER:
        if (value == null) {
          unsetLotteryPartner();
        } else {
          setLotteryPartner((LotteryPartner)value);
        }
        break;

      case OLD_PARTNER_ID:
        if (value == null) {
          unsetOldPartnerId();
        } else {
          setOldPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_PARTNER:
        return getLotteryPartner();

      case OLD_PARTNER_ID:
        return getOldPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_PARTNER:
        return isSetLotteryPartner();
      case OLD_PARTNER_ID:
        return isSetOldPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryPartner_args)
        return this.equals((updateLotteryPartner_args)that);
      return false;
    }

    public boolean equals(updateLotteryPartner_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryPartner = true && this.isSetLotteryPartner();
      boolean that_present_lotteryPartner = true && that.isSetLotteryPartner();
      if (this_present_lotteryPartner || that_present_lotteryPartner) {
        if (!(this_present_lotteryPartner && that_present_lotteryPartner))
          return false;
        if (!this.lotteryPartner.equals(that.lotteryPartner))
          return false;
      }

      boolean this_present_oldPartnerId = true && this.isSetOldPartnerId();
      boolean that_present_oldPartnerId = true && that.isSetOldPartnerId();
      if (this_present_oldPartnerId || that_present_oldPartnerId) {
        if (!(this_present_oldPartnerId && that_present_oldPartnerId))
          return false;
        if (!this.oldPartnerId.equals(that.oldPartnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryPartner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryPartner()).compareTo(other.isSetLotteryPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryPartner, other.lotteryPartner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldPartnerId()).compareTo(other.isSetOldPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPartnerId, other.oldPartnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryPartner_args(");
      boolean first = true;

      sb.append("lotteryPartner:");
      if (this.lotteryPartner == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryPartner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldPartnerId:");
      if (this.oldPartnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.oldPartnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryPartner != null) {
        lotteryPartner.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryPartner_argsStandardSchemeFactory implements SchemeFactory {
      public updateLotteryPartner_argsStandardScheme getScheme() {
        return new updateLotteryPartner_argsStandardScheme();
      }
    }

    private static class updateLotteryPartner_argsStandardScheme extends StandardScheme<updateLotteryPartner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryPartner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryPartner = new LotteryPartner();
                struct.lotteryPartner.read(iprot);
                struct.setLotteryPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldPartnerId = iprot.readString();
                struct.setOldPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryPartner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryPartner != null) {
          oprot.writeFieldBegin(LOTTERY_PARTNER_FIELD_DESC);
          struct.lotteryPartner.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oldPartnerId != null) {
          oprot.writeFieldBegin(OLD_PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.oldPartnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryPartner_argsTupleSchemeFactory implements SchemeFactory {
      public updateLotteryPartner_argsTupleScheme getScheme() {
        return new updateLotteryPartner_argsTupleScheme();
      }
    }

    private static class updateLotteryPartner_argsTupleScheme extends TupleScheme<updateLotteryPartner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryPartner()) {
          optionals.set(0);
        }
        if (struct.isSetOldPartnerId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryPartner()) {
          struct.lotteryPartner.write(oprot);
        }
        if (struct.isSetOldPartnerId()) {
          oprot.writeString(struct.oldPartnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryPartner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryPartner = new LotteryPartner();
          struct.lotteryPartner.read(iprot);
          struct.setLotteryPartnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oldPartnerId = iprot.readString();
          struct.setOldPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryPartner_result implements org.apache.thrift.TBase<updateLotteryPartner_result, updateLotteryPartner_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryPartner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryPartner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryPartner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryPartner_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryPartner_result.class, metaDataMap);
    }

    public updateLotteryPartner_result() {
    }

    public updateLotteryPartner_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryPartner_result(updateLotteryPartner_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateLotteryPartner_result deepCopy() {
      return new updateLotteryPartner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateLotteryPartner_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryPartner_result)
        return this.equals((updateLotteryPartner_result)that);
      return false;
    }

    public boolean equals(updateLotteryPartner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryPartner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryPartner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryPartner_resultStandardSchemeFactory implements SchemeFactory {
      public updateLotteryPartner_resultStandardScheme getScheme() {
        return new updateLotteryPartner_resultStandardScheme();
      }
    }

    private static class updateLotteryPartner_resultStandardScheme extends StandardScheme<updateLotteryPartner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryPartner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryPartner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryPartner_resultTupleSchemeFactory implements SchemeFactory {
      public updateLotteryPartner_resultTupleScheme getScheme() {
        return new updateLotteryPartner_resultTupleScheme();
      }
    }

    private static class updateLotteryPartner_resultTupleScheme extends TupleScheme<updateLotteryPartner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryPartner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyPartnerIsExist_args implements org.apache.thrift.TBase<verifyPartnerIsExist_args, verifyPartnerIsExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPartnerIsExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPartnerIsExist_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPartnerIsExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPartnerIsExist_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPartnerIsExist_args.class, metaDataMap);
    }

    public verifyPartnerIsExist_args() {
    }

    public verifyPartnerIsExist_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPartnerIsExist_args(verifyPartnerIsExist_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public verifyPartnerIsExist_args deepCopy() {
      return new verifyPartnerIsExist_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public verifyPartnerIsExist_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPartnerIsExist_args)
        return this.equals((verifyPartnerIsExist_args)that);
      return false;
    }

    public boolean equals(verifyPartnerIsExist_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifyPartnerIsExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPartnerIsExist_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPartnerIsExist_argsStandardSchemeFactory implements SchemeFactory {
      public verifyPartnerIsExist_argsStandardScheme getScheme() {
        return new verifyPartnerIsExist_argsStandardScheme();
      }
    }

    private static class verifyPartnerIsExist_argsStandardScheme extends StandardScheme<verifyPartnerIsExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPartnerIsExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPartnerIsExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPartnerIsExist_argsTupleSchemeFactory implements SchemeFactory {
      public verifyPartnerIsExist_argsTupleScheme getScheme() {
        return new verifyPartnerIsExist_argsTupleScheme();
      }
    }

    private static class verifyPartnerIsExist_argsTupleScheme extends TupleScheme<verifyPartnerIsExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPartnerIsExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPartnerIsExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class verifyPartnerIsExist_result implements org.apache.thrift.TBase<verifyPartnerIsExist_result, verifyPartnerIsExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPartnerIsExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPartnerIsExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPartnerIsExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPartnerIsExist_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPartnerIsExist_result.class, metaDataMap);
    }

    public verifyPartnerIsExist_result() {
    }

    public verifyPartnerIsExist_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPartnerIsExist_result(verifyPartnerIsExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public verifyPartnerIsExist_result deepCopy() {
      return new verifyPartnerIsExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifyPartnerIsExist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPartnerIsExist_result)
        return this.equals((verifyPartnerIsExist_result)that);
      return false;
    }

    public boolean equals(verifyPartnerIsExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifyPartnerIsExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPartnerIsExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPartnerIsExist_resultStandardSchemeFactory implements SchemeFactory {
      public verifyPartnerIsExist_resultStandardScheme getScheme() {
        return new verifyPartnerIsExist_resultStandardScheme();
      }
    }

    private static class verifyPartnerIsExist_resultStandardScheme extends StandardScheme<verifyPartnerIsExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPartnerIsExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPartnerIsExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPartnerIsExist_resultTupleSchemeFactory implements SchemeFactory {
      public verifyPartnerIsExist_resultTupleScheme getScheme() {
        return new verifyPartnerIsExist_resultTupleScheme();
      }
    }

    private static class verifyPartnerIsExist_resultTupleScheme extends TupleScheme<verifyPartnerIsExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPartnerIsExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPartnerIsExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyCanBindUser_args implements org.apache.thrift.TBase<verifyCanBindUser_args, verifyCanBindUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyCanBindUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyCanBindUser_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyCanBindUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyCanBindUser_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyCanBindUser_args.class, metaDataMap);
    }

    public verifyCanBindUser_args() {
    }

    public verifyCanBindUser_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyCanBindUser_args(verifyCanBindUser_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public verifyCanBindUser_args deepCopy() {
      return new verifyCanBindUser_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public verifyCanBindUser_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyCanBindUser_args)
        return this.equals((verifyCanBindUser_args)that);
      return false;
    }

    public boolean equals(verifyCanBindUser_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifyCanBindUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyCanBindUser_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyCanBindUser_argsStandardSchemeFactory implements SchemeFactory {
      public verifyCanBindUser_argsStandardScheme getScheme() {
        return new verifyCanBindUser_argsStandardScheme();
      }
    }

    private static class verifyCanBindUser_argsStandardScheme extends StandardScheme<verifyCanBindUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyCanBindUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyCanBindUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyCanBindUser_argsTupleSchemeFactory implements SchemeFactory {
      public verifyCanBindUser_argsTupleScheme getScheme() {
        return new verifyCanBindUser_argsTupleScheme();
      }
    }

    private static class verifyCanBindUser_argsTupleScheme extends TupleScheme<verifyCanBindUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyCanBindUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyCanBindUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class verifyCanBindUser_result implements org.apache.thrift.TBase<verifyCanBindUser_result, verifyCanBindUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyCanBindUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyCanBindUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyCanBindUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyCanBindUser_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyCanBindUser_result.class, metaDataMap);
    }

    public verifyCanBindUser_result() {
    }

    public verifyCanBindUser_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyCanBindUser_result(verifyCanBindUser_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public verifyCanBindUser_result deepCopy() {
      return new verifyCanBindUser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifyCanBindUser_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyCanBindUser_result)
        return this.equals((verifyCanBindUser_result)that);
      return false;
    }

    public boolean equals(verifyCanBindUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifyCanBindUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyCanBindUser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyCanBindUser_resultStandardSchemeFactory implements SchemeFactory {
      public verifyCanBindUser_resultStandardScheme getScheme() {
        return new verifyCanBindUser_resultStandardScheme();
      }
    }

    private static class verifyCanBindUser_resultStandardScheme extends StandardScheme<verifyCanBindUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyCanBindUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyCanBindUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyCanBindUser_resultTupleSchemeFactory implements SchemeFactory {
      public verifyCanBindUser_resultTupleScheme getScheme() {
        return new verifyCanBindUser_resultTupleScheme();
      }
    }

    private static class verifyCanBindUser_resultTupleScheme extends TupleScheme<verifyCanBindUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyCanBindUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyCanBindUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPartnerForCheck_args implements org.apache.thrift.TBase<findPartnerForCheck_args, findPartnerForCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPartnerForCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPartnerForCheck_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPartnerForCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPartnerForCheck_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPartnerForCheck_args.class, metaDataMap);
    }

    public findPartnerForCheck_args() {
    }

    public findPartnerForCheck_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPartnerForCheck_args(findPartnerForCheck_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public findPartnerForCheck_args deepCopy() {
      return new findPartnerForCheck_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public findPartnerForCheck_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPartnerForCheck_args)
        return this.equals((findPartnerForCheck_args)that);
      return false;
    }

    public boolean equals(findPartnerForCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findPartnerForCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPartnerForCheck_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPartnerForCheck_argsStandardSchemeFactory implements SchemeFactory {
      public findPartnerForCheck_argsStandardScheme getScheme() {
        return new findPartnerForCheck_argsStandardScheme();
      }
    }

    private static class findPartnerForCheck_argsStandardScheme extends StandardScheme<findPartnerForCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPartnerForCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPartnerForCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPartnerForCheck_argsTupleSchemeFactory implements SchemeFactory {
      public findPartnerForCheck_argsTupleScheme getScheme() {
        return new findPartnerForCheck_argsTupleScheme();
      }
    }

    private static class findPartnerForCheck_argsTupleScheme extends TupleScheme<findPartnerForCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPartnerForCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPartnerForCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class findPartnerForCheck_result implements org.apache.thrift.TBase<findPartnerForCheck_result, findPartnerForCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPartnerForCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPartnerForCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPartnerForCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPartnerForCheck_resultTupleSchemeFactory());
    }

    public LotteryPartner success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryPartner.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPartnerForCheck_result.class, metaDataMap);
    }

    public findPartnerForCheck_result() {
    }

    public findPartnerForCheck_result(
      LotteryPartner success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPartnerForCheck_result(findPartnerForCheck_result other) {
      if (other.isSetSuccess()) {
        this.success = new LotteryPartner(other.success);
      }
    }

    public findPartnerForCheck_result deepCopy() {
      return new findPartnerForCheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LotteryPartner getSuccess() {
      return this.success;
    }

    public findPartnerForCheck_result setSuccess(LotteryPartner success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LotteryPartner)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPartnerForCheck_result)
        return this.equals((findPartnerForCheck_result)that);
      return false;
    }

    public boolean equals(findPartnerForCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findPartnerForCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPartnerForCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPartnerForCheck_resultStandardSchemeFactory implements SchemeFactory {
      public findPartnerForCheck_resultStandardScheme getScheme() {
        return new findPartnerForCheck_resultStandardScheme();
      }
    }

    private static class findPartnerForCheck_resultStandardScheme extends StandardScheme<findPartnerForCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPartnerForCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LotteryPartner();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPartnerForCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPartnerForCheck_resultTupleSchemeFactory implements SchemeFactory {
      public findPartnerForCheck_resultTupleScheme getScheme() {
        return new findPartnerForCheck_resultTupleScheme();
      }
    }

    private static class findPartnerForCheck_resultTupleScheme extends TupleScheme<findPartnerForCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPartnerForCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPartnerForCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LotteryPartner();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCallBackUrlListByPartnerId_args implements org.apache.thrift.TBase<getCallBackUrlListByPartnerId_args, getCallBackUrlListByPartnerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCallBackUrlListByPartnerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCallBackUrlListByPartnerId_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCallBackUrlListByPartnerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCallBackUrlListByPartnerId_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCallBackUrlListByPartnerId_args.class, metaDataMap);
    }

    public getCallBackUrlListByPartnerId_args() {
    }

    public getCallBackUrlListByPartnerId_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCallBackUrlListByPartnerId_args(getCallBackUrlListByPartnerId_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public getCallBackUrlListByPartnerId_args deepCopy() {
      return new getCallBackUrlListByPartnerId_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public getCallBackUrlListByPartnerId_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCallBackUrlListByPartnerId_args)
        return this.equals((getCallBackUrlListByPartnerId_args)that);
      return false;
    }

    public boolean equals(getCallBackUrlListByPartnerId_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCallBackUrlListByPartnerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCallBackUrlListByPartnerId_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCallBackUrlListByPartnerId_argsStandardSchemeFactory implements SchemeFactory {
      public getCallBackUrlListByPartnerId_argsStandardScheme getScheme() {
        return new getCallBackUrlListByPartnerId_argsStandardScheme();
      }
    }

    private static class getCallBackUrlListByPartnerId_argsStandardScheme extends StandardScheme<getCallBackUrlListByPartnerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCallBackUrlListByPartnerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCallBackUrlListByPartnerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCallBackUrlListByPartnerId_argsTupleSchemeFactory implements SchemeFactory {
      public getCallBackUrlListByPartnerId_argsTupleScheme getScheme() {
        return new getCallBackUrlListByPartnerId_argsTupleScheme();
      }
    }

    private static class getCallBackUrlListByPartnerId_argsTupleScheme extends TupleScheme<getCallBackUrlListByPartnerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCallBackUrlListByPartnerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCallBackUrlListByPartnerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class getCallBackUrlListByPartnerId_result implements org.apache.thrift.TBase<getCallBackUrlListByPartnerId_result, getCallBackUrlListByPartnerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCallBackUrlListByPartnerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCallBackUrlListByPartnerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCallBackUrlListByPartnerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCallBackUrlListByPartnerId_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCallBackUrlListByPartnerId_result.class, metaDataMap);
    }

    public getCallBackUrlListByPartnerId_result() {
    }

    public getCallBackUrlListByPartnerId_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCallBackUrlListByPartnerId_result(getCallBackUrlListByPartnerId_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getCallBackUrlListByPartnerId_result deepCopy() {
      return new getCallBackUrlListByPartnerId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getCallBackUrlListByPartnerId_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCallBackUrlListByPartnerId_result)
        return this.equals((getCallBackUrlListByPartnerId_result)that);
      return false;
    }

    public boolean equals(getCallBackUrlListByPartnerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCallBackUrlListByPartnerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCallBackUrlListByPartnerId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCallBackUrlListByPartnerId_resultStandardSchemeFactory implements SchemeFactory {
      public getCallBackUrlListByPartnerId_resultStandardScheme getScheme() {
        return new getCallBackUrlListByPartnerId_resultStandardScheme();
      }
    }

    private static class getCallBackUrlListByPartnerId_resultStandardScheme extends StandardScheme<getCallBackUrlListByPartnerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCallBackUrlListByPartnerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCallBackUrlListByPartnerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCallBackUrlListByPartnerId_resultTupleSchemeFactory implements SchemeFactory {
      public getCallBackUrlListByPartnerId_resultTupleScheme getScheme() {
        return new getCallBackUrlListByPartnerId_resultTupleScheme();
      }
    }

    private static class getCallBackUrlListByPartnerId_resultTupleScheme extends TupleScheme<getCallBackUrlListByPartnerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCallBackUrlListByPartnerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCallBackUrlListByPartnerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartnerIpAddressList_args implements org.apache.thrift.TBase<getPartnerIpAddressList_args, getPartnerIpAddressList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerIpAddressList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerIpAddressList_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerIpAddressList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerIpAddressList_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerIpAddressList_args.class, metaDataMap);
    }

    public getPartnerIpAddressList_args() {
    }

    public getPartnerIpAddressList_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerIpAddressList_args(getPartnerIpAddressList_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public getPartnerIpAddressList_args deepCopy() {
      return new getPartnerIpAddressList_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public getPartnerIpAddressList_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerIpAddressList_args)
        return this.equals((getPartnerIpAddressList_args)that);
      return false;
    }

    public boolean equals(getPartnerIpAddressList_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerIpAddressList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerIpAddressList_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerIpAddressList_argsStandardSchemeFactory implements SchemeFactory {
      public getPartnerIpAddressList_argsStandardScheme getScheme() {
        return new getPartnerIpAddressList_argsStandardScheme();
      }
    }

    private static class getPartnerIpAddressList_argsStandardScheme extends StandardScheme<getPartnerIpAddressList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerIpAddressList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerIpAddressList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerIpAddressList_argsTupleSchemeFactory implements SchemeFactory {
      public getPartnerIpAddressList_argsTupleScheme getScheme() {
        return new getPartnerIpAddressList_argsTupleScheme();
      }
    }

    private static class getPartnerIpAddressList_argsTupleScheme extends TupleScheme<getPartnerIpAddressList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerIpAddressList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerIpAddressList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class getPartnerIpAddressList_result implements org.apache.thrift.TBase<getPartnerIpAddressList_result, getPartnerIpAddressList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartnerIpAddressList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartnerIpAddressList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartnerIpAddressList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartnerIpAddressList_resultTupleSchemeFactory());
    }

    public List<PartnerIpAddress> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerIpAddress.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartnerIpAddressList_result.class, metaDataMap);
    }

    public getPartnerIpAddressList_result() {
    }

    public getPartnerIpAddressList_result(
      List<PartnerIpAddress> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartnerIpAddressList_result(getPartnerIpAddressList_result other) {
      if (other.isSetSuccess()) {
        List<PartnerIpAddress> __this__success = new ArrayList<PartnerIpAddress>(other.success.size());
        for (PartnerIpAddress other_element : other.success) {
          __this__success.add(new PartnerIpAddress(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPartnerIpAddressList_result deepCopy() {
      return new getPartnerIpAddressList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PartnerIpAddress> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PartnerIpAddress elem) {
      if (this.success == null) {
        this.success = new ArrayList<PartnerIpAddress>();
      }
      this.success.add(elem);
    }

    public List<PartnerIpAddress> getSuccess() {
      return this.success;
    }

    public getPartnerIpAddressList_result setSuccess(List<PartnerIpAddress> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PartnerIpAddress>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartnerIpAddressList_result)
        return this.equals((getPartnerIpAddressList_result)that);
      return false;
    }

    public boolean equals(getPartnerIpAddressList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPartnerIpAddressList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartnerIpAddressList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartnerIpAddressList_resultStandardSchemeFactory implements SchemeFactory {
      public getPartnerIpAddressList_resultStandardScheme getScheme() {
        return new getPartnerIpAddressList_resultStandardScheme();
      }
    }

    private static class getPartnerIpAddressList_resultStandardScheme extends StandardScheme<getPartnerIpAddressList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartnerIpAddressList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<PartnerIpAddress>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    PartnerIpAddress _elem26;
                    _elem26 = new PartnerIpAddress();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartnerIpAddressList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PartnerIpAddress _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartnerIpAddressList_resultTupleSchemeFactory implements SchemeFactory {
      public getPartnerIpAddressList_resultTupleScheme getScheme() {
        return new getPartnerIpAddressList_resultTupleScheme();
      }
    }

    private static class getPartnerIpAddressList_resultTupleScheme extends TupleScheme<getPartnerIpAddressList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartnerIpAddressList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PartnerIpAddress _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartnerIpAddressList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PartnerIpAddress>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              PartnerIpAddress _elem31;
              _elem31 = new PartnerIpAddress();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isExistIpAddress_args implements org.apache.thrift.TBase<isExistIpAddress_args, isExistIpAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<isExistIpAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExistIpAddress_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExistIpAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExistIpAddress_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String ipAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      IP_ADDRESS((short)2, "ipAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // IP_ADDRESS
            return IP_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExistIpAddress_args.class, metaDataMap);
    }

    public isExistIpAddress_args() {
    }

    public isExistIpAddress_args(
      String partnerId,
      String ipAddress)
    {
      this();
      this.partnerId = partnerId;
      this.ipAddress = ipAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExistIpAddress_args(isExistIpAddress_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetIpAddress()) {
        this.ipAddress = other.ipAddress;
      }
    }

    public isExistIpAddress_args deepCopy() {
      return new isExistIpAddress_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.ipAddress = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public isExistIpAddress_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getIpAddress() {
      return this.ipAddress;
    }

    public isExistIpAddress_args setIpAddress(String ipAddress) {
      this.ipAddress = ipAddress;
      return this;
    }

    public void unsetIpAddress() {
      this.ipAddress = null;
    }

    /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpAddress() {
      return this.ipAddress != null;
    }

    public void setIpAddressIsSet(boolean value) {
      if (!value) {
        this.ipAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case IP_ADDRESS:
        if (value == null) {
          unsetIpAddress();
        } else {
          setIpAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case IP_ADDRESS:
        return getIpAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case IP_ADDRESS:
        return isSetIpAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExistIpAddress_args)
        return this.equals((isExistIpAddress_args)that);
      return false;
    }

    public boolean equals(isExistIpAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_ipAddress = true && this.isSetIpAddress();
      boolean that_present_ipAddress = true && that.isSetIpAddress();
      if (this_present_ipAddress || that_present_ipAddress) {
        if (!(this_present_ipAddress && that_present_ipAddress))
          return false;
        if (!this.ipAddress.equals(that.ipAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isExistIpAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExistIpAddress_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipAddress:");
      if (this.ipAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExistIpAddress_argsStandardSchemeFactory implements SchemeFactory {
      public isExistIpAddress_argsStandardScheme getScheme() {
        return new isExistIpAddress_argsStandardScheme();
      }
    }

    private static class isExistIpAddress_argsStandardScheme extends StandardScheme<isExistIpAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExistIpAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipAddress = iprot.readString();
                struct.setIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExistIpAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.ipAddress != null) {
          oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.ipAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExistIpAddress_argsTupleSchemeFactory implements SchemeFactory {
      public isExistIpAddress_argsTupleScheme getScheme() {
        return new isExistIpAddress_argsTupleScheme();
      }
    }

    private static class isExistIpAddress_argsTupleScheme extends TupleScheme<isExistIpAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExistIpAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetIpAddress()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetIpAddress()) {
          oprot.writeString(struct.ipAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExistIpAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ipAddress = iprot.readString();
          struct.setIpAddressIsSet(true);
        }
      }
    }

  }

  public static class isExistIpAddress_result implements org.apache.thrift.TBase<isExistIpAddress_result, isExistIpAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<isExistIpAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExistIpAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExistIpAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExistIpAddress_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExistIpAddress_result.class, metaDataMap);
    }

    public isExistIpAddress_result() {
    }

    public isExistIpAddress_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExistIpAddress_result(isExistIpAddress_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isExistIpAddress_result deepCopy() {
      return new isExistIpAddress_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isExistIpAddress_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExistIpAddress_result)
        return this.equals((isExistIpAddress_result)that);
      return false;
    }

    public boolean equals(isExistIpAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isExistIpAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExistIpAddress_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExistIpAddress_resultStandardSchemeFactory implements SchemeFactory {
      public isExistIpAddress_resultStandardScheme getScheme() {
        return new isExistIpAddress_resultStandardScheme();
      }
    }

    private static class isExistIpAddress_resultStandardScheme extends StandardScheme<isExistIpAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExistIpAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExistIpAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExistIpAddress_resultTupleSchemeFactory implements SchemeFactory {
      public isExistIpAddress_resultTupleScheme getScheme() {
        return new isExistIpAddress_resultTupleScheme();
      }
    }

    private static class isExistIpAddress_resultTupleScheme extends TupleScheme<isExistIpAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExistIpAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExistIpAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deletePartnerByPartnerId_args implements org.apache.thrift.TBase<deletePartnerByPartnerId_args, deletePartnerByPartnerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePartnerByPartnerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePartnerByPartnerId_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePartnerByPartnerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePartnerByPartnerId_argsTupleSchemeFactory());
    }

    public String partnerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePartnerByPartnerId_args.class, metaDataMap);
    }

    public deletePartnerByPartnerId_args() {
    }

    public deletePartnerByPartnerId_args(
      String partnerId)
    {
      this();
      this.partnerId = partnerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePartnerByPartnerId_args(deletePartnerByPartnerId_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
    }

    public deletePartnerByPartnerId_args deepCopy() {
      return new deletePartnerByPartnerId_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public deletePartnerByPartnerId_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePartnerByPartnerId_args)
        return this.equals((deletePartnerByPartnerId_args)that);
      return false;
    }

    public boolean equals(deletePartnerByPartnerId_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deletePartnerByPartnerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePartnerByPartnerId_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePartnerByPartnerId_argsStandardSchemeFactory implements SchemeFactory {
      public deletePartnerByPartnerId_argsStandardScheme getScheme() {
        return new deletePartnerByPartnerId_argsStandardScheme();
      }
    }

    private static class deletePartnerByPartnerId_argsStandardScheme extends StandardScheme<deletePartnerByPartnerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePartnerByPartnerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePartnerByPartnerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePartnerByPartnerId_argsTupleSchemeFactory implements SchemeFactory {
      public deletePartnerByPartnerId_argsTupleScheme getScheme() {
        return new deletePartnerByPartnerId_argsTupleScheme();
      }
    }

    private static class deletePartnerByPartnerId_argsTupleScheme extends TupleScheme<deletePartnerByPartnerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePartnerByPartnerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePartnerByPartnerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
      }
    }

  }

  public static class deletePartnerByPartnerId_result implements org.apache.thrift.TBase<deletePartnerByPartnerId_result, deletePartnerByPartnerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePartnerByPartnerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePartnerByPartnerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePartnerByPartnerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePartnerByPartnerId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePartnerByPartnerId_result.class, metaDataMap);
    }

    public deletePartnerByPartnerId_result() {
    }

    public deletePartnerByPartnerId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePartnerByPartnerId_result(deletePartnerByPartnerId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deletePartnerByPartnerId_result deepCopy() {
      return new deletePartnerByPartnerId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deletePartnerByPartnerId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePartnerByPartnerId_result)
        return this.equals((deletePartnerByPartnerId_result)that);
      return false;
    }

    public boolean equals(deletePartnerByPartnerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deletePartnerByPartnerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePartnerByPartnerId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePartnerByPartnerId_resultStandardSchemeFactory implements SchemeFactory {
      public deletePartnerByPartnerId_resultStandardScheme getScheme() {
        return new deletePartnerByPartnerId_resultStandardScheme();
      }
    }

    private static class deletePartnerByPartnerId_resultStandardScheme extends StandardScheme<deletePartnerByPartnerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePartnerByPartnerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePartnerByPartnerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePartnerByPartnerId_resultTupleSchemeFactory implements SchemeFactory {
      public deletePartnerByPartnerId_resultTupleScheme getScheme() {
        return new deletePartnerByPartnerId_resultTupleScheme();
      }
    }

    private static class deletePartnerByPartnerId_resultTupleScheme extends TupleScheme<deletePartnerByPartnerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePartnerByPartnerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePartnerByPartnerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
