/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MatchCompetive implements org.apache.thrift.TBase<MatchCompetive, MatchCompetive._Fields>, java.io.Serializable, Cloneable, Comparable<MatchCompetive> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatchCompetive");

  private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MATCH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MATCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HOME_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("homeTeam", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GUEST_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("guestTeam", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("drawResult", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MATCH_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchBeginTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BETTING_DEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("bettingDeadline", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MATCH_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchEndTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MATCH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_ALLOW_MODIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("isAllowModify", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MATCH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchStatus", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_PLAY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetivePlayList", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetiveResultList", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BEGIN_MATCH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("beginMatchDate", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField END_MATCH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endMatchDate", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MatchCompetiveStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MatchCompetiveTupleSchemeFactory());
  }

  public String wareIssue; // required
  public String matchId; // required
  public String transferId; // required
  public int matchType; // required
  public String matchNo; // required
  public String matchName; // required
  public String homeTeam; // required
  public String guestTeam; // required
  public String drawResult; // required
  public String matchBeginTime; // required
  public String bettingDeadline; // required
  public String matchEndTime; // required
  public String matchDate; // required
  public int isAllowModify; // required
  public int matchStatus; // required
  public List<MatchCompetivePlay> matchCompetivePlayList; // required
  public List<MatchCompetiveResult> matchCompetiveResultList; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public String beginMatchDate; // required
  public String endMatchDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WARE_ISSUE((short)1, "wareIssue"),
    MATCH_ID((short)2, "matchId"),
    TRANSFER_ID((short)3, "transferId"),
    MATCH_TYPE((short)4, "matchType"),
    MATCH_NO((short)5, "matchNo"),
    MATCH_NAME((short)6, "matchName"),
    HOME_TEAM((short)7, "homeTeam"),
    GUEST_TEAM((short)8, "guestTeam"),
    DRAW_RESULT((short)9, "drawResult"),
    MATCH_BEGIN_TIME((short)10, "matchBeginTime"),
    BETTING_DEADLINE((short)11, "bettingDeadline"),
    MATCH_END_TIME((short)12, "matchEndTime"),
    MATCH_DATE((short)13, "matchDate"),
    IS_ALLOW_MODIFY((short)14, "isAllowModify"),
    MATCH_STATUS((short)15, "matchStatus"),
    MATCH_COMPETIVE_PLAY_LIST((short)16, "matchCompetivePlayList"),
    MATCH_COMPETIVE_RESULT_LIST((short)17, "matchCompetiveResultList"),
    CREATE_TIME((short)18, "createTime"),
    LAST_UPDATE_TIME((short)19, "lastUpdateTime"),
    BEGIN_MATCH_DATE((short)20, "beginMatchDate"),
    END_MATCH_DATE((short)21, "endMatchDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WARE_ISSUE
          return WARE_ISSUE;
        case 2: // MATCH_ID
          return MATCH_ID;
        case 3: // TRANSFER_ID
          return TRANSFER_ID;
        case 4: // MATCH_TYPE
          return MATCH_TYPE;
        case 5: // MATCH_NO
          return MATCH_NO;
        case 6: // MATCH_NAME
          return MATCH_NAME;
        case 7: // HOME_TEAM
          return HOME_TEAM;
        case 8: // GUEST_TEAM
          return GUEST_TEAM;
        case 9: // DRAW_RESULT
          return DRAW_RESULT;
        case 10: // MATCH_BEGIN_TIME
          return MATCH_BEGIN_TIME;
        case 11: // BETTING_DEADLINE
          return BETTING_DEADLINE;
        case 12: // MATCH_END_TIME
          return MATCH_END_TIME;
        case 13: // MATCH_DATE
          return MATCH_DATE;
        case 14: // IS_ALLOW_MODIFY
          return IS_ALLOW_MODIFY;
        case 15: // MATCH_STATUS
          return MATCH_STATUS;
        case 16: // MATCH_COMPETIVE_PLAY_LIST
          return MATCH_COMPETIVE_PLAY_LIST;
        case 17: // MATCH_COMPETIVE_RESULT_LIST
          return MATCH_COMPETIVE_RESULT_LIST;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 20: // BEGIN_MATCH_DATE
          return BEGIN_MATCH_DATE;
        case 21: // END_MATCH_DATE
          return END_MATCH_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MATCHTYPE_ISSET_ID = 0;
  private static final int __ISALLOWMODIFY_ISSET_ID = 1;
  private static final int __MATCHSTATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("matchId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("matchType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("matchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("matchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_TEAM, new org.apache.thrift.meta_data.FieldMetaData("homeTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUEST_TEAM, new org.apache.thrift.meta_data.FieldMetaData("guestTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("drawResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("matchBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BETTING_DEADLINE, new org.apache.thrift.meta_data.FieldMetaData("bettingDeadline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("matchEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_DATE, new org.apache.thrift.meta_data.FieldMetaData("matchDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ALLOW_MODIFY, new org.apache.thrift.meta_data.FieldMetaData("isAllowModify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("matchStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_COMPETIVE_PLAY_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchCompetivePlayList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetivePlay.class))));
    tmpMap.put(_Fields.MATCH_COMPETIVE_RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchCompetiveResultList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetiveResult.class))));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_MATCH_DATE, new org.apache.thrift.meta_data.FieldMetaData("beginMatchDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_MATCH_DATE, new org.apache.thrift.meta_data.FieldMetaData("endMatchDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatchCompetive.class, metaDataMap);
  }

  public MatchCompetive() {
  }

  public MatchCompetive(
    String wareIssue,
    String matchId,
    String transferId,
    int matchType,
    String matchNo,
    String matchName,
    String homeTeam,
    String guestTeam,
    String drawResult,
    String matchBeginTime,
    String bettingDeadline,
    String matchEndTime,
    String matchDate,
    int isAllowModify,
    int matchStatus,
    List<MatchCompetivePlay> matchCompetivePlayList,
    List<MatchCompetiveResult> matchCompetiveResultList,
    String createTime,
    String lastUpdateTime,
    String beginMatchDate,
    String endMatchDate)
  {
    this();
    this.wareIssue = wareIssue;
    this.matchId = matchId;
    this.transferId = transferId;
    this.matchType = matchType;
    setMatchTypeIsSet(true);
    this.matchNo = matchNo;
    this.matchName = matchName;
    this.homeTeam = homeTeam;
    this.guestTeam = guestTeam;
    this.drawResult = drawResult;
    this.matchBeginTime = matchBeginTime;
    this.bettingDeadline = bettingDeadline;
    this.matchEndTime = matchEndTime;
    this.matchDate = matchDate;
    this.isAllowModify = isAllowModify;
    setIsAllowModifyIsSet(true);
    this.matchStatus = matchStatus;
    setMatchStatusIsSet(true);
    this.matchCompetivePlayList = matchCompetivePlayList;
    this.matchCompetiveResultList = matchCompetiveResultList;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.beginMatchDate = beginMatchDate;
    this.endMatchDate = endMatchDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatchCompetive(MatchCompetive other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWareIssue()) {
      this.wareIssue = other.wareIssue;
    }
    if (other.isSetMatchId()) {
      this.matchId = other.matchId;
    }
    if (other.isSetTransferId()) {
      this.transferId = other.transferId;
    }
    this.matchType = other.matchType;
    if (other.isSetMatchNo()) {
      this.matchNo = other.matchNo;
    }
    if (other.isSetMatchName()) {
      this.matchName = other.matchName;
    }
    if (other.isSetHomeTeam()) {
      this.homeTeam = other.homeTeam;
    }
    if (other.isSetGuestTeam()) {
      this.guestTeam = other.guestTeam;
    }
    if (other.isSetDrawResult()) {
      this.drawResult = other.drawResult;
    }
    if (other.isSetMatchBeginTime()) {
      this.matchBeginTime = other.matchBeginTime;
    }
    if (other.isSetBettingDeadline()) {
      this.bettingDeadline = other.bettingDeadline;
    }
    if (other.isSetMatchEndTime()) {
      this.matchEndTime = other.matchEndTime;
    }
    if (other.isSetMatchDate()) {
      this.matchDate = other.matchDate;
    }
    this.isAllowModify = other.isAllowModify;
    this.matchStatus = other.matchStatus;
    if (other.isSetMatchCompetivePlayList()) {
      List<MatchCompetivePlay> __this__matchCompetivePlayList = new ArrayList<MatchCompetivePlay>(other.matchCompetivePlayList.size());
      for (MatchCompetivePlay other_element : other.matchCompetivePlayList) {
        __this__matchCompetivePlayList.add(new MatchCompetivePlay(other_element));
      }
      this.matchCompetivePlayList = __this__matchCompetivePlayList;
    }
    if (other.isSetMatchCompetiveResultList()) {
      List<MatchCompetiveResult> __this__matchCompetiveResultList = new ArrayList<MatchCompetiveResult>(other.matchCompetiveResultList.size());
      for (MatchCompetiveResult other_element : other.matchCompetiveResultList) {
        __this__matchCompetiveResultList.add(new MatchCompetiveResult(other_element));
      }
      this.matchCompetiveResultList = __this__matchCompetiveResultList;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetBeginMatchDate()) {
      this.beginMatchDate = other.beginMatchDate;
    }
    if (other.isSetEndMatchDate()) {
      this.endMatchDate = other.endMatchDate;
    }
  }

  public MatchCompetive deepCopy() {
    return new MatchCompetive(this);
  }

  @Override
  public void clear() {
    this.wareIssue = null;
    this.matchId = null;
    this.transferId = null;
    setMatchTypeIsSet(false);
    this.matchType = 0;
    this.matchNo = null;
    this.matchName = null;
    this.homeTeam = null;
    this.guestTeam = null;
    this.drawResult = null;
    this.matchBeginTime = null;
    this.bettingDeadline = null;
    this.matchEndTime = null;
    this.matchDate = null;
    setIsAllowModifyIsSet(false);
    this.isAllowModify = 0;
    setMatchStatusIsSet(false);
    this.matchStatus = 0;
    this.matchCompetivePlayList = null;
    this.matchCompetiveResultList = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.beginMatchDate = null;
    this.endMatchDate = null;
  }

  public String getWareIssue() {
    return this.wareIssue;
  }

  public MatchCompetive setWareIssue(String wareIssue) {
    this.wareIssue = wareIssue;
    return this;
  }

  public void unsetWareIssue() {
    this.wareIssue = null;
  }

  /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
  public boolean isSetWareIssue() {
    return this.wareIssue != null;
  }

  public void setWareIssueIsSet(boolean value) {
    if (!value) {
      this.wareIssue = null;
    }
  }

  public String getMatchId() {
    return this.matchId;
  }

  public MatchCompetive setMatchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  public void unsetMatchId() {
    this.matchId = null;
  }

  /** Returns true if field matchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchId() {
    return this.matchId != null;
  }

  public void setMatchIdIsSet(boolean value) {
    if (!value) {
      this.matchId = null;
    }
  }

  public String getTransferId() {
    return this.transferId;
  }

  public MatchCompetive setTransferId(String transferId) {
    this.transferId = transferId;
    return this;
  }

  public void unsetTransferId() {
    this.transferId = null;
  }

  /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferId() {
    return this.transferId != null;
  }

  public void setTransferIdIsSet(boolean value) {
    if (!value) {
      this.transferId = null;
    }
  }

  public int getMatchType() {
    return this.matchType;
  }

  public MatchCompetive setMatchType(int matchType) {
    this.matchType = matchType;
    setMatchTypeIsSet(true);
    return this;
  }

  public void unsetMatchType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHTYPE_ISSET_ID);
  }

  /** Returns true if field matchType is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchType() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHTYPE_ISSET_ID);
  }

  public void setMatchTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHTYPE_ISSET_ID, value);
  }

  public String getMatchNo() {
    return this.matchNo;
  }

  public MatchCompetive setMatchNo(String matchNo) {
    this.matchNo = matchNo;
    return this;
  }

  public void unsetMatchNo() {
    this.matchNo = null;
  }

  /** Returns true if field matchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchNo() {
    return this.matchNo != null;
  }

  public void setMatchNoIsSet(boolean value) {
    if (!value) {
      this.matchNo = null;
    }
  }

  public String getMatchName() {
    return this.matchName;
  }

  public MatchCompetive setMatchName(String matchName) {
    this.matchName = matchName;
    return this;
  }

  public void unsetMatchName() {
    this.matchName = null;
  }

  /** Returns true if field matchName is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchName() {
    return this.matchName != null;
  }

  public void setMatchNameIsSet(boolean value) {
    if (!value) {
      this.matchName = null;
    }
  }

  public String getHomeTeam() {
    return this.homeTeam;
  }

  public MatchCompetive setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  public void unsetHomeTeam() {
    this.homeTeam = null;
  }

  /** Returns true if field homeTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeTeam() {
    return this.homeTeam != null;
  }

  public void setHomeTeamIsSet(boolean value) {
    if (!value) {
      this.homeTeam = null;
    }
  }

  public String getGuestTeam() {
    return this.guestTeam;
  }

  public MatchCompetive setGuestTeam(String guestTeam) {
    this.guestTeam = guestTeam;
    return this;
  }

  public void unsetGuestTeam() {
    this.guestTeam = null;
  }

  /** Returns true if field guestTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetGuestTeam() {
    return this.guestTeam != null;
  }

  public void setGuestTeamIsSet(boolean value) {
    if (!value) {
      this.guestTeam = null;
    }
  }

  public String getDrawResult() {
    return this.drawResult;
  }

  public MatchCompetive setDrawResult(String drawResult) {
    this.drawResult = drawResult;
    return this;
  }

  public void unsetDrawResult() {
    this.drawResult = null;
  }

  /** Returns true if field drawResult is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawResult() {
    return this.drawResult != null;
  }

  public void setDrawResultIsSet(boolean value) {
    if (!value) {
      this.drawResult = null;
    }
  }

  public String getMatchBeginTime() {
    return this.matchBeginTime;
  }

  public MatchCompetive setMatchBeginTime(String matchBeginTime) {
    this.matchBeginTime = matchBeginTime;
    return this;
  }

  public void unsetMatchBeginTime() {
    this.matchBeginTime = null;
  }

  /** Returns true if field matchBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchBeginTime() {
    return this.matchBeginTime != null;
  }

  public void setMatchBeginTimeIsSet(boolean value) {
    if (!value) {
      this.matchBeginTime = null;
    }
  }

  public String getBettingDeadline() {
    return this.bettingDeadline;
  }

  public MatchCompetive setBettingDeadline(String bettingDeadline) {
    this.bettingDeadline = bettingDeadline;
    return this;
  }

  public void unsetBettingDeadline() {
    this.bettingDeadline = null;
  }

  /** Returns true if field bettingDeadline is set (has been assigned a value) and false otherwise */
  public boolean isSetBettingDeadline() {
    return this.bettingDeadline != null;
  }

  public void setBettingDeadlineIsSet(boolean value) {
    if (!value) {
      this.bettingDeadline = null;
    }
  }

  public String getMatchEndTime() {
    return this.matchEndTime;
  }

  public MatchCompetive setMatchEndTime(String matchEndTime) {
    this.matchEndTime = matchEndTime;
    return this;
  }

  public void unsetMatchEndTime() {
    this.matchEndTime = null;
  }

  /** Returns true if field matchEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchEndTime() {
    return this.matchEndTime != null;
  }

  public void setMatchEndTimeIsSet(boolean value) {
    if (!value) {
      this.matchEndTime = null;
    }
  }

  public String getMatchDate() {
    return this.matchDate;
  }

  public MatchCompetive setMatchDate(String matchDate) {
    this.matchDate = matchDate;
    return this;
  }

  public void unsetMatchDate() {
    this.matchDate = null;
  }

  /** Returns true if field matchDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchDate() {
    return this.matchDate != null;
  }

  public void setMatchDateIsSet(boolean value) {
    if (!value) {
      this.matchDate = null;
    }
  }

  public int getIsAllowModify() {
    return this.isAllowModify;
  }

  public MatchCompetive setIsAllowModify(int isAllowModify) {
    this.isAllowModify = isAllowModify;
    setIsAllowModifyIsSet(true);
    return this;
  }

  public void unsetIsAllowModify() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALLOWMODIFY_ISSET_ID);
  }

  /** Returns true if field isAllowModify is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAllowModify() {
    return EncodingUtils.testBit(__isset_bitfield, __ISALLOWMODIFY_ISSET_ID);
  }

  public void setIsAllowModifyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALLOWMODIFY_ISSET_ID, value);
  }

  public int getMatchStatus() {
    return this.matchStatus;
  }

  public MatchCompetive setMatchStatus(int matchStatus) {
    this.matchStatus = matchStatus;
    setMatchStatusIsSet(true);
    return this;
  }

  public void unsetMatchStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHSTATUS_ISSET_ID);
  }

  /** Returns true if field matchStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHSTATUS_ISSET_ID);
  }

  public void setMatchStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHSTATUS_ISSET_ID, value);
  }

  public int getMatchCompetivePlayListSize() {
    return (this.matchCompetivePlayList == null) ? 0 : this.matchCompetivePlayList.size();
  }

  public java.util.Iterator<MatchCompetivePlay> getMatchCompetivePlayListIterator() {
    return (this.matchCompetivePlayList == null) ? null : this.matchCompetivePlayList.iterator();
  }

  public void addToMatchCompetivePlayList(MatchCompetivePlay elem) {
    if (this.matchCompetivePlayList == null) {
      this.matchCompetivePlayList = new ArrayList<MatchCompetivePlay>();
    }
    this.matchCompetivePlayList.add(elem);
  }

  public List<MatchCompetivePlay> getMatchCompetivePlayList() {
    return this.matchCompetivePlayList;
  }

  public MatchCompetive setMatchCompetivePlayList(List<MatchCompetivePlay> matchCompetivePlayList) {
    this.matchCompetivePlayList = matchCompetivePlayList;
    return this;
  }

  public void unsetMatchCompetivePlayList() {
    this.matchCompetivePlayList = null;
  }

  /** Returns true if field matchCompetivePlayList is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchCompetivePlayList() {
    return this.matchCompetivePlayList != null;
  }

  public void setMatchCompetivePlayListIsSet(boolean value) {
    if (!value) {
      this.matchCompetivePlayList = null;
    }
  }

  public int getMatchCompetiveResultListSize() {
    return (this.matchCompetiveResultList == null) ? 0 : this.matchCompetiveResultList.size();
  }

  public java.util.Iterator<MatchCompetiveResult> getMatchCompetiveResultListIterator() {
    return (this.matchCompetiveResultList == null) ? null : this.matchCompetiveResultList.iterator();
  }

  public void addToMatchCompetiveResultList(MatchCompetiveResult elem) {
    if (this.matchCompetiveResultList == null) {
      this.matchCompetiveResultList = new ArrayList<MatchCompetiveResult>();
    }
    this.matchCompetiveResultList.add(elem);
  }

  public List<MatchCompetiveResult> getMatchCompetiveResultList() {
    return this.matchCompetiveResultList;
  }

  public MatchCompetive setMatchCompetiveResultList(List<MatchCompetiveResult> matchCompetiveResultList) {
    this.matchCompetiveResultList = matchCompetiveResultList;
    return this;
  }

  public void unsetMatchCompetiveResultList() {
    this.matchCompetiveResultList = null;
  }

  /** Returns true if field matchCompetiveResultList is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchCompetiveResultList() {
    return this.matchCompetiveResultList != null;
  }

  public void setMatchCompetiveResultListIsSet(boolean value) {
    if (!value) {
      this.matchCompetiveResultList = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MatchCompetive setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public MatchCompetive setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public String getBeginMatchDate() {
    return this.beginMatchDate;
  }

  public MatchCompetive setBeginMatchDate(String beginMatchDate) {
    this.beginMatchDate = beginMatchDate;
    return this;
  }

  public void unsetBeginMatchDate() {
    this.beginMatchDate = null;
  }

  /** Returns true if field beginMatchDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginMatchDate() {
    return this.beginMatchDate != null;
  }

  public void setBeginMatchDateIsSet(boolean value) {
    if (!value) {
      this.beginMatchDate = null;
    }
  }

  public String getEndMatchDate() {
    return this.endMatchDate;
  }

  public MatchCompetive setEndMatchDate(String endMatchDate) {
    this.endMatchDate = endMatchDate;
    return this;
  }

  public void unsetEndMatchDate() {
    this.endMatchDate = null;
  }

  /** Returns true if field endMatchDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndMatchDate() {
    return this.endMatchDate != null;
  }

  public void setEndMatchDateIsSet(boolean value) {
    if (!value) {
      this.endMatchDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WARE_ISSUE:
      if (value == null) {
        unsetWareIssue();
      } else {
        setWareIssue((String)value);
      }
      break;

    case MATCH_ID:
      if (value == null) {
        unsetMatchId();
      } else {
        setMatchId((String)value);
      }
      break;

    case TRANSFER_ID:
      if (value == null) {
        unsetTransferId();
      } else {
        setTransferId((String)value);
      }
      break;

    case MATCH_TYPE:
      if (value == null) {
        unsetMatchType();
      } else {
        setMatchType((Integer)value);
      }
      break;

    case MATCH_NO:
      if (value == null) {
        unsetMatchNo();
      } else {
        setMatchNo((String)value);
      }
      break;

    case MATCH_NAME:
      if (value == null) {
        unsetMatchName();
      } else {
        setMatchName((String)value);
      }
      break;

    case HOME_TEAM:
      if (value == null) {
        unsetHomeTeam();
      } else {
        setHomeTeam((String)value);
      }
      break;

    case GUEST_TEAM:
      if (value == null) {
        unsetGuestTeam();
      } else {
        setGuestTeam((String)value);
      }
      break;

    case DRAW_RESULT:
      if (value == null) {
        unsetDrawResult();
      } else {
        setDrawResult((String)value);
      }
      break;

    case MATCH_BEGIN_TIME:
      if (value == null) {
        unsetMatchBeginTime();
      } else {
        setMatchBeginTime((String)value);
      }
      break;

    case BETTING_DEADLINE:
      if (value == null) {
        unsetBettingDeadline();
      } else {
        setBettingDeadline((String)value);
      }
      break;

    case MATCH_END_TIME:
      if (value == null) {
        unsetMatchEndTime();
      } else {
        setMatchEndTime((String)value);
      }
      break;

    case MATCH_DATE:
      if (value == null) {
        unsetMatchDate();
      } else {
        setMatchDate((String)value);
      }
      break;

    case IS_ALLOW_MODIFY:
      if (value == null) {
        unsetIsAllowModify();
      } else {
        setIsAllowModify((Integer)value);
      }
      break;

    case MATCH_STATUS:
      if (value == null) {
        unsetMatchStatus();
      } else {
        setMatchStatus((Integer)value);
      }
      break;

    case MATCH_COMPETIVE_PLAY_LIST:
      if (value == null) {
        unsetMatchCompetivePlayList();
      } else {
        setMatchCompetivePlayList((List<MatchCompetivePlay>)value);
      }
      break;

    case MATCH_COMPETIVE_RESULT_LIST:
      if (value == null) {
        unsetMatchCompetiveResultList();
      } else {
        setMatchCompetiveResultList((List<MatchCompetiveResult>)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case BEGIN_MATCH_DATE:
      if (value == null) {
        unsetBeginMatchDate();
      } else {
        setBeginMatchDate((String)value);
      }
      break;

    case END_MATCH_DATE:
      if (value == null) {
        unsetEndMatchDate();
      } else {
        setEndMatchDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WARE_ISSUE:
      return getWareIssue();

    case MATCH_ID:
      return getMatchId();

    case TRANSFER_ID:
      return getTransferId();

    case MATCH_TYPE:
      return Integer.valueOf(getMatchType());

    case MATCH_NO:
      return getMatchNo();

    case MATCH_NAME:
      return getMatchName();

    case HOME_TEAM:
      return getHomeTeam();

    case GUEST_TEAM:
      return getGuestTeam();

    case DRAW_RESULT:
      return getDrawResult();

    case MATCH_BEGIN_TIME:
      return getMatchBeginTime();

    case BETTING_DEADLINE:
      return getBettingDeadline();

    case MATCH_END_TIME:
      return getMatchEndTime();

    case MATCH_DATE:
      return getMatchDate();

    case IS_ALLOW_MODIFY:
      return Integer.valueOf(getIsAllowModify());

    case MATCH_STATUS:
      return Integer.valueOf(getMatchStatus());

    case MATCH_COMPETIVE_PLAY_LIST:
      return getMatchCompetivePlayList();

    case MATCH_COMPETIVE_RESULT_LIST:
      return getMatchCompetiveResultList();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case BEGIN_MATCH_DATE:
      return getBeginMatchDate();

    case END_MATCH_DATE:
      return getEndMatchDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WARE_ISSUE:
      return isSetWareIssue();
    case MATCH_ID:
      return isSetMatchId();
    case TRANSFER_ID:
      return isSetTransferId();
    case MATCH_TYPE:
      return isSetMatchType();
    case MATCH_NO:
      return isSetMatchNo();
    case MATCH_NAME:
      return isSetMatchName();
    case HOME_TEAM:
      return isSetHomeTeam();
    case GUEST_TEAM:
      return isSetGuestTeam();
    case DRAW_RESULT:
      return isSetDrawResult();
    case MATCH_BEGIN_TIME:
      return isSetMatchBeginTime();
    case BETTING_DEADLINE:
      return isSetBettingDeadline();
    case MATCH_END_TIME:
      return isSetMatchEndTime();
    case MATCH_DATE:
      return isSetMatchDate();
    case IS_ALLOW_MODIFY:
      return isSetIsAllowModify();
    case MATCH_STATUS:
      return isSetMatchStatus();
    case MATCH_COMPETIVE_PLAY_LIST:
      return isSetMatchCompetivePlayList();
    case MATCH_COMPETIVE_RESULT_LIST:
      return isSetMatchCompetiveResultList();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case BEGIN_MATCH_DATE:
      return isSetBeginMatchDate();
    case END_MATCH_DATE:
      return isSetEndMatchDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MatchCompetive)
      return this.equals((MatchCompetive)that);
    return false;
  }

  public boolean equals(MatchCompetive that) {
    if (that == null)
      return false;

    boolean this_present_wareIssue = true && this.isSetWareIssue();
    boolean that_present_wareIssue = true && that.isSetWareIssue();
    if (this_present_wareIssue || that_present_wareIssue) {
      if (!(this_present_wareIssue && that_present_wareIssue))
        return false;
      if (!this.wareIssue.equals(that.wareIssue))
        return false;
    }

    boolean this_present_matchId = true && this.isSetMatchId();
    boolean that_present_matchId = true && that.isSetMatchId();
    if (this_present_matchId || that_present_matchId) {
      if (!(this_present_matchId && that_present_matchId))
        return false;
      if (!this.matchId.equals(that.matchId))
        return false;
    }

    boolean this_present_transferId = true && this.isSetTransferId();
    boolean that_present_transferId = true && that.isSetTransferId();
    if (this_present_transferId || that_present_transferId) {
      if (!(this_present_transferId && that_present_transferId))
        return false;
      if (!this.transferId.equals(that.transferId))
        return false;
    }

    boolean this_present_matchType = true;
    boolean that_present_matchType = true;
    if (this_present_matchType || that_present_matchType) {
      if (!(this_present_matchType && that_present_matchType))
        return false;
      if (this.matchType != that.matchType)
        return false;
    }

    boolean this_present_matchNo = true && this.isSetMatchNo();
    boolean that_present_matchNo = true && that.isSetMatchNo();
    if (this_present_matchNo || that_present_matchNo) {
      if (!(this_present_matchNo && that_present_matchNo))
        return false;
      if (!this.matchNo.equals(that.matchNo))
        return false;
    }

    boolean this_present_matchName = true && this.isSetMatchName();
    boolean that_present_matchName = true && that.isSetMatchName();
    if (this_present_matchName || that_present_matchName) {
      if (!(this_present_matchName && that_present_matchName))
        return false;
      if (!this.matchName.equals(that.matchName))
        return false;
    }

    boolean this_present_homeTeam = true && this.isSetHomeTeam();
    boolean that_present_homeTeam = true && that.isSetHomeTeam();
    if (this_present_homeTeam || that_present_homeTeam) {
      if (!(this_present_homeTeam && that_present_homeTeam))
        return false;
      if (!this.homeTeam.equals(that.homeTeam))
        return false;
    }

    boolean this_present_guestTeam = true && this.isSetGuestTeam();
    boolean that_present_guestTeam = true && that.isSetGuestTeam();
    if (this_present_guestTeam || that_present_guestTeam) {
      if (!(this_present_guestTeam && that_present_guestTeam))
        return false;
      if (!this.guestTeam.equals(that.guestTeam))
        return false;
    }

    boolean this_present_drawResult = true && this.isSetDrawResult();
    boolean that_present_drawResult = true && that.isSetDrawResult();
    if (this_present_drawResult || that_present_drawResult) {
      if (!(this_present_drawResult && that_present_drawResult))
        return false;
      if (!this.drawResult.equals(that.drawResult))
        return false;
    }

    boolean this_present_matchBeginTime = true && this.isSetMatchBeginTime();
    boolean that_present_matchBeginTime = true && that.isSetMatchBeginTime();
    if (this_present_matchBeginTime || that_present_matchBeginTime) {
      if (!(this_present_matchBeginTime && that_present_matchBeginTime))
        return false;
      if (!this.matchBeginTime.equals(that.matchBeginTime))
        return false;
    }

    boolean this_present_bettingDeadline = true && this.isSetBettingDeadline();
    boolean that_present_bettingDeadline = true && that.isSetBettingDeadline();
    if (this_present_bettingDeadline || that_present_bettingDeadline) {
      if (!(this_present_bettingDeadline && that_present_bettingDeadline))
        return false;
      if (!this.bettingDeadline.equals(that.bettingDeadline))
        return false;
    }

    boolean this_present_matchEndTime = true && this.isSetMatchEndTime();
    boolean that_present_matchEndTime = true && that.isSetMatchEndTime();
    if (this_present_matchEndTime || that_present_matchEndTime) {
      if (!(this_present_matchEndTime && that_present_matchEndTime))
        return false;
      if (!this.matchEndTime.equals(that.matchEndTime))
        return false;
    }

    boolean this_present_matchDate = true && this.isSetMatchDate();
    boolean that_present_matchDate = true && that.isSetMatchDate();
    if (this_present_matchDate || that_present_matchDate) {
      if (!(this_present_matchDate && that_present_matchDate))
        return false;
      if (!this.matchDate.equals(that.matchDate))
        return false;
    }

    boolean this_present_isAllowModify = true;
    boolean that_present_isAllowModify = true;
    if (this_present_isAllowModify || that_present_isAllowModify) {
      if (!(this_present_isAllowModify && that_present_isAllowModify))
        return false;
      if (this.isAllowModify != that.isAllowModify)
        return false;
    }

    boolean this_present_matchStatus = true;
    boolean that_present_matchStatus = true;
    if (this_present_matchStatus || that_present_matchStatus) {
      if (!(this_present_matchStatus && that_present_matchStatus))
        return false;
      if (this.matchStatus != that.matchStatus)
        return false;
    }

    boolean this_present_matchCompetivePlayList = true && this.isSetMatchCompetivePlayList();
    boolean that_present_matchCompetivePlayList = true && that.isSetMatchCompetivePlayList();
    if (this_present_matchCompetivePlayList || that_present_matchCompetivePlayList) {
      if (!(this_present_matchCompetivePlayList && that_present_matchCompetivePlayList))
        return false;
      if (!this.matchCompetivePlayList.equals(that.matchCompetivePlayList))
        return false;
    }

    boolean this_present_matchCompetiveResultList = true && this.isSetMatchCompetiveResultList();
    boolean that_present_matchCompetiveResultList = true && that.isSetMatchCompetiveResultList();
    if (this_present_matchCompetiveResultList || that_present_matchCompetiveResultList) {
      if (!(this_present_matchCompetiveResultList && that_present_matchCompetiveResultList))
        return false;
      if (!this.matchCompetiveResultList.equals(that.matchCompetiveResultList))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_beginMatchDate = true && this.isSetBeginMatchDate();
    boolean that_present_beginMatchDate = true && that.isSetBeginMatchDate();
    if (this_present_beginMatchDate || that_present_beginMatchDate) {
      if (!(this_present_beginMatchDate && that_present_beginMatchDate))
        return false;
      if (!this.beginMatchDate.equals(that.beginMatchDate))
        return false;
    }

    boolean this_present_endMatchDate = true && this.isSetEndMatchDate();
    boolean that_present_endMatchDate = true && that.isSetEndMatchDate();
    if (this_present_endMatchDate || that_present_endMatchDate) {
      if (!(this_present_endMatchDate && that_present_endMatchDate))
        return false;
      if (!this.endMatchDate.equals(that.endMatchDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MatchCompetive other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchId()).compareTo(other.isSetMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchId, other.matchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchType()).compareTo(other.isSetMatchType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchType, other.matchType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchNo()).compareTo(other.isSetMatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNo, other.matchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchName()).compareTo(other.isSetMatchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchName, other.matchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeTeam()).compareTo(other.isSetHomeTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeTeam, other.homeTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuestTeam()).compareTo(other.isSetGuestTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuestTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guestTeam, other.guestTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawResult()).compareTo(other.isSetDrawResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawResult, other.drawResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchBeginTime()).compareTo(other.isSetMatchBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchBeginTime, other.matchBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBettingDeadline()).compareTo(other.isSetBettingDeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBettingDeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bettingDeadline, other.bettingDeadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchEndTime()).compareTo(other.isSetMatchEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchEndTime, other.matchEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchDate()).compareTo(other.isSetMatchDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchDate, other.matchDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAllowModify()).compareTo(other.isSetIsAllowModify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAllowModify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAllowModify, other.isAllowModify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchStatus()).compareTo(other.isSetMatchStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchStatus, other.matchStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchCompetivePlayList()).compareTo(other.isSetMatchCompetivePlayList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchCompetivePlayList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetivePlayList, other.matchCompetivePlayList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchCompetiveResultList()).compareTo(other.isSetMatchCompetiveResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchCompetiveResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetiveResultList, other.matchCompetiveResultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginMatchDate()).compareTo(other.isSetBeginMatchDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginMatchDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginMatchDate, other.beginMatchDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndMatchDate()).compareTo(other.isSetEndMatchDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndMatchDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMatchDate, other.endMatchDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MatchCompetive(");
    boolean first = true;

    sb.append("wareIssue:");
    if (this.wareIssue == null) {
      sb.append("null");
    } else {
      sb.append(this.wareIssue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchId:");
    if (this.matchId == null) {
      sb.append("null");
    } else {
      sb.append(this.matchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferId:");
    if (this.transferId == null) {
      sb.append("null");
    } else {
      sb.append(this.transferId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchType:");
    sb.append(this.matchType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchNo:");
    if (this.matchNo == null) {
      sb.append("null");
    } else {
      sb.append(this.matchNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchName:");
    if (this.matchName == null) {
      sb.append("null");
    } else {
      sb.append(this.matchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeTeam:");
    if (this.homeTeam == null) {
      sb.append("null");
    } else {
      sb.append(this.homeTeam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guestTeam:");
    if (this.guestTeam == null) {
      sb.append("null");
    } else {
      sb.append(this.guestTeam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawResult:");
    if (this.drawResult == null) {
      sb.append("null");
    } else {
      sb.append(this.drawResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchBeginTime:");
    if (this.matchBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.matchBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bettingDeadline:");
    if (this.bettingDeadline == null) {
      sb.append("null");
    } else {
      sb.append(this.bettingDeadline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchEndTime:");
    if (this.matchEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.matchEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchDate:");
    if (this.matchDate == null) {
      sb.append("null");
    } else {
      sb.append(this.matchDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAllowModify:");
    sb.append(this.isAllowModify);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchStatus:");
    sb.append(this.matchStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchCompetivePlayList:");
    if (this.matchCompetivePlayList == null) {
      sb.append("null");
    } else {
      sb.append(this.matchCompetivePlayList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchCompetiveResultList:");
    if (this.matchCompetiveResultList == null) {
      sb.append("null");
    } else {
      sb.append(this.matchCompetiveResultList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginMatchDate:");
    if (this.beginMatchDate == null) {
      sb.append("null");
    } else {
      sb.append(this.beginMatchDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endMatchDate:");
    if (this.endMatchDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endMatchDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatchCompetiveStandardSchemeFactory implements SchemeFactory {
    public MatchCompetiveStandardScheme getScheme() {
      return new MatchCompetiveStandardScheme();
    }
  }

  private static class MatchCompetiveStandardScheme extends StandardScheme<MatchCompetive> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MatchCompetive struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WARE_ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareIssue = iprot.readString();
              struct.setWareIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchId = iprot.readString();
              struct.setMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferId = iprot.readString();
              struct.setTransferIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MATCH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchType = iprot.readI32();
              struct.setMatchTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchNo = iprot.readString();
              struct.setMatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MATCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchName = iprot.readString();
              struct.setMatchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOME_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeTeam = iprot.readString();
              struct.setHomeTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GUEST_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guestTeam = iprot.readString();
              struct.setGuestTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DRAW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawResult = iprot.readString();
              struct.setDrawResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MATCH_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchBeginTime = iprot.readString();
              struct.setMatchBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BETTING_DEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bettingDeadline = iprot.readString();
              struct.setBettingDeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MATCH_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchEndTime = iprot.readString();
              struct.setMatchEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MATCH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchDate = iprot.readString();
              struct.setMatchDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_ALLOW_MODIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAllowModify = iprot.readI32();
              struct.setIsAllowModifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MATCH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchStatus = iprot.readI32();
              struct.setMatchStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MATCH_COMPETIVE_PLAY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.matchCompetivePlayList = new ArrayList<MatchCompetivePlay>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  MatchCompetivePlay _elem26;
                  _elem26 = new MatchCompetivePlay();
                  _elem26.read(iprot);
                  struct.matchCompetivePlayList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setMatchCompetivePlayListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MATCH_COMPETIVE_RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.matchCompetiveResultList = new ArrayList<MatchCompetiveResult>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  MatchCompetiveResult _elem29;
                  _elem29 = new MatchCompetiveResult();
                  _elem29.read(iprot);
                  struct.matchCompetiveResultList.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setMatchCompetiveResultListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BEGIN_MATCH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginMatchDate = iprot.readString();
              struct.setBeginMatchDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // END_MATCH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endMatchDate = iprot.readString();
              struct.setEndMatchDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MatchCompetive struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.wareIssue != null) {
        oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
        oprot.writeString(struct.wareIssue);
        oprot.writeFieldEnd();
      }
      if (struct.matchId != null) {
        oprot.writeFieldBegin(MATCH_ID_FIELD_DESC);
        oprot.writeString(struct.matchId);
        oprot.writeFieldEnd();
      }
      if (struct.transferId != null) {
        oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
        oprot.writeString(struct.transferId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MATCH_TYPE_FIELD_DESC);
      oprot.writeI32(struct.matchType);
      oprot.writeFieldEnd();
      if (struct.matchNo != null) {
        oprot.writeFieldBegin(MATCH_NO_FIELD_DESC);
        oprot.writeString(struct.matchNo);
        oprot.writeFieldEnd();
      }
      if (struct.matchName != null) {
        oprot.writeFieldBegin(MATCH_NAME_FIELD_DESC);
        oprot.writeString(struct.matchName);
        oprot.writeFieldEnd();
      }
      if (struct.homeTeam != null) {
        oprot.writeFieldBegin(HOME_TEAM_FIELD_DESC);
        oprot.writeString(struct.homeTeam);
        oprot.writeFieldEnd();
      }
      if (struct.guestTeam != null) {
        oprot.writeFieldBegin(GUEST_TEAM_FIELD_DESC);
        oprot.writeString(struct.guestTeam);
        oprot.writeFieldEnd();
      }
      if (struct.drawResult != null) {
        oprot.writeFieldBegin(DRAW_RESULT_FIELD_DESC);
        oprot.writeString(struct.drawResult);
        oprot.writeFieldEnd();
      }
      if (struct.matchBeginTime != null) {
        oprot.writeFieldBegin(MATCH_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.matchBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.bettingDeadline != null) {
        oprot.writeFieldBegin(BETTING_DEADLINE_FIELD_DESC);
        oprot.writeString(struct.bettingDeadline);
        oprot.writeFieldEnd();
      }
      if (struct.matchEndTime != null) {
        oprot.writeFieldBegin(MATCH_END_TIME_FIELD_DESC);
        oprot.writeString(struct.matchEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.matchDate != null) {
        oprot.writeFieldBegin(MATCH_DATE_FIELD_DESC);
        oprot.writeString(struct.matchDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ALLOW_MODIFY_FIELD_DESC);
      oprot.writeI32(struct.isAllowModify);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MATCH_STATUS_FIELD_DESC);
      oprot.writeI32(struct.matchStatus);
      oprot.writeFieldEnd();
      if (struct.matchCompetivePlayList != null) {
        oprot.writeFieldBegin(MATCH_COMPETIVE_PLAY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchCompetivePlayList.size()));
          for (MatchCompetivePlay _iter30 : struct.matchCompetivePlayList)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.matchCompetiveResultList != null) {
        oprot.writeFieldBegin(MATCH_COMPETIVE_RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchCompetiveResultList.size()));
          for (MatchCompetiveResult _iter31 : struct.matchCompetiveResultList)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.beginMatchDate != null) {
        oprot.writeFieldBegin(BEGIN_MATCH_DATE_FIELD_DESC);
        oprot.writeString(struct.beginMatchDate);
        oprot.writeFieldEnd();
      }
      if (struct.endMatchDate != null) {
        oprot.writeFieldBegin(END_MATCH_DATE_FIELD_DESC);
        oprot.writeString(struct.endMatchDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatchCompetiveTupleSchemeFactory implements SchemeFactory {
    public MatchCompetiveTupleScheme getScheme() {
      return new MatchCompetiveTupleScheme();
    }
  }

  private static class MatchCompetiveTupleScheme extends TupleScheme<MatchCompetive> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatchCompetive struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWareIssue()) {
        optionals.set(0);
      }
      if (struct.isSetMatchId()) {
        optionals.set(1);
      }
      if (struct.isSetTransferId()) {
        optionals.set(2);
      }
      if (struct.isSetMatchType()) {
        optionals.set(3);
      }
      if (struct.isSetMatchNo()) {
        optionals.set(4);
      }
      if (struct.isSetMatchName()) {
        optionals.set(5);
      }
      if (struct.isSetHomeTeam()) {
        optionals.set(6);
      }
      if (struct.isSetGuestTeam()) {
        optionals.set(7);
      }
      if (struct.isSetDrawResult()) {
        optionals.set(8);
      }
      if (struct.isSetMatchBeginTime()) {
        optionals.set(9);
      }
      if (struct.isSetBettingDeadline()) {
        optionals.set(10);
      }
      if (struct.isSetMatchEndTime()) {
        optionals.set(11);
      }
      if (struct.isSetMatchDate()) {
        optionals.set(12);
      }
      if (struct.isSetIsAllowModify()) {
        optionals.set(13);
      }
      if (struct.isSetMatchStatus()) {
        optionals.set(14);
      }
      if (struct.isSetMatchCompetivePlayList()) {
        optionals.set(15);
      }
      if (struct.isSetMatchCompetiveResultList()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(17);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(18);
      }
      if (struct.isSetBeginMatchDate()) {
        optionals.set(19);
      }
      if (struct.isSetEndMatchDate()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetWareIssue()) {
        oprot.writeString(struct.wareIssue);
      }
      if (struct.isSetMatchId()) {
        oprot.writeString(struct.matchId);
      }
      if (struct.isSetTransferId()) {
        oprot.writeString(struct.transferId);
      }
      if (struct.isSetMatchType()) {
        oprot.writeI32(struct.matchType);
      }
      if (struct.isSetMatchNo()) {
        oprot.writeString(struct.matchNo);
      }
      if (struct.isSetMatchName()) {
        oprot.writeString(struct.matchName);
      }
      if (struct.isSetHomeTeam()) {
        oprot.writeString(struct.homeTeam);
      }
      if (struct.isSetGuestTeam()) {
        oprot.writeString(struct.guestTeam);
      }
      if (struct.isSetDrawResult()) {
        oprot.writeString(struct.drawResult);
      }
      if (struct.isSetMatchBeginTime()) {
        oprot.writeString(struct.matchBeginTime);
      }
      if (struct.isSetBettingDeadline()) {
        oprot.writeString(struct.bettingDeadline);
      }
      if (struct.isSetMatchEndTime()) {
        oprot.writeString(struct.matchEndTime);
      }
      if (struct.isSetMatchDate()) {
        oprot.writeString(struct.matchDate);
      }
      if (struct.isSetIsAllowModify()) {
        oprot.writeI32(struct.isAllowModify);
      }
      if (struct.isSetMatchStatus()) {
        oprot.writeI32(struct.matchStatus);
      }
      if (struct.isSetMatchCompetivePlayList()) {
        {
          oprot.writeI32(struct.matchCompetivePlayList.size());
          for (MatchCompetivePlay _iter32 : struct.matchCompetivePlayList)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetMatchCompetiveResultList()) {
        {
          oprot.writeI32(struct.matchCompetiveResultList.size());
          for (MatchCompetiveResult _iter33 : struct.matchCompetiveResultList)
          {
            _iter33.write(oprot);
          }
        }
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetBeginMatchDate()) {
        oprot.writeString(struct.beginMatchDate);
      }
      if (struct.isSetEndMatchDate()) {
        oprot.writeString(struct.endMatchDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatchCompetive struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.wareIssue = iprot.readString();
        struct.setWareIssueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.matchId = iprot.readString();
        struct.setMatchIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transferId = iprot.readString();
        struct.setTransferIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.matchType = iprot.readI32();
        struct.setMatchTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.matchNo = iprot.readString();
        struct.setMatchNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.matchName = iprot.readString();
        struct.setMatchNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.homeTeam = iprot.readString();
        struct.setHomeTeamIsSet(true);
      }
      if (incoming.get(7)) {
        struct.guestTeam = iprot.readString();
        struct.setGuestTeamIsSet(true);
      }
      if (incoming.get(8)) {
        struct.drawResult = iprot.readString();
        struct.setDrawResultIsSet(true);
      }
      if (incoming.get(9)) {
        struct.matchBeginTime = iprot.readString();
        struct.setMatchBeginTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bettingDeadline = iprot.readString();
        struct.setBettingDeadlineIsSet(true);
      }
      if (incoming.get(11)) {
        struct.matchEndTime = iprot.readString();
        struct.setMatchEndTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.matchDate = iprot.readString();
        struct.setMatchDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isAllowModify = iprot.readI32();
        struct.setIsAllowModifyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.matchStatus = iprot.readI32();
        struct.setMatchStatusIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchCompetivePlayList = new ArrayList<MatchCompetivePlay>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            MatchCompetivePlay _elem36;
            _elem36 = new MatchCompetivePlay();
            _elem36.read(iprot);
            struct.matchCompetivePlayList.add(_elem36);
          }
        }
        struct.setMatchCompetivePlayListIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchCompetiveResultList = new ArrayList<MatchCompetiveResult>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            MatchCompetiveResult _elem39;
            _elem39 = new MatchCompetiveResult();
            _elem39.read(iprot);
            struct.matchCompetiveResultList.add(_elem39);
          }
        }
        struct.setMatchCompetiveResultListIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.beginMatchDate = iprot.readString();
        struct.setBeginMatchDateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.endMatchDate = iprot.readString();
        struct.setEndMatchDateIsSet(true);
      }
    }
  }

}

