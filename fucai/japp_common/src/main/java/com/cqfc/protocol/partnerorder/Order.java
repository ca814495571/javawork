/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Order implements org.apache.thrift.TBase<Order, Order._Fields>, java.io.Serializable, Cloneable, Comparable<Order> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Order");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField WIN_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("winPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PRIZE_AFTER_TAX_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeAfterTax", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STAKE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("stakeNum", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiple", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAY_SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("paySerialNumber", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeId", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("planId", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField LOTTERY_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryMark", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TICKET_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTime", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField DRAW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("drawTime", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField ORDER_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDetails", org.apache.thrift.protocol.TType.LIST, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderTupleSchemeFactory());
  }

  public long orderId; // required
  public String lotteryId; // required
  public String partnerId; // required
  public long userId; // required
  public String issueNo; // required
  public String orderNo; // required
  public int orderStatus; // required
  public long totalAmount; // required
  public long winPrizeMoney; // required
  public long prizeAfterTax; // required
  public String orderContent; // required
  public int stakeNum; // required
  public int multiple; // required
  public String playType; // required
  public String paySerialNumber; // required
  public String realName; // required
  public String cardNo; // required
  public String mobile; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public String ext; // required
  public int orderType; // required
  public String tradeId; // required
  public String planId; // required
  public String province; // required
  public String lotteryMark; // required
  public String ticketTime; // required
  public String endTime; // required
  public String drawTime; // required
  public List<OrderDetail> orderDetails; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    LOTTERY_ID((short)2, "lotteryId"),
    PARTNER_ID((short)3, "partnerId"),
    USER_ID((short)4, "userId"),
    ISSUE_NO((short)5, "issueNo"),
    ORDER_NO((short)6, "orderNo"),
    ORDER_STATUS((short)7, "orderStatus"),
    TOTAL_AMOUNT((short)8, "totalAmount"),
    WIN_PRIZE_MONEY((short)9, "winPrizeMoney"),
    PRIZE_AFTER_TAX((short)10, "prizeAfterTax"),
    ORDER_CONTENT((short)11, "orderContent"),
    STAKE_NUM((short)12, "stakeNum"),
    MULTIPLE((short)13, "multiple"),
    PLAY_TYPE((short)14, "playType"),
    PAY_SERIAL_NUMBER((short)15, "paySerialNumber"),
    REAL_NAME((short)16, "realName"),
    CARD_NO((short)17, "cardNo"),
    MOBILE((short)18, "mobile"),
    CREATE_TIME((short)19, "createTime"),
    LAST_UPDATE_TIME((short)20, "lastUpdateTime"),
    EXT((short)21, "ext"),
    ORDER_TYPE((short)22, "orderType"),
    TRADE_ID((short)23, "tradeId"),
    PLAN_ID((short)24, "planId"),
    PROVINCE((short)25, "province"),
    LOTTERY_MARK((short)26, "lotteryMark"),
    TICKET_TIME((short)27, "ticketTime"),
    END_TIME((short)28, "endTime"),
    DRAW_TIME((short)29, "drawTime"),
    ORDER_DETAILS((short)30, "orderDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // PARTNER_ID
          return PARTNER_ID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // ISSUE_NO
          return ISSUE_NO;
        case 6: // ORDER_NO
          return ORDER_NO;
        case 7: // ORDER_STATUS
          return ORDER_STATUS;
        case 8: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 9: // WIN_PRIZE_MONEY
          return WIN_PRIZE_MONEY;
        case 10: // PRIZE_AFTER_TAX
          return PRIZE_AFTER_TAX;
        case 11: // ORDER_CONTENT
          return ORDER_CONTENT;
        case 12: // STAKE_NUM
          return STAKE_NUM;
        case 13: // MULTIPLE
          return MULTIPLE;
        case 14: // PLAY_TYPE
          return PLAY_TYPE;
        case 15: // PAY_SERIAL_NUMBER
          return PAY_SERIAL_NUMBER;
        case 16: // REAL_NAME
          return REAL_NAME;
        case 17: // CARD_NO
          return CARD_NO;
        case 18: // MOBILE
          return MOBILE;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 21: // EXT
          return EXT;
        case 22: // ORDER_TYPE
          return ORDER_TYPE;
        case 23: // TRADE_ID
          return TRADE_ID;
        case 24: // PLAN_ID
          return PLAN_ID;
        case 25: // PROVINCE
          return PROVINCE;
        case 26: // LOTTERY_MARK
          return LOTTERY_MARK;
        case 27: // TICKET_TIME
          return TICKET_TIME;
        case 28: // END_TIME
          return END_TIME;
        case 29: // DRAW_TIME
          return DRAW_TIME;
        case 30: // ORDER_DETAILS
          return ORDER_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ORDERSTATUS_ISSET_ID = 2;
  private static final int __TOTALAMOUNT_ISSET_ID = 3;
  private static final int __WINPRIZEMONEY_ISSET_ID = 4;
  private static final int __PRIZEAFTERTAX_ISSET_ID = 5;
  private static final int __STAKENUM_ISSET_ID = 6;
  private static final int __MULTIPLE_ISSET_ID = 7;
  private static final int __ORDERTYPE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WIN_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("winPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIZE_AFTER_TAX, new org.apache.thrift.meta_data.FieldMetaData("prizeAfterTax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAKE_NUM, new org.apache.thrift.meta_data.FieldMetaData("stakeNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("multiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("paySerialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("planId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_MARK, new org.apache.thrift.meta_data.FieldMetaData("lotteryMark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TIME, new org.apache.thrift.meta_data.FieldMetaData("ticketTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAW_TIME, new org.apache.thrift.meta_data.FieldMetaData("drawTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("orderDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Order.class, metaDataMap);
  }

  public Order() {
  }

  public Order(
    long orderId,
    String lotteryId,
    String partnerId,
    long userId,
    String issueNo,
    String orderNo,
    int orderStatus,
    long totalAmount,
    long winPrizeMoney,
    long prizeAfterTax,
    String orderContent,
    int stakeNum,
    int multiple,
    String playType,
    String paySerialNumber,
    String realName,
    String cardNo,
    String mobile,
    String createTime,
    String lastUpdateTime,
    String ext,
    int orderType,
    String tradeId,
    String planId,
    String province,
    String lotteryMark,
    String ticketTime,
    String endTime,
    String drawTime,
    List<OrderDetail> orderDetails)
  {
    this();
    this.orderId = orderId;
    setOrderIdIsSet(true);
    this.lotteryId = lotteryId;
    this.partnerId = partnerId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.issueNo = issueNo;
    this.orderNo = orderNo;
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.winPrizeMoney = winPrizeMoney;
    setWinPrizeMoneyIsSet(true);
    this.prizeAfterTax = prizeAfterTax;
    setPrizeAfterTaxIsSet(true);
    this.orderContent = orderContent;
    this.stakeNum = stakeNum;
    setStakeNumIsSet(true);
    this.multiple = multiple;
    setMultipleIsSet(true);
    this.playType = playType;
    this.paySerialNumber = paySerialNumber;
    this.realName = realName;
    this.cardNo = cardNo;
    this.mobile = mobile;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.ext = ext;
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    this.tradeId = tradeId;
    this.planId = planId;
    this.province = province;
    this.lotteryMark = lotteryMark;
    this.ticketTime = ticketTime;
    this.endTime = endTime;
    this.drawTime = drawTime;
    this.orderDetails = orderDetails;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Order(Order other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderId = other.orderId;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.userId = other.userId;
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    this.orderStatus = other.orderStatus;
    this.totalAmount = other.totalAmount;
    this.winPrizeMoney = other.winPrizeMoney;
    this.prizeAfterTax = other.prizeAfterTax;
    if (other.isSetOrderContent()) {
      this.orderContent = other.orderContent;
    }
    this.stakeNum = other.stakeNum;
    this.multiple = other.multiple;
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    if (other.isSetPaySerialNumber()) {
      this.paySerialNumber = other.paySerialNumber;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    this.orderType = other.orderType;
    if (other.isSetTradeId()) {
      this.tradeId = other.tradeId;
    }
    if (other.isSetPlanId()) {
      this.planId = other.planId;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetLotteryMark()) {
      this.lotteryMark = other.lotteryMark;
    }
    if (other.isSetTicketTime()) {
      this.ticketTime = other.ticketTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetDrawTime()) {
      this.drawTime = other.drawTime;
    }
    if (other.isSetOrderDetails()) {
      List<OrderDetail> __this__orderDetails = new ArrayList<OrderDetail>(other.orderDetails.size());
      for (OrderDetail other_element : other.orderDetails) {
        __this__orderDetails.add(new OrderDetail(other_element));
      }
      this.orderDetails = __this__orderDetails;
    }
  }

  public Order deepCopy() {
    return new Order(this);
  }

  @Override
  public void clear() {
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.lotteryId = null;
    this.partnerId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.issueNo = null;
    this.orderNo = null;
    setOrderStatusIsSet(false);
    this.orderStatus = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setWinPrizeMoneyIsSet(false);
    this.winPrizeMoney = 0;
    setPrizeAfterTaxIsSet(false);
    this.prizeAfterTax = 0;
    this.orderContent = null;
    setStakeNumIsSet(false);
    this.stakeNum = 0;
    setMultipleIsSet(false);
    this.multiple = 0;
    this.playType = null;
    this.paySerialNumber = null;
    this.realName = null;
    this.cardNo = null;
    this.mobile = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.ext = null;
    setOrderTypeIsSet(false);
    this.orderType = 0;
    this.tradeId = null;
    this.planId = null;
    this.province = null;
    this.lotteryMark = null;
    this.ticketTime = null;
    this.endTime = null;
    this.drawTime = null;
    this.orderDetails = null;
  }

  public long getOrderId() {
    return this.orderId;
  }

  public Order setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public Order setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public Order setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public Order setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public Order setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public Order setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public int getOrderStatus() {
    return this.orderStatus;
  }

  public Order setOrderStatus(int orderStatus) {
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
    return this;
  }

  public void unsetOrderStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  public void setOrderStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID, value);
  }

  public long getTotalAmount() {
    return this.totalAmount;
  }

  public Order setTotalAmount(long totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public long getWinPrizeMoney() {
    return this.winPrizeMoney;
  }

  public Order setWinPrizeMoney(long winPrizeMoney) {
    this.winPrizeMoney = winPrizeMoney;
    setWinPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetWinPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field winPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetWinPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __WINPRIZEMONEY_ISSET_ID);
  }

  public void setWinPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINPRIZEMONEY_ISSET_ID, value);
  }

  public long getPrizeAfterTax() {
    return this.prizeAfterTax;
  }

  public Order setPrizeAfterTax(long prizeAfterTax) {
    this.prizeAfterTax = prizeAfterTax;
    setPrizeAfterTaxIsSet(true);
    return this;
  }

  public void unsetPrizeAfterTax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIZEAFTERTAX_ISSET_ID);
  }

  /** Returns true if field prizeAfterTax is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizeAfterTax() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIZEAFTERTAX_ISSET_ID);
  }

  public void setPrizeAfterTaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIZEAFTERTAX_ISSET_ID, value);
  }

  public String getOrderContent() {
    return this.orderContent;
  }

  public Order setOrderContent(String orderContent) {
    this.orderContent = orderContent;
    return this;
  }

  public void unsetOrderContent() {
    this.orderContent = null;
  }

  /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderContent() {
    return this.orderContent != null;
  }

  public void setOrderContentIsSet(boolean value) {
    if (!value) {
      this.orderContent = null;
    }
  }

  public int getStakeNum() {
    return this.stakeNum;
  }

  public Order setStakeNum(int stakeNum) {
    this.stakeNum = stakeNum;
    setStakeNumIsSet(true);
    return this;
  }

  public void unsetStakeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAKENUM_ISSET_ID);
  }

  /** Returns true if field stakeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStakeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __STAKENUM_ISSET_ID);
  }

  public void setStakeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAKENUM_ISSET_ID, value);
  }

  public int getMultiple() {
    return this.multiple;
  }

  public Order setMultiple(int multiple) {
    this.multiple = multiple;
    setMultipleIsSet(true);
    return this;
  }

  public void unsetMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  /** Returns true if field multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  public void setMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIPLE_ISSET_ID, value);
  }

  public String getPlayType() {
    return this.playType;
  }

  public Order setPlayType(String playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  public String getPaySerialNumber() {
    return this.paySerialNumber;
  }

  public Order setPaySerialNumber(String paySerialNumber) {
    this.paySerialNumber = paySerialNumber;
    return this;
  }

  public void unsetPaySerialNumber() {
    this.paySerialNumber = null;
  }

  /** Returns true if field paySerialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPaySerialNumber() {
    return this.paySerialNumber != null;
  }

  public void setPaySerialNumberIsSet(boolean value) {
    if (!value) {
      this.paySerialNumber = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public Order setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getCardNo() {
    return this.cardNo;
  }

  public Order setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public Order setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public Order setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public Order setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public String getExt() {
    return this.ext;
  }

  public Order setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public int getOrderType() {
    return this.orderType;
  }

  public Order setOrderType(int orderType) {
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    return this;
  }

  public void unsetOrderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public String getTradeId() {
    return this.tradeId;
  }

  public Order setTradeId(String tradeId) {
    this.tradeId = tradeId;
    return this;
  }

  public void unsetTradeId() {
    this.tradeId = null;
  }

  /** Returns true if field tradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeId() {
    return this.tradeId != null;
  }

  public void setTradeIdIsSet(boolean value) {
    if (!value) {
      this.tradeId = null;
    }
  }

  public String getPlanId() {
    return this.planId;
  }

  public Order setPlanId(String planId) {
    this.planId = planId;
    return this;
  }

  public void unsetPlanId() {
    this.planId = null;
  }

  /** Returns true if field planId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanId() {
    return this.planId != null;
  }

  public void setPlanIdIsSet(boolean value) {
    if (!value) {
      this.planId = null;
    }
  }

  public String getProvince() {
    return this.province;
  }

  public Order setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getLotteryMark() {
    return this.lotteryMark;
  }

  public Order setLotteryMark(String lotteryMark) {
    this.lotteryMark = lotteryMark;
    return this;
  }

  public void unsetLotteryMark() {
    this.lotteryMark = null;
  }

  /** Returns true if field lotteryMark is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryMark() {
    return this.lotteryMark != null;
  }

  public void setLotteryMarkIsSet(boolean value) {
    if (!value) {
      this.lotteryMark = null;
    }
  }

  public String getTicketTime() {
    return this.ticketTime;
  }

  public Order setTicketTime(String ticketTime) {
    this.ticketTime = ticketTime;
    return this;
  }

  public void unsetTicketTime() {
    this.ticketTime = null;
  }

  /** Returns true if field ticketTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTime() {
    return this.ticketTime != null;
  }

  public void setTicketTimeIsSet(boolean value) {
    if (!value) {
      this.ticketTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public Order setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getDrawTime() {
    return this.drawTime;
  }

  public Order setDrawTime(String drawTime) {
    this.drawTime = drawTime;
    return this;
  }

  public void unsetDrawTime() {
    this.drawTime = null;
  }

  /** Returns true if field drawTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawTime() {
    return this.drawTime != null;
  }

  public void setDrawTimeIsSet(boolean value) {
    if (!value) {
      this.drawTime = null;
    }
  }

  public int getOrderDetailsSize() {
    return (this.orderDetails == null) ? 0 : this.orderDetails.size();
  }

  public java.util.Iterator<OrderDetail> getOrderDetailsIterator() {
    return (this.orderDetails == null) ? null : this.orderDetails.iterator();
  }

  public void addToOrderDetails(OrderDetail elem) {
    if (this.orderDetails == null) {
      this.orderDetails = new ArrayList<OrderDetail>();
    }
    this.orderDetails.add(elem);
  }

  public List<OrderDetail> getOrderDetails() {
    return this.orderDetails;
  }

  public Order setOrderDetails(List<OrderDetail> orderDetails) {
    this.orderDetails = orderDetails;
    return this;
  }

  public void unsetOrderDetails() {
    this.orderDetails = null;
  }

  /** Returns true if field orderDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderDetails() {
    return this.orderDetails != null;
  }

  public void setOrderDetailsIsSet(boolean value) {
    if (!value) {
      this.orderDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Long)value);
      }
      break;

    case WIN_PRIZE_MONEY:
      if (value == null) {
        unsetWinPrizeMoney();
      } else {
        setWinPrizeMoney((Long)value);
      }
      break;

    case PRIZE_AFTER_TAX:
      if (value == null) {
        unsetPrizeAfterTax();
      } else {
        setPrizeAfterTax((Long)value);
      }
      break;

    case ORDER_CONTENT:
      if (value == null) {
        unsetOrderContent();
      } else {
        setOrderContent((String)value);
      }
      break;

    case STAKE_NUM:
      if (value == null) {
        unsetStakeNum();
      } else {
        setStakeNum((Integer)value);
      }
      break;

    case MULTIPLE:
      if (value == null) {
        unsetMultiple();
      } else {
        setMultiple((Integer)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((String)value);
      }
      break;

    case PAY_SERIAL_NUMBER:
      if (value == null) {
        unsetPaySerialNumber();
      } else {
        setPaySerialNumber((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((Integer)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeId();
      } else {
        setTradeId((String)value);
      }
      break;

    case PLAN_ID:
      if (value == null) {
        unsetPlanId();
      } else {
        setPlanId((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case LOTTERY_MARK:
      if (value == null) {
        unsetLotteryMark();
      } else {
        setLotteryMark((String)value);
      }
      break;

    case TICKET_TIME:
      if (value == null) {
        unsetTicketTime();
      } else {
        setTicketTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case DRAW_TIME:
      if (value == null) {
        unsetDrawTime();
      } else {
        setDrawTime((String)value);
      }
      break;

    case ORDER_DETAILS:
      if (value == null) {
        unsetOrderDetails();
      } else {
        setOrderDetails((List<OrderDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return Long.valueOf(getOrderId());

    case LOTTERY_ID:
      return getLotteryId();

    case PARTNER_ID:
      return getPartnerId();

    case USER_ID:
      return Long.valueOf(getUserId());

    case ISSUE_NO:
      return getIssueNo();

    case ORDER_NO:
      return getOrderNo();

    case ORDER_STATUS:
      return Integer.valueOf(getOrderStatus());

    case TOTAL_AMOUNT:
      return Long.valueOf(getTotalAmount());

    case WIN_PRIZE_MONEY:
      return Long.valueOf(getWinPrizeMoney());

    case PRIZE_AFTER_TAX:
      return Long.valueOf(getPrizeAfterTax());

    case ORDER_CONTENT:
      return getOrderContent();

    case STAKE_NUM:
      return Integer.valueOf(getStakeNum());

    case MULTIPLE:
      return Integer.valueOf(getMultiple());

    case PLAY_TYPE:
      return getPlayType();

    case PAY_SERIAL_NUMBER:
      return getPaySerialNumber();

    case REAL_NAME:
      return getRealName();

    case CARD_NO:
      return getCardNo();

    case MOBILE:
      return getMobile();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case EXT:
      return getExt();

    case ORDER_TYPE:
      return Integer.valueOf(getOrderType());

    case TRADE_ID:
      return getTradeId();

    case PLAN_ID:
      return getPlanId();

    case PROVINCE:
      return getProvince();

    case LOTTERY_MARK:
      return getLotteryMark();

    case TICKET_TIME:
      return getTicketTime();

    case END_TIME:
      return getEndTime();

    case DRAW_TIME:
      return getDrawTime();

    case ORDER_DETAILS:
      return getOrderDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case PARTNER_ID:
      return isSetPartnerId();
    case USER_ID:
      return isSetUserId();
    case ISSUE_NO:
      return isSetIssueNo();
    case ORDER_NO:
      return isSetOrderNo();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case WIN_PRIZE_MONEY:
      return isSetWinPrizeMoney();
    case PRIZE_AFTER_TAX:
      return isSetPrizeAfterTax();
    case ORDER_CONTENT:
      return isSetOrderContent();
    case STAKE_NUM:
      return isSetStakeNum();
    case MULTIPLE:
      return isSetMultiple();
    case PLAY_TYPE:
      return isSetPlayType();
    case PAY_SERIAL_NUMBER:
      return isSetPaySerialNumber();
    case REAL_NAME:
      return isSetRealName();
    case CARD_NO:
      return isSetCardNo();
    case MOBILE:
      return isSetMobile();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case EXT:
      return isSetExt();
    case ORDER_TYPE:
      return isSetOrderType();
    case TRADE_ID:
      return isSetTradeId();
    case PLAN_ID:
      return isSetPlanId();
    case PROVINCE:
      return isSetProvince();
    case LOTTERY_MARK:
      return isSetLotteryMark();
    case TICKET_TIME:
      return isSetTicketTime();
    case END_TIME:
      return isSetEndTime();
    case DRAW_TIME:
      return isSetDrawTime();
    case ORDER_DETAILS:
      return isSetOrderDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Order)
      return this.equals((Order)that);
    return false;
  }

  public boolean equals(Order that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true;
    boolean that_present_orderId = true;
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }

    boolean this_present_orderStatus = true;
    boolean that_present_orderStatus = true;
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (this.orderStatus != that.orderStatus)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_winPrizeMoney = true;
    boolean that_present_winPrizeMoney = true;
    if (this_present_winPrizeMoney || that_present_winPrizeMoney) {
      if (!(this_present_winPrizeMoney && that_present_winPrizeMoney))
        return false;
      if (this.winPrizeMoney != that.winPrizeMoney)
        return false;
    }

    boolean this_present_prizeAfterTax = true;
    boolean that_present_prizeAfterTax = true;
    if (this_present_prizeAfterTax || that_present_prizeAfterTax) {
      if (!(this_present_prizeAfterTax && that_present_prizeAfterTax))
        return false;
      if (this.prizeAfterTax != that.prizeAfterTax)
        return false;
    }

    boolean this_present_orderContent = true && this.isSetOrderContent();
    boolean that_present_orderContent = true && that.isSetOrderContent();
    if (this_present_orderContent || that_present_orderContent) {
      if (!(this_present_orderContent && that_present_orderContent))
        return false;
      if (!this.orderContent.equals(that.orderContent))
        return false;
    }

    boolean this_present_stakeNum = true;
    boolean that_present_stakeNum = true;
    if (this_present_stakeNum || that_present_stakeNum) {
      if (!(this_present_stakeNum && that_present_stakeNum))
        return false;
      if (this.stakeNum != that.stakeNum)
        return false;
    }

    boolean this_present_multiple = true;
    boolean that_present_multiple = true;
    if (this_present_multiple || that_present_multiple) {
      if (!(this_present_multiple && that_present_multiple))
        return false;
      if (this.multiple != that.multiple)
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_paySerialNumber = true && this.isSetPaySerialNumber();
    boolean that_present_paySerialNumber = true && that.isSetPaySerialNumber();
    if (this_present_paySerialNumber || that_present_paySerialNumber) {
      if (!(this_present_paySerialNumber && that_present_paySerialNumber))
        return false;
      if (!this.paySerialNumber.equals(that.paySerialNumber))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_orderType = true;
    boolean that_present_orderType = true;
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (this.orderType != that.orderType)
        return false;
    }

    boolean this_present_tradeId = true && this.isSetTradeId();
    boolean that_present_tradeId = true && that.isSetTradeId();
    if (this_present_tradeId || that_present_tradeId) {
      if (!(this_present_tradeId && that_present_tradeId))
        return false;
      if (!this.tradeId.equals(that.tradeId))
        return false;
    }

    boolean this_present_planId = true && this.isSetPlanId();
    boolean that_present_planId = true && that.isSetPlanId();
    if (this_present_planId || that_present_planId) {
      if (!(this_present_planId && that_present_planId))
        return false;
      if (!this.planId.equals(that.planId))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_lotteryMark = true && this.isSetLotteryMark();
    boolean that_present_lotteryMark = true && that.isSetLotteryMark();
    if (this_present_lotteryMark || that_present_lotteryMark) {
      if (!(this_present_lotteryMark && that_present_lotteryMark))
        return false;
      if (!this.lotteryMark.equals(that.lotteryMark))
        return false;
    }

    boolean this_present_ticketTime = true && this.isSetTicketTime();
    boolean that_present_ticketTime = true && that.isSetTicketTime();
    if (this_present_ticketTime || that_present_ticketTime) {
      if (!(this_present_ticketTime && that_present_ticketTime))
        return false;
      if (!this.ticketTime.equals(that.ticketTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_drawTime = true && this.isSetDrawTime();
    boolean that_present_drawTime = true && that.isSetDrawTime();
    if (this_present_drawTime || that_present_drawTime) {
      if (!(this_present_drawTime && that_present_drawTime))
        return false;
      if (!this.drawTime.equals(that.drawTime))
        return false;
    }

    boolean this_present_orderDetails = true && this.isSetOrderDetails();
    boolean that_present_orderDetails = true && that.isSetOrderDetails();
    if (this_present_orderDetails || that_present_orderDetails) {
      if (!(this_present_orderDetails && that_present_orderDetails))
        return false;
      if (!this.orderDetails.equals(that.orderDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Order other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinPrizeMoney()).compareTo(other.isSetWinPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winPrizeMoney, other.winPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizeAfterTax()).compareTo(other.isSetPrizeAfterTax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizeAfterTax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeAfterTax, other.prizeAfterTax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStakeNum()).compareTo(other.isSetStakeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStakeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stakeNum, other.stakeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiple()).compareTo(other.isSetMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiple, other.multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaySerialNumber()).compareTo(other.isSetPaySerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaySerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paySerialNumber, other.paySerialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(other.isSetTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeId, other.tradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanId()).compareTo(other.isSetPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planId, other.planId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryMark()).compareTo(other.isSetLotteryMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryMark, other.lotteryMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketTime()).compareTo(other.isSetTicketTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTime, other.ticketTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawTime()).compareTo(other.isSetDrawTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawTime, other.drawTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderDetails()).compareTo(other.isSetOrderDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDetails, other.orderDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Order(");
    boolean first = true;

    sb.append("orderId:");
    sb.append(this.orderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    sb.append(this.orderStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("winPrizeMoney:");
    sb.append(this.winPrizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizeAfterTax:");
    sb.append(this.prizeAfterTax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderContent:");
    if (this.orderContent == null) {
      sb.append("null");
    } else {
      sb.append(this.orderContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stakeNum:");
    sb.append(this.stakeNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiple:");
    sb.append(this.multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paySerialNumber:");
    if (this.paySerialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.paySerialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    sb.append(this.orderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeId:");
    if (this.tradeId == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planId:");
    if (this.planId == null) {
      sb.append("null");
    } else {
      sb.append(this.planId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryMark:");
    if (this.lotteryMark == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryMark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketTime:");
    if (this.ticketTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawTime:");
    if (this.drawTime == null) {
      sb.append("null");
    } else {
      sb.append(this.drawTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderDetails:");
    if (this.orderDetails == null) {
      sb.append("null");
    } else {
      sb.append(this.orderDetails);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderStandardSchemeFactory implements SchemeFactory {
    public OrderStandardScheme getScheme() {
      return new OrderStandardScheme();
    }
  }

  private static class OrderStandardScheme extends StandardScheme<Order> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Order struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNo = iprot.readString();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderStatus = iprot.readI32();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalAmount = iprot.readI64();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WIN_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.winPrizeMoney = iprot.readI64();
              struct.setWinPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRIZE_AFTER_TAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prizeAfterTax = iprot.readI64();
              struct.setPrizeAfterTaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderContent = iprot.readString();
              struct.setOrderContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STAKE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stakeNum = iprot.readI32();
              struct.setStakeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiple = iprot.readI32();
              struct.setMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playType = iprot.readString();
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAY_SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paySerialNumber = iprot.readString();
              struct.setPaySerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = iprot.readI32();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeId = iprot.readString();
              struct.setTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planId = iprot.readString();
              struct.setPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOTTERY_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryMark = iprot.readString();
              struct.setLotteryMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TICKET_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTime = iprot.readString();
              struct.setTicketTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DRAW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawTime = iprot.readString();
              struct.setDrawTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ORDER_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.orderDetails = new ArrayList<OrderDetail>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  OrderDetail _elem2;
                  _elem2 = new OrderDetail();
                  _elem2.read(iprot);
                  struct.orderDetails.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setOrderDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Order struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeI64(struct.orderId);
      oprot.writeFieldEnd();
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      if (struct.orderNo != null) {
        oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.orderNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
      oprot.writeI32(struct.orderStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIN_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.winPrizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIZE_AFTER_TAX_FIELD_DESC);
      oprot.writeI64(struct.prizeAfterTax);
      oprot.writeFieldEnd();
      if (struct.orderContent != null) {
        oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
        oprot.writeString(struct.orderContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STAKE_NUM_FIELD_DESC);
      oprot.writeI32(struct.stakeNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MULTIPLE_FIELD_DESC);
      oprot.writeI32(struct.multiple);
      oprot.writeFieldEnd();
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.playType);
        oprot.writeFieldEnd();
      }
      if (struct.paySerialNumber != null) {
        oprot.writeFieldBegin(PAY_SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.paySerialNumber);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.orderType);
      oprot.writeFieldEnd();
      if (struct.tradeId != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeId);
        oprot.writeFieldEnd();
      }
      if (struct.planId != null) {
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeString(struct.planId);
        oprot.writeFieldEnd();
      }
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryMark != null) {
        oprot.writeFieldBegin(LOTTERY_MARK_FIELD_DESC);
        oprot.writeString(struct.lotteryMark);
        oprot.writeFieldEnd();
      }
      if (struct.ticketTime != null) {
        oprot.writeFieldBegin(TICKET_TIME_FIELD_DESC);
        oprot.writeString(struct.ticketTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.drawTime != null) {
        oprot.writeFieldBegin(DRAW_TIME_FIELD_DESC);
        oprot.writeString(struct.drawTime);
        oprot.writeFieldEnd();
      }
      if (struct.orderDetails != null) {
        oprot.writeFieldBegin(ORDER_DETAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orderDetails.size()));
          for (OrderDetail _iter3 : struct.orderDetails)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderTupleSchemeFactory implements SchemeFactory {
    public OrderTupleScheme getScheme() {
      return new OrderTupleScheme();
    }
  }

  private static class OrderTupleScheme extends TupleScheme<Order> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Order struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(4);
      }
      if (struct.isSetOrderNo()) {
        optionals.set(5);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(6);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(7);
      }
      if (struct.isSetWinPrizeMoney()) {
        optionals.set(8);
      }
      if (struct.isSetPrizeAfterTax()) {
        optionals.set(9);
      }
      if (struct.isSetOrderContent()) {
        optionals.set(10);
      }
      if (struct.isSetStakeNum()) {
        optionals.set(11);
      }
      if (struct.isSetMultiple()) {
        optionals.set(12);
      }
      if (struct.isSetPlayType()) {
        optionals.set(13);
      }
      if (struct.isSetPaySerialNumber()) {
        optionals.set(14);
      }
      if (struct.isSetRealName()) {
        optionals.set(15);
      }
      if (struct.isSetCardNo()) {
        optionals.set(16);
      }
      if (struct.isSetMobile()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(18);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(19);
      }
      if (struct.isSetExt()) {
        optionals.set(20);
      }
      if (struct.isSetOrderType()) {
        optionals.set(21);
      }
      if (struct.isSetTradeId()) {
        optionals.set(22);
      }
      if (struct.isSetPlanId()) {
        optionals.set(23);
      }
      if (struct.isSetProvince()) {
        optionals.set(24);
      }
      if (struct.isSetLotteryMark()) {
        optionals.set(25);
      }
      if (struct.isSetTicketTime()) {
        optionals.set(26);
      }
      if (struct.isSetEndTime()) {
        optionals.set(27);
      }
      if (struct.isSetDrawTime()) {
        optionals.set(28);
      }
      if (struct.isSetOrderDetails()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetOrderNo()) {
        oprot.writeString(struct.orderNo);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeI32(struct.orderStatus);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI64(struct.totalAmount);
      }
      if (struct.isSetWinPrizeMoney()) {
        oprot.writeI64(struct.winPrizeMoney);
      }
      if (struct.isSetPrizeAfterTax()) {
        oprot.writeI64(struct.prizeAfterTax);
      }
      if (struct.isSetOrderContent()) {
        oprot.writeString(struct.orderContent);
      }
      if (struct.isSetStakeNum()) {
        oprot.writeI32(struct.stakeNum);
      }
      if (struct.isSetMultiple()) {
        oprot.writeI32(struct.multiple);
      }
      if (struct.isSetPlayType()) {
        oprot.writeString(struct.playType);
      }
      if (struct.isSetPaySerialNumber()) {
        oprot.writeString(struct.paySerialNumber);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType);
      }
      if (struct.isSetTradeId()) {
        oprot.writeString(struct.tradeId);
      }
      if (struct.isSetPlanId()) {
        oprot.writeString(struct.planId);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetLotteryMark()) {
        oprot.writeString(struct.lotteryMark);
      }
      if (struct.isSetTicketTime()) {
        oprot.writeString(struct.ticketTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetDrawTime()) {
        oprot.writeString(struct.drawTime);
      }
      if (struct.isSetOrderDetails()) {
        {
          oprot.writeI32(struct.orderDetails.size());
          for (OrderDetail _iter4 : struct.orderDetails)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Order struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderNo = iprot.readString();
        struct.setOrderNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderStatus = iprot.readI32();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalAmount = iprot.readI64();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.winPrizeMoney = iprot.readI64();
        struct.setWinPrizeMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.prizeAfterTax = iprot.readI64();
        struct.setPrizeAfterTaxIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orderContent = iprot.readString();
        struct.setOrderContentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.stakeNum = iprot.readI32();
        struct.setStakeNumIsSet(true);
      }
      if (incoming.get(12)) {
        struct.multiple = iprot.readI32();
        struct.setMultipleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.playType = iprot.readString();
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.paySerialNumber = iprot.readString();
        struct.setPaySerialNumberIsSet(true);
      }
      if (incoming.get(15)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
      if (incoming.get(17)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(21)) {
        struct.orderType = iprot.readI32();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.tradeId = iprot.readString();
        struct.setTradeIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.planId = iprot.readString();
        struct.setPlanIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(25)) {
        struct.lotteryMark = iprot.readString();
        struct.setLotteryMarkIsSet(true);
      }
      if (incoming.get(26)) {
        struct.ticketTime = iprot.readString();
        struct.setTicketTimeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.drawTime = iprot.readString();
        struct.setDrawTimeIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderDetails = new ArrayList<OrderDetail>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            OrderDetail _elem7;
            _elem7 = new OrderDetail();
            _elem7.read(iprot);
            struct.orderDetails.add(_elem7);
          }
        }
        struct.setOrderDetailsIsSet(true);
      }
    }
  }

}

