/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.appendtask;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppendTaskIndex implements org.apache.thrift.TBase<AppendTaskIndex, AppendTaskIndex._Fields>, java.io.Serializable, Cloneable, Comparable<AppendTaskIndex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppendTaskIndex");

  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerTradeId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppendTaskIndexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppendTaskIndexTupleSchemeFactory());
  }

  public String partnerId; // required
  public String partnerTradeId; // required
  public String appendTaskId; // required
  public long userId; // required
  public String createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER_ID((short)1, "partnerId"),
    PARTNER_TRADE_ID((short)2, "partnerTradeId"),
    APPEND_TASK_ID((short)3, "appendTaskId"),
    USER_ID((short)4, "userId"),
    CREATE_TIME((short)5, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_ID
          return PARTNER_ID;
        case 2: // PARTNER_TRADE_ID
          return PARTNER_TRADE_ID;
        case 3: // APPEND_TASK_ID
          return APPEND_TASK_ID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerTradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppendTaskIndex.class, metaDataMap);
  }

  public AppendTaskIndex() {
  }

  public AppendTaskIndex(
    String partnerId,
    String partnerTradeId,
    String appendTaskId,
    long userId,
    String createTime)
  {
    this();
    this.partnerId = partnerId;
    this.partnerTradeId = partnerTradeId;
    this.appendTaskId = appendTaskId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppendTaskIndex(AppendTaskIndex other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetPartnerTradeId()) {
      this.partnerTradeId = other.partnerTradeId;
    }
    if (other.isSetAppendTaskId()) {
      this.appendTaskId = other.appendTaskId;
    }
    this.userId = other.userId;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public AppendTaskIndex deepCopy() {
    return new AppendTaskIndex(this);
  }

  @Override
  public void clear() {
    this.partnerId = null;
    this.partnerTradeId = null;
    this.appendTaskId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.createTime = null;
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public AppendTaskIndex setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getPartnerTradeId() {
    return this.partnerTradeId;
  }

  public AppendTaskIndex setPartnerTradeId(String partnerTradeId) {
    this.partnerTradeId = partnerTradeId;
    return this;
  }

  public void unsetPartnerTradeId() {
    this.partnerTradeId = null;
  }

  /** Returns true if field partnerTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerTradeId() {
    return this.partnerTradeId != null;
  }

  public void setPartnerTradeIdIsSet(boolean value) {
    if (!value) {
      this.partnerTradeId = null;
    }
  }

  public String getAppendTaskId() {
    return this.appendTaskId;
  }

  public AppendTaskIndex setAppendTaskId(String appendTaskId) {
    this.appendTaskId = appendTaskId;
    return this;
  }

  public void unsetAppendTaskId() {
    this.appendTaskId = null;
  }

  /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendTaskId() {
    return this.appendTaskId != null;
  }

  public void setAppendTaskIdIsSet(boolean value) {
    if (!value) {
      this.appendTaskId = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public AppendTaskIndex setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public AppendTaskIndex setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case PARTNER_TRADE_ID:
      if (value == null) {
        unsetPartnerTradeId();
      } else {
        setPartnerTradeId((String)value);
      }
      break;

    case APPEND_TASK_ID:
      if (value == null) {
        unsetAppendTaskId();
      } else {
        setAppendTaskId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_ID:
      return getPartnerId();

    case PARTNER_TRADE_ID:
      return getPartnerTradeId();

    case APPEND_TASK_ID:
      return getAppendTaskId();

    case USER_ID:
      return Long.valueOf(getUserId());

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_ID:
      return isSetPartnerId();
    case PARTNER_TRADE_ID:
      return isSetPartnerTradeId();
    case APPEND_TASK_ID:
      return isSetAppendTaskId();
    case USER_ID:
      return isSetUserId();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppendTaskIndex)
      return this.equals((AppendTaskIndex)that);
    return false;
  }

  public boolean equals(AppendTaskIndex that) {
    if (that == null)
      return false;

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_partnerTradeId = true && this.isSetPartnerTradeId();
    boolean that_present_partnerTradeId = true && that.isSetPartnerTradeId();
    if (this_present_partnerTradeId || that_present_partnerTradeId) {
      if (!(this_present_partnerTradeId && that_present_partnerTradeId))
        return false;
      if (!this.partnerTradeId.equals(that.partnerTradeId))
        return false;
    }

    boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
    boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
    if (this_present_appendTaskId || that_present_appendTaskId) {
      if (!(this_present_appendTaskId && that_present_appendTaskId))
        return false;
      if (!this.appendTaskId.equals(that.appendTaskId))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppendTaskIndex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerTradeId()).compareTo(other.isSetPartnerTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerTradeId, other.partnerTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppendTaskIndex(");
    boolean first = true;

    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerTradeId:");
    if (this.partnerTradeId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerTradeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendTaskId:");
    if (this.appendTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.appendTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppendTaskIndexStandardSchemeFactory implements SchemeFactory {
    public AppendTaskIndexStandardScheme getScheme() {
      return new AppendTaskIndexStandardScheme();
    }
  }

  private static class AppendTaskIndexStandardScheme extends StandardScheme<AppendTaskIndex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppendTaskIndex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerTradeId = iprot.readString();
              struct.setPartnerTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPEND_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appendTaskId = iprot.readString();
              struct.setAppendTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppendTaskIndex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerTradeId != null) {
        oprot.writeFieldBegin(PARTNER_TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.partnerTradeId);
        oprot.writeFieldEnd();
      }
      if (struct.appendTaskId != null) {
        oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.appendTaskId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppendTaskIndexTupleSchemeFactory implements SchemeFactory {
    public AppendTaskIndexTupleScheme getScheme() {
      return new AppendTaskIndexTupleScheme();
    }
  }

  private static class AppendTaskIndexTupleScheme extends TupleScheme<AppendTaskIndex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppendTaskIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerTradeId()) {
        optionals.set(1);
      }
      if (struct.isSetAppendTaskId()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetPartnerTradeId()) {
        oprot.writeString(struct.partnerTradeId);
      }
      if (struct.isSetAppendTaskId()) {
        oprot.writeString(struct.appendTaskId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppendTaskIndex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerTradeId = iprot.readString();
        struct.setPartnerTradeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appendTaskId = iprot.readString();
        struct.setAppendTaskIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

