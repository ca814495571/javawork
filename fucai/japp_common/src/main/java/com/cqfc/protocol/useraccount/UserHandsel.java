/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserHandsel implements org.apache.thrift.TBase<UserHandsel, UserHandsel._Fields>, java.io.Serializable, Cloneable, Comparable<UserHandsel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserHandsel");

  private static final org.apache.thrift.protocol.TField HANDSEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handselId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARTNER_HANDSEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerHandselId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRESENT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("presentAmount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField USABLE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("usableAmount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField USED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("usedAmount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PRESENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("presentTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VALID_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("validTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FAILURE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("failureTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserHandselStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserHandselTupleSchemeFactory());
  }

  public long handselId; // required
  public long userId; // required
  public String partnerId; // required
  public String activityId; // required
  public String partnerHandselId; // required
  public String serialNumber; // required
  public long presentAmount; // required
  public long usableAmount; // required
  public long usedAmount; // required
  public String presentTime; // required
  public String validTime; // required
  public String failureTime; // required
  public int state; // required
  public long version; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HANDSEL_ID((short)1, "handselId"),
    USER_ID((short)2, "userId"),
    PARTNER_ID((short)3, "partnerId"),
    ACTIVITY_ID((short)4, "activityId"),
    PARTNER_HANDSEL_ID((short)5, "partnerHandselId"),
    SERIAL_NUMBER((short)6, "serialNumber"),
    PRESENT_AMOUNT((short)7, "presentAmount"),
    USABLE_AMOUNT((short)8, "usableAmount"),
    USED_AMOUNT((short)9, "usedAmount"),
    PRESENT_TIME((short)10, "presentTime"),
    VALID_TIME((short)11, "validTime"),
    FAILURE_TIME((short)12, "failureTime"),
    STATE((short)13, "state"),
    VERSION((short)14, "version"),
    CREATE_TIME((short)15, "createTime"),
    LAST_UPDATE_TIME((short)16, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HANDSEL_ID
          return HANDSEL_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // PARTNER_ID
          return PARTNER_ID;
        case 4: // ACTIVITY_ID
          return ACTIVITY_ID;
        case 5: // PARTNER_HANDSEL_ID
          return PARTNER_HANDSEL_ID;
        case 6: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 7: // PRESENT_AMOUNT
          return PRESENT_AMOUNT;
        case 8: // USABLE_AMOUNT
          return USABLE_AMOUNT;
        case 9: // USED_AMOUNT
          return USED_AMOUNT;
        case 10: // PRESENT_TIME
          return PRESENT_TIME;
        case 11: // VALID_TIME
          return VALID_TIME;
        case 12: // FAILURE_TIME
          return FAILURE_TIME;
        case 13: // STATE
          return STATE;
        case 14: // VERSION
          return VERSION;
        case 15: // CREATE_TIME
          return CREATE_TIME;
        case 16: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HANDSELID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __PRESENTAMOUNT_ISSET_ID = 2;
  private static final int __USABLEAMOUNT_ISSET_ID = 3;
  private static final int __USEDAMOUNT_ISSET_ID = 4;
  private static final int __STATE_ISSET_ID = 5;
  private static final int __VERSION_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HANDSEL_ID, new org.apache.thrift.meta_data.FieldMetaData("handselId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_HANDSEL_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerHandselId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESENT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("presentAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USABLE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("usableAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("usedAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRESENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("presentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_TIME, new org.apache.thrift.meta_data.FieldMetaData("validTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILURE_TIME, new org.apache.thrift.meta_data.FieldMetaData("failureTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserHandsel.class, metaDataMap);
  }

  public UserHandsel() {
  }

  public UserHandsel(
    long handselId,
    long userId,
    String partnerId,
    String activityId,
    String partnerHandselId,
    String serialNumber,
    long presentAmount,
    long usableAmount,
    long usedAmount,
    String presentTime,
    String validTime,
    String failureTime,
    int state,
    long version,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.handselId = handselId;
    setHandselIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.partnerId = partnerId;
    this.activityId = activityId;
    this.partnerHandselId = partnerHandselId;
    this.serialNumber = serialNumber;
    this.presentAmount = presentAmount;
    setPresentAmountIsSet(true);
    this.usableAmount = usableAmount;
    setUsableAmountIsSet(true);
    this.usedAmount = usedAmount;
    setUsedAmountIsSet(true);
    this.presentTime = presentTime;
    this.validTime = validTime;
    this.failureTime = failureTime;
    this.state = state;
    setStateIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserHandsel(UserHandsel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.handselId = other.handselId;
    this.userId = other.userId;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetActivityId()) {
      this.activityId = other.activityId;
    }
    if (other.isSetPartnerHandselId()) {
      this.partnerHandselId = other.partnerHandselId;
    }
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    this.presentAmount = other.presentAmount;
    this.usableAmount = other.usableAmount;
    this.usedAmount = other.usedAmount;
    if (other.isSetPresentTime()) {
      this.presentTime = other.presentTime;
    }
    if (other.isSetValidTime()) {
      this.validTime = other.validTime;
    }
    if (other.isSetFailureTime()) {
      this.failureTime = other.failureTime;
    }
    this.state = other.state;
    this.version = other.version;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public UserHandsel deepCopy() {
    return new UserHandsel(this);
  }

  @Override
  public void clear() {
    setHandselIdIsSet(false);
    this.handselId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.partnerId = null;
    this.activityId = null;
    this.partnerHandselId = null;
    this.serialNumber = null;
    setPresentAmountIsSet(false);
    this.presentAmount = 0;
    setUsableAmountIsSet(false);
    this.usableAmount = 0;
    setUsedAmountIsSet(false);
    this.usedAmount = 0;
    this.presentTime = null;
    this.validTime = null;
    this.failureTime = null;
    setStateIsSet(false);
    this.state = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public long getHandselId() {
    return this.handselId;
  }

  public UserHandsel setHandselId(long handselId) {
    this.handselId = handselId;
    setHandselIdIsSet(true);
    return this;
  }

  public void unsetHandselId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDSELID_ISSET_ID);
  }

  /** Returns true if field handselId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandselId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDSELID_ISSET_ID);
  }

  public void setHandselIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDSELID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public UserHandsel setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public UserHandsel setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getActivityId() {
    return this.activityId;
  }

  public UserHandsel setActivityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  public void unsetActivityId() {
    this.activityId = null;
  }

  /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return this.activityId != null;
  }

  public void setActivityIdIsSet(boolean value) {
    if (!value) {
      this.activityId = null;
    }
  }

  public String getPartnerHandselId() {
    return this.partnerHandselId;
  }

  public UserHandsel setPartnerHandselId(String partnerHandselId) {
    this.partnerHandselId = partnerHandselId;
    return this;
  }

  public void unsetPartnerHandselId() {
    this.partnerHandselId = null;
  }

  /** Returns true if field partnerHandselId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerHandselId() {
    return this.partnerHandselId != null;
  }

  public void setPartnerHandselIdIsSet(boolean value) {
    if (!value) {
      this.partnerHandselId = null;
    }
  }

  public String getSerialNumber() {
    return this.serialNumber;
  }

  public UserHandsel setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public long getPresentAmount() {
    return this.presentAmount;
  }

  public UserHandsel setPresentAmount(long presentAmount) {
    this.presentAmount = presentAmount;
    setPresentAmountIsSet(true);
    return this;
  }

  public void unsetPresentAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESENTAMOUNT_ISSET_ID);
  }

  /** Returns true if field presentAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPresentAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESENTAMOUNT_ISSET_ID);
  }

  public void setPresentAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESENTAMOUNT_ISSET_ID, value);
  }

  public long getUsableAmount() {
    return this.usableAmount;
  }

  public UserHandsel setUsableAmount(long usableAmount) {
    this.usableAmount = usableAmount;
    setUsableAmountIsSet(true);
    return this;
  }

  public void unsetUsableAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USABLEAMOUNT_ISSET_ID);
  }

  /** Returns true if field usableAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetUsableAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __USABLEAMOUNT_ISSET_ID);
  }

  public void setUsableAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USABLEAMOUNT_ISSET_ID, value);
  }

  public long getUsedAmount() {
    return this.usedAmount;
  }

  public UserHandsel setUsedAmount(long usedAmount) {
    this.usedAmount = usedAmount;
    setUsedAmountIsSet(true);
    return this;
  }

  public void unsetUsedAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDAMOUNT_ISSET_ID);
  }

  /** Returns true if field usedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDAMOUNT_ISSET_ID);
  }

  public void setUsedAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDAMOUNT_ISSET_ID, value);
  }

  public String getPresentTime() {
    return this.presentTime;
  }

  public UserHandsel setPresentTime(String presentTime) {
    this.presentTime = presentTime;
    return this;
  }

  public void unsetPresentTime() {
    this.presentTime = null;
  }

  /** Returns true if field presentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPresentTime() {
    return this.presentTime != null;
  }

  public void setPresentTimeIsSet(boolean value) {
    if (!value) {
      this.presentTime = null;
    }
  }

  public String getValidTime() {
    return this.validTime;
  }

  public UserHandsel setValidTime(String validTime) {
    this.validTime = validTime;
    return this;
  }

  public void unsetValidTime() {
    this.validTime = null;
  }

  /** Returns true if field validTime is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTime() {
    return this.validTime != null;
  }

  public void setValidTimeIsSet(boolean value) {
    if (!value) {
      this.validTime = null;
    }
  }

  public String getFailureTime() {
    return this.failureTime;
  }

  public UserHandsel setFailureTime(String failureTime) {
    this.failureTime = failureTime;
    return this;
  }

  public void unsetFailureTime() {
    this.failureTime = null;
  }

  /** Returns true if field failureTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureTime() {
    return this.failureTime != null;
  }

  public void setFailureTimeIsSet(boolean value) {
    if (!value) {
      this.failureTime = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public UserHandsel setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public UserHandsel setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public UserHandsel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public UserHandsel setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HANDSEL_ID:
      if (value == null) {
        unsetHandselId();
      } else {
        setHandselId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((String)value);
      }
      break;

    case PARTNER_HANDSEL_ID:
      if (value == null) {
        unsetPartnerHandselId();
      } else {
        setPartnerHandselId((String)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((String)value);
      }
      break;

    case PRESENT_AMOUNT:
      if (value == null) {
        unsetPresentAmount();
      } else {
        setPresentAmount((Long)value);
      }
      break;

    case USABLE_AMOUNT:
      if (value == null) {
        unsetUsableAmount();
      } else {
        setUsableAmount((Long)value);
      }
      break;

    case USED_AMOUNT:
      if (value == null) {
        unsetUsedAmount();
      } else {
        setUsedAmount((Long)value);
      }
      break;

    case PRESENT_TIME:
      if (value == null) {
        unsetPresentTime();
      } else {
        setPresentTime((String)value);
      }
      break;

    case VALID_TIME:
      if (value == null) {
        unsetValidTime();
      } else {
        setValidTime((String)value);
      }
      break;

    case FAILURE_TIME:
      if (value == null) {
        unsetFailureTime();
      } else {
        setFailureTime((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HANDSEL_ID:
      return Long.valueOf(getHandselId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case PARTNER_ID:
      return getPartnerId();

    case ACTIVITY_ID:
      return getActivityId();

    case PARTNER_HANDSEL_ID:
      return getPartnerHandselId();

    case SERIAL_NUMBER:
      return getSerialNumber();

    case PRESENT_AMOUNT:
      return Long.valueOf(getPresentAmount());

    case USABLE_AMOUNT:
      return Long.valueOf(getUsableAmount());

    case USED_AMOUNT:
      return Long.valueOf(getUsedAmount());

    case PRESENT_TIME:
      return getPresentTime();

    case VALID_TIME:
      return getValidTime();

    case FAILURE_TIME:
      return getFailureTime();

    case STATE:
      return Integer.valueOf(getState());

    case VERSION:
      return Long.valueOf(getVersion());

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HANDSEL_ID:
      return isSetHandselId();
    case USER_ID:
      return isSetUserId();
    case PARTNER_ID:
      return isSetPartnerId();
    case ACTIVITY_ID:
      return isSetActivityId();
    case PARTNER_HANDSEL_ID:
      return isSetPartnerHandselId();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case PRESENT_AMOUNT:
      return isSetPresentAmount();
    case USABLE_AMOUNT:
      return isSetUsableAmount();
    case USED_AMOUNT:
      return isSetUsedAmount();
    case PRESENT_TIME:
      return isSetPresentTime();
    case VALID_TIME:
      return isSetValidTime();
    case FAILURE_TIME:
      return isSetFailureTime();
    case STATE:
      return isSetState();
    case VERSION:
      return isSetVersion();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserHandsel)
      return this.equals((UserHandsel)that);
    return false;
  }

  public boolean equals(UserHandsel that) {
    if (that == null)
      return false;

    boolean this_present_handselId = true;
    boolean that_present_handselId = true;
    if (this_present_handselId || that_present_handselId) {
      if (!(this_present_handselId && that_present_handselId))
        return false;
      if (this.handselId != that.handselId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_activityId = true && this.isSetActivityId();
    boolean that_present_activityId = true && that.isSetActivityId();
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (!this.activityId.equals(that.activityId))
        return false;
    }

    boolean this_present_partnerHandselId = true && this.isSetPartnerHandselId();
    boolean that_present_partnerHandselId = true && that.isSetPartnerHandselId();
    if (this_present_partnerHandselId || that_present_partnerHandselId) {
      if (!(this_present_partnerHandselId && that_present_partnerHandselId))
        return false;
      if (!this.partnerHandselId.equals(that.partnerHandselId))
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_presentAmount = true;
    boolean that_present_presentAmount = true;
    if (this_present_presentAmount || that_present_presentAmount) {
      if (!(this_present_presentAmount && that_present_presentAmount))
        return false;
      if (this.presentAmount != that.presentAmount)
        return false;
    }

    boolean this_present_usableAmount = true;
    boolean that_present_usableAmount = true;
    if (this_present_usableAmount || that_present_usableAmount) {
      if (!(this_present_usableAmount && that_present_usableAmount))
        return false;
      if (this.usableAmount != that.usableAmount)
        return false;
    }

    boolean this_present_usedAmount = true;
    boolean that_present_usedAmount = true;
    if (this_present_usedAmount || that_present_usedAmount) {
      if (!(this_present_usedAmount && that_present_usedAmount))
        return false;
      if (this.usedAmount != that.usedAmount)
        return false;
    }

    boolean this_present_presentTime = true && this.isSetPresentTime();
    boolean that_present_presentTime = true && that.isSetPresentTime();
    if (this_present_presentTime || that_present_presentTime) {
      if (!(this_present_presentTime && that_present_presentTime))
        return false;
      if (!this.presentTime.equals(that.presentTime))
        return false;
    }

    boolean this_present_validTime = true && this.isSetValidTime();
    boolean that_present_validTime = true && that.isSetValidTime();
    if (this_present_validTime || that_present_validTime) {
      if (!(this_present_validTime && that_present_validTime))
        return false;
      if (!this.validTime.equals(that.validTime))
        return false;
    }

    boolean this_present_failureTime = true && this.isSetFailureTime();
    boolean that_present_failureTime = true && that.isSetFailureTime();
    if (this_present_failureTime || that_present_failureTime) {
      if (!(this_present_failureTime && that_present_failureTime))
        return false;
      if (!this.failureTime.equals(that.failureTime))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserHandsel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHandselId()).compareTo(other.isSetHandselId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandselId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handselId, other.handselId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(other.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, other.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerHandselId()).compareTo(other.isSetPartnerHandselId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerHandselId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerHandselId, other.partnerHandselId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPresentAmount()).compareTo(other.isSetPresentAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresentAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presentAmount, other.presentAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsableAmount()).compareTo(other.isSetUsableAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsableAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usableAmount, other.usableAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedAmount()).compareTo(other.isSetUsedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedAmount, other.usedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPresentTime()).compareTo(other.isSetPresentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presentTime, other.presentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTime()).compareTo(other.isSetValidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTime, other.validTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureTime()).compareTo(other.isSetFailureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureTime, other.failureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserHandsel(");
    boolean first = true;

    sb.append("handselId:");
    sb.append(this.handselId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityId:");
    if (this.activityId == null) {
      sb.append("null");
    } else {
      sb.append(this.activityId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerHandselId:");
    if (this.partnerHandselId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerHandselId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("presentAmount:");
    sb.append(this.presentAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usableAmount:");
    sb.append(this.usableAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedAmount:");
    sb.append(this.usedAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("presentTime:");
    if (this.presentTime == null) {
      sb.append("null");
    } else {
      sb.append(this.presentTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validTime:");
    if (this.validTime == null) {
      sb.append("null");
    } else {
      sb.append(this.validTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failureTime:");
    if (this.failureTime == null) {
      sb.append("null");
    } else {
      sb.append(this.failureTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserHandselStandardSchemeFactory implements SchemeFactory {
    public UserHandselStandardScheme getScheme() {
      return new UserHandselStandardScheme();
    }
  }

  private static class UserHandselStandardScheme extends StandardScheme<UserHandsel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserHandsel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HANDSEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.handselId = iprot.readI64();
              struct.setHandselIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activityId = iprot.readString();
              struct.setActivityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTNER_HANDSEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerHandselId = iprot.readString();
              struct.setPartnerHandselIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRESENT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.presentAmount = iprot.readI64();
              struct.setPresentAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USABLE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.usableAmount = iprot.readI64();
              struct.setUsableAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.usedAmount = iprot.readI64();
              struct.setUsedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRESENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.presentTime = iprot.readString();
              struct.setPresentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VALID_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validTime = iprot.readString();
              struct.setValidTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FAILURE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.failureTime = iprot.readString();
              struct.setFailureTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserHandsel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HANDSEL_ID_FIELD_DESC);
      oprot.writeI64(struct.handselId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.activityId != null) {
        oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
        oprot.writeString(struct.activityId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerHandselId != null) {
        oprot.writeFieldBegin(PARTNER_HANDSEL_ID_FIELD_DESC);
        oprot.writeString(struct.partnerHandselId);
        oprot.writeFieldEnd();
      }
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRESENT_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.presentAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USABLE_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.usableAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USED_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.usedAmount);
      oprot.writeFieldEnd();
      if (struct.presentTime != null) {
        oprot.writeFieldBegin(PRESENT_TIME_FIELD_DESC);
        oprot.writeString(struct.presentTime);
        oprot.writeFieldEnd();
      }
      if (struct.validTime != null) {
        oprot.writeFieldBegin(VALID_TIME_FIELD_DESC);
        oprot.writeString(struct.validTime);
        oprot.writeFieldEnd();
      }
      if (struct.failureTime != null) {
        oprot.writeFieldBegin(FAILURE_TIME_FIELD_DESC);
        oprot.writeString(struct.failureTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserHandselTupleSchemeFactory implements SchemeFactory {
    public UserHandselTupleScheme getScheme() {
      return new UserHandselTupleScheme();
    }
  }

  private static class UserHandselTupleScheme extends TupleScheme<UserHandsel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserHandsel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHandselId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(2);
      }
      if (struct.isSetActivityId()) {
        optionals.set(3);
      }
      if (struct.isSetPartnerHandselId()) {
        optionals.set(4);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(5);
      }
      if (struct.isSetPresentAmount()) {
        optionals.set(6);
      }
      if (struct.isSetUsableAmount()) {
        optionals.set(7);
      }
      if (struct.isSetUsedAmount()) {
        optionals.set(8);
      }
      if (struct.isSetPresentTime()) {
        optionals.set(9);
      }
      if (struct.isSetValidTime()) {
        optionals.set(10);
      }
      if (struct.isSetFailureTime()) {
        optionals.set(11);
      }
      if (struct.isSetState()) {
        optionals.set(12);
      }
      if (struct.isSetVersion()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(14);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetHandselId()) {
        oprot.writeI64(struct.handselId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetActivityId()) {
        oprot.writeString(struct.activityId);
      }
      if (struct.isSetPartnerHandselId()) {
        oprot.writeString(struct.partnerHandselId);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetPresentAmount()) {
        oprot.writeI64(struct.presentAmount);
      }
      if (struct.isSetUsableAmount()) {
        oprot.writeI64(struct.usableAmount);
      }
      if (struct.isSetUsedAmount()) {
        oprot.writeI64(struct.usedAmount);
      }
      if (struct.isSetPresentTime()) {
        oprot.writeString(struct.presentTime);
      }
      if (struct.isSetValidTime()) {
        oprot.writeString(struct.validTime);
      }
      if (struct.isSetFailureTime()) {
        oprot.writeString(struct.failureTime);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserHandsel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.handselId = iprot.readI64();
        struct.setHandselIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activityId = iprot.readString();
        struct.setActivityIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.partnerHandselId = iprot.readString();
        struct.setPartnerHandselIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.presentAmount = iprot.readI64();
        struct.setPresentAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.usableAmount = iprot.readI64();
        struct.setUsableAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.usedAmount = iprot.readI64();
        struct.setUsedAmountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.presentTime = iprot.readString();
        struct.setPresentTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.validTime = iprot.readString();
        struct.setValidTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.failureTime = iprot.readString();
        struct.setFailureTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

