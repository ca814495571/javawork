/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserPreApply implements org.apache.thrift.TBase<UserPreApply, UserPreApply._Fields>, java.io.Serializable, Cloneable, Comparable<UserPreApply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserPreApply");

  private static final org.apache.thrift.protocol.TField PRE_APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preApplyId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARTNER_UNIQUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerUniqueNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("preMoney", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserPreApplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserPreApplyTupleSchemeFactory());
  }

  public long preApplyId; // required
  public String partnerId; // required
  public long userId; // required
  public String partnerUniqueNo; // required
  public long preMoney; // required
  public int status; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRE_APPLY_ID((short)1, "preApplyId"),
    PARTNER_ID((short)2, "partnerId"),
    USER_ID((short)3, "userId"),
    PARTNER_UNIQUE_NO((short)4, "partnerUniqueNo"),
    PRE_MONEY((short)5, "preMoney"),
    STATUS((short)6, "status"),
    CREATE_TIME((short)7, "createTime"),
    LAST_UPDATE_TIME((short)8, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRE_APPLY_ID
          return PRE_APPLY_ID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // PARTNER_UNIQUE_NO
          return PARTNER_UNIQUE_NO;
        case 5: // PRE_MONEY
          return PRE_MONEY;
        case 6: // STATUS
          return STATUS;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREAPPLYID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __PREMONEY_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRE_APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("preApplyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTNER_UNIQUE_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerUniqueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("preMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserPreApply.class, metaDataMap);
  }

  public UserPreApply() {
  }

  public UserPreApply(
    long preApplyId,
    String partnerId,
    long userId,
    String partnerUniqueNo,
    long preMoney,
    int status,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.preApplyId = preApplyId;
    setPreApplyIdIsSet(true);
    this.partnerId = partnerId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.partnerUniqueNo = partnerUniqueNo;
    this.preMoney = preMoney;
    setPreMoneyIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserPreApply(UserPreApply other) {
    __isset_bitfield = other.__isset_bitfield;
    this.preApplyId = other.preApplyId;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.userId = other.userId;
    if (other.isSetPartnerUniqueNo()) {
      this.partnerUniqueNo = other.partnerUniqueNo;
    }
    this.preMoney = other.preMoney;
    this.status = other.status;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public UserPreApply deepCopy() {
    return new UserPreApply(this);
  }

  @Override
  public void clear() {
    setPreApplyIdIsSet(false);
    this.preApplyId = 0;
    this.partnerId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.partnerUniqueNo = null;
    setPreMoneyIsSet(false);
    this.preMoney = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public long getPreApplyId() {
    return this.preApplyId;
  }

  public UserPreApply setPreApplyId(long preApplyId) {
    this.preApplyId = preApplyId;
    setPreApplyIdIsSet(true);
    return this;
  }

  public void unsetPreApplyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREAPPLYID_ISSET_ID);
  }

  /** Returns true if field preApplyId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreApplyId() {
    return EncodingUtils.testBit(__isset_bitfield, __PREAPPLYID_ISSET_ID);
  }

  public void setPreApplyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREAPPLYID_ISSET_ID, value);
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public UserPreApply setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public UserPreApply setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getPartnerUniqueNo() {
    return this.partnerUniqueNo;
  }

  public UserPreApply setPartnerUniqueNo(String partnerUniqueNo) {
    this.partnerUniqueNo = partnerUniqueNo;
    return this;
  }

  public void unsetPartnerUniqueNo() {
    this.partnerUniqueNo = null;
  }

  /** Returns true if field partnerUniqueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerUniqueNo() {
    return this.partnerUniqueNo != null;
  }

  public void setPartnerUniqueNoIsSet(boolean value) {
    if (!value) {
      this.partnerUniqueNo = null;
    }
  }

  public long getPreMoney() {
    return this.preMoney;
  }

  public UserPreApply setPreMoney(long preMoney) {
    this.preMoney = preMoney;
    setPreMoneyIsSet(true);
    return this;
  }

  public void unsetPreMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREMONEY_ISSET_ID);
  }

  /** Returns true if field preMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPreMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PREMONEY_ISSET_ID);
  }

  public void setPreMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREMONEY_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public UserPreApply setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public UserPreApply setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public UserPreApply setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRE_APPLY_ID:
      if (value == null) {
        unsetPreApplyId();
      } else {
        setPreApplyId((Long)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case PARTNER_UNIQUE_NO:
      if (value == null) {
        unsetPartnerUniqueNo();
      } else {
        setPartnerUniqueNo((String)value);
      }
      break;

    case PRE_MONEY:
      if (value == null) {
        unsetPreMoney();
      } else {
        setPreMoney((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRE_APPLY_ID:
      return Long.valueOf(getPreApplyId());

    case PARTNER_ID:
      return getPartnerId();

    case USER_ID:
      return Long.valueOf(getUserId());

    case PARTNER_UNIQUE_NO:
      return getPartnerUniqueNo();

    case PRE_MONEY:
      return Long.valueOf(getPreMoney());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRE_APPLY_ID:
      return isSetPreApplyId();
    case PARTNER_ID:
      return isSetPartnerId();
    case USER_ID:
      return isSetUserId();
    case PARTNER_UNIQUE_NO:
      return isSetPartnerUniqueNo();
    case PRE_MONEY:
      return isSetPreMoney();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserPreApply)
      return this.equals((UserPreApply)that);
    return false;
  }

  public boolean equals(UserPreApply that) {
    if (that == null)
      return false;

    boolean this_present_preApplyId = true;
    boolean that_present_preApplyId = true;
    if (this_present_preApplyId || that_present_preApplyId) {
      if (!(this_present_preApplyId && that_present_preApplyId))
        return false;
      if (this.preApplyId != that.preApplyId)
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_partnerUniqueNo = true && this.isSetPartnerUniqueNo();
    boolean that_present_partnerUniqueNo = true && that.isSetPartnerUniqueNo();
    if (this_present_partnerUniqueNo || that_present_partnerUniqueNo) {
      if (!(this_present_partnerUniqueNo && that_present_partnerUniqueNo))
        return false;
      if (!this.partnerUniqueNo.equals(that.partnerUniqueNo))
        return false;
    }

    boolean this_present_preMoney = true;
    boolean that_present_preMoney = true;
    if (this_present_preMoney || that_present_preMoney) {
      if (!(this_present_preMoney && that_present_preMoney))
        return false;
      if (this.preMoney != that.preMoney)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserPreApply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPreApplyId()).compareTo(other.isSetPreApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preApplyId, other.preApplyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerUniqueNo()).compareTo(other.isSetPartnerUniqueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerUniqueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerUniqueNo, other.partnerUniqueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreMoney()).compareTo(other.isSetPreMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preMoney, other.preMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserPreApply(");
    boolean first = true;

    sb.append("preApplyId:");
    sb.append(this.preApplyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerUniqueNo:");
    if (this.partnerUniqueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerUniqueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preMoney:");
    sb.append(this.preMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserPreApplyStandardSchemeFactory implements SchemeFactory {
    public UserPreApplyStandardScheme getScheme() {
      return new UserPreApplyStandardScheme();
    }
  }

  private static class UserPreApplyStandardScheme extends StandardScheme<UserPreApply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserPreApply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRE_APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.preApplyId = iprot.readI64();
              struct.setPreApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTNER_UNIQUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerUniqueNo = iprot.readString();
              struct.setPartnerUniqueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.preMoney = iprot.readI64();
              struct.setPreMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserPreApply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRE_APPLY_ID_FIELD_DESC);
      oprot.writeI64(struct.preApplyId);
      oprot.writeFieldEnd();
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.partnerUniqueNo != null) {
        oprot.writeFieldBegin(PARTNER_UNIQUE_NO_FIELD_DESC);
        oprot.writeString(struct.partnerUniqueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.preMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserPreApplyTupleSchemeFactory implements SchemeFactory {
    public UserPreApplyTupleScheme getScheme() {
      return new UserPreApplyTupleScheme();
    }
  }

  private static class UserPreApplyTupleScheme extends TupleScheme<UserPreApply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserPreApply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPreApplyId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetPartnerUniqueNo()) {
        optionals.set(3);
      }
      if (struct.isSetPreMoney()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPreApplyId()) {
        oprot.writeI64(struct.preApplyId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetPartnerUniqueNo()) {
        oprot.writeString(struct.partnerUniqueNo);
      }
      if (struct.isSetPreMoney()) {
        oprot.writeI64(struct.preMoney);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserPreApply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.preApplyId = iprot.readI64();
        struct.setPreApplyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partnerUniqueNo = iprot.readString();
        struct.setPartnerUniqueNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.preMoney = iprot.readI64();
        struct.setPreMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

