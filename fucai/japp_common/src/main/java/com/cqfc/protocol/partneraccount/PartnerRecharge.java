/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partneraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerRecharge implements org.apache.thrift.TBase<PartnerRecharge, PartnerRecharge._Fields>, java.io.Serializable, Cloneable, Comparable<PartnerRecharge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartnerRecharge");

  private static final org.apache.thrift.protocol.TField RECHARGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECHARGE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeAmount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RECHARGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartnerRechargeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartnerRechargeTupleSchemeFactory());
  }

  public int rechargeId; // required
  public String partnerId; // required
  public String serialNumber; // required
  public long rechargeAmount; // required
  public String rechargeType; // required
  public String remark; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECHARGE_ID((short)1, "rechargeId"),
    PARTNER_ID((short)2, "partnerId"),
    SERIAL_NUMBER((short)3, "serialNumber"),
    RECHARGE_AMOUNT((short)4, "rechargeAmount"),
    RECHARGE_TYPE((short)5, "rechargeType"),
    REMARK((short)6, "remark"),
    CREATE_TIME((short)7, "createTime"),
    LAST_UPDATE_TIME((short)8, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECHARGE_ID
          return RECHARGE_ID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 4: // RECHARGE_AMOUNT
          return RECHARGE_AMOUNT;
        case 5: // RECHARGE_TYPE
          return RECHARGE_TYPE;
        case 6: // REMARK
          return REMARK;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECHARGEID_ISSET_ID = 0;
  private static final int __RECHARGEAMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECHARGE_ID, new org.apache.thrift.meta_data.FieldMetaData("rechargeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECHARGE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("rechargeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECHARGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rechargeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartnerRecharge.class, metaDataMap);
  }

  public PartnerRecharge() {
  }

  public PartnerRecharge(
    int rechargeId,
    String partnerId,
    String serialNumber,
    long rechargeAmount,
    String rechargeType,
    String remark,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.rechargeId = rechargeId;
    setRechargeIdIsSet(true);
    this.partnerId = partnerId;
    this.serialNumber = serialNumber;
    this.rechargeAmount = rechargeAmount;
    setRechargeAmountIsSet(true);
    this.rechargeType = rechargeType;
    this.remark = remark;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartnerRecharge(PartnerRecharge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rechargeId = other.rechargeId;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    this.rechargeAmount = other.rechargeAmount;
    if (other.isSetRechargeType()) {
      this.rechargeType = other.rechargeType;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public PartnerRecharge deepCopy() {
    return new PartnerRecharge(this);
  }

  @Override
  public void clear() {
    setRechargeIdIsSet(false);
    this.rechargeId = 0;
    this.partnerId = null;
    this.serialNumber = null;
    setRechargeAmountIsSet(false);
    this.rechargeAmount = 0;
    this.rechargeType = null;
    this.remark = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public int getRechargeId() {
    return this.rechargeId;
  }

  public PartnerRecharge setRechargeId(int rechargeId) {
    this.rechargeId = rechargeId;
    setRechargeIdIsSet(true);
    return this;
  }

  public void unsetRechargeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHARGEID_ISSET_ID);
  }

  /** Returns true if field rechargeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHARGEID_ISSET_ID);
  }

  public void setRechargeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHARGEID_ISSET_ID, value);
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public PartnerRecharge setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getSerialNumber() {
    return this.serialNumber;
  }

  public PartnerRecharge setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public long getRechargeAmount() {
    return this.rechargeAmount;
  }

  public PartnerRecharge setRechargeAmount(long rechargeAmount) {
    this.rechargeAmount = rechargeAmount;
    setRechargeAmountIsSet(true);
    return this;
  }

  public void unsetRechargeAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHARGEAMOUNT_ISSET_ID);
  }

  /** Returns true if field rechargeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHARGEAMOUNT_ISSET_ID);
  }

  public void setRechargeAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHARGEAMOUNT_ISSET_ID, value);
  }

  public String getRechargeType() {
    return this.rechargeType;
  }

  public PartnerRecharge setRechargeType(String rechargeType) {
    this.rechargeType = rechargeType;
    return this;
  }

  public void unsetRechargeType() {
    this.rechargeType = null;
  }

  /** Returns true if field rechargeType is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeType() {
    return this.rechargeType != null;
  }

  public void setRechargeTypeIsSet(boolean value) {
    if (!value) {
      this.rechargeType = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public PartnerRecharge setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public PartnerRecharge setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public PartnerRecharge setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECHARGE_ID:
      if (value == null) {
        unsetRechargeId();
      } else {
        setRechargeId((Integer)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((String)value);
      }
      break;

    case RECHARGE_AMOUNT:
      if (value == null) {
        unsetRechargeAmount();
      } else {
        setRechargeAmount((Long)value);
      }
      break;

    case RECHARGE_TYPE:
      if (value == null) {
        unsetRechargeType();
      } else {
        setRechargeType((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECHARGE_ID:
      return Integer.valueOf(getRechargeId());

    case PARTNER_ID:
      return getPartnerId();

    case SERIAL_NUMBER:
      return getSerialNumber();

    case RECHARGE_AMOUNT:
      return Long.valueOf(getRechargeAmount());

    case RECHARGE_TYPE:
      return getRechargeType();

    case REMARK:
      return getRemark();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECHARGE_ID:
      return isSetRechargeId();
    case PARTNER_ID:
      return isSetPartnerId();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case RECHARGE_AMOUNT:
      return isSetRechargeAmount();
    case RECHARGE_TYPE:
      return isSetRechargeType();
    case REMARK:
      return isSetRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartnerRecharge)
      return this.equals((PartnerRecharge)that);
    return false;
  }

  public boolean equals(PartnerRecharge that) {
    if (that == null)
      return false;

    boolean this_present_rechargeId = true;
    boolean that_present_rechargeId = true;
    if (this_present_rechargeId || that_present_rechargeId) {
      if (!(this_present_rechargeId && that_present_rechargeId))
        return false;
      if (this.rechargeId != that.rechargeId)
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_rechargeAmount = true;
    boolean that_present_rechargeAmount = true;
    if (this_present_rechargeAmount || that_present_rechargeAmount) {
      if (!(this_present_rechargeAmount && that_present_rechargeAmount))
        return false;
      if (this.rechargeAmount != that.rechargeAmount)
        return false;
    }

    boolean this_present_rechargeType = true && this.isSetRechargeType();
    boolean that_present_rechargeType = true && that.isSetRechargeType();
    if (this_present_rechargeType || that_present_rechargeType) {
      if (!(this_present_rechargeType && that_present_rechargeType))
        return false;
      if (!this.rechargeType.equals(that.rechargeType))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PartnerRecharge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRechargeId()).compareTo(other.isSetRechargeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeId, other.rechargeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeAmount()).compareTo(other.isSetRechargeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeAmount, other.rechargeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeType()).compareTo(other.isSetRechargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeType, other.rechargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartnerRecharge(");
    boolean first = true;

    sb.append("rechargeId:");
    sb.append(this.rechargeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeAmount:");
    sb.append(this.rechargeAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeType:");
    if (this.rechargeType == null) {
      sb.append("null");
    } else {
      sb.append(this.rechargeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartnerRechargeStandardSchemeFactory implements SchemeFactory {
    public PartnerRechargeStandardScheme getScheme() {
      return new PartnerRechargeStandardScheme();
    }
  }

  private static class PartnerRechargeStandardScheme extends StandardScheme<PartnerRecharge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartnerRecharge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECHARGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rechargeId = iprot.readI32();
              struct.setRechargeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECHARGE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rechargeAmount = iprot.readI64();
              struct.setRechargeAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECHARGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rechargeType = iprot.readString();
              struct.setRechargeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartnerRecharge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RECHARGE_ID_FIELD_DESC);
      oprot.writeI32(struct.rechargeId);
      oprot.writeFieldEnd();
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECHARGE_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.rechargeAmount);
      oprot.writeFieldEnd();
      if (struct.rechargeType != null) {
        oprot.writeFieldBegin(RECHARGE_TYPE_FIELD_DESC);
        oprot.writeString(struct.rechargeType);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartnerRechargeTupleSchemeFactory implements SchemeFactory {
    public PartnerRechargeTupleScheme getScheme() {
      return new PartnerRechargeTupleScheme();
    }
  }

  private static class PartnerRechargeTupleScheme extends TupleScheme<PartnerRecharge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartnerRecharge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRechargeId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(2);
      }
      if (struct.isSetRechargeAmount()) {
        optionals.set(3);
      }
      if (struct.isSetRechargeType()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetRechargeId()) {
        oprot.writeI32(struct.rechargeId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetRechargeAmount()) {
        oprot.writeI64(struct.rechargeAmount);
      }
      if (struct.isSetRechargeType()) {
        oprot.writeString(struct.rechargeType);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartnerRecharge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.rechargeId = iprot.readI32();
        struct.setRechargeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rechargeAmount = iprot.readI64();
        struct.setRechargeAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rechargeType = iprot.readString();
        struct.setRechargeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

