/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.cancelorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SportCancelOrder implements org.apache.thrift.TBase<SportCancelOrder, SportCancelOrder._Fields>, java.io.Serializable, Cloneable, Comparable<SportCancelOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SportCancelOrder");

  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OUT_TICKET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("outTicketStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiple", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("planId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PRINT_PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("printProvince", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TICKET_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketNo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PRINT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("printTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField DETAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("detailList", org.apache.thrift.protocol.TType.LIST, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SportCancelOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SportCancelOrderTupleSchemeFactory());
  }

  public long orderNo; // required
  public String lotteryId; // required
  public String partnerId; // required
  public long userId; // required
  public String issueNo; // required
  public int orderType; // required
  public int outTicketStatus; // required
  public long totalAmount; // required
  public String orderContent; // required
  public int multiple; // required
  public String playType; // required
  public String tradeId; // required
  public String planId; // required
  public String printProvince; // required
  public String ticketNo; // required
  public String printTime; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public List<SportCancelOrderDetail> detailList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_NO((short)1, "orderNo"),
    LOTTERY_ID((short)2, "lotteryId"),
    PARTNER_ID((short)3, "partnerId"),
    USER_ID((short)4, "userId"),
    ISSUE_NO((short)5, "issueNo"),
    ORDER_TYPE((short)6, "orderType"),
    OUT_TICKET_STATUS((short)7, "outTicketStatus"),
    TOTAL_AMOUNT((short)8, "totalAmount"),
    ORDER_CONTENT((short)9, "orderContent"),
    MULTIPLE((short)10, "multiple"),
    PLAY_TYPE((short)11, "playType"),
    TRADE_ID((short)12, "tradeId"),
    PLAN_ID((short)13, "planId"),
    PRINT_PROVINCE((short)14, "printProvince"),
    TICKET_NO((short)15, "ticketNo"),
    PRINT_TIME((short)16, "printTime"),
    CREATE_TIME((short)17, "createTime"),
    LAST_UPDATE_TIME((short)18, "lastUpdateTime"),
    DETAIL_LIST((short)19, "detailList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_NO
          return ORDER_NO;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // PARTNER_ID
          return PARTNER_ID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // ISSUE_NO
          return ISSUE_NO;
        case 6: // ORDER_TYPE
          return ORDER_TYPE;
        case 7: // OUT_TICKET_STATUS
          return OUT_TICKET_STATUS;
        case 8: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 9: // ORDER_CONTENT
          return ORDER_CONTENT;
        case 10: // MULTIPLE
          return MULTIPLE;
        case 11: // PLAY_TYPE
          return PLAY_TYPE;
        case 12: // TRADE_ID
          return TRADE_ID;
        case 13: // PLAN_ID
          return PLAN_ID;
        case 14: // PRINT_PROVINCE
          return PRINT_PROVINCE;
        case 15: // TICKET_NO
          return TICKET_NO;
        case 16: // PRINT_TIME
          return PRINT_TIME;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 19: // DETAIL_LIST
          return DETAIL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERNO_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ORDERTYPE_ISSET_ID = 2;
  private static final int __OUTTICKETSTATUS_ISSET_ID = 3;
  private static final int __TOTALAMOUNT_ISSET_ID = 4;
  private static final int __MULTIPLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUT_TICKET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("outTicketStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("multiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("planId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINT_PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("printProvince", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_NO, new org.apache.thrift.meta_data.FieldMetaData("ticketNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINT_TIME, new org.apache.thrift.meta_data.FieldMetaData("printTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("detailList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SportCancelOrderDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SportCancelOrder.class, metaDataMap);
  }

  public SportCancelOrder() {
  }

  public SportCancelOrder(
    long orderNo,
    String lotteryId,
    String partnerId,
    long userId,
    String issueNo,
    int orderType,
    int outTicketStatus,
    long totalAmount,
    String orderContent,
    int multiple,
    String playType,
    String tradeId,
    String planId,
    String printProvince,
    String ticketNo,
    String printTime,
    String createTime,
    String lastUpdateTime,
    List<SportCancelOrderDetail> detailList)
  {
    this();
    this.orderNo = orderNo;
    setOrderNoIsSet(true);
    this.lotteryId = lotteryId;
    this.partnerId = partnerId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.issueNo = issueNo;
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    this.outTicketStatus = outTicketStatus;
    setOutTicketStatusIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.orderContent = orderContent;
    this.multiple = multiple;
    setMultipleIsSet(true);
    this.playType = playType;
    this.tradeId = tradeId;
    this.planId = planId;
    this.printProvince = printProvince;
    this.ticketNo = ticketNo;
    this.printTime = printTime;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.detailList = detailList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SportCancelOrder(SportCancelOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderNo = other.orderNo;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.userId = other.userId;
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    this.orderType = other.orderType;
    this.outTicketStatus = other.outTicketStatus;
    this.totalAmount = other.totalAmount;
    if (other.isSetOrderContent()) {
      this.orderContent = other.orderContent;
    }
    this.multiple = other.multiple;
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    if (other.isSetTradeId()) {
      this.tradeId = other.tradeId;
    }
    if (other.isSetPlanId()) {
      this.planId = other.planId;
    }
    if (other.isSetPrintProvince()) {
      this.printProvince = other.printProvince;
    }
    if (other.isSetTicketNo()) {
      this.ticketNo = other.ticketNo;
    }
    if (other.isSetPrintTime()) {
      this.printTime = other.printTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetDetailList()) {
      List<SportCancelOrderDetail> __this__detailList = new ArrayList<SportCancelOrderDetail>(other.detailList.size());
      for (SportCancelOrderDetail other_element : other.detailList) {
        __this__detailList.add(new SportCancelOrderDetail(other_element));
      }
      this.detailList = __this__detailList;
    }
  }

  public SportCancelOrder deepCopy() {
    return new SportCancelOrder(this);
  }

  @Override
  public void clear() {
    setOrderNoIsSet(false);
    this.orderNo = 0;
    this.lotteryId = null;
    this.partnerId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.issueNo = null;
    setOrderTypeIsSet(false);
    this.orderType = 0;
    setOutTicketStatusIsSet(false);
    this.outTicketStatus = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    this.orderContent = null;
    setMultipleIsSet(false);
    this.multiple = 0;
    this.playType = null;
    this.tradeId = null;
    this.planId = null;
    this.printProvince = null;
    this.ticketNo = null;
    this.printTime = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.detailList = null;
  }

  public long getOrderNo() {
    return this.orderNo;
  }

  public SportCancelOrder setOrderNo(long orderNo) {
    this.orderNo = orderNo;
    setOrderNoIsSet(true);
    return this;
  }

  public void unsetOrderNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERNO_ISSET_ID);
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERNO_ISSET_ID);
  }

  public void setOrderNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERNO_ISSET_ID, value);
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public SportCancelOrder setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public SportCancelOrder setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public SportCancelOrder setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public SportCancelOrder setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public int getOrderType() {
    return this.orderType;
  }

  public SportCancelOrder setOrderType(int orderType) {
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    return this;
  }

  public void unsetOrderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public int getOutTicketStatus() {
    return this.outTicketStatus;
  }

  public SportCancelOrder setOutTicketStatus(int outTicketStatus) {
    this.outTicketStatus = outTicketStatus;
    setOutTicketStatusIsSet(true);
    return this;
  }

  public void unsetOutTicketStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTTICKETSTATUS_ISSET_ID);
  }

  /** Returns true if field outTicketStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOutTicketStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTTICKETSTATUS_ISSET_ID);
  }

  public void setOutTicketStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTTICKETSTATUS_ISSET_ID, value);
  }

  public long getTotalAmount() {
    return this.totalAmount;
  }

  public SportCancelOrder setTotalAmount(long totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public String getOrderContent() {
    return this.orderContent;
  }

  public SportCancelOrder setOrderContent(String orderContent) {
    this.orderContent = orderContent;
    return this;
  }

  public void unsetOrderContent() {
    this.orderContent = null;
  }

  /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderContent() {
    return this.orderContent != null;
  }

  public void setOrderContentIsSet(boolean value) {
    if (!value) {
      this.orderContent = null;
    }
  }

  public int getMultiple() {
    return this.multiple;
  }

  public SportCancelOrder setMultiple(int multiple) {
    this.multiple = multiple;
    setMultipleIsSet(true);
    return this;
  }

  public void unsetMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  /** Returns true if field multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  public void setMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIPLE_ISSET_ID, value);
  }

  public String getPlayType() {
    return this.playType;
  }

  public SportCancelOrder setPlayType(String playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  public String getTradeId() {
    return this.tradeId;
  }

  public SportCancelOrder setTradeId(String tradeId) {
    this.tradeId = tradeId;
    return this;
  }

  public void unsetTradeId() {
    this.tradeId = null;
  }

  /** Returns true if field tradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeId() {
    return this.tradeId != null;
  }

  public void setTradeIdIsSet(boolean value) {
    if (!value) {
      this.tradeId = null;
    }
  }

  public String getPlanId() {
    return this.planId;
  }

  public SportCancelOrder setPlanId(String planId) {
    this.planId = planId;
    return this;
  }

  public void unsetPlanId() {
    this.planId = null;
  }

  /** Returns true if field planId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanId() {
    return this.planId != null;
  }

  public void setPlanIdIsSet(boolean value) {
    if (!value) {
      this.planId = null;
    }
  }

  public String getPrintProvince() {
    return this.printProvince;
  }

  public SportCancelOrder setPrintProvince(String printProvince) {
    this.printProvince = printProvince;
    return this;
  }

  public void unsetPrintProvince() {
    this.printProvince = null;
  }

  /** Returns true if field printProvince is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintProvince() {
    return this.printProvince != null;
  }

  public void setPrintProvinceIsSet(boolean value) {
    if (!value) {
      this.printProvince = null;
    }
  }

  public String getTicketNo() {
    return this.ticketNo;
  }

  public SportCancelOrder setTicketNo(String ticketNo) {
    this.ticketNo = ticketNo;
    return this;
  }

  public void unsetTicketNo() {
    this.ticketNo = null;
  }

  /** Returns true if field ticketNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketNo() {
    return this.ticketNo != null;
  }

  public void setTicketNoIsSet(boolean value) {
    if (!value) {
      this.ticketNo = null;
    }
  }

  public String getPrintTime() {
    return this.printTime;
  }

  public SportCancelOrder setPrintTime(String printTime) {
    this.printTime = printTime;
    return this;
  }

  public void unsetPrintTime() {
    this.printTime = null;
  }

  /** Returns true if field printTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintTime() {
    return this.printTime != null;
  }

  public void setPrintTimeIsSet(boolean value) {
    if (!value) {
      this.printTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public SportCancelOrder setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public SportCancelOrder setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getDetailListSize() {
    return (this.detailList == null) ? 0 : this.detailList.size();
  }

  public java.util.Iterator<SportCancelOrderDetail> getDetailListIterator() {
    return (this.detailList == null) ? null : this.detailList.iterator();
  }

  public void addToDetailList(SportCancelOrderDetail elem) {
    if (this.detailList == null) {
      this.detailList = new ArrayList<SportCancelOrderDetail>();
    }
    this.detailList.add(elem);
  }

  public List<SportCancelOrderDetail> getDetailList() {
    return this.detailList;
  }

  public SportCancelOrder setDetailList(List<SportCancelOrderDetail> detailList) {
    this.detailList = detailList;
    return this;
  }

  public void unsetDetailList() {
    this.detailList = null;
  }

  /** Returns true if field detailList is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailList() {
    return this.detailList != null;
  }

  public void setDetailListIsSet(boolean value) {
    if (!value) {
      this.detailList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((Long)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((Integer)value);
      }
      break;

    case OUT_TICKET_STATUS:
      if (value == null) {
        unsetOutTicketStatus();
      } else {
        setOutTicketStatus((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Long)value);
      }
      break;

    case ORDER_CONTENT:
      if (value == null) {
        unsetOrderContent();
      } else {
        setOrderContent((String)value);
      }
      break;

    case MULTIPLE:
      if (value == null) {
        unsetMultiple();
      } else {
        setMultiple((Integer)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeId();
      } else {
        setTradeId((String)value);
      }
      break;

    case PLAN_ID:
      if (value == null) {
        unsetPlanId();
      } else {
        setPlanId((String)value);
      }
      break;

    case PRINT_PROVINCE:
      if (value == null) {
        unsetPrintProvince();
      } else {
        setPrintProvince((String)value);
      }
      break;

    case TICKET_NO:
      if (value == null) {
        unsetTicketNo();
      } else {
        setTicketNo((String)value);
      }
      break;

    case PRINT_TIME:
      if (value == null) {
        unsetPrintTime();
      } else {
        setPrintTime((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case DETAIL_LIST:
      if (value == null) {
        unsetDetailList();
      } else {
        setDetailList((List<SportCancelOrderDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_NO:
      return Long.valueOf(getOrderNo());

    case LOTTERY_ID:
      return getLotteryId();

    case PARTNER_ID:
      return getPartnerId();

    case USER_ID:
      return Long.valueOf(getUserId());

    case ISSUE_NO:
      return getIssueNo();

    case ORDER_TYPE:
      return Integer.valueOf(getOrderType());

    case OUT_TICKET_STATUS:
      return Integer.valueOf(getOutTicketStatus());

    case TOTAL_AMOUNT:
      return Long.valueOf(getTotalAmount());

    case ORDER_CONTENT:
      return getOrderContent();

    case MULTIPLE:
      return Integer.valueOf(getMultiple());

    case PLAY_TYPE:
      return getPlayType();

    case TRADE_ID:
      return getTradeId();

    case PLAN_ID:
      return getPlanId();

    case PRINT_PROVINCE:
      return getPrintProvince();

    case TICKET_NO:
      return getTicketNo();

    case PRINT_TIME:
      return getPrintTime();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case DETAIL_LIST:
      return getDetailList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_NO:
      return isSetOrderNo();
    case LOTTERY_ID:
      return isSetLotteryId();
    case PARTNER_ID:
      return isSetPartnerId();
    case USER_ID:
      return isSetUserId();
    case ISSUE_NO:
      return isSetIssueNo();
    case ORDER_TYPE:
      return isSetOrderType();
    case OUT_TICKET_STATUS:
      return isSetOutTicketStatus();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case ORDER_CONTENT:
      return isSetOrderContent();
    case MULTIPLE:
      return isSetMultiple();
    case PLAY_TYPE:
      return isSetPlayType();
    case TRADE_ID:
      return isSetTradeId();
    case PLAN_ID:
      return isSetPlanId();
    case PRINT_PROVINCE:
      return isSetPrintProvince();
    case TICKET_NO:
      return isSetTicketNo();
    case PRINT_TIME:
      return isSetPrintTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case DETAIL_LIST:
      return isSetDetailList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SportCancelOrder)
      return this.equals((SportCancelOrder)that);
    return false;
  }

  public boolean equals(SportCancelOrder that) {
    if (that == null)
      return false;

    boolean this_present_orderNo = true;
    boolean that_present_orderNo = true;
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (this.orderNo != that.orderNo)
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_orderType = true;
    boolean that_present_orderType = true;
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (this.orderType != that.orderType)
        return false;
    }

    boolean this_present_outTicketStatus = true;
    boolean that_present_outTicketStatus = true;
    if (this_present_outTicketStatus || that_present_outTicketStatus) {
      if (!(this_present_outTicketStatus && that_present_outTicketStatus))
        return false;
      if (this.outTicketStatus != that.outTicketStatus)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_orderContent = true && this.isSetOrderContent();
    boolean that_present_orderContent = true && that.isSetOrderContent();
    if (this_present_orderContent || that_present_orderContent) {
      if (!(this_present_orderContent && that_present_orderContent))
        return false;
      if (!this.orderContent.equals(that.orderContent))
        return false;
    }

    boolean this_present_multiple = true;
    boolean that_present_multiple = true;
    if (this_present_multiple || that_present_multiple) {
      if (!(this_present_multiple && that_present_multiple))
        return false;
      if (this.multiple != that.multiple)
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_tradeId = true && this.isSetTradeId();
    boolean that_present_tradeId = true && that.isSetTradeId();
    if (this_present_tradeId || that_present_tradeId) {
      if (!(this_present_tradeId && that_present_tradeId))
        return false;
      if (!this.tradeId.equals(that.tradeId))
        return false;
    }

    boolean this_present_planId = true && this.isSetPlanId();
    boolean that_present_planId = true && that.isSetPlanId();
    if (this_present_planId || that_present_planId) {
      if (!(this_present_planId && that_present_planId))
        return false;
      if (!this.planId.equals(that.planId))
        return false;
    }

    boolean this_present_printProvince = true && this.isSetPrintProvince();
    boolean that_present_printProvince = true && that.isSetPrintProvince();
    if (this_present_printProvince || that_present_printProvince) {
      if (!(this_present_printProvince && that_present_printProvince))
        return false;
      if (!this.printProvince.equals(that.printProvince))
        return false;
    }

    boolean this_present_ticketNo = true && this.isSetTicketNo();
    boolean that_present_ticketNo = true && that.isSetTicketNo();
    if (this_present_ticketNo || that_present_ticketNo) {
      if (!(this_present_ticketNo && that_present_ticketNo))
        return false;
      if (!this.ticketNo.equals(that.ticketNo))
        return false;
    }

    boolean this_present_printTime = true && this.isSetPrintTime();
    boolean that_present_printTime = true && that.isSetPrintTime();
    if (this_present_printTime || that_present_printTime) {
      if (!(this_present_printTime && that_present_printTime))
        return false;
      if (!this.printTime.equals(that.printTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_detailList = true && this.isSetDetailList();
    boolean that_present_detailList = true && that.isSetDetailList();
    if (this_present_detailList || that_present_detailList) {
      if (!(this_present_detailList && that_present_detailList))
        return false;
      if (!this.detailList.equals(that.detailList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SportCancelOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutTicketStatus()).compareTo(other.isSetOutTicketStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutTicketStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outTicketStatus, other.outTicketStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiple()).compareTo(other.isSetMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiple, other.multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(other.isSetTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeId, other.tradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanId()).compareTo(other.isSetPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planId, other.planId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintProvince()).compareTo(other.isSetPrintProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printProvince, other.printProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketNo()).compareTo(other.isSetTicketNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketNo, other.ticketNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintTime()).compareTo(other.isSetPrintTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printTime, other.printTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailList()).compareTo(other.isSetDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailList, other.detailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SportCancelOrder(");
    boolean first = true;

    sb.append("orderNo:");
    sb.append(this.orderNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    sb.append(this.orderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outTicketStatus:");
    sb.append(this.outTicketStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderContent:");
    if (this.orderContent == null) {
      sb.append("null");
    } else {
      sb.append(this.orderContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiple:");
    sb.append(this.multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeId:");
    if (this.tradeId == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planId:");
    if (this.planId == null) {
      sb.append("null");
    } else {
      sb.append(this.planId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printProvince:");
    if (this.printProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.printProvince);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketNo:");
    if (this.ticketNo == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printTime:");
    if (this.printTime == null) {
      sb.append("null");
    } else {
      sb.append(this.printTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailList:");
    if (this.detailList == null) {
      sb.append("null");
    } else {
      sb.append(this.detailList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SportCancelOrderStandardSchemeFactory implements SchemeFactory {
    public SportCancelOrderStandardScheme getScheme() {
      return new SportCancelOrderStandardScheme();
    }
  }

  private static class SportCancelOrderStandardScheme extends StandardScheme<SportCancelOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SportCancelOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderNo = iprot.readI64();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = iprot.readI32();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUT_TICKET_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outTicketStatus = iprot.readI32();
              struct.setOutTicketStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalAmount = iprot.readI64();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderContent = iprot.readString();
              struct.setOrderContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiple = iprot.readI32();
              struct.setMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playType = iprot.readString();
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeId = iprot.readString();
              struct.setTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planId = iprot.readString();
              struct.setPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRINT_PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.printProvince = iprot.readString();
              struct.setPrintProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TICKET_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketNo = iprot.readString();
              struct.setTicketNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRINT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.printTime = iprot.readString();
              struct.setPrintTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DETAIL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.detailList = new ArrayList<SportCancelOrderDetail>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  SportCancelOrderDetail _elem10;
                  _elem10 = new SportCancelOrderDetail();
                  _elem10.read(iprot);
                  struct.detailList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setDetailListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SportCancelOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
      oprot.writeI64(struct.orderNo);
      oprot.writeFieldEnd();
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.orderType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUT_TICKET_STATUS_FIELD_DESC);
      oprot.writeI32(struct.outTicketStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalAmount);
      oprot.writeFieldEnd();
      if (struct.orderContent != null) {
        oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
        oprot.writeString(struct.orderContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MULTIPLE_FIELD_DESC);
      oprot.writeI32(struct.multiple);
      oprot.writeFieldEnd();
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.playType);
        oprot.writeFieldEnd();
      }
      if (struct.tradeId != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeId);
        oprot.writeFieldEnd();
      }
      if (struct.planId != null) {
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeString(struct.planId);
        oprot.writeFieldEnd();
      }
      if (struct.printProvince != null) {
        oprot.writeFieldBegin(PRINT_PROVINCE_FIELD_DESC);
        oprot.writeString(struct.printProvince);
        oprot.writeFieldEnd();
      }
      if (struct.ticketNo != null) {
        oprot.writeFieldBegin(TICKET_NO_FIELD_DESC);
        oprot.writeString(struct.ticketNo);
        oprot.writeFieldEnd();
      }
      if (struct.printTime != null) {
        oprot.writeFieldBegin(PRINT_TIME_FIELD_DESC);
        oprot.writeString(struct.printTime);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.detailList != null) {
        oprot.writeFieldBegin(DETAIL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detailList.size()));
          for (SportCancelOrderDetail _iter11 : struct.detailList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SportCancelOrderTupleSchemeFactory implements SchemeFactory {
    public SportCancelOrderTupleScheme getScheme() {
      return new SportCancelOrderTupleScheme();
    }
  }

  private static class SportCancelOrderTupleScheme extends TupleScheme<SportCancelOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SportCancelOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderNo()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(4);
      }
      if (struct.isSetOrderType()) {
        optionals.set(5);
      }
      if (struct.isSetOutTicketStatus()) {
        optionals.set(6);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(7);
      }
      if (struct.isSetOrderContent()) {
        optionals.set(8);
      }
      if (struct.isSetMultiple()) {
        optionals.set(9);
      }
      if (struct.isSetPlayType()) {
        optionals.set(10);
      }
      if (struct.isSetTradeId()) {
        optionals.set(11);
      }
      if (struct.isSetPlanId()) {
        optionals.set(12);
      }
      if (struct.isSetPrintProvince()) {
        optionals.set(13);
      }
      if (struct.isSetTicketNo()) {
        optionals.set(14);
      }
      if (struct.isSetPrintTime()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(17);
      }
      if (struct.isSetDetailList()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetOrderNo()) {
        oprot.writeI64(struct.orderNo);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType);
      }
      if (struct.isSetOutTicketStatus()) {
        oprot.writeI32(struct.outTicketStatus);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI64(struct.totalAmount);
      }
      if (struct.isSetOrderContent()) {
        oprot.writeString(struct.orderContent);
      }
      if (struct.isSetMultiple()) {
        oprot.writeI32(struct.multiple);
      }
      if (struct.isSetPlayType()) {
        oprot.writeString(struct.playType);
      }
      if (struct.isSetTradeId()) {
        oprot.writeString(struct.tradeId);
      }
      if (struct.isSetPlanId()) {
        oprot.writeString(struct.planId);
      }
      if (struct.isSetPrintProvince()) {
        oprot.writeString(struct.printProvince);
      }
      if (struct.isSetTicketNo()) {
        oprot.writeString(struct.ticketNo);
      }
      if (struct.isSetPrintTime()) {
        oprot.writeString(struct.printTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetDetailList()) {
        {
          oprot.writeI32(struct.detailList.size());
          for (SportCancelOrderDetail _iter12 : struct.detailList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SportCancelOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.orderNo = iprot.readI64();
        struct.setOrderNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderType = iprot.readI32();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outTicketStatus = iprot.readI32();
        struct.setOutTicketStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalAmount = iprot.readI64();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderContent = iprot.readString();
        struct.setOrderContentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.multiple = iprot.readI32();
        struct.setMultipleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.playType = iprot.readString();
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tradeId = iprot.readString();
        struct.setTradeIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planId = iprot.readString();
        struct.setPlanIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.printProvince = iprot.readString();
        struct.setPrintProvinceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ticketNo = iprot.readString();
        struct.setTicketNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.printTime = iprot.readString();
        struct.setPrintTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detailList = new ArrayList<SportCancelOrderDetail>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            SportCancelOrderDetail _elem15;
            _elem15 = new SportCancelOrderDetail();
            _elem15.read(iprot);
            struct.detailList.add(_elem15);
          }
        }
        struct.setDetailListIsSet(true);
      }
    }
  }

}

