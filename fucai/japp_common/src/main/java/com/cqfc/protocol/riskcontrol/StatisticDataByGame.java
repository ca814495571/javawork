/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.riskcontrol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatisticDataByGame implements org.apache.thrift.TBase<StatisticDataByGame, StatisticDataByGame._Fields>, java.io.Serializable, Cloneable, Comparable<StatisticDataByGame> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatisticDataByGame");

  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OUT_TICKET_SUCCESS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("outTicketSuccessNum", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUCCESS_TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("successTicketNum", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SUCCESS_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("successTotalMoney", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CANCEL_AND_SUCCESS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelAndSuccessNum", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_WINNING_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalWinningMoney", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FUCAI_TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fucaiTicketNum", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FUCAI_TOTAL_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("fucaiTotalBuy", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField FUCAI_TOTAL_WINNING_FIELD_DESC = new org.apache.thrift.protocol.TField("fucaiTotalWinning", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatisticDataByGameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatisticDataByGameTupleSchemeFactory());
  }

  public String gameId; // required
  public String issue; // required
  public long outTicketSuccessNum; // required
  public long successTicketNum; // required
  public long successTotalMoney; // required
  public long cancelAndSuccessNum; // required
  public long totalWinningMoney; // required
  public long fucaiTicketNum; // required
  public long fucaiTotalBuy; // required
  public long fucaiTotalWinning; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_ID((short)1, "gameId"),
    ISSUE((short)2, "issue"),
    OUT_TICKET_SUCCESS_NUM((short)3, "outTicketSuccessNum"),
    SUCCESS_TICKET_NUM((short)4, "successTicketNum"),
    SUCCESS_TOTAL_MONEY((short)5, "successTotalMoney"),
    CANCEL_AND_SUCCESS_NUM((short)6, "cancelAndSuccessNum"),
    TOTAL_WINNING_MONEY((short)7, "totalWinningMoney"),
    FUCAI_TICKET_NUM((short)8, "fucaiTicketNum"),
    FUCAI_TOTAL_BUY((short)9, "fucaiTotalBuy"),
    FUCAI_TOTAL_WINNING((short)10, "fucaiTotalWinning");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_ID
          return GAME_ID;
        case 2: // ISSUE
          return ISSUE;
        case 3: // OUT_TICKET_SUCCESS_NUM
          return OUT_TICKET_SUCCESS_NUM;
        case 4: // SUCCESS_TICKET_NUM
          return SUCCESS_TICKET_NUM;
        case 5: // SUCCESS_TOTAL_MONEY
          return SUCCESS_TOTAL_MONEY;
        case 6: // CANCEL_AND_SUCCESS_NUM
          return CANCEL_AND_SUCCESS_NUM;
        case 7: // TOTAL_WINNING_MONEY
          return TOTAL_WINNING_MONEY;
        case 8: // FUCAI_TICKET_NUM
          return FUCAI_TICKET_NUM;
        case 9: // FUCAI_TOTAL_BUY
          return FUCAI_TOTAL_BUY;
        case 10: // FUCAI_TOTAL_WINNING
          return FUCAI_TOTAL_WINNING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OUTTICKETSUCCESSNUM_ISSET_ID = 0;
  private static final int __SUCCESSTICKETNUM_ISSET_ID = 1;
  private static final int __SUCCESSTOTALMONEY_ISSET_ID = 2;
  private static final int __CANCELANDSUCCESSNUM_ISSET_ID = 3;
  private static final int __TOTALWINNINGMONEY_ISSET_ID = 4;
  private static final int __FUCAITICKETNUM_ISSET_ID = 5;
  private static final int __FUCAITOTALBUY_ISSET_ID = 6;
  private static final int __FUCAITOTALWINNING_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_TICKET_SUCCESS_NUM, new org.apache.thrift.meta_data.FieldMetaData("outTicketSuccessNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCESS_TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("successTicketNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCESS_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("successTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CANCEL_AND_SUCCESS_NUM, new org.apache.thrift.meta_data.FieldMetaData("cancelAndSuccessNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_WINNING_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalWinningMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUCAI_TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("fucaiTicketNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUCAI_TOTAL_BUY, new org.apache.thrift.meta_data.FieldMetaData("fucaiTotalBuy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUCAI_TOTAL_WINNING, new org.apache.thrift.meta_data.FieldMetaData("fucaiTotalWinning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatisticDataByGame.class, metaDataMap);
  }

  public StatisticDataByGame() {
  }

  public StatisticDataByGame(
    String gameId,
    String issue,
    long outTicketSuccessNum,
    long successTicketNum,
    long successTotalMoney,
    long cancelAndSuccessNum,
    long totalWinningMoney,
    long fucaiTicketNum,
    long fucaiTotalBuy,
    long fucaiTotalWinning)
  {
    this();
    this.gameId = gameId;
    this.issue = issue;
    this.outTicketSuccessNum = outTicketSuccessNum;
    setOutTicketSuccessNumIsSet(true);
    this.successTicketNum = successTicketNum;
    setSuccessTicketNumIsSet(true);
    this.successTotalMoney = successTotalMoney;
    setSuccessTotalMoneyIsSet(true);
    this.cancelAndSuccessNum = cancelAndSuccessNum;
    setCancelAndSuccessNumIsSet(true);
    this.totalWinningMoney = totalWinningMoney;
    setTotalWinningMoneyIsSet(true);
    this.fucaiTicketNum = fucaiTicketNum;
    setFucaiTicketNumIsSet(true);
    this.fucaiTotalBuy = fucaiTotalBuy;
    setFucaiTotalBuyIsSet(true);
    this.fucaiTotalWinning = fucaiTotalWinning;
    setFucaiTotalWinningIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatisticDataByGame(StatisticDataByGame other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGameId()) {
      this.gameId = other.gameId;
    }
    if (other.isSetIssue()) {
      this.issue = other.issue;
    }
    this.outTicketSuccessNum = other.outTicketSuccessNum;
    this.successTicketNum = other.successTicketNum;
    this.successTotalMoney = other.successTotalMoney;
    this.cancelAndSuccessNum = other.cancelAndSuccessNum;
    this.totalWinningMoney = other.totalWinningMoney;
    this.fucaiTicketNum = other.fucaiTicketNum;
    this.fucaiTotalBuy = other.fucaiTotalBuy;
    this.fucaiTotalWinning = other.fucaiTotalWinning;
  }

  public StatisticDataByGame deepCopy() {
    return new StatisticDataByGame(this);
  }

  @Override
  public void clear() {
    this.gameId = null;
    this.issue = null;
    setOutTicketSuccessNumIsSet(false);
    this.outTicketSuccessNum = 0;
    setSuccessTicketNumIsSet(false);
    this.successTicketNum = 0;
    setSuccessTotalMoneyIsSet(false);
    this.successTotalMoney = 0;
    setCancelAndSuccessNumIsSet(false);
    this.cancelAndSuccessNum = 0;
    setTotalWinningMoneyIsSet(false);
    this.totalWinningMoney = 0;
    setFucaiTicketNumIsSet(false);
    this.fucaiTicketNum = 0;
    setFucaiTotalBuyIsSet(false);
    this.fucaiTotalBuy = 0;
    setFucaiTotalWinningIsSet(false);
    this.fucaiTotalWinning = 0;
  }

  public String getGameId() {
    return this.gameId;
  }

  public StatisticDataByGame setGameId(String gameId) {
    this.gameId = gameId;
    return this;
  }

  public void unsetGameId() {
    this.gameId = null;
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return this.gameId != null;
  }

  public void setGameIdIsSet(boolean value) {
    if (!value) {
      this.gameId = null;
    }
  }

  public String getIssue() {
    return this.issue;
  }

  public StatisticDataByGame setIssue(String issue) {
    this.issue = issue;
    return this;
  }

  public void unsetIssue() {
    this.issue = null;
  }

  /** Returns true if field issue is set (has been assigned a value) and false otherwise */
  public boolean isSetIssue() {
    return this.issue != null;
  }

  public void setIssueIsSet(boolean value) {
    if (!value) {
      this.issue = null;
    }
  }

  public long getOutTicketSuccessNum() {
    return this.outTicketSuccessNum;
  }

  public StatisticDataByGame setOutTicketSuccessNum(long outTicketSuccessNum) {
    this.outTicketSuccessNum = outTicketSuccessNum;
    setOutTicketSuccessNumIsSet(true);
    return this;
  }

  public void unsetOutTicketSuccessNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTTICKETSUCCESSNUM_ISSET_ID);
  }

  /** Returns true if field outTicketSuccessNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOutTicketSuccessNum() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTTICKETSUCCESSNUM_ISSET_ID);
  }

  public void setOutTicketSuccessNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTTICKETSUCCESSNUM_ISSET_ID, value);
  }

  public long getSuccessTicketNum() {
    return this.successTicketNum;
  }

  public StatisticDataByGame setSuccessTicketNum(long successTicketNum) {
    this.successTicketNum = successTicketNum;
    setSuccessTicketNumIsSet(true);
    return this;
  }

  public void unsetSuccessTicketNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSTICKETNUM_ISSET_ID);
  }

  /** Returns true if field successTicketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessTicketNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSTICKETNUM_ISSET_ID);
  }

  public void setSuccessTicketNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSTICKETNUM_ISSET_ID, value);
  }

  public long getSuccessTotalMoney() {
    return this.successTotalMoney;
  }

  public StatisticDataByGame setSuccessTotalMoney(long successTotalMoney) {
    this.successTotalMoney = successTotalMoney;
    setSuccessTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSuccessTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field successTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSTOTALMONEY_ISSET_ID);
  }

  public void setSuccessTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSTOTALMONEY_ISSET_ID, value);
  }

  public long getCancelAndSuccessNum() {
    return this.cancelAndSuccessNum;
  }

  public StatisticDataByGame setCancelAndSuccessNum(long cancelAndSuccessNum) {
    this.cancelAndSuccessNum = cancelAndSuccessNum;
    setCancelAndSuccessNumIsSet(true);
    return this;
  }

  public void unsetCancelAndSuccessNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELANDSUCCESSNUM_ISSET_ID);
  }

  /** Returns true if field cancelAndSuccessNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelAndSuccessNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELANDSUCCESSNUM_ISSET_ID);
  }

  public void setCancelAndSuccessNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELANDSUCCESSNUM_ISSET_ID, value);
  }

  public long getTotalWinningMoney() {
    return this.totalWinningMoney;
  }

  public StatisticDataByGame setTotalWinningMoney(long totalWinningMoney) {
    this.totalWinningMoney = totalWinningMoney;
    setTotalWinningMoneyIsSet(true);
    return this;
  }

  public void unsetTotalWinningMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALWINNINGMONEY_ISSET_ID);
  }

  /** Returns true if field totalWinningMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalWinningMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALWINNINGMONEY_ISSET_ID);
  }

  public void setTotalWinningMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALWINNINGMONEY_ISSET_ID, value);
  }

  public long getFucaiTicketNum() {
    return this.fucaiTicketNum;
  }

  public StatisticDataByGame setFucaiTicketNum(long fucaiTicketNum) {
    this.fucaiTicketNum = fucaiTicketNum;
    setFucaiTicketNumIsSet(true);
    return this;
  }

  public void unsetFucaiTicketNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUCAITICKETNUM_ISSET_ID);
  }

  /** Returns true if field fucaiTicketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFucaiTicketNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FUCAITICKETNUM_ISSET_ID);
  }

  public void setFucaiTicketNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUCAITICKETNUM_ISSET_ID, value);
  }

  public long getFucaiTotalBuy() {
    return this.fucaiTotalBuy;
  }

  public StatisticDataByGame setFucaiTotalBuy(long fucaiTotalBuy) {
    this.fucaiTotalBuy = fucaiTotalBuy;
    setFucaiTotalBuyIsSet(true);
    return this;
  }

  public void unsetFucaiTotalBuy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUCAITOTALBUY_ISSET_ID);
  }

  /** Returns true if field fucaiTotalBuy is set (has been assigned a value) and false otherwise */
  public boolean isSetFucaiTotalBuy() {
    return EncodingUtils.testBit(__isset_bitfield, __FUCAITOTALBUY_ISSET_ID);
  }

  public void setFucaiTotalBuyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUCAITOTALBUY_ISSET_ID, value);
  }

  public long getFucaiTotalWinning() {
    return this.fucaiTotalWinning;
  }

  public StatisticDataByGame setFucaiTotalWinning(long fucaiTotalWinning) {
    this.fucaiTotalWinning = fucaiTotalWinning;
    setFucaiTotalWinningIsSet(true);
    return this;
  }

  public void unsetFucaiTotalWinning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUCAITOTALWINNING_ISSET_ID);
  }

  /** Returns true if field fucaiTotalWinning is set (has been assigned a value) and false otherwise */
  public boolean isSetFucaiTotalWinning() {
    return EncodingUtils.testBit(__isset_bitfield, __FUCAITOTALWINNING_ISSET_ID);
  }

  public void setFucaiTotalWinningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUCAITOTALWINNING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((String)value);
      }
      break;

    case ISSUE:
      if (value == null) {
        unsetIssue();
      } else {
        setIssue((String)value);
      }
      break;

    case OUT_TICKET_SUCCESS_NUM:
      if (value == null) {
        unsetOutTicketSuccessNum();
      } else {
        setOutTicketSuccessNum((Long)value);
      }
      break;

    case SUCCESS_TICKET_NUM:
      if (value == null) {
        unsetSuccessTicketNum();
      } else {
        setSuccessTicketNum((Long)value);
      }
      break;

    case SUCCESS_TOTAL_MONEY:
      if (value == null) {
        unsetSuccessTotalMoney();
      } else {
        setSuccessTotalMoney((Long)value);
      }
      break;

    case CANCEL_AND_SUCCESS_NUM:
      if (value == null) {
        unsetCancelAndSuccessNum();
      } else {
        setCancelAndSuccessNum((Long)value);
      }
      break;

    case TOTAL_WINNING_MONEY:
      if (value == null) {
        unsetTotalWinningMoney();
      } else {
        setTotalWinningMoney((Long)value);
      }
      break;

    case FUCAI_TICKET_NUM:
      if (value == null) {
        unsetFucaiTicketNum();
      } else {
        setFucaiTicketNum((Long)value);
      }
      break;

    case FUCAI_TOTAL_BUY:
      if (value == null) {
        unsetFucaiTotalBuy();
      } else {
        setFucaiTotalBuy((Long)value);
      }
      break;

    case FUCAI_TOTAL_WINNING:
      if (value == null) {
        unsetFucaiTotalWinning();
      } else {
        setFucaiTotalWinning((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_ID:
      return getGameId();

    case ISSUE:
      return getIssue();

    case OUT_TICKET_SUCCESS_NUM:
      return Long.valueOf(getOutTicketSuccessNum());

    case SUCCESS_TICKET_NUM:
      return Long.valueOf(getSuccessTicketNum());

    case SUCCESS_TOTAL_MONEY:
      return Long.valueOf(getSuccessTotalMoney());

    case CANCEL_AND_SUCCESS_NUM:
      return Long.valueOf(getCancelAndSuccessNum());

    case TOTAL_WINNING_MONEY:
      return Long.valueOf(getTotalWinningMoney());

    case FUCAI_TICKET_NUM:
      return Long.valueOf(getFucaiTicketNum());

    case FUCAI_TOTAL_BUY:
      return Long.valueOf(getFucaiTotalBuy());

    case FUCAI_TOTAL_WINNING:
      return Long.valueOf(getFucaiTotalWinning());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_ID:
      return isSetGameId();
    case ISSUE:
      return isSetIssue();
    case OUT_TICKET_SUCCESS_NUM:
      return isSetOutTicketSuccessNum();
    case SUCCESS_TICKET_NUM:
      return isSetSuccessTicketNum();
    case SUCCESS_TOTAL_MONEY:
      return isSetSuccessTotalMoney();
    case CANCEL_AND_SUCCESS_NUM:
      return isSetCancelAndSuccessNum();
    case TOTAL_WINNING_MONEY:
      return isSetTotalWinningMoney();
    case FUCAI_TICKET_NUM:
      return isSetFucaiTicketNum();
    case FUCAI_TOTAL_BUY:
      return isSetFucaiTotalBuy();
    case FUCAI_TOTAL_WINNING:
      return isSetFucaiTotalWinning();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatisticDataByGame)
      return this.equals((StatisticDataByGame)that);
    return false;
  }

  public boolean equals(StatisticDataByGame that) {
    if (that == null)
      return false;

    boolean this_present_gameId = true && this.isSetGameId();
    boolean that_present_gameId = true && that.isSetGameId();
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (!this.gameId.equals(that.gameId))
        return false;
    }

    boolean this_present_issue = true && this.isSetIssue();
    boolean that_present_issue = true && that.isSetIssue();
    if (this_present_issue || that_present_issue) {
      if (!(this_present_issue && that_present_issue))
        return false;
      if (!this.issue.equals(that.issue))
        return false;
    }

    boolean this_present_outTicketSuccessNum = true;
    boolean that_present_outTicketSuccessNum = true;
    if (this_present_outTicketSuccessNum || that_present_outTicketSuccessNum) {
      if (!(this_present_outTicketSuccessNum && that_present_outTicketSuccessNum))
        return false;
      if (this.outTicketSuccessNum != that.outTicketSuccessNum)
        return false;
    }

    boolean this_present_successTicketNum = true;
    boolean that_present_successTicketNum = true;
    if (this_present_successTicketNum || that_present_successTicketNum) {
      if (!(this_present_successTicketNum && that_present_successTicketNum))
        return false;
      if (this.successTicketNum != that.successTicketNum)
        return false;
    }

    boolean this_present_successTotalMoney = true;
    boolean that_present_successTotalMoney = true;
    if (this_present_successTotalMoney || that_present_successTotalMoney) {
      if (!(this_present_successTotalMoney && that_present_successTotalMoney))
        return false;
      if (this.successTotalMoney != that.successTotalMoney)
        return false;
    }

    boolean this_present_cancelAndSuccessNum = true;
    boolean that_present_cancelAndSuccessNum = true;
    if (this_present_cancelAndSuccessNum || that_present_cancelAndSuccessNum) {
      if (!(this_present_cancelAndSuccessNum && that_present_cancelAndSuccessNum))
        return false;
      if (this.cancelAndSuccessNum != that.cancelAndSuccessNum)
        return false;
    }

    boolean this_present_totalWinningMoney = true;
    boolean that_present_totalWinningMoney = true;
    if (this_present_totalWinningMoney || that_present_totalWinningMoney) {
      if (!(this_present_totalWinningMoney && that_present_totalWinningMoney))
        return false;
      if (this.totalWinningMoney != that.totalWinningMoney)
        return false;
    }

    boolean this_present_fucaiTicketNum = true;
    boolean that_present_fucaiTicketNum = true;
    if (this_present_fucaiTicketNum || that_present_fucaiTicketNum) {
      if (!(this_present_fucaiTicketNum && that_present_fucaiTicketNum))
        return false;
      if (this.fucaiTicketNum != that.fucaiTicketNum)
        return false;
    }

    boolean this_present_fucaiTotalBuy = true;
    boolean that_present_fucaiTotalBuy = true;
    if (this_present_fucaiTotalBuy || that_present_fucaiTotalBuy) {
      if (!(this_present_fucaiTotalBuy && that_present_fucaiTotalBuy))
        return false;
      if (this.fucaiTotalBuy != that.fucaiTotalBuy)
        return false;
    }

    boolean this_present_fucaiTotalWinning = true;
    boolean that_present_fucaiTotalWinning = true;
    if (this_present_fucaiTotalWinning || that_present_fucaiTotalWinning) {
      if (!(this_present_fucaiTotalWinning && that_present_fucaiTotalWinning))
        return false;
      if (this.fucaiTotalWinning != that.fucaiTotalWinning)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatisticDataByGame other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssue()).compareTo(other.isSetIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issue, other.issue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutTicketSuccessNum()).compareTo(other.isSetOutTicketSuccessNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutTicketSuccessNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outTicketSuccessNum, other.outTicketSuccessNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTicketNum()).compareTo(other.isSetSuccessTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successTicketNum, other.successTicketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTotalMoney()).compareTo(other.isSetSuccessTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successTotalMoney, other.successTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelAndSuccessNum()).compareTo(other.isSetCancelAndSuccessNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelAndSuccessNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelAndSuccessNum, other.cancelAndSuccessNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalWinningMoney()).compareTo(other.isSetTotalWinningMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalWinningMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalWinningMoney, other.totalWinningMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFucaiTicketNum()).compareTo(other.isSetFucaiTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFucaiTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fucaiTicketNum, other.fucaiTicketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFucaiTotalBuy()).compareTo(other.isSetFucaiTotalBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFucaiTotalBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fucaiTotalBuy, other.fucaiTotalBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFucaiTotalWinning()).compareTo(other.isSetFucaiTotalWinning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFucaiTotalWinning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fucaiTotalWinning, other.fucaiTotalWinning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatisticDataByGame(");
    boolean first = true;

    sb.append("gameId:");
    if (this.gameId == null) {
      sb.append("null");
    } else {
      sb.append(this.gameId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issue:");
    if (this.issue == null) {
      sb.append("null");
    } else {
      sb.append(this.issue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outTicketSuccessNum:");
    sb.append(this.outTicketSuccessNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successTicketNum:");
    sb.append(this.successTicketNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successTotalMoney:");
    sb.append(this.successTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelAndSuccessNum:");
    sb.append(this.cancelAndSuccessNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalWinningMoney:");
    sb.append(this.totalWinningMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fucaiTicketNum:");
    sb.append(this.fucaiTicketNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fucaiTotalBuy:");
    sb.append(this.fucaiTotalBuy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fucaiTotalWinning:");
    sb.append(this.fucaiTotalWinning);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatisticDataByGameStandardSchemeFactory implements SchemeFactory {
    public StatisticDataByGameStandardScheme getScheme() {
      return new StatisticDataByGameStandardScheme();
    }
  }

  private static class StatisticDataByGameStandardScheme extends StandardScheme<StatisticDataByGame> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatisticDataByGame struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameId = iprot.readString();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issue = iprot.readString();
              struct.setIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUT_TICKET_SUCCESS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outTicketSuccessNum = iprot.readI64();
              struct.setOutTicketSuccessNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUCCESS_TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successTicketNum = iprot.readI64();
              struct.setSuccessTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUCCESS_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successTotalMoney = iprot.readI64();
              struct.setSuccessTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CANCEL_AND_SUCCESS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cancelAndSuccessNum = iprot.readI64();
              struct.setCancelAndSuccessNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_WINNING_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalWinningMoney = iprot.readI64();
              struct.setTotalWinningMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FUCAI_TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fucaiTicketNum = iprot.readI64();
              struct.setFucaiTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FUCAI_TOTAL_BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fucaiTotalBuy = iprot.readI64();
              struct.setFucaiTotalBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FUCAI_TOTAL_WINNING
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fucaiTotalWinning = iprot.readI64();
              struct.setFucaiTotalWinningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatisticDataByGame struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gameId != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameId);
        oprot.writeFieldEnd();
      }
      if (struct.issue != null) {
        oprot.writeFieldBegin(ISSUE_FIELD_DESC);
        oprot.writeString(struct.issue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OUT_TICKET_SUCCESS_NUM_FIELD_DESC);
      oprot.writeI64(struct.outTicketSuccessNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_TICKET_NUM_FIELD_DESC);
      oprot.writeI64(struct.successTicketNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.successTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANCEL_AND_SUCCESS_NUM_FIELD_DESC);
      oprot.writeI64(struct.cancelAndSuccessNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_WINNING_MONEY_FIELD_DESC);
      oprot.writeI64(struct.totalWinningMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUCAI_TICKET_NUM_FIELD_DESC);
      oprot.writeI64(struct.fucaiTicketNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUCAI_TOTAL_BUY_FIELD_DESC);
      oprot.writeI64(struct.fucaiTotalBuy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUCAI_TOTAL_WINNING_FIELD_DESC);
      oprot.writeI64(struct.fucaiTotalWinning);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatisticDataByGameTupleSchemeFactory implements SchemeFactory {
    public StatisticDataByGameTupleScheme getScheme() {
      return new StatisticDataByGameTupleScheme();
    }
  }

  private static class StatisticDataByGameTupleScheme extends TupleScheme<StatisticDataByGame> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatisticDataByGame struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameId()) {
        optionals.set(0);
      }
      if (struct.isSetIssue()) {
        optionals.set(1);
      }
      if (struct.isSetOutTicketSuccessNum()) {
        optionals.set(2);
      }
      if (struct.isSetSuccessTicketNum()) {
        optionals.set(3);
      }
      if (struct.isSetSuccessTotalMoney()) {
        optionals.set(4);
      }
      if (struct.isSetCancelAndSuccessNum()) {
        optionals.set(5);
      }
      if (struct.isSetTotalWinningMoney()) {
        optionals.set(6);
      }
      if (struct.isSetFucaiTicketNum()) {
        optionals.set(7);
      }
      if (struct.isSetFucaiTotalBuy()) {
        optionals.set(8);
      }
      if (struct.isSetFucaiTotalWinning()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetGameId()) {
        oprot.writeString(struct.gameId);
      }
      if (struct.isSetIssue()) {
        oprot.writeString(struct.issue);
      }
      if (struct.isSetOutTicketSuccessNum()) {
        oprot.writeI64(struct.outTicketSuccessNum);
      }
      if (struct.isSetSuccessTicketNum()) {
        oprot.writeI64(struct.successTicketNum);
      }
      if (struct.isSetSuccessTotalMoney()) {
        oprot.writeI64(struct.successTotalMoney);
      }
      if (struct.isSetCancelAndSuccessNum()) {
        oprot.writeI64(struct.cancelAndSuccessNum);
      }
      if (struct.isSetTotalWinningMoney()) {
        oprot.writeI64(struct.totalWinningMoney);
      }
      if (struct.isSetFucaiTicketNum()) {
        oprot.writeI64(struct.fucaiTicketNum);
      }
      if (struct.isSetFucaiTotalBuy()) {
        oprot.writeI64(struct.fucaiTotalBuy);
      }
      if (struct.isSetFucaiTotalWinning()) {
        oprot.writeI64(struct.fucaiTotalWinning);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatisticDataByGame struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.gameId = iprot.readString();
        struct.setGameIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.issue = iprot.readString();
        struct.setIssueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outTicketSuccessNum = iprot.readI64();
        struct.setOutTicketSuccessNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.successTicketNum = iprot.readI64();
        struct.setSuccessTicketNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.successTotalMoney = iprot.readI64();
        struct.setSuccessTotalMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cancelAndSuccessNum = iprot.readI64();
        struct.setCancelAndSuccessNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalWinningMoney = iprot.readI64();
        struct.setTotalWinningMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fucaiTicketNum = iprot.readI64();
        struct.setFucaiTicketNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fucaiTotalBuy = iprot.readI64();
        struct.setFucaiTotalBuyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fucaiTotalWinning = iprot.readI64();
        struct.setFucaiTotalWinningIsSet(true);
      }
    }
  }

}

