/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.appendtask;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppendTaskDetail implements org.apache.thrift.TBase<AppendTaskDetail, AppendTaskDetail._Fields>, java.io.Serializable, Cloneable, Comparable<AppendTaskDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppendTaskDetail");

  private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiple", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NOTE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("noteNumber", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LOTTERY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryNumber", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AFTER_TAX_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("afterTaxMoney", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField APPEND_DETAIL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("appendDetailStatus", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_ORDER_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("createOrderTimes", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BALL_FIELD_DESC = new org.apache.thrift.protocol.TField("ball", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppendTaskDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppendTaskDetailTupleSchemeFactory());
  }

  public long detailId; // required
  public String appendTaskId; // required
  public String partnerId; // required
  public String issueNo; // required
  public String lotteryId; // required
  public long userId; // required
  public String playType; // required
  public long totalMoney; // required
  public int multiple; // required
  public int noteNumber; // required
  public String lotteryNumber; // required
  public long afterTaxMoney; // required
  public int appendDetailStatus; // required
  public int createOrderTimes; // required
  public String orderNo; // required
  public String ball; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DETAIL_ID((short)1, "detailId"),
    APPEND_TASK_ID((short)2, "appendTaskId"),
    PARTNER_ID((short)3, "partnerId"),
    ISSUE_NO((short)4, "issueNo"),
    LOTTERY_ID((short)5, "lotteryId"),
    USER_ID((short)6, "userId"),
    PLAY_TYPE((short)7, "playType"),
    TOTAL_MONEY((short)8, "totalMoney"),
    MULTIPLE((short)9, "multiple"),
    NOTE_NUMBER((short)10, "noteNumber"),
    LOTTERY_NUMBER((short)11, "lotteryNumber"),
    AFTER_TAX_MONEY((short)12, "afterTaxMoney"),
    APPEND_DETAIL_STATUS((short)13, "appendDetailStatus"),
    CREATE_ORDER_TIMES((short)14, "createOrderTimes"),
    ORDER_NO((short)15, "orderNo"),
    BALL((short)16, "ball"),
    CREATE_TIME((short)17, "createTime"),
    LAST_UPDATE_TIME((short)18, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DETAIL_ID
          return DETAIL_ID;
        case 2: // APPEND_TASK_ID
          return APPEND_TASK_ID;
        case 3: // PARTNER_ID
          return PARTNER_ID;
        case 4: // ISSUE_NO
          return ISSUE_NO;
        case 5: // LOTTERY_ID
          return LOTTERY_ID;
        case 6: // USER_ID
          return USER_ID;
        case 7: // PLAY_TYPE
          return PLAY_TYPE;
        case 8: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 9: // MULTIPLE
          return MULTIPLE;
        case 10: // NOTE_NUMBER
          return NOTE_NUMBER;
        case 11: // LOTTERY_NUMBER
          return LOTTERY_NUMBER;
        case 12: // AFTER_TAX_MONEY
          return AFTER_TAX_MONEY;
        case 13: // APPEND_DETAIL_STATUS
          return APPEND_DETAIL_STATUS;
        case 14: // CREATE_ORDER_TIMES
          return CREATE_ORDER_TIMES;
        case 15: // ORDER_NO
          return ORDER_NO;
        case 16: // BALL
          return BALL;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DETAILID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __TOTALMONEY_ISSET_ID = 2;
  private static final int __MULTIPLE_ISSET_ID = 3;
  private static final int __NOTENUMBER_ISSET_ID = 4;
  private static final int __AFTERTAXMONEY_ISSET_ID = 5;
  private static final int __APPENDDETAILSTATUS_ISSET_ID = 6;
  private static final int __CREATEORDERTIMES_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("multiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("noteNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOTTERY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lotteryNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTER_TAX_MONEY, new org.apache.thrift.meta_data.FieldMetaData("afterTaxMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPEND_DETAIL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("appendDetailStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_ORDER_TIMES, new org.apache.thrift.meta_data.FieldMetaData("createOrderTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALL, new org.apache.thrift.meta_data.FieldMetaData("ball", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppendTaskDetail.class, metaDataMap);
  }

  public AppendTaskDetail() {
  }

  public AppendTaskDetail(
    long detailId,
    String appendTaskId,
    String partnerId,
    String issueNo,
    String lotteryId,
    long userId,
    String playType,
    long totalMoney,
    int multiple,
    int noteNumber,
    String lotteryNumber,
    long afterTaxMoney,
    int appendDetailStatus,
    int createOrderTimes,
    String orderNo,
    String ball,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.detailId = detailId;
    setDetailIdIsSet(true);
    this.appendTaskId = appendTaskId;
    this.partnerId = partnerId;
    this.issueNo = issueNo;
    this.lotteryId = lotteryId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.playType = playType;
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.multiple = multiple;
    setMultipleIsSet(true);
    this.noteNumber = noteNumber;
    setNoteNumberIsSet(true);
    this.lotteryNumber = lotteryNumber;
    this.afterTaxMoney = afterTaxMoney;
    setAfterTaxMoneyIsSet(true);
    this.appendDetailStatus = appendDetailStatus;
    setAppendDetailStatusIsSet(true);
    this.createOrderTimes = createOrderTimes;
    setCreateOrderTimesIsSet(true);
    this.orderNo = orderNo;
    this.ball = ball;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppendTaskDetail(AppendTaskDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.detailId = other.detailId;
    if (other.isSetAppendTaskId()) {
      this.appendTaskId = other.appendTaskId;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    this.userId = other.userId;
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    this.totalMoney = other.totalMoney;
    this.multiple = other.multiple;
    this.noteNumber = other.noteNumber;
    if (other.isSetLotteryNumber()) {
      this.lotteryNumber = other.lotteryNumber;
    }
    this.afterTaxMoney = other.afterTaxMoney;
    this.appendDetailStatus = other.appendDetailStatus;
    this.createOrderTimes = other.createOrderTimes;
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    if (other.isSetBall()) {
      this.ball = other.ball;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public AppendTaskDetail deepCopy() {
    return new AppendTaskDetail(this);
  }

  @Override
  public void clear() {
    setDetailIdIsSet(false);
    this.detailId = 0;
    this.appendTaskId = null;
    this.partnerId = null;
    this.issueNo = null;
    this.lotteryId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.playType = null;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0;
    setMultipleIsSet(false);
    this.multiple = 0;
    setNoteNumberIsSet(false);
    this.noteNumber = 0;
    this.lotteryNumber = null;
    setAfterTaxMoneyIsSet(false);
    this.afterTaxMoney = 0;
    setAppendDetailStatusIsSet(false);
    this.appendDetailStatus = 0;
    setCreateOrderTimesIsSet(false);
    this.createOrderTimes = 0;
    this.orderNo = null;
    this.ball = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public long getDetailId() {
    return this.detailId;
  }

  public AppendTaskDetail setDetailId(long detailId) {
    this.detailId = detailId;
    setDetailIdIsSet(true);
    return this;
  }

  public void unsetDetailId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
  }

  /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailId() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
  }

  public void setDetailIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
  }

  public String getAppendTaskId() {
    return this.appendTaskId;
  }

  public AppendTaskDetail setAppendTaskId(String appendTaskId) {
    this.appendTaskId = appendTaskId;
    return this;
  }

  public void unsetAppendTaskId() {
    this.appendTaskId = null;
  }

  /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendTaskId() {
    return this.appendTaskId != null;
  }

  public void setAppendTaskIdIsSet(boolean value) {
    if (!value) {
      this.appendTaskId = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public AppendTaskDetail setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public AppendTaskDetail setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public AppendTaskDetail setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public AppendTaskDetail setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getPlayType() {
    return this.playType;
  }

  public AppendTaskDetail setPlayType(String playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  public long getTotalMoney() {
    return this.totalMoney;
  }

  public AppendTaskDetail setTotalMoney(long totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public int getMultiple() {
    return this.multiple;
  }

  public AppendTaskDetail setMultiple(int multiple) {
    this.multiple = multiple;
    setMultipleIsSet(true);
    return this;
  }

  public void unsetMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  /** Returns true if field multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  public void setMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIPLE_ISSET_ID, value);
  }

  public int getNoteNumber() {
    return this.noteNumber;
  }

  public AppendTaskDetail setNoteNumber(int noteNumber) {
    this.noteNumber = noteNumber;
    setNoteNumberIsSet(true);
    return this;
  }

  public void unsetNoteNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTENUMBER_ISSET_ID);
  }

  /** Returns true if field noteNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTENUMBER_ISSET_ID);
  }

  public void setNoteNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTENUMBER_ISSET_ID, value);
  }

  public String getLotteryNumber() {
    return this.lotteryNumber;
  }

  public AppendTaskDetail setLotteryNumber(String lotteryNumber) {
    this.lotteryNumber = lotteryNumber;
    return this;
  }

  public void unsetLotteryNumber() {
    this.lotteryNumber = null;
  }

  /** Returns true if field lotteryNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryNumber() {
    return this.lotteryNumber != null;
  }

  public void setLotteryNumberIsSet(boolean value) {
    if (!value) {
      this.lotteryNumber = null;
    }
  }

  public long getAfterTaxMoney() {
    return this.afterTaxMoney;
  }

  public AppendTaskDetail setAfterTaxMoney(long afterTaxMoney) {
    this.afterTaxMoney = afterTaxMoney;
    setAfterTaxMoneyIsSet(true);
    return this;
  }

  public void unsetAfterTaxMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AFTERTAXMONEY_ISSET_ID);
  }

  /** Returns true if field afterTaxMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterTaxMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AFTERTAXMONEY_ISSET_ID);
  }

  public void setAfterTaxMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AFTERTAXMONEY_ISSET_ID, value);
  }

  public int getAppendDetailStatus() {
    return this.appendDetailStatus;
  }

  public AppendTaskDetail setAppendDetailStatus(int appendDetailStatus) {
    this.appendDetailStatus = appendDetailStatus;
    setAppendDetailStatusIsSet(true);
    return this;
  }

  public void unsetAppendDetailStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDDETAILSTATUS_ISSET_ID);
  }

  /** Returns true if field appendDetailStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendDetailStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDDETAILSTATUS_ISSET_ID);
  }

  public void setAppendDetailStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDDETAILSTATUS_ISSET_ID, value);
  }

  public int getCreateOrderTimes() {
    return this.createOrderTimes;
  }

  public AppendTaskDetail setCreateOrderTimes(int createOrderTimes) {
    this.createOrderTimes = createOrderTimes;
    setCreateOrderTimesIsSet(true);
    return this;
  }

  public void unsetCreateOrderTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEORDERTIMES_ISSET_ID);
  }

  /** Returns true if field createOrderTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateOrderTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEORDERTIMES_ISSET_ID);
  }

  public void setCreateOrderTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEORDERTIMES_ISSET_ID, value);
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public AppendTaskDetail setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public String getBall() {
    return this.ball;
  }

  public AppendTaskDetail setBall(String ball) {
    this.ball = ball;
    return this;
  }

  public void unsetBall() {
    this.ball = null;
  }

  /** Returns true if field ball is set (has been assigned a value) and false otherwise */
  public boolean isSetBall() {
    return this.ball != null;
  }

  public void setBallIsSet(boolean value) {
    if (!value) {
      this.ball = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public AppendTaskDetail setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public AppendTaskDetail setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DETAIL_ID:
      if (value == null) {
        unsetDetailId();
      } else {
        setDetailId((Long)value);
      }
      break;

    case APPEND_TASK_ID:
      if (value == null) {
        unsetAppendTaskId();
      } else {
        setAppendTaskId((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((String)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Long)value);
      }
      break;

    case MULTIPLE:
      if (value == null) {
        unsetMultiple();
      } else {
        setMultiple((Integer)value);
      }
      break;

    case NOTE_NUMBER:
      if (value == null) {
        unsetNoteNumber();
      } else {
        setNoteNumber((Integer)value);
      }
      break;

    case LOTTERY_NUMBER:
      if (value == null) {
        unsetLotteryNumber();
      } else {
        setLotteryNumber((String)value);
      }
      break;

    case AFTER_TAX_MONEY:
      if (value == null) {
        unsetAfterTaxMoney();
      } else {
        setAfterTaxMoney((Long)value);
      }
      break;

    case APPEND_DETAIL_STATUS:
      if (value == null) {
        unsetAppendDetailStatus();
      } else {
        setAppendDetailStatus((Integer)value);
      }
      break;

    case CREATE_ORDER_TIMES:
      if (value == null) {
        unsetCreateOrderTimes();
      } else {
        setCreateOrderTimes((Integer)value);
      }
      break;

    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;

    case BALL:
      if (value == null) {
        unsetBall();
      } else {
        setBall((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DETAIL_ID:
      return Long.valueOf(getDetailId());

    case APPEND_TASK_ID:
      return getAppendTaskId();

    case PARTNER_ID:
      return getPartnerId();

    case ISSUE_NO:
      return getIssueNo();

    case LOTTERY_ID:
      return getLotteryId();

    case USER_ID:
      return Long.valueOf(getUserId());

    case PLAY_TYPE:
      return getPlayType();

    case TOTAL_MONEY:
      return Long.valueOf(getTotalMoney());

    case MULTIPLE:
      return Integer.valueOf(getMultiple());

    case NOTE_NUMBER:
      return Integer.valueOf(getNoteNumber());

    case LOTTERY_NUMBER:
      return getLotteryNumber();

    case AFTER_TAX_MONEY:
      return Long.valueOf(getAfterTaxMoney());

    case APPEND_DETAIL_STATUS:
      return Integer.valueOf(getAppendDetailStatus());

    case CREATE_ORDER_TIMES:
      return Integer.valueOf(getCreateOrderTimes());

    case ORDER_NO:
      return getOrderNo();

    case BALL:
      return getBall();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DETAIL_ID:
      return isSetDetailId();
    case APPEND_TASK_ID:
      return isSetAppendTaskId();
    case PARTNER_ID:
      return isSetPartnerId();
    case ISSUE_NO:
      return isSetIssueNo();
    case LOTTERY_ID:
      return isSetLotteryId();
    case USER_ID:
      return isSetUserId();
    case PLAY_TYPE:
      return isSetPlayType();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case MULTIPLE:
      return isSetMultiple();
    case NOTE_NUMBER:
      return isSetNoteNumber();
    case LOTTERY_NUMBER:
      return isSetLotteryNumber();
    case AFTER_TAX_MONEY:
      return isSetAfterTaxMoney();
    case APPEND_DETAIL_STATUS:
      return isSetAppendDetailStatus();
    case CREATE_ORDER_TIMES:
      return isSetCreateOrderTimes();
    case ORDER_NO:
      return isSetOrderNo();
    case BALL:
      return isSetBall();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppendTaskDetail)
      return this.equals((AppendTaskDetail)that);
    return false;
  }

  public boolean equals(AppendTaskDetail that) {
    if (that == null)
      return false;

    boolean this_present_detailId = true;
    boolean that_present_detailId = true;
    if (this_present_detailId || that_present_detailId) {
      if (!(this_present_detailId && that_present_detailId))
        return false;
      if (this.detailId != that.detailId)
        return false;
    }

    boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
    boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
    if (this_present_appendTaskId || that_present_appendTaskId) {
      if (!(this_present_appendTaskId && that_present_appendTaskId))
        return false;
      if (!this.appendTaskId.equals(that.appendTaskId))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_multiple = true;
    boolean that_present_multiple = true;
    if (this_present_multiple || that_present_multiple) {
      if (!(this_present_multiple && that_present_multiple))
        return false;
      if (this.multiple != that.multiple)
        return false;
    }

    boolean this_present_noteNumber = true;
    boolean that_present_noteNumber = true;
    if (this_present_noteNumber || that_present_noteNumber) {
      if (!(this_present_noteNumber && that_present_noteNumber))
        return false;
      if (this.noteNumber != that.noteNumber)
        return false;
    }

    boolean this_present_lotteryNumber = true && this.isSetLotteryNumber();
    boolean that_present_lotteryNumber = true && that.isSetLotteryNumber();
    if (this_present_lotteryNumber || that_present_lotteryNumber) {
      if (!(this_present_lotteryNumber && that_present_lotteryNumber))
        return false;
      if (!this.lotteryNumber.equals(that.lotteryNumber))
        return false;
    }

    boolean this_present_afterTaxMoney = true;
    boolean that_present_afterTaxMoney = true;
    if (this_present_afterTaxMoney || that_present_afterTaxMoney) {
      if (!(this_present_afterTaxMoney && that_present_afterTaxMoney))
        return false;
      if (this.afterTaxMoney != that.afterTaxMoney)
        return false;
    }

    boolean this_present_appendDetailStatus = true;
    boolean that_present_appendDetailStatus = true;
    if (this_present_appendDetailStatus || that_present_appendDetailStatus) {
      if (!(this_present_appendDetailStatus && that_present_appendDetailStatus))
        return false;
      if (this.appendDetailStatus != that.appendDetailStatus)
        return false;
    }

    boolean this_present_createOrderTimes = true;
    boolean that_present_createOrderTimes = true;
    if (this_present_createOrderTimes || that_present_createOrderTimes) {
      if (!(this_present_createOrderTimes && that_present_createOrderTimes))
        return false;
      if (this.createOrderTimes != that.createOrderTimes)
        return false;
    }

    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }

    boolean this_present_ball = true && this.isSetBall();
    boolean that_present_ball = true && that.isSetBall();
    if (this_present_ball || that_present_ball) {
      if (!(this_present_ball && that_present_ball))
        return false;
      if (!this.ball.equals(that.ball))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppendTaskDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiple()).compareTo(other.isSetMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiple, other.multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoteNumber()).compareTo(other.isSetNoteNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteNumber, other.noteNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryNumber()).compareTo(other.isSetLotteryNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryNumber, other.lotteryNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterTaxMoney()).compareTo(other.isSetAfterTaxMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterTaxMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterTaxMoney, other.afterTaxMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendDetailStatus()).compareTo(other.isSetAppendDetailStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendDetailStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendDetailStatus, other.appendDetailStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateOrderTimes()).compareTo(other.isSetCreateOrderTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateOrderTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createOrderTimes, other.createOrderTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBall()).compareTo(other.isSetBall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ball, other.ball);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppendTaskDetail(");
    boolean first = true;

    sb.append("detailId:");
    sb.append(this.detailId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendTaskId:");
    if (this.appendTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.appendTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiple:");
    sb.append(this.multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteNumber:");
    sb.append(this.noteNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryNumber:");
    if (this.lotteryNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterTaxMoney:");
    sb.append(this.afterTaxMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendDetailStatus:");
    sb.append(this.appendDetailStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createOrderTimes:");
    sb.append(this.createOrderTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ball:");
    if (this.ball == null) {
      sb.append("null");
    } else {
      sb.append(this.ball);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppendTaskDetailStandardSchemeFactory implements SchemeFactory {
    public AppendTaskDetailStandardScheme getScheme() {
      return new AppendTaskDetailStandardScheme();
    }
  }

  private static class AppendTaskDetailStandardScheme extends StandardScheme<AppendTaskDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppendTaskDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DETAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.detailId = iprot.readI64();
              struct.setDetailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPEND_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appendTaskId = iprot.readString();
              struct.setAppendTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playType = iprot.readString();
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMoney = iprot.readI64();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiple = iprot.readI32();
              struct.setMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOTE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noteNumber = iprot.readI32();
              struct.setNoteNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOTTERY_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryNumber = iprot.readString();
              struct.setLotteryNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AFTER_TAX_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.afterTaxMoney = iprot.readI64();
              struct.setAfterTaxMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // APPEND_DETAIL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appendDetailStatus = iprot.readI32();
              struct.setAppendDetailStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_ORDER_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createOrderTimes = iprot.readI32();
              struct.setCreateOrderTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNo = iprot.readString();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BALL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ball = iprot.readString();
              struct.setBallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppendTaskDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
      oprot.writeI64(struct.detailId);
      oprot.writeFieldEnd();
      if (struct.appendTaskId != null) {
        oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.appendTaskId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.playType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MULTIPLE_FIELD_DESC);
      oprot.writeI32(struct.multiple);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.noteNumber);
      oprot.writeFieldEnd();
      if (struct.lotteryNumber != null) {
        oprot.writeFieldBegin(LOTTERY_NUMBER_FIELD_DESC);
        oprot.writeString(struct.lotteryNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AFTER_TAX_MONEY_FIELD_DESC);
      oprot.writeI64(struct.afterTaxMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPEND_DETAIL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.appendDetailStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_ORDER_TIMES_FIELD_DESC);
      oprot.writeI32(struct.createOrderTimes);
      oprot.writeFieldEnd();
      if (struct.orderNo != null) {
        oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.orderNo);
        oprot.writeFieldEnd();
      }
      if (struct.ball != null) {
        oprot.writeFieldBegin(BALL_FIELD_DESC);
        oprot.writeString(struct.ball);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppendTaskDetailTupleSchemeFactory implements SchemeFactory {
    public AppendTaskDetailTupleScheme getScheme() {
      return new AppendTaskDetailTupleScheme();
    }
  }

  private static class AppendTaskDetailTupleScheme extends TupleScheme<AppendTaskDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppendTaskDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDetailId()) {
        optionals.set(0);
      }
      if (struct.isSetAppendTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(2);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(3);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(4);
      }
      if (struct.isSetUserId()) {
        optionals.set(5);
      }
      if (struct.isSetPlayType()) {
        optionals.set(6);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(7);
      }
      if (struct.isSetMultiple()) {
        optionals.set(8);
      }
      if (struct.isSetNoteNumber()) {
        optionals.set(9);
      }
      if (struct.isSetLotteryNumber()) {
        optionals.set(10);
      }
      if (struct.isSetAfterTaxMoney()) {
        optionals.set(11);
      }
      if (struct.isSetAppendDetailStatus()) {
        optionals.set(12);
      }
      if (struct.isSetCreateOrderTimes()) {
        optionals.set(13);
      }
      if (struct.isSetOrderNo()) {
        optionals.set(14);
      }
      if (struct.isSetBall()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetDetailId()) {
        oprot.writeI64(struct.detailId);
      }
      if (struct.isSetAppendTaskId()) {
        oprot.writeString(struct.appendTaskId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetPlayType()) {
        oprot.writeString(struct.playType);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeI64(struct.totalMoney);
      }
      if (struct.isSetMultiple()) {
        oprot.writeI32(struct.multiple);
      }
      if (struct.isSetNoteNumber()) {
        oprot.writeI32(struct.noteNumber);
      }
      if (struct.isSetLotteryNumber()) {
        oprot.writeString(struct.lotteryNumber);
      }
      if (struct.isSetAfterTaxMoney()) {
        oprot.writeI64(struct.afterTaxMoney);
      }
      if (struct.isSetAppendDetailStatus()) {
        oprot.writeI32(struct.appendDetailStatus);
      }
      if (struct.isSetCreateOrderTimes()) {
        oprot.writeI32(struct.createOrderTimes);
      }
      if (struct.isSetOrderNo()) {
        oprot.writeString(struct.orderNo);
      }
      if (struct.isSetBall()) {
        oprot.writeString(struct.ball);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppendTaskDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.detailId = iprot.readI64();
        struct.setDetailIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appendTaskId = iprot.readString();
        struct.setAppendTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.playType = iprot.readString();
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalMoney = iprot.readI64();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.multiple = iprot.readI32();
        struct.setMultipleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.noteNumber = iprot.readI32();
        struct.setNoteNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lotteryNumber = iprot.readString();
        struct.setLotteryNumberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.afterTaxMoney = iprot.readI64();
        struct.setAfterTaxMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.appendDetailStatus = iprot.readI32();
        struct.setAppendDetailStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createOrderTimes = iprot.readI32();
        struct.setCreateOrderTimesIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orderNo = iprot.readString();
        struct.setOrderNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ball = iprot.readString();
        struct.setBallIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

