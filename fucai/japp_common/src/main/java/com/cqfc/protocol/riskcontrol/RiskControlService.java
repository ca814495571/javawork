/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.riskcontrol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RiskControlService {

  public interface Iface {

    public StatisticDataByGame getStatisticByGame(String gameId, String issue) throws org.apache.thrift.TException;

    public StatisticPageData queryStatisticByGame(String gameId, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public StatisticDataByDay getStatisticByDay(String day) throws org.apache.thrift.TException;

    public StatisticDayPageData queryStatisticByDay(String day, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int restatisticByDay(String day) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getStatisticByGame(String gameId, String issue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStatisticByGame(String gameId, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStatisticByDay(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryStatisticByDay(String day, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restatisticByDay(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public StatisticDataByGame getStatisticByGame(String gameId, String issue) throws org.apache.thrift.TException
    {
      send_getStatisticByGame(gameId, issue);
      return recv_getStatisticByGame();
    }

    public void send_getStatisticByGame(String gameId, String issue) throws org.apache.thrift.TException
    {
      getStatisticByGame_args args = new getStatisticByGame_args();
      args.setGameId(gameId);
      args.setIssue(issue);
      sendBase("getStatisticByGame", args);
    }

    public StatisticDataByGame recv_getStatisticByGame() throws org.apache.thrift.TException
    {
      getStatisticByGame_result result = new getStatisticByGame_result();
      receiveBase(result, "getStatisticByGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStatisticByGame failed: unknown result");
    }

    public StatisticPageData queryStatisticByGame(String gameId, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_queryStatisticByGame(gameId, currentPage, pageSize);
      return recv_queryStatisticByGame();
    }

    public void send_queryStatisticByGame(String gameId, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      queryStatisticByGame_args args = new queryStatisticByGame_args();
      args.setGameId(gameId);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("queryStatisticByGame", args);
    }

    public StatisticPageData recv_queryStatisticByGame() throws org.apache.thrift.TException
    {
      queryStatisticByGame_result result = new queryStatisticByGame_result();
      receiveBase(result, "queryStatisticByGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStatisticByGame failed: unknown result");
    }

    public StatisticDataByDay getStatisticByDay(String day) throws org.apache.thrift.TException
    {
      send_getStatisticByDay(day);
      return recv_getStatisticByDay();
    }

    public void send_getStatisticByDay(String day) throws org.apache.thrift.TException
    {
      getStatisticByDay_args args = new getStatisticByDay_args();
      args.setDay(day);
      sendBase("getStatisticByDay", args);
    }

    public StatisticDataByDay recv_getStatisticByDay() throws org.apache.thrift.TException
    {
      getStatisticByDay_result result = new getStatisticByDay_result();
      receiveBase(result, "getStatisticByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStatisticByDay failed: unknown result");
    }

    public StatisticDayPageData queryStatisticByDay(String day, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_queryStatisticByDay(day, currentPage, pageSize);
      return recv_queryStatisticByDay();
    }

    public void send_queryStatisticByDay(String day, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      queryStatisticByDay_args args = new queryStatisticByDay_args();
      args.setDay(day);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("queryStatisticByDay", args);
    }

    public StatisticDayPageData recv_queryStatisticByDay() throws org.apache.thrift.TException
    {
      queryStatisticByDay_result result = new queryStatisticByDay_result();
      receiveBase(result, "queryStatisticByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryStatisticByDay failed: unknown result");
    }

    public int restatisticByDay(String day) throws org.apache.thrift.TException
    {
      send_restatisticByDay(day);
      return recv_restatisticByDay();
    }

    public void send_restatisticByDay(String day) throws org.apache.thrift.TException
    {
      restatisticByDay_args args = new restatisticByDay_args();
      args.setDay(day);
      sendBase("restatisticByDay", args);
    }

    public int recv_restatisticByDay() throws org.apache.thrift.TException
    {
      restatisticByDay_result result = new restatisticByDay_result();
      receiveBase(result, "restatisticByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restatisticByDay failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getStatisticByGame(String gameId, String issue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStatisticByGame_call method_call = new getStatisticByGame_call(gameId, issue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStatisticByGame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameId;
      private String issue;
      public getStatisticByGame_call(String gameId, String issue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameId = gameId;
        this.issue = issue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatisticByGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStatisticByGame_args args = new getStatisticByGame_args();
        args.setGameId(gameId);
        args.setIssue(issue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatisticDataByGame getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatisticByGame();
      }
    }

    public void queryStatisticByGame(String gameId, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStatisticByGame_call method_call = new queryStatisticByGame_call(gameId, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStatisticByGame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameId;
      private int currentPage;
      private int pageSize;
      public queryStatisticByGame_call(String gameId, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameId = gameId;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStatisticByGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStatisticByGame_args args = new queryStatisticByGame_args();
        args.setGameId(gameId);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatisticPageData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStatisticByGame();
      }
    }

    public void getStatisticByDay(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStatisticByDay_call method_call = new getStatisticByDay_call(day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStatisticByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      public getStatisticByDay_call(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatisticByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStatisticByDay_args args = new getStatisticByDay_args();
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatisticDataByDay getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatisticByDay();
      }
    }

    public void queryStatisticByDay(String day, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryStatisticByDay_call method_call = new queryStatisticByDay_call(day, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStatisticByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      private int currentPage;
      private int pageSize;
      public queryStatisticByDay_call(String day, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStatisticByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryStatisticByDay_args args = new queryStatisticByDay_args();
        args.setDay(day);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatisticDayPageData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryStatisticByDay();
      }
    }

    public void restatisticByDay(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restatisticByDay_call method_call = new restatisticByDay_call(day, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restatisticByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String day;
      public restatisticByDay_call(String day, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.day = day;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restatisticByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restatisticByDay_args args = new restatisticByDay_args();
        args.setDay(day);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restatisticByDay();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getStatisticByGame", new getStatisticByGame());
      processMap.put("queryStatisticByGame", new queryStatisticByGame());
      processMap.put("getStatisticByDay", new getStatisticByDay());
      processMap.put("queryStatisticByDay", new queryStatisticByDay());
      processMap.put("restatisticByDay", new restatisticByDay());
      return processMap;
    }

    public static class getStatisticByGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatisticByGame_args> {
      public getStatisticByGame() {
        super("getStatisticByGame");
      }

      public getStatisticByGame_args getEmptyArgsInstance() {
        return new getStatisticByGame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStatisticByGame_result getResult(I iface, getStatisticByGame_args args) throws org.apache.thrift.TException {
        getStatisticByGame_result result = new getStatisticByGame_result();
        result.success = iface.getStatisticByGame(args.gameId, args.issue);
        return result;
      }
    }

    public static class queryStatisticByGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStatisticByGame_args> {
      public queryStatisticByGame() {
        super("queryStatisticByGame");
      }

      public queryStatisticByGame_args getEmptyArgsInstance() {
        return new queryStatisticByGame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStatisticByGame_result getResult(I iface, queryStatisticByGame_args args) throws org.apache.thrift.TException {
        queryStatisticByGame_result result = new queryStatisticByGame_result();
        result.success = iface.queryStatisticByGame(args.gameId, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class getStatisticByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatisticByDay_args> {
      public getStatisticByDay() {
        super("getStatisticByDay");
      }

      public getStatisticByDay_args getEmptyArgsInstance() {
        return new getStatisticByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStatisticByDay_result getResult(I iface, getStatisticByDay_args args) throws org.apache.thrift.TException {
        getStatisticByDay_result result = new getStatisticByDay_result();
        result.success = iface.getStatisticByDay(args.day);
        return result;
      }
    }

    public static class queryStatisticByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStatisticByDay_args> {
      public queryStatisticByDay() {
        super("queryStatisticByDay");
      }

      public queryStatisticByDay_args getEmptyArgsInstance() {
        return new queryStatisticByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryStatisticByDay_result getResult(I iface, queryStatisticByDay_args args) throws org.apache.thrift.TException {
        queryStatisticByDay_result result = new queryStatisticByDay_result();
        result.success = iface.queryStatisticByDay(args.day, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class restatisticByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restatisticByDay_args> {
      public restatisticByDay() {
        super("restatisticByDay");
      }

      public restatisticByDay_args getEmptyArgsInstance() {
        return new restatisticByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restatisticByDay_result getResult(I iface, restatisticByDay_args args) throws org.apache.thrift.TException {
        restatisticByDay_result result = new restatisticByDay_result();
        result.success = iface.restatisticByDay(args.day);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getStatisticByGame", new getStatisticByGame());
      processMap.put("queryStatisticByGame", new queryStatisticByGame());
      processMap.put("getStatisticByDay", new getStatisticByDay());
      processMap.put("queryStatisticByDay", new queryStatisticByDay());
      processMap.put("restatisticByDay", new restatisticByDay());
      return processMap;
    }

    public static class getStatisticByGame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStatisticByGame_args, StatisticDataByGame> {
      public getStatisticByGame() {
        super("getStatisticByGame");
      }

      public getStatisticByGame_args getEmptyArgsInstance() {
        return new getStatisticByGame_args();
      }

      public AsyncMethodCallback<StatisticDataByGame> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatisticDataByGame>() { 
          public void onComplete(StatisticDataByGame o) {
            getStatisticByGame_result result = new getStatisticByGame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStatisticByGame_result result = new getStatisticByGame_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStatisticByGame_args args, org.apache.thrift.async.AsyncMethodCallback<StatisticDataByGame> resultHandler) throws TException {
        iface.getStatisticByGame(args.gameId, args.issue,resultHandler);
      }
    }

    public static class queryStatisticByGame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStatisticByGame_args, StatisticPageData> {
      public queryStatisticByGame() {
        super("queryStatisticByGame");
      }

      public queryStatisticByGame_args getEmptyArgsInstance() {
        return new queryStatisticByGame_args();
      }

      public AsyncMethodCallback<StatisticPageData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatisticPageData>() { 
          public void onComplete(StatisticPageData o) {
            queryStatisticByGame_result result = new queryStatisticByGame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStatisticByGame_result result = new queryStatisticByGame_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStatisticByGame_args args, org.apache.thrift.async.AsyncMethodCallback<StatisticPageData> resultHandler) throws TException {
        iface.queryStatisticByGame(args.gameId, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class getStatisticByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStatisticByDay_args, StatisticDataByDay> {
      public getStatisticByDay() {
        super("getStatisticByDay");
      }

      public getStatisticByDay_args getEmptyArgsInstance() {
        return new getStatisticByDay_args();
      }

      public AsyncMethodCallback<StatisticDataByDay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatisticDataByDay>() { 
          public void onComplete(StatisticDataByDay o) {
            getStatisticByDay_result result = new getStatisticByDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStatisticByDay_result result = new getStatisticByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStatisticByDay_args args, org.apache.thrift.async.AsyncMethodCallback<StatisticDataByDay> resultHandler) throws TException {
        iface.getStatisticByDay(args.day,resultHandler);
      }
    }

    public static class queryStatisticByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStatisticByDay_args, StatisticDayPageData> {
      public queryStatisticByDay() {
        super("queryStatisticByDay");
      }

      public queryStatisticByDay_args getEmptyArgsInstance() {
        return new queryStatisticByDay_args();
      }

      public AsyncMethodCallback<StatisticDayPageData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatisticDayPageData>() { 
          public void onComplete(StatisticDayPageData o) {
            queryStatisticByDay_result result = new queryStatisticByDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryStatisticByDay_result result = new queryStatisticByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryStatisticByDay_args args, org.apache.thrift.async.AsyncMethodCallback<StatisticDayPageData> resultHandler) throws TException {
        iface.queryStatisticByDay(args.day, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class restatisticByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restatisticByDay_args, Integer> {
      public restatisticByDay() {
        super("restatisticByDay");
      }

      public restatisticByDay_args getEmptyArgsInstance() {
        return new restatisticByDay_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            restatisticByDay_result result = new restatisticByDay_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restatisticByDay_result result = new restatisticByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restatisticByDay_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.restatisticByDay(args.day,resultHandler);
      }
    }

  }

  public static class getStatisticByGame_args implements org.apache.thrift.TBase<getStatisticByGame_args, getStatisticByGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStatisticByGame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatisticByGame_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStatisticByGame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStatisticByGame_argsTupleSchemeFactory());
    }

    public String gameId; // required
    public String issue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameId"),
      ISSUE((short)2, "issue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // ISSUE
            return ISSUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatisticByGame_args.class, metaDataMap);
    }

    public getStatisticByGame_args() {
    }

    public getStatisticByGame_args(
      String gameId,
      String issue)
    {
      this();
      this.gameId = gameId;
      this.issue = issue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatisticByGame_args(getStatisticByGame_args other) {
      if (other.isSetGameId()) {
        this.gameId = other.gameId;
      }
      if (other.isSetIssue()) {
        this.issue = other.issue;
      }
    }

    public getStatisticByGame_args deepCopy() {
      return new getStatisticByGame_args(this);
    }

    @Override
    public void clear() {
      this.gameId = null;
      this.issue = null;
    }

    public String getGameId() {
      return this.gameId;
    }

    public getStatisticByGame_args setGameId(String gameId) {
      this.gameId = gameId;
      return this;
    }

    public void unsetGameId() {
      this.gameId = null;
    }

    /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
    public boolean isSetGameId() {
      return this.gameId != null;
    }

    public void setGameIdIsSet(boolean value) {
      if (!value) {
        this.gameId = null;
      }
    }

    public String getIssue() {
      return this.issue;
    }

    public getStatisticByGame_args setIssue(String issue) {
      this.issue = issue;
      return this;
    }

    public void unsetIssue() {
      this.issue = null;
    }

    /** Returns true if field issue is set (has been assigned a value) and false otherwise */
    public boolean isSetIssue() {
      return this.issue != null;
    }

    public void setIssueIsSet(boolean value) {
      if (!value) {
        this.issue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameId();
        } else {
          setGameId((String)value);
        }
        break;

      case ISSUE:
        if (value == null) {
          unsetIssue();
        } else {
          setIssue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameId();

      case ISSUE:
        return getIssue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameId();
      case ISSUE:
        return isSetIssue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatisticByGame_args)
        return this.equals((getStatisticByGame_args)that);
      return false;
    }

    public boolean equals(getStatisticByGame_args that) {
      if (that == null)
        return false;

      boolean this_present_gameId = true && this.isSetGameId();
      boolean that_present_gameId = true && that.isSetGameId();
      if (this_present_gameId || that_present_gameId) {
        if (!(this_present_gameId && that_present_gameId))
          return false;
        if (!this.gameId.equals(that.gameId))
          return false;
      }

      boolean this_present_issue = true && this.isSetIssue();
      boolean that_present_issue = true && that.isSetIssue();
      if (this_present_issue || that_present_issue) {
        if (!(this_present_issue && that_present_issue))
          return false;
        if (!this.issue.equals(that.issue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStatisticByGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssue()).compareTo(other.isSetIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issue, other.issue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatisticByGame_args(");
      boolean first = true;

      sb.append("gameId:");
      if (this.gameId == null) {
        sb.append("null");
      } else {
        sb.append(this.gameId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issue:");
      if (this.issue == null) {
        sb.append("null");
      } else {
        sb.append(this.issue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatisticByGame_argsStandardSchemeFactory implements SchemeFactory {
      public getStatisticByGame_argsStandardScheme getScheme() {
        return new getStatisticByGame_argsStandardScheme();
      }
    }

    private static class getStatisticByGame_argsStandardScheme extends StandardScheme<getStatisticByGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatisticByGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameId = iprot.readString();
                struct.setGameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issue = iprot.readString();
                struct.setIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatisticByGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameId != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameId);
          oprot.writeFieldEnd();
        }
        if (struct.issue != null) {
          oprot.writeFieldBegin(ISSUE_FIELD_DESC);
          oprot.writeString(struct.issue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatisticByGame_argsTupleSchemeFactory implements SchemeFactory {
      public getStatisticByGame_argsTupleScheme getScheme() {
        return new getStatisticByGame_argsTupleScheme();
      }
    }

    private static class getStatisticByGame_argsTupleScheme extends TupleScheme<getStatisticByGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatisticByGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameId()) {
          optionals.set(0);
        }
        if (struct.isSetIssue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGameId()) {
          oprot.writeString(struct.gameId);
        }
        if (struct.isSetIssue()) {
          oprot.writeString(struct.issue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatisticByGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.gameId = iprot.readString();
          struct.setGameIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issue = iprot.readString();
          struct.setIssueIsSet(true);
        }
      }
    }

  }

  public static class getStatisticByGame_result implements org.apache.thrift.TBase<getStatisticByGame_result, getStatisticByGame_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStatisticByGame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatisticByGame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStatisticByGame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStatisticByGame_resultTupleSchemeFactory());
    }

    public StatisticDataByGame success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatisticDataByGame.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatisticByGame_result.class, metaDataMap);
    }

    public getStatisticByGame_result() {
    }

    public getStatisticByGame_result(
      StatisticDataByGame success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatisticByGame_result(getStatisticByGame_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatisticDataByGame(other.success);
      }
    }

    public getStatisticByGame_result deepCopy() {
      return new getStatisticByGame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StatisticDataByGame getSuccess() {
      return this.success;
    }

    public getStatisticByGame_result setSuccess(StatisticDataByGame success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatisticDataByGame)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatisticByGame_result)
        return this.equals((getStatisticByGame_result)that);
      return false;
    }

    public boolean equals(getStatisticByGame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStatisticByGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatisticByGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatisticByGame_resultStandardSchemeFactory implements SchemeFactory {
      public getStatisticByGame_resultStandardScheme getScheme() {
        return new getStatisticByGame_resultStandardScheme();
      }
    }

    private static class getStatisticByGame_resultStandardScheme extends StandardScheme<getStatisticByGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatisticByGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatisticDataByGame();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatisticByGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatisticByGame_resultTupleSchemeFactory implements SchemeFactory {
      public getStatisticByGame_resultTupleScheme getScheme() {
        return new getStatisticByGame_resultTupleScheme();
      }
    }

    private static class getStatisticByGame_resultTupleScheme extends TupleScheme<getStatisticByGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatisticByGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatisticByGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StatisticDataByGame();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStatisticByGame_args implements org.apache.thrift.TBase<queryStatisticByGame_args, queryStatisticByGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStatisticByGame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStatisticByGame_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatisticByGame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatisticByGame_argsTupleSchemeFactory());
    }

    public String gameId; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameId"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStatisticByGame_args.class, metaDataMap);
    }

    public queryStatisticByGame_args() {
    }

    public queryStatisticByGame_args(
      String gameId,
      int currentPage,
      int pageSize)
    {
      this();
      this.gameId = gameId;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatisticByGame_args(queryStatisticByGame_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameId()) {
        this.gameId = other.gameId;
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public queryStatisticByGame_args deepCopy() {
      return new queryStatisticByGame_args(this);
    }

    @Override
    public void clear() {
      this.gameId = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getGameId() {
      return this.gameId;
    }

    public queryStatisticByGame_args setGameId(String gameId) {
      this.gameId = gameId;
      return this;
    }

    public void unsetGameId() {
      this.gameId = null;
    }

    /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
    public boolean isSetGameId() {
      return this.gameId != null;
    }

    public void setGameIdIsSet(boolean value) {
      if (!value) {
        this.gameId = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public queryStatisticByGame_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryStatisticByGame_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameId();
        } else {
          setGameId((String)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameId();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameId();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatisticByGame_args)
        return this.equals((queryStatisticByGame_args)that);
      return false;
    }

    public boolean equals(queryStatisticByGame_args that) {
      if (that == null)
        return false;

      boolean this_present_gameId = true && this.isSetGameId();
      boolean that_present_gameId = true && that.isSetGameId();
      if (this_present_gameId || that_present_gameId) {
        if (!(this_present_gameId && that_present_gameId))
          return false;
        if (!this.gameId.equals(that.gameId))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryStatisticByGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatisticByGame_args(");
      boolean first = true;

      sb.append("gameId:");
      if (this.gameId == null) {
        sb.append("null");
      } else {
        sb.append(this.gameId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatisticByGame_argsStandardSchemeFactory implements SchemeFactory {
      public queryStatisticByGame_argsStandardScheme getScheme() {
        return new queryStatisticByGame_argsStandardScheme();
      }
    }

    private static class queryStatisticByGame_argsStandardScheme extends StandardScheme<queryStatisticByGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStatisticByGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameId = iprot.readString();
                struct.setGameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStatisticByGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameId != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatisticByGame_argsTupleSchemeFactory implements SchemeFactory {
      public queryStatisticByGame_argsTupleScheme getScheme() {
        return new queryStatisticByGame_argsTupleScheme();
      }
    }

    private static class queryStatisticByGame_argsTupleScheme extends TupleScheme<queryStatisticByGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStatisticByGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameId()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameId()) {
          oprot.writeString(struct.gameId);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStatisticByGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameId = iprot.readString();
          struct.setGameIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryStatisticByGame_result implements org.apache.thrift.TBase<queryStatisticByGame_result, queryStatisticByGame_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStatisticByGame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStatisticByGame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatisticByGame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatisticByGame_resultTupleSchemeFactory());
    }

    public StatisticPageData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatisticPageData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStatisticByGame_result.class, metaDataMap);
    }

    public queryStatisticByGame_result() {
    }

    public queryStatisticByGame_result(
      StatisticPageData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatisticByGame_result(queryStatisticByGame_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatisticPageData(other.success);
      }
    }

    public queryStatisticByGame_result deepCopy() {
      return new queryStatisticByGame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StatisticPageData getSuccess() {
      return this.success;
    }

    public queryStatisticByGame_result setSuccess(StatisticPageData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatisticPageData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatisticByGame_result)
        return this.equals((queryStatisticByGame_result)that);
      return false;
    }

    public boolean equals(queryStatisticByGame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryStatisticByGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatisticByGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatisticByGame_resultStandardSchemeFactory implements SchemeFactory {
      public queryStatisticByGame_resultStandardScheme getScheme() {
        return new queryStatisticByGame_resultStandardScheme();
      }
    }

    private static class queryStatisticByGame_resultStandardScheme extends StandardScheme<queryStatisticByGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStatisticByGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatisticPageData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStatisticByGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatisticByGame_resultTupleSchemeFactory implements SchemeFactory {
      public queryStatisticByGame_resultTupleScheme getScheme() {
        return new queryStatisticByGame_resultTupleScheme();
      }
    }

    private static class queryStatisticByGame_resultTupleScheme extends TupleScheme<queryStatisticByGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStatisticByGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStatisticByGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StatisticPageData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStatisticByDay_args implements org.apache.thrift.TBase<getStatisticByDay_args, getStatisticByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStatisticByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatisticByDay_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStatisticByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStatisticByDay_argsTupleSchemeFactory());
    }

    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatisticByDay_args.class, metaDataMap);
    }

    public getStatisticByDay_args() {
    }

    public getStatisticByDay_args(
      String day)
    {
      this();
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatisticByDay_args(getStatisticByDay_args other) {
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public getStatisticByDay_args deepCopy() {
      return new getStatisticByDay_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
    }

    public String getDay() {
      return this.day;
    }

    public getStatisticByDay_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatisticByDay_args)
        return this.equals((getStatisticByDay_args)that);
      return false;
    }

    public boolean equals(getStatisticByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStatisticByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatisticByDay_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatisticByDay_argsStandardSchemeFactory implements SchemeFactory {
      public getStatisticByDay_argsStandardScheme getScheme() {
        return new getStatisticByDay_argsStandardScheme();
      }
    }

    private static class getStatisticByDay_argsStandardScheme extends StandardScheme<getStatisticByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatisticByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatisticByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatisticByDay_argsTupleSchemeFactory implements SchemeFactory {
      public getStatisticByDay_argsTupleScheme getScheme() {
        return new getStatisticByDay_argsTupleScheme();
      }
    }

    private static class getStatisticByDay_argsTupleScheme extends TupleScheme<getStatisticByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatisticByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatisticByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class getStatisticByDay_result implements org.apache.thrift.TBase<getStatisticByDay_result, getStatisticByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStatisticByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatisticByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStatisticByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStatisticByDay_resultTupleSchemeFactory());
    }

    public StatisticDataByDay success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatisticDataByDay.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatisticByDay_result.class, metaDataMap);
    }

    public getStatisticByDay_result() {
    }

    public getStatisticByDay_result(
      StatisticDataByDay success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatisticByDay_result(getStatisticByDay_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatisticDataByDay(other.success);
      }
    }

    public getStatisticByDay_result deepCopy() {
      return new getStatisticByDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StatisticDataByDay getSuccess() {
      return this.success;
    }

    public getStatisticByDay_result setSuccess(StatisticDataByDay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatisticDataByDay)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatisticByDay_result)
        return this.equals((getStatisticByDay_result)that);
      return false;
    }

    public boolean equals(getStatisticByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStatisticByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatisticByDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatisticByDay_resultStandardSchemeFactory implements SchemeFactory {
      public getStatisticByDay_resultStandardScheme getScheme() {
        return new getStatisticByDay_resultStandardScheme();
      }
    }

    private static class getStatisticByDay_resultStandardScheme extends StandardScheme<getStatisticByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatisticByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatisticDataByDay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatisticByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatisticByDay_resultTupleSchemeFactory implements SchemeFactory {
      public getStatisticByDay_resultTupleScheme getScheme() {
        return new getStatisticByDay_resultTupleScheme();
      }
    }

    private static class getStatisticByDay_resultTupleScheme extends TupleScheme<getStatisticByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatisticByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatisticByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StatisticDataByDay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStatisticByDay_args implements org.apache.thrift.TBase<queryStatisticByDay_args, queryStatisticByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStatisticByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStatisticByDay_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatisticByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatisticByDay_argsTupleSchemeFactory());
    }

    public String day; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStatisticByDay_args.class, metaDataMap);
    }

    public queryStatisticByDay_args() {
    }

    public queryStatisticByDay_args(
      String day,
      int currentPage,
      int pageSize)
    {
      this();
      this.day = day;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatisticByDay_args(queryStatisticByDay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDay()) {
        this.day = other.day;
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public queryStatisticByDay_args deepCopy() {
      return new queryStatisticByDay_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getDay() {
      return this.day;
    }

    public queryStatisticByDay_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public queryStatisticByDay_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryStatisticByDay_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatisticByDay_args)
        return this.equals((queryStatisticByDay_args)that);
      return false;
    }

    public boolean equals(queryStatisticByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryStatisticByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatisticByDay_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatisticByDay_argsStandardSchemeFactory implements SchemeFactory {
      public queryStatisticByDay_argsStandardScheme getScheme() {
        return new queryStatisticByDay_argsStandardScheme();
      }
    }

    private static class queryStatisticByDay_argsStandardScheme extends StandardScheme<queryStatisticByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStatisticByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStatisticByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatisticByDay_argsTupleSchemeFactory implements SchemeFactory {
      public queryStatisticByDay_argsTupleScheme getScheme() {
        return new queryStatisticByDay_argsTupleScheme();
      }
    }

    private static class queryStatisticByDay_argsTupleScheme extends TupleScheme<queryStatisticByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStatisticByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStatisticByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryStatisticByDay_result implements org.apache.thrift.TBase<queryStatisticByDay_result, queryStatisticByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryStatisticByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStatisticByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStatisticByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStatisticByDay_resultTupleSchemeFactory());
    }

    public StatisticDayPageData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatisticDayPageData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStatisticByDay_result.class, metaDataMap);
    }

    public queryStatisticByDay_result() {
    }

    public queryStatisticByDay_result(
      StatisticDayPageData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStatisticByDay_result(queryStatisticByDay_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatisticDayPageData(other.success);
      }
    }

    public queryStatisticByDay_result deepCopy() {
      return new queryStatisticByDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StatisticDayPageData getSuccess() {
      return this.success;
    }

    public queryStatisticByDay_result setSuccess(StatisticDayPageData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatisticDayPageData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStatisticByDay_result)
        return this.equals((queryStatisticByDay_result)that);
      return false;
    }

    public boolean equals(queryStatisticByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryStatisticByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStatisticByDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStatisticByDay_resultStandardSchemeFactory implements SchemeFactory {
      public queryStatisticByDay_resultStandardScheme getScheme() {
        return new queryStatisticByDay_resultStandardScheme();
      }
    }

    private static class queryStatisticByDay_resultStandardScheme extends StandardScheme<queryStatisticByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStatisticByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatisticDayPageData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStatisticByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStatisticByDay_resultTupleSchemeFactory implements SchemeFactory {
      public queryStatisticByDay_resultTupleScheme getScheme() {
        return new queryStatisticByDay_resultTupleScheme();
      }
    }

    private static class queryStatisticByDay_resultTupleScheme extends TupleScheme<queryStatisticByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStatisticByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStatisticByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StatisticDayPageData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class restatisticByDay_args implements org.apache.thrift.TBase<restatisticByDay_args, restatisticByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<restatisticByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restatisticByDay_args");

    private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restatisticByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restatisticByDay_argsTupleSchemeFactory());
    }

    public String day; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DAY((short)1, "day");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DAY
            return DAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restatisticByDay_args.class, metaDataMap);
    }

    public restatisticByDay_args() {
    }

    public restatisticByDay_args(
      String day)
    {
      this();
      this.day = day;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restatisticByDay_args(restatisticByDay_args other) {
      if (other.isSetDay()) {
        this.day = other.day;
      }
    }

    public restatisticByDay_args deepCopy() {
      return new restatisticByDay_args(this);
    }

    @Override
    public void clear() {
      this.day = null;
    }

    public String getDay() {
      return this.day;
    }

    public restatisticByDay_args setDay(String day) {
      this.day = day;
      return this;
    }

    public void unsetDay() {
      this.day = null;
    }

    /** Returns true if field day is set (has been assigned a value) and false otherwise */
    public boolean isSetDay() {
      return this.day != null;
    }

    public void setDayIsSet(boolean value) {
      if (!value) {
        this.day = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DAY:
        if (value == null) {
          unsetDay();
        } else {
          setDay((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DAY:
        return getDay();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DAY:
        return isSetDay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restatisticByDay_args)
        return this.equals((restatisticByDay_args)that);
      return false;
    }

    public boolean equals(restatisticByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_day = true && this.isSetDay();
      boolean that_present_day = true && that.isSetDay();
      if (this_present_day || that_present_day) {
        if (!(this_present_day && that_present_day))
          return false;
        if (!this.day.equals(that.day))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restatisticByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restatisticByDay_args(");
      boolean first = true;

      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restatisticByDay_argsStandardSchemeFactory implements SchemeFactory {
      public restatisticByDay_argsStandardScheme getScheme() {
        return new restatisticByDay_argsStandardScheme();
      }
    }

    private static class restatisticByDay_argsStandardScheme extends StandardScheme<restatisticByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restatisticByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.day = iprot.readString();
                struct.setDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restatisticByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.day != null) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restatisticByDay_argsTupleSchemeFactory implements SchemeFactory {
      public restatisticByDay_argsTupleScheme getScheme() {
        return new restatisticByDay_argsTupleScheme();
      }
    }

    private static class restatisticByDay_argsTupleScheme extends TupleScheme<restatisticByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restatisticByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDay()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDay()) {
          oprot.writeString(struct.day);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restatisticByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.day = iprot.readString();
          struct.setDayIsSet(true);
        }
      }
    }

  }

  public static class restatisticByDay_result implements org.apache.thrift.TBase<restatisticByDay_result, restatisticByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<restatisticByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restatisticByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restatisticByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restatisticByDay_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restatisticByDay_result.class, metaDataMap);
    }

    public restatisticByDay_result() {
    }

    public restatisticByDay_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restatisticByDay_result(restatisticByDay_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public restatisticByDay_result deepCopy() {
      return new restatisticByDay_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public restatisticByDay_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restatisticByDay_result)
        return this.equals((restatisticByDay_result)that);
      return false;
    }

    public boolean equals(restatisticByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restatisticByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restatisticByDay_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restatisticByDay_resultStandardSchemeFactory implements SchemeFactory {
      public restatisticByDay_resultStandardScheme getScheme() {
        return new restatisticByDay_resultStandardScheme();
      }
    }

    private static class restatisticByDay_resultStandardScheme extends StandardScheme<restatisticByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restatisticByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restatisticByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restatisticByDay_resultTupleSchemeFactory implements SchemeFactory {
      public restatisticByDay_resultTupleScheme getScheme() {
        return new restatisticByDay_resultTupleScheme();
      }
    }

    private static class restatisticByDay_resultTupleScheme extends TupleScheme<restatisticByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restatisticByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restatisticByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
