/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.accessback;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccessBackService {

  public interface Iface {

    public ResultMessage sendAccessBackMessage(String parnterId, String xmlStr) throws org.apache.thrift.TException;

    public TicknumRecord getTicknumRecord(String gameId, String issue) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendAccessBackMessage(String parnterId, String xmlStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicknumRecord(String gameId, String issue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultMessage sendAccessBackMessage(String parnterId, String xmlStr) throws org.apache.thrift.TException
    {
      send_sendAccessBackMessage(parnterId, xmlStr);
      return recv_sendAccessBackMessage();
    }

    public void send_sendAccessBackMessage(String parnterId, String xmlStr) throws org.apache.thrift.TException
    {
      sendAccessBackMessage_args args = new sendAccessBackMessage_args();
      args.setParnterId(parnterId);
      args.setXmlStr(xmlStr);
      sendBase("sendAccessBackMessage", args);
    }

    public ResultMessage recv_sendAccessBackMessage() throws org.apache.thrift.TException
    {
      sendAccessBackMessage_result result = new sendAccessBackMessage_result();
      receiveBase(result, "sendAccessBackMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendAccessBackMessage failed: unknown result");
    }

    public TicknumRecord getTicknumRecord(String gameId, String issue) throws org.apache.thrift.TException
    {
      send_getTicknumRecord(gameId, issue);
      return recv_getTicknumRecord();
    }

    public void send_getTicknumRecord(String gameId, String issue) throws org.apache.thrift.TException
    {
      getTicknumRecord_args args = new getTicknumRecord_args();
      args.setGameId(gameId);
      args.setIssue(issue);
      sendBase("getTicknumRecord", args);
    }

    public TicknumRecord recv_getTicknumRecord() throws org.apache.thrift.TException
    {
      getTicknumRecord_result result = new getTicknumRecord_result();
      receiveBase(result, "getTicknumRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicknumRecord failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendAccessBackMessage(String parnterId, String xmlStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendAccessBackMessage_call method_call = new sendAccessBackMessage_call(parnterId, xmlStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendAccessBackMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String parnterId;
      private String xmlStr;
      public sendAccessBackMessage_call(String parnterId, String xmlStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parnterId = parnterId;
        this.xmlStr = xmlStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendAccessBackMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendAccessBackMessage_args args = new sendAccessBackMessage_args();
        args.setParnterId(parnterId);
        args.setXmlStr(xmlStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendAccessBackMessage();
      }
    }

    public void getTicknumRecord(String gameId, String issue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicknumRecord_call method_call = new getTicknumRecord_call(gameId, issue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicknumRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameId;
      private String issue;
      public getTicknumRecord_call(String gameId, String issue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameId = gameId;
        this.issue = issue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicknumRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicknumRecord_args args = new getTicknumRecord_args();
        args.setGameId(gameId);
        args.setIssue(issue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TicknumRecord getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicknumRecord();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendAccessBackMessage", new sendAccessBackMessage());
      processMap.put("getTicknumRecord", new getTicknumRecord());
      return processMap;
    }

    public static class sendAccessBackMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendAccessBackMessage_args> {
      public sendAccessBackMessage() {
        super("sendAccessBackMessage");
      }

      public sendAccessBackMessage_args getEmptyArgsInstance() {
        return new sendAccessBackMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendAccessBackMessage_result getResult(I iface, sendAccessBackMessage_args args) throws org.apache.thrift.TException {
        sendAccessBackMessage_result result = new sendAccessBackMessage_result();
        result.success = iface.sendAccessBackMessage(args.parnterId, args.xmlStr);
        return result;
      }
    }

    public static class getTicknumRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicknumRecord_args> {
      public getTicknumRecord() {
        super("getTicknumRecord");
      }

      public getTicknumRecord_args getEmptyArgsInstance() {
        return new getTicknumRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicknumRecord_result getResult(I iface, getTicknumRecord_args args) throws org.apache.thrift.TException {
        getTicknumRecord_result result = new getTicknumRecord_result();
        result.success = iface.getTicknumRecord(args.gameId, args.issue);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendAccessBackMessage", new sendAccessBackMessage());
      processMap.put("getTicknumRecord", new getTicknumRecord());
      return processMap;
    }

    public static class sendAccessBackMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendAccessBackMessage_args, ResultMessage> {
      public sendAccessBackMessage() {
        super("sendAccessBackMessage");
      }

      public sendAccessBackMessage_args getEmptyArgsInstance() {
        return new sendAccessBackMessage_args();
      }

      public AsyncMethodCallback<ResultMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultMessage>() { 
          public void onComplete(ResultMessage o) {
            sendAccessBackMessage_result result = new sendAccessBackMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendAccessBackMessage_result result = new sendAccessBackMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendAccessBackMessage_args args, org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler) throws TException {
        iface.sendAccessBackMessage(args.parnterId, args.xmlStr,resultHandler);
      }
    }

    public static class getTicknumRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicknumRecord_args, TicknumRecord> {
      public getTicknumRecord() {
        super("getTicknumRecord");
      }

      public getTicknumRecord_args getEmptyArgsInstance() {
        return new getTicknumRecord_args();
      }

      public AsyncMethodCallback<TicknumRecord> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TicknumRecord>() { 
          public void onComplete(TicknumRecord o) {
            getTicknumRecord_result result = new getTicknumRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicknumRecord_result result = new getTicknumRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicknumRecord_args args, org.apache.thrift.async.AsyncMethodCallback<TicknumRecord> resultHandler) throws TException {
        iface.getTicknumRecord(args.gameId, args.issue,resultHandler);
      }
    }

  }

  public static class sendAccessBackMessage_args implements org.apache.thrift.TBase<sendAccessBackMessage_args, sendAccessBackMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendAccessBackMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAccessBackMessage_args");

    private static final org.apache.thrift.protocol.TField PARNTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parnterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField XML_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAccessBackMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAccessBackMessage_argsTupleSchemeFactory());
    }

    public String parnterId; // required
    public String xmlStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARNTER_ID((short)1, "parnterId"),
      XML_STR((short)2, "xmlStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARNTER_ID
            return PARNTER_ID;
          case 2: // XML_STR
            return XML_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARNTER_ID, new org.apache.thrift.meta_data.FieldMetaData("parnterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.XML_STR, new org.apache.thrift.meta_data.FieldMetaData("xmlStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAccessBackMessage_args.class, metaDataMap);
    }

    public sendAccessBackMessage_args() {
    }

    public sendAccessBackMessage_args(
      String parnterId,
      String xmlStr)
    {
      this();
      this.parnterId = parnterId;
      this.xmlStr = xmlStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAccessBackMessage_args(sendAccessBackMessage_args other) {
      if (other.isSetParnterId()) {
        this.parnterId = other.parnterId;
      }
      if (other.isSetXmlStr()) {
        this.xmlStr = other.xmlStr;
      }
    }

    public sendAccessBackMessage_args deepCopy() {
      return new sendAccessBackMessage_args(this);
    }

    @Override
    public void clear() {
      this.parnterId = null;
      this.xmlStr = null;
    }

    public String getParnterId() {
      return this.parnterId;
    }

    public sendAccessBackMessage_args setParnterId(String parnterId) {
      this.parnterId = parnterId;
      return this;
    }

    public void unsetParnterId() {
      this.parnterId = null;
    }

    /** Returns true if field parnterId is set (has been assigned a value) and false otherwise */
    public boolean isSetParnterId() {
      return this.parnterId != null;
    }

    public void setParnterIdIsSet(boolean value) {
      if (!value) {
        this.parnterId = null;
      }
    }

    public String getXmlStr() {
      return this.xmlStr;
    }

    public sendAccessBackMessage_args setXmlStr(String xmlStr) {
      this.xmlStr = xmlStr;
      return this;
    }

    public void unsetXmlStr() {
      this.xmlStr = null;
    }

    /** Returns true if field xmlStr is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlStr() {
      return this.xmlStr != null;
    }

    public void setXmlStrIsSet(boolean value) {
      if (!value) {
        this.xmlStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARNTER_ID:
        if (value == null) {
          unsetParnterId();
        } else {
          setParnterId((String)value);
        }
        break;

      case XML_STR:
        if (value == null) {
          unsetXmlStr();
        } else {
          setXmlStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARNTER_ID:
        return getParnterId();

      case XML_STR:
        return getXmlStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARNTER_ID:
        return isSetParnterId();
      case XML_STR:
        return isSetXmlStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAccessBackMessage_args)
        return this.equals((sendAccessBackMessage_args)that);
      return false;
    }

    public boolean equals(sendAccessBackMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_parnterId = true && this.isSetParnterId();
      boolean that_present_parnterId = true && that.isSetParnterId();
      if (this_present_parnterId || that_present_parnterId) {
        if (!(this_present_parnterId && that_present_parnterId))
          return false;
        if (!this.parnterId.equals(that.parnterId))
          return false;
      }

      boolean this_present_xmlStr = true && this.isSetXmlStr();
      boolean that_present_xmlStr = true && that.isSetXmlStr();
      if (this_present_xmlStr || that_present_xmlStr) {
        if (!(this_present_xmlStr && that_present_xmlStr))
          return false;
        if (!this.xmlStr.equals(that.xmlStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendAccessBackMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParnterId()).compareTo(other.isSetParnterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParnterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parnterId, other.parnterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetXmlStr()).compareTo(other.isSetXmlStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlStr, other.xmlStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAccessBackMessage_args(");
      boolean first = true;

      sb.append("parnterId:");
      if (this.parnterId == null) {
        sb.append("null");
      } else {
        sb.append(this.parnterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xmlStr:");
      if (this.xmlStr == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAccessBackMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendAccessBackMessage_argsStandardScheme getScheme() {
        return new sendAccessBackMessage_argsStandardScheme();
      }
    }

    private static class sendAccessBackMessage_argsStandardScheme extends StandardScheme<sendAccessBackMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAccessBackMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARNTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parnterId = iprot.readString();
                struct.setParnterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // XML_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlStr = iprot.readString();
                struct.setXmlStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAccessBackMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parnterId != null) {
          oprot.writeFieldBegin(PARNTER_ID_FIELD_DESC);
          oprot.writeString(struct.parnterId);
          oprot.writeFieldEnd();
        }
        if (struct.xmlStr != null) {
          oprot.writeFieldBegin(XML_STR_FIELD_DESC);
          oprot.writeString(struct.xmlStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAccessBackMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendAccessBackMessage_argsTupleScheme getScheme() {
        return new sendAccessBackMessage_argsTupleScheme();
      }
    }

    private static class sendAccessBackMessage_argsTupleScheme extends TupleScheme<sendAccessBackMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAccessBackMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParnterId()) {
          optionals.set(0);
        }
        if (struct.isSetXmlStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParnterId()) {
          oprot.writeString(struct.parnterId);
        }
        if (struct.isSetXmlStr()) {
          oprot.writeString(struct.xmlStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAccessBackMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.parnterId = iprot.readString();
          struct.setParnterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.xmlStr = iprot.readString();
          struct.setXmlStrIsSet(true);
        }
      }
    }

  }

  public static class sendAccessBackMessage_result implements org.apache.thrift.TBase<sendAccessBackMessage_result, sendAccessBackMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendAccessBackMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAccessBackMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAccessBackMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAccessBackMessage_resultTupleSchemeFactory());
    }

    public ResultMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAccessBackMessage_result.class, metaDataMap);
    }

    public sendAccessBackMessage_result() {
    }

    public sendAccessBackMessage_result(
      ResultMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAccessBackMessage_result(sendAccessBackMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultMessage(other.success);
      }
    }

    public sendAccessBackMessage_result deepCopy() {
      return new sendAccessBackMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultMessage getSuccess() {
      return this.success;
    }

    public sendAccessBackMessage_result setSuccess(ResultMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAccessBackMessage_result)
        return this.equals((sendAccessBackMessage_result)that);
      return false;
    }

    public boolean equals(sendAccessBackMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendAccessBackMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAccessBackMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAccessBackMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendAccessBackMessage_resultStandardScheme getScheme() {
        return new sendAccessBackMessage_resultStandardScheme();
      }
    }

    private static class sendAccessBackMessage_resultStandardScheme extends StandardScheme<sendAccessBackMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAccessBackMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAccessBackMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAccessBackMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendAccessBackMessage_resultTupleScheme getScheme() {
        return new sendAccessBackMessage_resultTupleScheme();
      }
    }

    private static class sendAccessBackMessage_resultTupleScheme extends TupleScheme<sendAccessBackMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAccessBackMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAccessBackMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicknumRecord_args implements org.apache.thrift.TBase<getTicknumRecord_args, getTicknumRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicknumRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicknumRecord_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("issue", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicknumRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicknumRecord_argsTupleSchemeFactory());
    }

    public String gameId; // required
    public String issue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameId"),
      ISSUE((short)2, "issue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // ISSUE
            return ISSUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE, new org.apache.thrift.meta_data.FieldMetaData("issue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicknumRecord_args.class, metaDataMap);
    }

    public getTicknumRecord_args() {
    }

    public getTicknumRecord_args(
      String gameId,
      String issue)
    {
      this();
      this.gameId = gameId;
      this.issue = issue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicknumRecord_args(getTicknumRecord_args other) {
      if (other.isSetGameId()) {
        this.gameId = other.gameId;
      }
      if (other.isSetIssue()) {
        this.issue = other.issue;
      }
    }

    public getTicknumRecord_args deepCopy() {
      return new getTicknumRecord_args(this);
    }

    @Override
    public void clear() {
      this.gameId = null;
      this.issue = null;
    }

    public String getGameId() {
      return this.gameId;
    }

    public getTicknumRecord_args setGameId(String gameId) {
      this.gameId = gameId;
      return this;
    }

    public void unsetGameId() {
      this.gameId = null;
    }

    /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
    public boolean isSetGameId() {
      return this.gameId != null;
    }

    public void setGameIdIsSet(boolean value) {
      if (!value) {
        this.gameId = null;
      }
    }

    public String getIssue() {
      return this.issue;
    }

    public getTicknumRecord_args setIssue(String issue) {
      this.issue = issue;
      return this;
    }

    public void unsetIssue() {
      this.issue = null;
    }

    /** Returns true if field issue is set (has been assigned a value) and false otherwise */
    public boolean isSetIssue() {
      return this.issue != null;
    }

    public void setIssueIsSet(boolean value) {
      if (!value) {
        this.issue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameId();
        } else {
          setGameId((String)value);
        }
        break;

      case ISSUE:
        if (value == null) {
          unsetIssue();
        } else {
          setIssue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameId();

      case ISSUE:
        return getIssue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameId();
      case ISSUE:
        return isSetIssue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicknumRecord_args)
        return this.equals((getTicknumRecord_args)that);
      return false;
    }

    public boolean equals(getTicknumRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_gameId = true && this.isSetGameId();
      boolean that_present_gameId = true && that.isSetGameId();
      if (this_present_gameId || that_present_gameId) {
        if (!(this_present_gameId && that_present_gameId))
          return false;
        if (!this.gameId.equals(that.gameId))
          return false;
      }

      boolean this_present_issue = true && this.isSetIssue();
      boolean that_present_issue = true && that.isSetIssue();
      if (this_present_issue || that_present_issue) {
        if (!(this_present_issue && that_present_issue))
          return false;
        if (!this.issue.equals(that.issue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTicknumRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssue()).compareTo(other.isSetIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issue, other.issue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicknumRecord_args(");
      boolean first = true;

      sb.append("gameId:");
      if (this.gameId == null) {
        sb.append("null");
      } else {
        sb.append(this.gameId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issue:");
      if (this.issue == null) {
        sb.append("null");
      } else {
        sb.append(this.issue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicknumRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getTicknumRecord_argsStandardScheme getScheme() {
        return new getTicknumRecord_argsStandardScheme();
      }
    }

    private static class getTicknumRecord_argsStandardScheme extends StandardScheme<getTicknumRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicknumRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameId = iprot.readString();
                struct.setGameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issue = iprot.readString();
                struct.setIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicknumRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameId != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameId);
          oprot.writeFieldEnd();
        }
        if (struct.issue != null) {
          oprot.writeFieldBegin(ISSUE_FIELD_DESC);
          oprot.writeString(struct.issue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicknumRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getTicknumRecord_argsTupleScheme getScheme() {
        return new getTicknumRecord_argsTupleScheme();
      }
    }

    private static class getTicknumRecord_argsTupleScheme extends TupleScheme<getTicknumRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicknumRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameId()) {
          optionals.set(0);
        }
        if (struct.isSetIssue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGameId()) {
          oprot.writeString(struct.gameId);
        }
        if (struct.isSetIssue()) {
          oprot.writeString(struct.issue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicknumRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.gameId = iprot.readString();
          struct.setGameIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issue = iprot.readString();
          struct.setIssueIsSet(true);
        }
      }
    }

  }

  public static class getTicknumRecord_result implements org.apache.thrift.TBase<getTicknumRecord_result, getTicknumRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicknumRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicknumRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicknumRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicknumRecord_resultTupleSchemeFactory());
    }

    public TicknumRecord success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TicknumRecord.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicknumRecord_result.class, metaDataMap);
    }

    public getTicknumRecord_result() {
    }

    public getTicknumRecord_result(
      TicknumRecord success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicknumRecord_result(getTicknumRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new TicknumRecord(other.success);
      }
    }

    public getTicknumRecord_result deepCopy() {
      return new getTicknumRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TicknumRecord getSuccess() {
      return this.success;
    }

    public getTicknumRecord_result setSuccess(TicknumRecord success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TicknumRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicknumRecord_result)
        return this.equals((getTicknumRecord_result)that);
      return false;
    }

    public boolean equals(getTicknumRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTicknumRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicknumRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicknumRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getTicknumRecord_resultStandardScheme getScheme() {
        return new getTicknumRecord_resultStandardScheme();
      }
    }

    private static class getTicknumRecord_resultStandardScheme extends StandardScheme<getTicknumRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicknumRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TicknumRecord();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicknumRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicknumRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getTicknumRecord_resultTupleScheme getScheme() {
        return new getTicknumRecord_resultTupleScheme();
      }
    }

    private static class getTicknumRecord_resultTupleScheme extends TupleScheme<getTicknumRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicknumRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicknumRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TicknumRecord();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
