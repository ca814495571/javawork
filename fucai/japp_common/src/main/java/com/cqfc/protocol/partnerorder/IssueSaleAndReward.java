/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IssueSaleAndReward implements org.apache.thrift.TBase<IssueSaleAndReward, IssueSaleAndReward._Fields>, java.io.Serializable, Cloneable, Comparable<IssueSaleAndReward> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IssueSaleAndReward");

  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sucNum", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SUC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sucMoney", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FAIL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("failNum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FAIL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("failMoney", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SMALL_PRIZE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("smallPrizeNum", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SMALL_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("smallPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField BIG_PRIZE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bigPrizeNum", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField BIG_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("bigPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IssueSaleAndRewardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IssueSaleAndRewardTupleSchemeFactory());
  }

  public String issueNo; // required
  public String lotteryId; // required
  public String partnerId; // required
  public int orderType; // required
  public long sucNum; // required
  public long sucMoney; // required
  public long failNum; // required
  public long failMoney; // required
  public long smallPrizeNum; // required
  public long smallPrizeMoney; // required
  public long bigPrizeNum; // required
  public long bigPrizeMoney; // required
  public String createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ISSUE_NO((short)1, "issueNo"),
    LOTTERY_ID((short)2, "lotteryId"),
    PARTNER_ID((short)3, "partnerId"),
    ORDER_TYPE((short)4, "orderType"),
    SUC_NUM((short)5, "sucNum"),
    SUC_MONEY((short)6, "sucMoney"),
    FAIL_NUM((short)7, "failNum"),
    FAIL_MONEY((short)8, "failMoney"),
    SMALL_PRIZE_NUM((short)9, "smallPrizeNum"),
    SMALL_PRIZE_MONEY((short)10, "smallPrizeMoney"),
    BIG_PRIZE_NUM((short)11, "bigPrizeNum"),
    BIG_PRIZE_MONEY((short)12, "bigPrizeMoney"),
    CREATE_TIME((short)13, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ISSUE_NO
          return ISSUE_NO;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // PARTNER_ID
          return PARTNER_ID;
        case 4: // ORDER_TYPE
          return ORDER_TYPE;
        case 5: // SUC_NUM
          return SUC_NUM;
        case 6: // SUC_MONEY
          return SUC_MONEY;
        case 7: // FAIL_NUM
          return FAIL_NUM;
        case 8: // FAIL_MONEY
          return FAIL_MONEY;
        case 9: // SMALL_PRIZE_NUM
          return SMALL_PRIZE_NUM;
        case 10: // SMALL_PRIZE_MONEY
          return SMALL_PRIZE_MONEY;
        case 11: // BIG_PRIZE_NUM
          return BIG_PRIZE_NUM;
        case 12: // BIG_PRIZE_MONEY
          return BIG_PRIZE_MONEY;
        case 13: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERTYPE_ISSET_ID = 0;
  private static final int __SUCNUM_ISSET_ID = 1;
  private static final int __SUCMONEY_ISSET_ID = 2;
  private static final int __FAILNUM_ISSET_ID = 3;
  private static final int __FAILMONEY_ISSET_ID = 4;
  private static final int __SMALLPRIZENUM_ISSET_ID = 5;
  private static final int __SMALLPRIZEMONEY_ISSET_ID = 6;
  private static final int __BIGPRIZENUM_ISSET_ID = 7;
  private static final int __BIGPRIZEMONEY_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUC_NUM, new org.apache.thrift.meta_data.FieldMetaData("sucNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("sucMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAIL_NUM, new org.apache.thrift.meta_data.FieldMetaData("failNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAIL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("failMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SMALL_PRIZE_NUM, new org.apache.thrift.meta_data.FieldMetaData("smallPrizeNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SMALL_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("smallPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_PRIZE_NUM, new org.apache.thrift.meta_data.FieldMetaData("bigPrizeNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIG_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("bigPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IssueSaleAndReward.class, metaDataMap);
  }

  public IssueSaleAndReward() {
  }

  public IssueSaleAndReward(
    String issueNo,
    String lotteryId,
    String partnerId,
    int orderType,
    long sucNum,
    long sucMoney,
    long failNum,
    long failMoney,
    long smallPrizeNum,
    long smallPrizeMoney,
    long bigPrizeNum,
    long bigPrizeMoney,
    String createTime)
  {
    this();
    this.issueNo = issueNo;
    this.lotteryId = lotteryId;
    this.partnerId = partnerId;
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    this.sucNum = sucNum;
    setSucNumIsSet(true);
    this.sucMoney = sucMoney;
    setSucMoneyIsSet(true);
    this.failNum = failNum;
    setFailNumIsSet(true);
    this.failMoney = failMoney;
    setFailMoneyIsSet(true);
    this.smallPrizeNum = smallPrizeNum;
    setSmallPrizeNumIsSet(true);
    this.smallPrizeMoney = smallPrizeMoney;
    setSmallPrizeMoneyIsSet(true);
    this.bigPrizeNum = bigPrizeNum;
    setBigPrizeNumIsSet(true);
    this.bigPrizeMoney = bigPrizeMoney;
    setBigPrizeMoneyIsSet(true);
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IssueSaleAndReward(IssueSaleAndReward other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.orderType = other.orderType;
    this.sucNum = other.sucNum;
    this.sucMoney = other.sucMoney;
    this.failNum = other.failNum;
    this.failMoney = other.failMoney;
    this.smallPrizeNum = other.smallPrizeNum;
    this.smallPrizeMoney = other.smallPrizeMoney;
    this.bigPrizeNum = other.bigPrizeNum;
    this.bigPrizeMoney = other.bigPrizeMoney;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public IssueSaleAndReward deepCopy() {
    return new IssueSaleAndReward(this);
  }

  @Override
  public void clear() {
    this.issueNo = null;
    this.lotteryId = null;
    this.partnerId = null;
    setOrderTypeIsSet(false);
    this.orderType = 0;
    setSucNumIsSet(false);
    this.sucNum = 0;
    setSucMoneyIsSet(false);
    this.sucMoney = 0;
    setFailNumIsSet(false);
    this.failNum = 0;
    setFailMoneyIsSet(false);
    this.failMoney = 0;
    setSmallPrizeNumIsSet(false);
    this.smallPrizeNum = 0;
    setSmallPrizeMoneyIsSet(false);
    this.smallPrizeMoney = 0;
    setBigPrizeNumIsSet(false);
    this.bigPrizeNum = 0;
    setBigPrizeMoneyIsSet(false);
    this.bigPrizeMoney = 0;
    this.createTime = null;
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public IssueSaleAndReward setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public IssueSaleAndReward setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public IssueSaleAndReward setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public int getOrderType() {
    return this.orderType;
  }

  public IssueSaleAndReward setOrderType(int orderType) {
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    return this;
  }

  public void unsetOrderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public long getSucNum() {
    return this.sucNum;
  }

  public IssueSaleAndReward setSucNum(long sucNum) {
    this.sucNum = sucNum;
    setSucNumIsSet(true);
    return this;
  }

  public void unsetSucNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCNUM_ISSET_ID);
  }

  /** Returns true if field sucNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSucNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCNUM_ISSET_ID);
  }

  public void setSucNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCNUM_ISSET_ID, value);
  }

  public long getSucMoney() {
    return this.sucMoney;
  }

  public IssueSaleAndReward setSucMoney(long sucMoney) {
    this.sucMoney = sucMoney;
    setSucMoneyIsSet(true);
    return this;
  }

  public void unsetSucMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCMONEY_ISSET_ID);
  }

  /** Returns true if field sucMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSucMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCMONEY_ISSET_ID);
  }

  public void setSucMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCMONEY_ISSET_ID, value);
  }

  public long getFailNum() {
    return this.failNum;
  }

  public IssueSaleAndReward setFailNum(long failNum) {
    this.failNum = failNum;
    setFailNumIsSet(true);
    return this;
  }

  public void unsetFailNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILNUM_ISSET_ID);
  }

  /** Returns true if field failNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFailNum() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILNUM_ISSET_ID);
  }

  public void setFailNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILNUM_ISSET_ID, value);
  }

  public long getFailMoney() {
    return this.failMoney;
  }

  public IssueSaleAndReward setFailMoney(long failMoney) {
    this.failMoney = failMoney;
    setFailMoneyIsSet(true);
    return this;
  }

  public void unsetFailMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILMONEY_ISSET_ID);
  }

  /** Returns true if field failMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFailMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILMONEY_ISSET_ID);
  }

  public void setFailMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILMONEY_ISSET_ID, value);
  }

  public long getSmallPrizeNum() {
    return this.smallPrizeNum;
  }

  public IssueSaleAndReward setSmallPrizeNum(long smallPrizeNum) {
    this.smallPrizeNum = smallPrizeNum;
    setSmallPrizeNumIsSet(true);
    return this;
  }

  public void unsetSmallPrizeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMALLPRIZENUM_ISSET_ID);
  }

  /** Returns true if field smallPrizeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallPrizeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SMALLPRIZENUM_ISSET_ID);
  }

  public void setSmallPrizeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMALLPRIZENUM_ISSET_ID, value);
  }

  public long getSmallPrizeMoney() {
    return this.smallPrizeMoney;
  }

  public IssueSaleAndReward setSmallPrizeMoney(long smallPrizeMoney) {
    this.smallPrizeMoney = smallPrizeMoney;
    setSmallPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetSmallPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMALLPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field smallPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SMALLPRIZEMONEY_ISSET_ID);
  }

  public void setSmallPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMALLPRIZEMONEY_ISSET_ID, value);
  }

  public long getBigPrizeNum() {
    return this.bigPrizeNum;
  }

  public IssueSaleAndReward setBigPrizeNum(long bigPrizeNum) {
    this.bigPrizeNum = bigPrizeNum;
    setBigPrizeNumIsSet(true);
    return this;
  }

  public void unsetBigPrizeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGPRIZENUM_ISSET_ID);
  }

  /** Returns true if field bigPrizeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBigPrizeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGPRIZENUM_ISSET_ID);
  }

  public void setBigPrizeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGPRIZENUM_ISSET_ID, value);
  }

  public long getBigPrizeMoney() {
    return this.bigPrizeMoney;
  }

  public IssueSaleAndReward setBigPrizeMoney(long bigPrizeMoney) {
    this.bigPrizeMoney = bigPrizeMoney;
    setBigPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetBigPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIGPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field bigPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetBigPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __BIGPRIZEMONEY_ISSET_ID);
  }

  public void setBigPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIGPRIZEMONEY_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public IssueSaleAndReward setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((Integer)value);
      }
      break;

    case SUC_NUM:
      if (value == null) {
        unsetSucNum();
      } else {
        setSucNum((Long)value);
      }
      break;

    case SUC_MONEY:
      if (value == null) {
        unsetSucMoney();
      } else {
        setSucMoney((Long)value);
      }
      break;

    case FAIL_NUM:
      if (value == null) {
        unsetFailNum();
      } else {
        setFailNum((Long)value);
      }
      break;

    case FAIL_MONEY:
      if (value == null) {
        unsetFailMoney();
      } else {
        setFailMoney((Long)value);
      }
      break;

    case SMALL_PRIZE_NUM:
      if (value == null) {
        unsetSmallPrizeNum();
      } else {
        setSmallPrizeNum((Long)value);
      }
      break;

    case SMALL_PRIZE_MONEY:
      if (value == null) {
        unsetSmallPrizeMoney();
      } else {
        setSmallPrizeMoney((Long)value);
      }
      break;

    case BIG_PRIZE_NUM:
      if (value == null) {
        unsetBigPrizeNum();
      } else {
        setBigPrizeNum((Long)value);
      }
      break;

    case BIG_PRIZE_MONEY:
      if (value == null) {
        unsetBigPrizeMoney();
      } else {
        setBigPrizeMoney((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ISSUE_NO:
      return getIssueNo();

    case LOTTERY_ID:
      return getLotteryId();

    case PARTNER_ID:
      return getPartnerId();

    case ORDER_TYPE:
      return Integer.valueOf(getOrderType());

    case SUC_NUM:
      return Long.valueOf(getSucNum());

    case SUC_MONEY:
      return Long.valueOf(getSucMoney());

    case FAIL_NUM:
      return Long.valueOf(getFailNum());

    case FAIL_MONEY:
      return Long.valueOf(getFailMoney());

    case SMALL_PRIZE_NUM:
      return Long.valueOf(getSmallPrizeNum());

    case SMALL_PRIZE_MONEY:
      return Long.valueOf(getSmallPrizeMoney());

    case BIG_PRIZE_NUM:
      return Long.valueOf(getBigPrizeNum());

    case BIG_PRIZE_MONEY:
      return Long.valueOf(getBigPrizeMoney());

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ISSUE_NO:
      return isSetIssueNo();
    case LOTTERY_ID:
      return isSetLotteryId();
    case PARTNER_ID:
      return isSetPartnerId();
    case ORDER_TYPE:
      return isSetOrderType();
    case SUC_NUM:
      return isSetSucNum();
    case SUC_MONEY:
      return isSetSucMoney();
    case FAIL_NUM:
      return isSetFailNum();
    case FAIL_MONEY:
      return isSetFailMoney();
    case SMALL_PRIZE_NUM:
      return isSetSmallPrizeNum();
    case SMALL_PRIZE_MONEY:
      return isSetSmallPrizeMoney();
    case BIG_PRIZE_NUM:
      return isSetBigPrizeNum();
    case BIG_PRIZE_MONEY:
      return isSetBigPrizeMoney();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IssueSaleAndReward)
      return this.equals((IssueSaleAndReward)that);
    return false;
  }

  public boolean equals(IssueSaleAndReward that) {
    if (that == null)
      return false;

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_orderType = true;
    boolean that_present_orderType = true;
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (this.orderType != that.orderType)
        return false;
    }

    boolean this_present_sucNum = true;
    boolean that_present_sucNum = true;
    if (this_present_sucNum || that_present_sucNum) {
      if (!(this_present_sucNum && that_present_sucNum))
        return false;
      if (this.sucNum != that.sucNum)
        return false;
    }

    boolean this_present_sucMoney = true;
    boolean that_present_sucMoney = true;
    if (this_present_sucMoney || that_present_sucMoney) {
      if (!(this_present_sucMoney && that_present_sucMoney))
        return false;
      if (this.sucMoney != that.sucMoney)
        return false;
    }

    boolean this_present_failNum = true;
    boolean that_present_failNum = true;
    if (this_present_failNum || that_present_failNum) {
      if (!(this_present_failNum && that_present_failNum))
        return false;
      if (this.failNum != that.failNum)
        return false;
    }

    boolean this_present_failMoney = true;
    boolean that_present_failMoney = true;
    if (this_present_failMoney || that_present_failMoney) {
      if (!(this_present_failMoney && that_present_failMoney))
        return false;
      if (this.failMoney != that.failMoney)
        return false;
    }

    boolean this_present_smallPrizeNum = true;
    boolean that_present_smallPrizeNum = true;
    if (this_present_smallPrizeNum || that_present_smallPrizeNum) {
      if (!(this_present_smallPrizeNum && that_present_smallPrizeNum))
        return false;
      if (this.smallPrizeNum != that.smallPrizeNum)
        return false;
    }

    boolean this_present_smallPrizeMoney = true;
    boolean that_present_smallPrizeMoney = true;
    if (this_present_smallPrizeMoney || that_present_smallPrizeMoney) {
      if (!(this_present_smallPrizeMoney && that_present_smallPrizeMoney))
        return false;
      if (this.smallPrizeMoney != that.smallPrizeMoney)
        return false;
    }

    boolean this_present_bigPrizeNum = true;
    boolean that_present_bigPrizeNum = true;
    if (this_present_bigPrizeNum || that_present_bigPrizeNum) {
      if (!(this_present_bigPrizeNum && that_present_bigPrizeNum))
        return false;
      if (this.bigPrizeNum != that.bigPrizeNum)
        return false;
    }

    boolean this_present_bigPrizeMoney = true;
    boolean that_present_bigPrizeMoney = true;
    if (this_present_bigPrizeMoney || that_present_bigPrizeMoney) {
      if (!(this_present_bigPrizeMoney && that_present_bigPrizeMoney))
        return false;
      if (this.bigPrizeMoney != that.bigPrizeMoney)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(IssueSaleAndReward other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSucNum()).compareTo(other.isSetSucNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sucNum, other.sucNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSucMoney()).compareTo(other.isSetSucMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sucMoney, other.sucMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailNum()).compareTo(other.isSetFailNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failNum, other.failNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailMoney()).compareTo(other.isSetFailMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failMoney, other.failMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallPrizeNum()).compareTo(other.isSetSmallPrizeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallPrizeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallPrizeNum, other.smallPrizeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallPrizeMoney()).compareTo(other.isSetSmallPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallPrizeMoney, other.smallPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigPrizeNum()).compareTo(other.isSetBigPrizeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigPrizeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigPrizeNum, other.bigPrizeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigPrizeMoney()).compareTo(other.isSetBigPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigPrizeMoney, other.bigPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IssueSaleAndReward(");
    boolean first = true;

    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    sb.append(this.orderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sucNum:");
    sb.append(this.sucNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sucMoney:");
    sb.append(this.sucMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failNum:");
    sb.append(this.failNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failMoney:");
    sb.append(this.failMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("smallPrizeNum:");
    sb.append(this.smallPrizeNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("smallPrizeMoney:");
    sb.append(this.smallPrizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigPrizeNum:");
    sb.append(this.bigPrizeNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigPrizeMoney:");
    sb.append(this.bigPrizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IssueSaleAndRewardStandardSchemeFactory implements SchemeFactory {
    public IssueSaleAndRewardStandardScheme getScheme() {
      return new IssueSaleAndRewardStandardScheme();
    }
  }

  private static class IssueSaleAndRewardStandardScheme extends StandardScheme<IssueSaleAndReward> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IssueSaleAndReward struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = iprot.readI32();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sucNum = iprot.readI64();
              struct.setSucNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sucMoney = iprot.readI64();
              struct.setSucMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FAIL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failNum = iprot.readI64();
              struct.setFailNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FAIL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failMoney = iprot.readI64();
              struct.setFailMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SMALL_PRIZE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.smallPrizeNum = iprot.readI64();
              struct.setSmallPrizeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SMALL_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.smallPrizeMoney = iprot.readI64();
              struct.setSmallPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BIG_PRIZE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bigPrizeNum = iprot.readI64();
              struct.setBigPrizeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BIG_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bigPrizeMoney = iprot.readI64();
              struct.setBigPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IssueSaleAndReward struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.orderType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUC_NUM_FIELD_DESC);
      oprot.writeI64(struct.sucNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUC_MONEY_FIELD_DESC);
      oprot.writeI64(struct.sucMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_NUM_FIELD_DESC);
      oprot.writeI64(struct.failNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.failMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SMALL_PRIZE_NUM_FIELD_DESC);
      oprot.writeI64(struct.smallPrizeNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SMALL_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.smallPrizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIG_PRIZE_NUM_FIELD_DESC);
      oprot.writeI64(struct.bigPrizeNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIG_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.bigPrizeMoney);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IssueSaleAndRewardTupleSchemeFactory implements SchemeFactory {
    public IssueSaleAndRewardTupleScheme getScheme() {
      return new IssueSaleAndRewardTupleScheme();
    }
  }

  private static class IssueSaleAndRewardTupleScheme extends TupleScheme<IssueSaleAndReward> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IssueSaleAndReward struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIssueNo()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(2);
      }
      if (struct.isSetOrderType()) {
        optionals.set(3);
      }
      if (struct.isSetSucNum()) {
        optionals.set(4);
      }
      if (struct.isSetSucMoney()) {
        optionals.set(5);
      }
      if (struct.isSetFailNum()) {
        optionals.set(6);
      }
      if (struct.isSetFailMoney()) {
        optionals.set(7);
      }
      if (struct.isSetSmallPrizeNum()) {
        optionals.set(8);
      }
      if (struct.isSetSmallPrizeMoney()) {
        optionals.set(9);
      }
      if (struct.isSetBigPrizeNum()) {
        optionals.set(10);
      }
      if (struct.isSetBigPrizeMoney()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType);
      }
      if (struct.isSetSucNum()) {
        oprot.writeI64(struct.sucNum);
      }
      if (struct.isSetSucMoney()) {
        oprot.writeI64(struct.sucMoney);
      }
      if (struct.isSetFailNum()) {
        oprot.writeI64(struct.failNum);
      }
      if (struct.isSetFailMoney()) {
        oprot.writeI64(struct.failMoney);
      }
      if (struct.isSetSmallPrizeNum()) {
        oprot.writeI64(struct.smallPrizeNum);
      }
      if (struct.isSetSmallPrizeMoney()) {
        oprot.writeI64(struct.smallPrizeMoney);
      }
      if (struct.isSetBigPrizeNum()) {
        oprot.writeI64(struct.bigPrizeNum);
      }
      if (struct.isSetBigPrizeMoney()) {
        oprot.writeI64(struct.bigPrizeMoney);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IssueSaleAndReward struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderType = iprot.readI32();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sucNum = iprot.readI64();
        struct.setSucNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sucMoney = iprot.readI64();
        struct.setSucMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.failNum = iprot.readI64();
        struct.setFailNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.failMoney = iprot.readI64();
        struct.setFailMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.smallPrizeNum = iprot.readI64();
        struct.setSmallPrizeNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.smallPrizeMoney = iprot.readI64();
        struct.setSmallPrizeMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bigPrizeNum = iprot.readI64();
        struct.setBigPrizeNumIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bigPrizeMoney = iprot.readI64();
        struct.setBigPrizeMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

