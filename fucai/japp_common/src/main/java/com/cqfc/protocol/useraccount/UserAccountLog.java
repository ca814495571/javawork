/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.useraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserAccountLog implements org.apache.thrift.TBase<UserAccountLog, UserAccountLog._Fields>, java.io.Serializable, Cloneable, Comparable<UserAccountLog> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserAccountLog");

  private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("logType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("accountAmount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField HANDSEL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("handselAmount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HANDSEL_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("handselRemark", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SEARCH_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchBeginTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SEARCH_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchEndTime", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserAccountLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserAccountLogTupleSchemeFactory());
  }

  public long logId; // required
  public long userId; // required
  public String nickName; // required
  public String partnerId; // required
  public int logType; // required
  public long totalAmount; // required
  public long accountAmount; // required
  public long handselAmount; // required
  public String serialNumber; // required
  public String ext; // required
  public String remark; // required
  public String handselRemark; // required
  public String createTime; // required
  public String searchBeginTime; // required
  public String searchEndTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_ID((short)1, "logId"),
    USER_ID((short)2, "userId"),
    NICK_NAME((short)3, "nickName"),
    PARTNER_ID((short)4, "partnerId"),
    LOG_TYPE((short)5, "logType"),
    TOTAL_AMOUNT((short)6, "totalAmount"),
    ACCOUNT_AMOUNT((short)7, "accountAmount"),
    HANDSEL_AMOUNT((short)8, "handselAmount"),
    SERIAL_NUMBER((short)9, "serialNumber"),
    EXT((short)10, "ext"),
    REMARK((short)11, "remark"),
    HANDSEL_REMARK((short)12, "handselRemark"),
    CREATE_TIME((short)13, "createTime"),
    SEARCH_BEGIN_TIME((short)14, "searchBeginTime"),
    SEARCH_END_TIME((short)15, "searchEndTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_ID
          return LOG_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // NICK_NAME
          return NICK_NAME;
        case 4: // PARTNER_ID
          return PARTNER_ID;
        case 5: // LOG_TYPE
          return LOG_TYPE;
        case 6: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 7: // ACCOUNT_AMOUNT
          return ACCOUNT_AMOUNT;
        case 8: // HANDSEL_AMOUNT
          return HANDSEL_AMOUNT;
        case 9: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 10: // EXT
          return EXT;
        case 11: // REMARK
          return REMARK;
        case 12: // HANDSEL_REMARK
          return HANDSEL_REMARK;
        case 13: // CREATE_TIME
          return CREATE_TIME;
        case 14: // SEARCH_BEGIN_TIME
          return SEARCH_BEGIN_TIME;
        case 15: // SEARCH_END_TIME
          return SEARCH_END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOGID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __LOGTYPE_ISSET_ID = 2;
  private static final int __TOTALAMOUNT_ISSET_ID = 3;
  private static final int __ACCOUNTAMOUNT_ISSET_ID = 4;
  private static final int __HANDSELAMOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_ID, new org.apache.thrift.meta_data.FieldMetaData("logId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("logType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCOUNT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("accountAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HANDSEL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("handselAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDSEL_REMARK, new org.apache.thrift.meta_data.FieldMetaData("handselRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("searchBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("searchEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAccountLog.class, metaDataMap);
  }

  public UserAccountLog() {
  }

  public UserAccountLog(
    long logId,
    long userId,
    String nickName,
    String partnerId,
    int logType,
    long totalAmount,
    long accountAmount,
    long handselAmount,
    String serialNumber,
    String ext,
    String remark,
    String handselRemark,
    String createTime,
    String searchBeginTime,
    String searchEndTime)
  {
    this();
    this.logId = logId;
    setLogIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.nickName = nickName;
    this.partnerId = partnerId;
    this.logType = logType;
    setLogTypeIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.accountAmount = accountAmount;
    setAccountAmountIsSet(true);
    this.handselAmount = handselAmount;
    setHandselAmountIsSet(true);
    this.serialNumber = serialNumber;
    this.ext = ext;
    this.remark = remark;
    this.handselRemark = handselRemark;
    this.createTime = createTime;
    this.searchBeginTime = searchBeginTime;
    this.searchEndTime = searchEndTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserAccountLog(UserAccountLog other) {
    __isset_bitfield = other.__isset_bitfield;
    this.logId = other.logId;
    this.userId = other.userId;
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.logType = other.logType;
    this.totalAmount = other.totalAmount;
    this.accountAmount = other.accountAmount;
    this.handselAmount = other.handselAmount;
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetHandselRemark()) {
      this.handselRemark = other.handselRemark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetSearchBeginTime()) {
      this.searchBeginTime = other.searchBeginTime;
    }
    if (other.isSetSearchEndTime()) {
      this.searchEndTime = other.searchEndTime;
    }
  }

  public UserAccountLog deepCopy() {
    return new UserAccountLog(this);
  }

  @Override
  public void clear() {
    setLogIdIsSet(false);
    this.logId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.nickName = null;
    this.partnerId = null;
    setLogTypeIsSet(false);
    this.logType = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setAccountAmountIsSet(false);
    this.accountAmount = 0;
    setHandselAmountIsSet(false);
    this.handselAmount = 0;
    this.serialNumber = null;
    this.ext = null;
    this.remark = null;
    this.handselRemark = null;
    this.createTime = null;
    this.searchBeginTime = null;
    this.searchEndTime = null;
  }

  public long getLogId() {
    return this.logId;
  }

  public UserAccountLog setLogId(long logId) {
    this.logId = logId;
    setLogIdIsSet(true);
    return this;
  }

  public void unsetLogId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGID_ISSET_ID);
  }

  /** Returns true if field logId is set (has been assigned a value) and false otherwise */
  public boolean isSetLogId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGID_ISSET_ID);
  }

  public void setLogIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public UserAccountLog setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getNickName() {
    return this.nickName;
  }

  public UserAccountLog setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public UserAccountLog setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public int getLogType() {
    return this.logType;
  }

  public UserAccountLog setLogType(int logType) {
    this.logType = logType;
    setLogTypeIsSet(true);
    return this;
  }

  public void unsetLogType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGTYPE_ISSET_ID);
  }

  /** Returns true if field logType is set (has been assigned a value) and false otherwise */
  public boolean isSetLogType() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGTYPE_ISSET_ID);
  }

  public void setLogTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGTYPE_ISSET_ID, value);
  }

  public long getTotalAmount() {
    return this.totalAmount;
  }

  public UserAccountLog setTotalAmount(long totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public long getAccountAmount() {
    return this.accountAmount;
  }

  public UserAccountLog setAccountAmount(long accountAmount) {
    this.accountAmount = accountAmount;
    setAccountAmountIsSet(true);
    return this;
  }

  public void unsetAccountAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTAMOUNT_ISSET_ID);
  }

  /** Returns true if field accountAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTAMOUNT_ISSET_ID);
  }

  public void setAccountAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTAMOUNT_ISSET_ID, value);
  }

  public long getHandselAmount() {
    return this.handselAmount;
  }

  public UserAccountLog setHandselAmount(long handselAmount) {
    this.handselAmount = handselAmount;
    setHandselAmountIsSet(true);
    return this;
  }

  public void unsetHandselAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDSELAMOUNT_ISSET_ID);
  }

  /** Returns true if field handselAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetHandselAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDSELAMOUNT_ISSET_ID);
  }

  public void setHandselAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDSELAMOUNT_ISSET_ID, value);
  }

  public String getSerialNumber() {
    return this.serialNumber;
  }

  public UserAccountLog setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public String getExt() {
    return this.ext;
  }

  public UserAccountLog setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public UserAccountLog setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getHandselRemark() {
    return this.handselRemark;
  }

  public UserAccountLog setHandselRemark(String handselRemark) {
    this.handselRemark = handselRemark;
    return this;
  }

  public void unsetHandselRemark() {
    this.handselRemark = null;
  }

  /** Returns true if field handselRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetHandselRemark() {
    return this.handselRemark != null;
  }

  public void setHandselRemarkIsSet(boolean value) {
    if (!value) {
      this.handselRemark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public UserAccountLog setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getSearchBeginTime() {
    return this.searchBeginTime;
  }

  public UserAccountLog setSearchBeginTime(String searchBeginTime) {
    this.searchBeginTime = searchBeginTime;
    return this;
  }

  public void unsetSearchBeginTime() {
    this.searchBeginTime = null;
  }

  /** Returns true if field searchBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchBeginTime() {
    return this.searchBeginTime != null;
  }

  public void setSearchBeginTimeIsSet(boolean value) {
    if (!value) {
      this.searchBeginTime = null;
    }
  }

  public String getSearchEndTime() {
    return this.searchEndTime;
  }

  public UserAccountLog setSearchEndTime(String searchEndTime) {
    this.searchEndTime = searchEndTime;
    return this;
  }

  public void unsetSearchEndTime() {
    this.searchEndTime = null;
  }

  /** Returns true if field searchEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchEndTime() {
    return this.searchEndTime != null;
  }

  public void setSearchEndTimeIsSet(boolean value) {
    if (!value) {
      this.searchEndTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOG_ID:
      if (value == null) {
        unsetLogId();
      } else {
        setLogId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case LOG_TYPE:
      if (value == null) {
        unsetLogType();
      } else {
        setLogType((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Long)value);
      }
      break;

    case ACCOUNT_AMOUNT:
      if (value == null) {
        unsetAccountAmount();
      } else {
        setAccountAmount((Long)value);
      }
      break;

    case HANDSEL_AMOUNT:
      if (value == null) {
        unsetHandselAmount();
      } else {
        setHandselAmount((Long)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case HANDSEL_REMARK:
      if (value == null) {
        unsetHandselRemark();
      } else {
        setHandselRemark((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case SEARCH_BEGIN_TIME:
      if (value == null) {
        unsetSearchBeginTime();
      } else {
        setSearchBeginTime((String)value);
      }
      break;

    case SEARCH_END_TIME:
      if (value == null) {
        unsetSearchEndTime();
      } else {
        setSearchEndTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_ID:
      return Long.valueOf(getLogId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case NICK_NAME:
      return getNickName();

    case PARTNER_ID:
      return getPartnerId();

    case LOG_TYPE:
      return Integer.valueOf(getLogType());

    case TOTAL_AMOUNT:
      return Long.valueOf(getTotalAmount());

    case ACCOUNT_AMOUNT:
      return Long.valueOf(getAccountAmount());

    case HANDSEL_AMOUNT:
      return Long.valueOf(getHandselAmount());

    case SERIAL_NUMBER:
      return getSerialNumber();

    case EXT:
      return getExt();

    case REMARK:
      return getRemark();

    case HANDSEL_REMARK:
      return getHandselRemark();

    case CREATE_TIME:
      return getCreateTime();

    case SEARCH_BEGIN_TIME:
      return getSearchBeginTime();

    case SEARCH_END_TIME:
      return getSearchEndTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOG_ID:
      return isSetLogId();
    case USER_ID:
      return isSetUserId();
    case NICK_NAME:
      return isSetNickName();
    case PARTNER_ID:
      return isSetPartnerId();
    case LOG_TYPE:
      return isSetLogType();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case ACCOUNT_AMOUNT:
      return isSetAccountAmount();
    case HANDSEL_AMOUNT:
      return isSetHandselAmount();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case EXT:
      return isSetExt();
    case REMARK:
      return isSetRemark();
    case HANDSEL_REMARK:
      return isSetHandselRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case SEARCH_BEGIN_TIME:
      return isSetSearchBeginTime();
    case SEARCH_END_TIME:
      return isSetSearchEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserAccountLog)
      return this.equals((UserAccountLog)that);
    return false;
  }

  public boolean equals(UserAccountLog that) {
    if (that == null)
      return false;

    boolean this_present_logId = true;
    boolean that_present_logId = true;
    if (this_present_logId || that_present_logId) {
      if (!(this_present_logId && that_present_logId))
        return false;
      if (this.logId != that.logId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_logType = true;
    boolean that_present_logType = true;
    if (this_present_logType || that_present_logType) {
      if (!(this_present_logType && that_present_logType))
        return false;
      if (this.logType != that.logType)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_accountAmount = true;
    boolean that_present_accountAmount = true;
    if (this_present_accountAmount || that_present_accountAmount) {
      if (!(this_present_accountAmount && that_present_accountAmount))
        return false;
      if (this.accountAmount != that.accountAmount)
        return false;
    }

    boolean this_present_handselAmount = true;
    boolean that_present_handselAmount = true;
    if (this_present_handselAmount || that_present_handselAmount) {
      if (!(this_present_handselAmount && that_present_handselAmount))
        return false;
      if (this.handselAmount != that.handselAmount)
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_handselRemark = true && this.isSetHandselRemark();
    boolean that_present_handselRemark = true && that.isSetHandselRemark();
    if (this_present_handselRemark || that_present_handselRemark) {
      if (!(this_present_handselRemark && that_present_handselRemark))
        return false;
      if (!this.handselRemark.equals(that.handselRemark))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_searchBeginTime = true && this.isSetSearchBeginTime();
    boolean that_present_searchBeginTime = true && that.isSetSearchBeginTime();
    if (this_present_searchBeginTime || that_present_searchBeginTime) {
      if (!(this_present_searchBeginTime && that_present_searchBeginTime))
        return false;
      if (!this.searchBeginTime.equals(that.searchBeginTime))
        return false;
    }

    boolean this_present_searchEndTime = true && this.isSetSearchEndTime();
    boolean that_present_searchEndTime = true && that.isSetSearchEndTime();
    if (this_present_searchEndTime || that_present_searchEndTime) {
      if (!(this_present_searchEndTime && that_present_searchEndTime))
        return false;
      if (!this.searchEndTime.equals(that.searchEndTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserAccountLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLogId()).compareTo(other.isSetLogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logId, other.logId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogType()).compareTo(other.isSetLogType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logType, other.logType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountAmount()).compareTo(other.isSetAccountAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountAmount, other.accountAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandselAmount()).compareTo(other.isSetHandselAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandselAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handselAmount, other.handselAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandselRemark()).compareTo(other.isSetHandselRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandselRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handselRemark, other.handselRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchBeginTime()).compareTo(other.isSetSearchBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchBeginTime, other.searchBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchEndTime()).compareTo(other.isSetSearchEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchEndTime, other.searchEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserAccountLog(");
    boolean first = true;

    sb.append("logId:");
    sb.append(this.logId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logType:");
    sb.append(this.logType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountAmount:");
    sb.append(this.accountAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handselAmount:");
    sb.append(this.handselAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handselRemark:");
    if (this.handselRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.handselRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchBeginTime:");
    if (this.searchBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.searchBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchEndTime:");
    if (this.searchEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.searchEndTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserAccountLogStandardSchemeFactory implements SchemeFactory {
    public UserAccountLogStandardScheme getScheme() {
      return new UserAccountLogStandardScheme();
    }
  }

  private static class UserAccountLogStandardScheme extends StandardScheme<UserAccountLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserAccountLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.logId = iprot.readI64();
              struct.setLogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.logType = iprot.readI32();
              struct.setLogTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalAmount = iprot.readI64();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountAmount = iprot.readI64();
              struct.setAccountAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HANDSEL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.handselAmount = iprot.readI64();
              struct.setHandselAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HANDSEL_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handselRemark = iprot.readString();
              struct.setHandselRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEARCH_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchBeginTime = iprot.readString();
              struct.setSearchBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SEARCH_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.searchEndTime = iprot.readString();
              struct.setSearchEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserAccountLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
      oprot.writeI64(struct.logId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOG_TYPE_FIELD_DESC);
      oprot.writeI32(struct.logType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.accountAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDSEL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.handselAmount);
      oprot.writeFieldEnd();
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.handselRemark != null) {
        oprot.writeFieldBegin(HANDSEL_REMARK_FIELD_DESC);
        oprot.writeString(struct.handselRemark);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.searchBeginTime != null) {
        oprot.writeFieldBegin(SEARCH_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.searchBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.searchEndTime != null) {
        oprot.writeFieldBegin(SEARCH_END_TIME_FIELD_DESC);
        oprot.writeString(struct.searchEndTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserAccountLogTupleSchemeFactory implements SchemeFactory {
    public UserAccountLogTupleScheme getScheme() {
      return new UserAccountLogTupleScheme();
    }
  }

  private static class UserAccountLogTupleScheme extends TupleScheme<UserAccountLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserAccountLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLogId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetNickName()) {
        optionals.set(2);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(3);
      }
      if (struct.isSetLogType()) {
        optionals.set(4);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(5);
      }
      if (struct.isSetAccountAmount()) {
        optionals.set(6);
      }
      if (struct.isSetHandselAmount()) {
        optionals.set(7);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(8);
      }
      if (struct.isSetExt()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetHandselRemark()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(12);
      }
      if (struct.isSetSearchBeginTime()) {
        optionals.set(13);
      }
      if (struct.isSetSearchEndTime()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetLogId()) {
        oprot.writeI64(struct.logId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetLogType()) {
        oprot.writeI32(struct.logType);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI64(struct.totalAmount);
      }
      if (struct.isSetAccountAmount()) {
        oprot.writeI64(struct.accountAmount);
      }
      if (struct.isSetHandselAmount()) {
        oprot.writeI64(struct.handselAmount);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetHandselRemark()) {
        oprot.writeString(struct.handselRemark);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetSearchBeginTime()) {
        oprot.writeString(struct.searchBeginTime);
      }
      if (struct.isSetSearchEndTime()) {
        oprot.writeString(struct.searchEndTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserAccountLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.logId = iprot.readI64();
        struct.setLogIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.logType = iprot.readI32();
        struct.setLogTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalAmount = iprot.readI64();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accountAmount = iprot.readI64();
        struct.setAccountAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.handselAmount = iprot.readI64();
        struct.setHandselAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.handselRemark = iprot.readString();
        struct.setHandselRemarkIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.searchBeginTime = iprot.readString();
        struct.setSearchBeginTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.searchEndTime = iprot.readString();
        struct.setSearchEndTimeIsSet(true);
      }
    }
  }

}

