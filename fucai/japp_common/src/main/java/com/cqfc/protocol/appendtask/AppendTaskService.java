/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.appendtask;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppendTaskService {

  public interface Iface {

    public int addAppendTask(AppendTask appendTask) throws org.apache.thrift.TException;

    public AppendTask findAppendTaskById(String appendTaskId) throws org.apache.thrift.TException;

    public AppendTaskDetail findMinAppendTaskDetail(String partnerId, String partnerTradeId) throws org.apache.thrift.TException;

    public List<AppendTaskDetail> stopAppendTask(String appendTaskId, List<String> issueNoList) throws org.apache.thrift.TException;

    public int getAppendTaskStatus(String appendTaskId) throws org.apache.thrift.TException;

    public int updateAppendAfterOrder(long appendTaskDetailId, String orderNo) throws org.apache.thrift.TException;

    public String getRefundSerialNumberByOrderNo(String orderNo, String userId) throws org.apache.thrift.TException;

    public int cancelAppendTask(String appendTaskId) throws org.apache.thrift.TException;

    public int updateDetailAfterPrint(String orderNo, boolean isPrintSuccess) throws org.apache.thrift.TException;

    public int updateAppendAfterOrderPrize(String orderNo, int prizeLevel, long userId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addAppendTask(AppendTask appendTask, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAppendTaskById(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findMinAppendTaskDetail(String partnerId, String partnerTradeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stopAppendTask(String appendTaskId, List<String> issueNoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAppendTaskStatus(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAppendAfterOrder(long appendTaskDetailId, String orderNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundSerialNumberByOrderNo(String orderNo, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelAppendTask(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateDetailAfterPrint(String orderNo, boolean isPrintSuccess, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAppendAfterOrderPrize(String orderNo, int prizeLevel, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addAppendTask(AppendTask appendTask) throws org.apache.thrift.TException
    {
      send_addAppendTask(appendTask);
      return recv_addAppendTask();
    }

    public void send_addAppendTask(AppendTask appendTask) throws org.apache.thrift.TException
    {
      addAppendTask_args args = new addAppendTask_args();
      args.setAppendTask(appendTask);
      sendBase("addAppendTask", args);
    }

    public int recv_addAppendTask() throws org.apache.thrift.TException
    {
      addAppendTask_result result = new addAppendTask_result();
      receiveBase(result, "addAppendTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAppendTask failed: unknown result");
    }

    public AppendTask findAppendTaskById(String appendTaskId) throws org.apache.thrift.TException
    {
      send_findAppendTaskById(appendTaskId);
      return recv_findAppendTaskById();
    }

    public void send_findAppendTaskById(String appendTaskId) throws org.apache.thrift.TException
    {
      findAppendTaskById_args args = new findAppendTaskById_args();
      args.setAppendTaskId(appendTaskId);
      sendBase("findAppendTaskById", args);
    }

    public AppendTask recv_findAppendTaskById() throws org.apache.thrift.TException
    {
      findAppendTaskById_result result = new findAppendTaskById_result();
      receiveBase(result, "findAppendTaskById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAppendTaskById failed: unknown result");
    }

    public AppendTaskDetail findMinAppendTaskDetail(String partnerId, String partnerTradeId) throws org.apache.thrift.TException
    {
      send_findMinAppendTaskDetail(partnerId, partnerTradeId);
      return recv_findMinAppendTaskDetail();
    }

    public void send_findMinAppendTaskDetail(String partnerId, String partnerTradeId) throws org.apache.thrift.TException
    {
      findMinAppendTaskDetail_args args = new findMinAppendTaskDetail_args();
      args.setPartnerId(partnerId);
      args.setPartnerTradeId(partnerTradeId);
      sendBase("findMinAppendTaskDetail", args);
    }

    public AppendTaskDetail recv_findMinAppendTaskDetail() throws org.apache.thrift.TException
    {
      findMinAppendTaskDetail_result result = new findMinAppendTaskDetail_result();
      receiveBase(result, "findMinAppendTaskDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMinAppendTaskDetail failed: unknown result");
    }

    public List<AppendTaskDetail> stopAppendTask(String appendTaskId, List<String> issueNoList) throws org.apache.thrift.TException
    {
      send_stopAppendTask(appendTaskId, issueNoList);
      return recv_stopAppendTask();
    }

    public void send_stopAppendTask(String appendTaskId, List<String> issueNoList) throws org.apache.thrift.TException
    {
      stopAppendTask_args args = new stopAppendTask_args();
      args.setAppendTaskId(appendTaskId);
      args.setIssueNoList(issueNoList);
      sendBase("stopAppendTask", args);
    }

    public List<AppendTaskDetail> recv_stopAppendTask() throws org.apache.thrift.TException
    {
      stopAppendTask_result result = new stopAppendTask_result();
      receiveBase(result, "stopAppendTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopAppendTask failed: unknown result");
    }

    public int getAppendTaskStatus(String appendTaskId) throws org.apache.thrift.TException
    {
      send_getAppendTaskStatus(appendTaskId);
      return recv_getAppendTaskStatus();
    }

    public void send_getAppendTaskStatus(String appendTaskId) throws org.apache.thrift.TException
    {
      getAppendTaskStatus_args args = new getAppendTaskStatus_args();
      args.setAppendTaskId(appendTaskId);
      sendBase("getAppendTaskStatus", args);
    }

    public int recv_getAppendTaskStatus() throws org.apache.thrift.TException
    {
      getAppendTaskStatus_result result = new getAppendTaskStatus_result();
      receiveBase(result, "getAppendTaskStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAppendTaskStatus failed: unknown result");
    }

    public int updateAppendAfterOrder(long appendTaskDetailId, String orderNo) throws org.apache.thrift.TException
    {
      send_updateAppendAfterOrder(appendTaskDetailId, orderNo);
      return recv_updateAppendAfterOrder();
    }

    public void send_updateAppendAfterOrder(long appendTaskDetailId, String orderNo) throws org.apache.thrift.TException
    {
      updateAppendAfterOrder_args args = new updateAppendAfterOrder_args();
      args.setAppendTaskDetailId(appendTaskDetailId);
      args.setOrderNo(orderNo);
      sendBase("updateAppendAfterOrder", args);
    }

    public int recv_updateAppendAfterOrder() throws org.apache.thrift.TException
    {
      updateAppendAfterOrder_result result = new updateAppendAfterOrder_result();
      receiveBase(result, "updateAppendAfterOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAppendAfterOrder failed: unknown result");
    }

    public String getRefundSerialNumberByOrderNo(String orderNo, String userId) throws org.apache.thrift.TException
    {
      send_getRefundSerialNumberByOrderNo(orderNo, userId);
      return recv_getRefundSerialNumberByOrderNo();
    }

    public void send_getRefundSerialNumberByOrderNo(String orderNo, String userId) throws org.apache.thrift.TException
    {
      getRefundSerialNumberByOrderNo_args args = new getRefundSerialNumberByOrderNo_args();
      args.setOrderNo(orderNo);
      args.setUserId(userId);
      sendBase("getRefundSerialNumberByOrderNo", args);
    }

    public String recv_getRefundSerialNumberByOrderNo() throws org.apache.thrift.TException
    {
      getRefundSerialNumberByOrderNo_result result = new getRefundSerialNumberByOrderNo_result();
      receiveBase(result, "getRefundSerialNumberByOrderNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundSerialNumberByOrderNo failed: unknown result");
    }

    public int cancelAppendTask(String appendTaskId) throws org.apache.thrift.TException
    {
      send_cancelAppendTask(appendTaskId);
      return recv_cancelAppendTask();
    }

    public void send_cancelAppendTask(String appendTaskId) throws org.apache.thrift.TException
    {
      cancelAppendTask_args args = new cancelAppendTask_args();
      args.setAppendTaskId(appendTaskId);
      sendBase("cancelAppendTask", args);
    }

    public int recv_cancelAppendTask() throws org.apache.thrift.TException
    {
      cancelAppendTask_result result = new cancelAppendTask_result();
      receiveBase(result, "cancelAppendTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelAppendTask failed: unknown result");
    }

    public int updateDetailAfterPrint(String orderNo, boolean isPrintSuccess) throws org.apache.thrift.TException
    {
      send_updateDetailAfterPrint(orderNo, isPrintSuccess);
      return recv_updateDetailAfterPrint();
    }

    public void send_updateDetailAfterPrint(String orderNo, boolean isPrintSuccess) throws org.apache.thrift.TException
    {
      updateDetailAfterPrint_args args = new updateDetailAfterPrint_args();
      args.setOrderNo(orderNo);
      args.setIsPrintSuccess(isPrintSuccess);
      sendBase("updateDetailAfterPrint", args);
    }

    public int recv_updateDetailAfterPrint() throws org.apache.thrift.TException
    {
      updateDetailAfterPrint_result result = new updateDetailAfterPrint_result();
      receiveBase(result, "updateDetailAfterPrint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDetailAfterPrint failed: unknown result");
    }

    public int updateAppendAfterOrderPrize(String orderNo, int prizeLevel, long userId) throws org.apache.thrift.TException
    {
      send_updateAppendAfterOrderPrize(orderNo, prizeLevel, userId);
      return recv_updateAppendAfterOrderPrize();
    }

    public void send_updateAppendAfterOrderPrize(String orderNo, int prizeLevel, long userId) throws org.apache.thrift.TException
    {
      updateAppendAfterOrderPrize_args args = new updateAppendAfterOrderPrize_args();
      args.setOrderNo(orderNo);
      args.setPrizeLevel(prizeLevel);
      args.setUserId(userId);
      sendBase("updateAppendAfterOrderPrize", args);
    }

    public int recv_updateAppendAfterOrderPrize() throws org.apache.thrift.TException
    {
      updateAppendAfterOrderPrize_result result = new updateAppendAfterOrderPrize_result();
      receiveBase(result, "updateAppendAfterOrderPrize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAppendAfterOrderPrize failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addAppendTask(AppendTask appendTask, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAppendTask_call method_call = new addAppendTask_call(appendTask, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAppendTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AppendTask appendTask;
      public addAppendTask_call(AppendTask appendTask, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appendTask = appendTask;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAppendTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAppendTask_args args = new addAppendTask_args();
        args.setAppendTask(appendTask);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAppendTask();
      }
    }

    public void findAppendTaskById(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAppendTaskById_call method_call = new findAppendTaskById_call(appendTaskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAppendTaskById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appendTaskId;
      public findAppendTaskById_call(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appendTaskId = appendTaskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAppendTaskById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAppendTaskById_args args = new findAppendTaskById_args();
        args.setAppendTaskId(appendTaskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AppendTask getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAppendTaskById();
      }
    }

    public void findMinAppendTaskDetail(String partnerId, String partnerTradeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMinAppendTaskDetail_call method_call = new findMinAppendTaskDetail_call(partnerId, partnerTradeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMinAppendTaskDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partnerId;
      private String partnerTradeId;
      public findMinAppendTaskDetail_call(String partnerId, String partnerTradeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partnerId = partnerId;
        this.partnerTradeId = partnerTradeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMinAppendTaskDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMinAppendTaskDetail_args args = new findMinAppendTaskDetail_args();
        args.setPartnerId(partnerId);
        args.setPartnerTradeId(partnerTradeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AppendTaskDetail getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMinAppendTaskDetail();
      }
    }

    public void stopAppendTask(String appendTaskId, List<String> issueNoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopAppendTask_call method_call = new stopAppendTask_call(appendTaskId, issueNoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopAppendTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appendTaskId;
      private List<String> issueNoList;
      public stopAppendTask_call(String appendTaskId, List<String> issueNoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appendTaskId = appendTaskId;
        this.issueNoList = issueNoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopAppendTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopAppendTask_args args = new stopAppendTask_args();
        args.setAppendTaskId(appendTaskId);
        args.setIssueNoList(issueNoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AppendTaskDetail> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopAppendTask();
      }
    }

    public void getAppendTaskStatus(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAppendTaskStatus_call method_call = new getAppendTaskStatus_call(appendTaskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAppendTaskStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appendTaskId;
      public getAppendTaskStatus_call(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appendTaskId = appendTaskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAppendTaskStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAppendTaskStatus_args args = new getAppendTaskStatus_args();
        args.setAppendTaskId(appendTaskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAppendTaskStatus();
      }
    }

    public void updateAppendAfterOrder(long appendTaskDetailId, String orderNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAppendAfterOrder_call method_call = new updateAppendAfterOrder_call(appendTaskDetailId, orderNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAppendAfterOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long appendTaskDetailId;
      private String orderNo;
      public updateAppendAfterOrder_call(long appendTaskDetailId, String orderNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appendTaskDetailId = appendTaskDetailId;
        this.orderNo = orderNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppendAfterOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAppendAfterOrder_args args = new updateAppendAfterOrder_args();
        args.setAppendTaskDetailId(appendTaskDetailId);
        args.setOrderNo(orderNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAppendAfterOrder();
      }
    }

    public void getRefundSerialNumberByOrderNo(String orderNo, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundSerialNumberByOrderNo_call method_call = new getRefundSerialNumberByOrderNo_call(orderNo, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundSerialNumberByOrderNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderNo;
      private String userId;
      public getRefundSerialNumberByOrderNo_call(String orderNo, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderNo = orderNo;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundSerialNumberByOrderNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundSerialNumberByOrderNo_args args = new getRefundSerialNumberByOrderNo_args();
        args.setOrderNo(orderNo);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundSerialNumberByOrderNo();
      }
    }

    public void cancelAppendTask(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelAppendTask_call method_call = new cancelAppendTask_call(appendTaskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelAppendTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appendTaskId;
      public cancelAppendTask_call(String appendTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appendTaskId = appendTaskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelAppendTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelAppendTask_args args = new cancelAppendTask_args();
        args.setAppendTaskId(appendTaskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelAppendTask();
      }
    }

    public void updateDetailAfterPrint(String orderNo, boolean isPrintSuccess, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDetailAfterPrint_call method_call = new updateDetailAfterPrint_call(orderNo, isPrintSuccess, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDetailAfterPrint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderNo;
      private boolean isPrintSuccess;
      public updateDetailAfterPrint_call(String orderNo, boolean isPrintSuccess, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderNo = orderNo;
        this.isPrintSuccess = isPrintSuccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDetailAfterPrint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDetailAfterPrint_args args = new updateDetailAfterPrint_args();
        args.setOrderNo(orderNo);
        args.setIsPrintSuccess(isPrintSuccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDetailAfterPrint();
      }
    }

    public void updateAppendAfterOrderPrize(String orderNo, int prizeLevel, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAppendAfterOrderPrize_call method_call = new updateAppendAfterOrderPrize_call(orderNo, prizeLevel, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAppendAfterOrderPrize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderNo;
      private int prizeLevel;
      private long userId;
      public updateAppendAfterOrderPrize_call(String orderNo, int prizeLevel, long userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderNo = orderNo;
        this.prizeLevel = prizeLevel;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppendAfterOrderPrize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAppendAfterOrderPrize_args args = new updateAppendAfterOrderPrize_args();
        args.setOrderNo(orderNo);
        args.setPrizeLevel(prizeLevel);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAppendAfterOrderPrize();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addAppendTask", new addAppendTask());
      processMap.put("findAppendTaskById", new findAppendTaskById());
      processMap.put("findMinAppendTaskDetail", new findMinAppendTaskDetail());
      processMap.put("stopAppendTask", new stopAppendTask());
      processMap.put("getAppendTaskStatus", new getAppendTaskStatus());
      processMap.put("updateAppendAfterOrder", new updateAppendAfterOrder());
      processMap.put("getRefundSerialNumberByOrderNo", new getRefundSerialNumberByOrderNo());
      processMap.put("cancelAppendTask", new cancelAppendTask());
      processMap.put("updateDetailAfterPrint", new updateDetailAfterPrint());
      processMap.put("updateAppendAfterOrderPrize", new updateAppendAfterOrderPrize());
      return processMap;
    }

    public static class addAppendTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAppendTask_args> {
      public addAppendTask() {
        super("addAppendTask");
      }

      public addAppendTask_args getEmptyArgsInstance() {
        return new addAppendTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAppendTask_result getResult(I iface, addAppendTask_args args) throws org.apache.thrift.TException {
        addAppendTask_result result = new addAppendTask_result();
        result.success = iface.addAppendTask(args.appendTask);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findAppendTaskById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAppendTaskById_args> {
      public findAppendTaskById() {
        super("findAppendTaskById");
      }

      public findAppendTaskById_args getEmptyArgsInstance() {
        return new findAppendTaskById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAppendTaskById_result getResult(I iface, findAppendTaskById_args args) throws org.apache.thrift.TException {
        findAppendTaskById_result result = new findAppendTaskById_result();
        result.success = iface.findAppendTaskById(args.appendTaskId);
        return result;
      }
    }

    public static class findMinAppendTaskDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMinAppendTaskDetail_args> {
      public findMinAppendTaskDetail() {
        super("findMinAppendTaskDetail");
      }

      public findMinAppendTaskDetail_args getEmptyArgsInstance() {
        return new findMinAppendTaskDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMinAppendTaskDetail_result getResult(I iface, findMinAppendTaskDetail_args args) throws org.apache.thrift.TException {
        findMinAppendTaskDetail_result result = new findMinAppendTaskDetail_result();
        result.success = iface.findMinAppendTaskDetail(args.partnerId, args.partnerTradeId);
        return result;
      }
    }

    public static class stopAppendTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopAppendTask_args> {
      public stopAppendTask() {
        super("stopAppendTask");
      }

      public stopAppendTask_args getEmptyArgsInstance() {
        return new stopAppendTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stopAppendTask_result getResult(I iface, stopAppendTask_args args) throws org.apache.thrift.TException {
        stopAppendTask_result result = new stopAppendTask_result();
        result.success = iface.stopAppendTask(args.appendTaskId, args.issueNoList);
        return result;
      }
    }

    public static class getAppendTaskStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAppendTaskStatus_args> {
      public getAppendTaskStatus() {
        super("getAppendTaskStatus");
      }

      public getAppendTaskStatus_args getEmptyArgsInstance() {
        return new getAppendTaskStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAppendTaskStatus_result getResult(I iface, getAppendTaskStatus_args args) throws org.apache.thrift.TException {
        getAppendTaskStatus_result result = new getAppendTaskStatus_result();
        result.success = iface.getAppendTaskStatus(args.appendTaskId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateAppendAfterOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAppendAfterOrder_args> {
      public updateAppendAfterOrder() {
        super("updateAppendAfterOrder");
      }

      public updateAppendAfterOrder_args getEmptyArgsInstance() {
        return new updateAppendAfterOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAppendAfterOrder_result getResult(I iface, updateAppendAfterOrder_args args) throws org.apache.thrift.TException {
        updateAppendAfterOrder_result result = new updateAppendAfterOrder_result();
        result.success = iface.updateAppendAfterOrder(args.appendTaskDetailId, args.orderNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRefundSerialNumberByOrderNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundSerialNumberByOrderNo_args> {
      public getRefundSerialNumberByOrderNo() {
        super("getRefundSerialNumberByOrderNo");
      }

      public getRefundSerialNumberByOrderNo_args getEmptyArgsInstance() {
        return new getRefundSerialNumberByOrderNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundSerialNumberByOrderNo_result getResult(I iface, getRefundSerialNumberByOrderNo_args args) throws org.apache.thrift.TException {
        getRefundSerialNumberByOrderNo_result result = new getRefundSerialNumberByOrderNo_result();
        result.success = iface.getRefundSerialNumberByOrderNo(args.orderNo, args.userId);
        return result;
      }
    }

    public static class cancelAppendTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelAppendTask_args> {
      public cancelAppendTask() {
        super("cancelAppendTask");
      }

      public cancelAppendTask_args getEmptyArgsInstance() {
        return new cancelAppendTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelAppendTask_result getResult(I iface, cancelAppendTask_args args) throws org.apache.thrift.TException {
        cancelAppendTask_result result = new cancelAppendTask_result();
        result.success = iface.cancelAppendTask(args.appendTaskId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateDetailAfterPrint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDetailAfterPrint_args> {
      public updateDetailAfterPrint() {
        super("updateDetailAfterPrint");
      }

      public updateDetailAfterPrint_args getEmptyArgsInstance() {
        return new updateDetailAfterPrint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDetailAfterPrint_result getResult(I iface, updateDetailAfterPrint_args args) throws org.apache.thrift.TException {
        updateDetailAfterPrint_result result = new updateDetailAfterPrint_result();
        result.success = iface.updateDetailAfterPrint(args.orderNo, args.isPrintSuccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateAppendAfterOrderPrize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAppendAfterOrderPrize_args> {
      public updateAppendAfterOrderPrize() {
        super("updateAppendAfterOrderPrize");
      }

      public updateAppendAfterOrderPrize_args getEmptyArgsInstance() {
        return new updateAppendAfterOrderPrize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAppendAfterOrderPrize_result getResult(I iface, updateAppendAfterOrderPrize_args args) throws org.apache.thrift.TException {
        updateAppendAfterOrderPrize_result result = new updateAppendAfterOrderPrize_result();
        result.success = iface.updateAppendAfterOrderPrize(args.orderNo, args.prizeLevel, args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addAppendTask", new addAppendTask());
      processMap.put("findAppendTaskById", new findAppendTaskById());
      processMap.put("findMinAppendTaskDetail", new findMinAppendTaskDetail());
      processMap.put("stopAppendTask", new stopAppendTask());
      processMap.put("getAppendTaskStatus", new getAppendTaskStatus());
      processMap.put("updateAppendAfterOrder", new updateAppendAfterOrder());
      processMap.put("getRefundSerialNumberByOrderNo", new getRefundSerialNumberByOrderNo());
      processMap.put("cancelAppendTask", new cancelAppendTask());
      processMap.put("updateDetailAfterPrint", new updateDetailAfterPrint());
      processMap.put("updateAppendAfterOrderPrize", new updateAppendAfterOrderPrize());
      return processMap;
    }

    public static class addAppendTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAppendTask_args, Integer> {
      public addAppendTask() {
        super("addAppendTask");
      }

      public addAppendTask_args getEmptyArgsInstance() {
        return new addAppendTask_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addAppendTask_result result = new addAppendTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addAppendTask_result result = new addAppendTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAppendTask_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addAppendTask(args.appendTask,resultHandler);
      }
    }

    public static class findAppendTaskById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAppendTaskById_args, AppendTask> {
      public findAppendTaskById() {
        super("findAppendTaskById");
      }

      public findAppendTaskById_args getEmptyArgsInstance() {
        return new findAppendTaskById_args();
      }

      public AsyncMethodCallback<AppendTask> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AppendTask>() { 
          public void onComplete(AppendTask o) {
            findAppendTaskById_result result = new findAppendTaskById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAppendTaskById_result result = new findAppendTaskById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAppendTaskById_args args, org.apache.thrift.async.AsyncMethodCallback<AppendTask> resultHandler) throws TException {
        iface.findAppendTaskById(args.appendTaskId,resultHandler);
      }
    }

    public static class findMinAppendTaskDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMinAppendTaskDetail_args, AppendTaskDetail> {
      public findMinAppendTaskDetail() {
        super("findMinAppendTaskDetail");
      }

      public findMinAppendTaskDetail_args getEmptyArgsInstance() {
        return new findMinAppendTaskDetail_args();
      }

      public AsyncMethodCallback<AppendTaskDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AppendTaskDetail>() { 
          public void onComplete(AppendTaskDetail o) {
            findMinAppendTaskDetail_result result = new findMinAppendTaskDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findMinAppendTaskDetail_result result = new findMinAppendTaskDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMinAppendTaskDetail_args args, org.apache.thrift.async.AsyncMethodCallback<AppendTaskDetail> resultHandler) throws TException {
        iface.findMinAppendTaskDetail(args.partnerId, args.partnerTradeId,resultHandler);
      }
    }

    public static class stopAppendTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopAppendTask_args, List<AppendTaskDetail>> {
      public stopAppendTask() {
        super("stopAppendTask");
      }

      public stopAppendTask_args getEmptyArgsInstance() {
        return new stopAppendTask_args();
      }

      public AsyncMethodCallback<List<AppendTaskDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AppendTaskDetail>>() { 
          public void onComplete(List<AppendTaskDetail> o) {
            stopAppendTask_result result = new stopAppendTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stopAppendTask_result result = new stopAppendTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stopAppendTask_args args, org.apache.thrift.async.AsyncMethodCallback<List<AppendTaskDetail>> resultHandler) throws TException {
        iface.stopAppendTask(args.appendTaskId, args.issueNoList,resultHandler);
      }
    }

    public static class getAppendTaskStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAppendTaskStatus_args, Integer> {
      public getAppendTaskStatus() {
        super("getAppendTaskStatus");
      }

      public getAppendTaskStatus_args getEmptyArgsInstance() {
        return new getAppendTaskStatus_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAppendTaskStatus_result result = new getAppendTaskStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAppendTaskStatus_result result = new getAppendTaskStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAppendTaskStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAppendTaskStatus(args.appendTaskId,resultHandler);
      }
    }

    public static class updateAppendAfterOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAppendAfterOrder_args, Integer> {
      public updateAppendAfterOrder() {
        super("updateAppendAfterOrder");
      }

      public updateAppendAfterOrder_args getEmptyArgsInstance() {
        return new updateAppendAfterOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateAppendAfterOrder_result result = new updateAppendAfterOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAppendAfterOrder_result result = new updateAppendAfterOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAppendAfterOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateAppendAfterOrder(args.appendTaskDetailId, args.orderNo,resultHandler);
      }
    }

    public static class getRefundSerialNumberByOrderNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundSerialNumberByOrderNo_args, String> {
      public getRefundSerialNumberByOrderNo() {
        super("getRefundSerialNumberByOrderNo");
      }

      public getRefundSerialNumberByOrderNo_args getEmptyArgsInstance() {
        return new getRefundSerialNumberByOrderNo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getRefundSerialNumberByOrderNo_result result = new getRefundSerialNumberByOrderNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundSerialNumberByOrderNo_result result = new getRefundSerialNumberByOrderNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundSerialNumberByOrderNo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getRefundSerialNumberByOrderNo(args.orderNo, args.userId,resultHandler);
      }
    }

    public static class cancelAppendTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelAppendTask_args, Integer> {
      public cancelAppendTask() {
        super("cancelAppendTask");
      }

      public cancelAppendTask_args getEmptyArgsInstance() {
        return new cancelAppendTask_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            cancelAppendTask_result result = new cancelAppendTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelAppendTask_result result = new cancelAppendTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelAppendTask_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.cancelAppendTask(args.appendTaskId,resultHandler);
      }
    }

    public static class updateDetailAfterPrint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDetailAfterPrint_args, Integer> {
      public updateDetailAfterPrint() {
        super("updateDetailAfterPrint");
      }

      public updateDetailAfterPrint_args getEmptyArgsInstance() {
        return new updateDetailAfterPrint_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateDetailAfterPrint_result result = new updateDetailAfterPrint_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDetailAfterPrint_result result = new updateDetailAfterPrint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDetailAfterPrint_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateDetailAfterPrint(args.orderNo, args.isPrintSuccess,resultHandler);
      }
    }

    public static class updateAppendAfterOrderPrize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAppendAfterOrderPrize_args, Integer> {
      public updateAppendAfterOrderPrize() {
        super("updateAppendAfterOrderPrize");
      }

      public updateAppendAfterOrderPrize_args getEmptyArgsInstance() {
        return new updateAppendAfterOrderPrize_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateAppendAfterOrderPrize_result result = new updateAppendAfterOrderPrize_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAppendAfterOrderPrize_result result = new updateAppendAfterOrderPrize_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAppendAfterOrderPrize_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateAppendAfterOrderPrize(args.orderNo, args.prizeLevel, args.userId,resultHandler);
      }
    }

  }

  public static class addAppendTask_args implements org.apache.thrift.TBase<addAppendTask_args, addAppendTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAppendTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAppendTask_args");

    private static final org.apache.thrift.protocol.TField APPEND_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTask", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAppendTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAppendTask_argsTupleSchemeFactory());
    }

    public AppendTask appendTask; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPEND_TASK((short)1, "appendTask");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPEND_TASK
            return APPEND_TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPEND_TASK, new org.apache.thrift.meta_data.FieldMetaData("appendTask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendTask.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAppendTask_args.class, metaDataMap);
    }

    public addAppendTask_args() {
    }

    public addAppendTask_args(
      AppendTask appendTask)
    {
      this();
      this.appendTask = appendTask;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAppendTask_args(addAppendTask_args other) {
      if (other.isSetAppendTask()) {
        this.appendTask = new AppendTask(other.appendTask);
      }
    }

    public addAppendTask_args deepCopy() {
      return new addAppendTask_args(this);
    }

    @Override
    public void clear() {
      this.appendTask = null;
    }

    public AppendTask getAppendTask() {
      return this.appendTask;
    }

    public addAppendTask_args setAppendTask(AppendTask appendTask) {
      this.appendTask = appendTask;
      return this;
    }

    public void unsetAppendTask() {
      this.appendTask = null;
    }

    /** Returns true if field appendTask is set (has been assigned a value) and false otherwise */
    public boolean isSetAppendTask() {
      return this.appendTask != null;
    }

    public void setAppendTaskIsSet(boolean value) {
      if (!value) {
        this.appendTask = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPEND_TASK:
        if (value == null) {
          unsetAppendTask();
        } else {
          setAppendTask((AppendTask)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPEND_TASK:
        return getAppendTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPEND_TASK:
        return isSetAppendTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAppendTask_args)
        return this.equals((addAppendTask_args)that);
      return false;
    }

    public boolean equals(addAppendTask_args that) {
      if (that == null)
        return false;

      boolean this_present_appendTask = true && this.isSetAppendTask();
      boolean that_present_appendTask = true && that.isSetAppendTask();
      if (this_present_appendTask || that_present_appendTask) {
        if (!(this_present_appendTask && that_present_appendTask))
          return false;
        if (!this.appendTask.equals(that.appendTask))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addAppendTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppendTask()).compareTo(other.isSetAppendTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppendTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTask, other.appendTask);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAppendTask_args(");
      boolean first = true;

      sb.append("appendTask:");
      if (this.appendTask == null) {
        sb.append("null");
      } else {
        sb.append(this.appendTask);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (appendTask != null) {
        appendTask.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAppendTask_argsStandardSchemeFactory implements SchemeFactory {
      public addAppendTask_argsStandardScheme getScheme() {
        return new addAppendTask_argsStandardScheme();
      }
    }

    private static class addAppendTask_argsStandardScheme extends StandardScheme<addAppendTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAppendTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPEND_TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.appendTask = new AppendTask();
                struct.appendTask.read(iprot);
                struct.setAppendTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAppendTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appendTask != null) {
          oprot.writeFieldBegin(APPEND_TASK_FIELD_DESC);
          struct.appendTask.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAppendTask_argsTupleSchemeFactory implements SchemeFactory {
      public addAppendTask_argsTupleScheme getScheme() {
        return new addAppendTask_argsTupleScheme();
      }
    }

    private static class addAppendTask_argsTupleScheme extends TupleScheme<addAppendTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAppendTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppendTask()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppendTask()) {
          struct.appendTask.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAppendTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appendTask = new AppendTask();
          struct.appendTask.read(iprot);
          struct.setAppendTaskIsSet(true);
        }
      }
    }

  }

  public static class addAppendTask_result implements org.apache.thrift.TBase<addAppendTask_result, addAppendTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAppendTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAppendTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAppendTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAppendTask_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAppendTask_result.class, metaDataMap);
    }

    public addAppendTask_result() {
    }

    public addAppendTask_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAppendTask_result(addAppendTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addAppendTask_result deepCopy() {
      return new addAppendTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addAppendTask_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAppendTask_result)
        return this.equals((addAppendTask_result)that);
      return false;
    }

    public boolean equals(addAppendTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addAppendTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAppendTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAppendTask_resultStandardSchemeFactory implements SchemeFactory {
      public addAppendTask_resultStandardScheme getScheme() {
        return new addAppendTask_resultStandardScheme();
      }
    }

    private static class addAppendTask_resultStandardScheme extends StandardScheme<addAppendTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAppendTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAppendTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAppendTask_resultTupleSchemeFactory implements SchemeFactory {
      public addAppendTask_resultTupleScheme getScheme() {
        return new addAppendTask_resultTupleScheme();
      }
    }

    private static class addAppendTask_resultTupleScheme extends TupleScheme<addAppendTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAppendTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAppendTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAppendTaskById_args implements org.apache.thrift.TBase<findAppendTaskById_args, findAppendTaskById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAppendTaskById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppendTaskById_args");

    private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAppendTaskById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAppendTaskById_argsTupleSchemeFactory());
    }

    public String appendTaskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPEND_TASK_ID((short)1, "appendTaskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPEND_TASK_ID
            return APPEND_TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppendTaskById_args.class, metaDataMap);
    }

    public findAppendTaskById_args() {
    }

    public findAppendTaskById_args(
      String appendTaskId)
    {
      this();
      this.appendTaskId = appendTaskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppendTaskById_args(findAppendTaskById_args other) {
      if (other.isSetAppendTaskId()) {
        this.appendTaskId = other.appendTaskId;
      }
    }

    public findAppendTaskById_args deepCopy() {
      return new findAppendTaskById_args(this);
    }

    @Override
    public void clear() {
      this.appendTaskId = null;
    }

    public String getAppendTaskId() {
      return this.appendTaskId;
    }

    public findAppendTaskById_args setAppendTaskId(String appendTaskId) {
      this.appendTaskId = appendTaskId;
      return this;
    }

    public void unsetAppendTaskId() {
      this.appendTaskId = null;
    }

    /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppendTaskId() {
      return this.appendTaskId != null;
    }

    public void setAppendTaskIdIsSet(boolean value) {
      if (!value) {
        this.appendTaskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPEND_TASK_ID:
        if (value == null) {
          unsetAppendTaskId();
        } else {
          setAppendTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPEND_TASK_ID:
        return getAppendTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPEND_TASK_ID:
        return isSetAppendTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppendTaskById_args)
        return this.equals((findAppendTaskById_args)that);
      return false;
    }

    public boolean equals(findAppendTaskById_args that) {
      if (that == null)
        return false;

      boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
      boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
      if (this_present_appendTaskId || that_present_appendTaskId) {
        if (!(this_present_appendTaskId && that_present_appendTaskId))
          return false;
        if (!this.appendTaskId.equals(that.appendTaskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findAppendTaskById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppendTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAppendTaskById_args(");
      boolean first = true;

      sb.append("appendTaskId:");
      if (this.appendTaskId == null) {
        sb.append("null");
      } else {
        sb.append(this.appendTaskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppendTaskById_argsStandardSchemeFactory implements SchemeFactory {
      public findAppendTaskById_argsStandardScheme getScheme() {
        return new findAppendTaskById_argsStandardScheme();
      }
    }

    private static class findAppendTaskById_argsStandardScheme extends StandardScheme<findAppendTaskById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppendTaskById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPEND_TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appendTaskId = iprot.readString();
                struct.setAppendTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppendTaskById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appendTaskId != null) {
          oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
          oprot.writeString(struct.appendTaskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppendTaskById_argsTupleSchemeFactory implements SchemeFactory {
      public findAppendTaskById_argsTupleScheme getScheme() {
        return new findAppendTaskById_argsTupleScheme();
      }
    }

    private static class findAppendTaskById_argsTupleScheme extends TupleScheme<findAppendTaskById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppendTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppendTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppendTaskId()) {
          oprot.writeString(struct.appendTaskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppendTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appendTaskId = iprot.readString();
          struct.setAppendTaskIdIsSet(true);
        }
      }
    }

  }

  public static class findAppendTaskById_result implements org.apache.thrift.TBase<findAppendTaskById_result, findAppendTaskById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAppendTaskById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppendTaskById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAppendTaskById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAppendTaskById_resultTupleSchemeFactory());
    }

    public AppendTask success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendTask.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppendTaskById_result.class, metaDataMap);
    }

    public findAppendTaskById_result() {
    }

    public findAppendTaskById_result(
      AppendTask success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppendTaskById_result(findAppendTaskById_result other) {
      if (other.isSetSuccess()) {
        this.success = new AppendTask(other.success);
      }
    }

    public findAppendTaskById_result deepCopy() {
      return new findAppendTaskById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AppendTask getSuccess() {
      return this.success;
    }

    public findAppendTaskById_result setSuccess(AppendTask success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AppendTask)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppendTaskById_result)
        return this.equals((findAppendTaskById_result)that);
      return false;
    }

    public boolean equals(findAppendTaskById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findAppendTaskById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAppendTaskById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppendTaskById_resultStandardSchemeFactory implements SchemeFactory {
      public findAppendTaskById_resultStandardScheme getScheme() {
        return new findAppendTaskById_resultStandardScheme();
      }
    }

    private static class findAppendTaskById_resultStandardScheme extends StandardScheme<findAppendTaskById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppendTaskById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AppendTask();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppendTaskById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppendTaskById_resultTupleSchemeFactory implements SchemeFactory {
      public findAppendTaskById_resultTupleScheme getScheme() {
        return new findAppendTaskById_resultTupleScheme();
      }
    }

    private static class findAppendTaskById_resultTupleScheme extends TupleScheme<findAppendTaskById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppendTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppendTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AppendTask();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findMinAppendTaskDetail_args implements org.apache.thrift.TBase<findMinAppendTaskDetail_args, findMinAppendTaskDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMinAppendTaskDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMinAppendTaskDetail_args");

    private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARTNER_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerTradeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMinAppendTaskDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMinAppendTaskDetail_argsTupleSchemeFactory());
    }

    public String partnerId; // required
    public String partnerTradeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER_ID((short)1, "partnerId"),
      PARTNER_TRADE_ID((short)2, "partnerTradeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER_ID
            return PARTNER_ID;
          case 2: // PARTNER_TRADE_ID
            return PARTNER_TRADE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTNER_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerTradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMinAppendTaskDetail_args.class, metaDataMap);
    }

    public findMinAppendTaskDetail_args() {
    }

    public findMinAppendTaskDetail_args(
      String partnerId,
      String partnerTradeId)
    {
      this();
      this.partnerId = partnerId;
      this.partnerTradeId = partnerTradeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMinAppendTaskDetail_args(findMinAppendTaskDetail_args other) {
      if (other.isSetPartnerId()) {
        this.partnerId = other.partnerId;
      }
      if (other.isSetPartnerTradeId()) {
        this.partnerTradeId = other.partnerTradeId;
      }
    }

    public findMinAppendTaskDetail_args deepCopy() {
      return new findMinAppendTaskDetail_args(this);
    }

    @Override
    public void clear() {
      this.partnerId = null;
      this.partnerTradeId = null;
    }

    public String getPartnerId() {
      return this.partnerId;
    }

    public findMinAppendTaskDetail_args setPartnerId(String partnerId) {
      this.partnerId = partnerId;
      return this;
    }

    public void unsetPartnerId() {
      this.partnerId = null;
    }

    /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerId() {
      return this.partnerId != null;
    }

    public void setPartnerIdIsSet(boolean value) {
      if (!value) {
        this.partnerId = null;
      }
    }

    public String getPartnerTradeId() {
      return this.partnerTradeId;
    }

    public findMinAppendTaskDetail_args setPartnerTradeId(String partnerTradeId) {
      this.partnerTradeId = partnerTradeId;
      return this;
    }

    public void unsetPartnerTradeId() {
      this.partnerTradeId = null;
    }

    /** Returns true if field partnerTradeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartnerTradeId() {
      return this.partnerTradeId != null;
    }

    public void setPartnerTradeIdIsSet(boolean value) {
      if (!value) {
        this.partnerTradeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER_ID:
        if (value == null) {
          unsetPartnerId();
        } else {
          setPartnerId((String)value);
        }
        break;

      case PARTNER_TRADE_ID:
        if (value == null) {
          unsetPartnerTradeId();
        } else {
          setPartnerTradeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER_ID:
        return getPartnerId();

      case PARTNER_TRADE_ID:
        return getPartnerTradeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER_ID:
        return isSetPartnerId();
      case PARTNER_TRADE_ID:
        return isSetPartnerTradeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMinAppendTaskDetail_args)
        return this.equals((findMinAppendTaskDetail_args)that);
      return false;
    }

    public boolean equals(findMinAppendTaskDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_partnerId = true && this.isSetPartnerId();
      boolean that_present_partnerId = true && that.isSetPartnerId();
      if (this_present_partnerId || that_present_partnerId) {
        if (!(this_present_partnerId && that_present_partnerId))
          return false;
        if (!this.partnerId.equals(that.partnerId))
          return false;
      }

      boolean this_present_partnerTradeId = true && this.isSetPartnerTradeId();
      boolean that_present_partnerTradeId = true && that.isSetPartnerTradeId();
      if (this_present_partnerTradeId || that_present_partnerTradeId) {
        if (!(this_present_partnerTradeId && that_present_partnerTradeId))
          return false;
        if (!this.partnerTradeId.equals(that.partnerTradeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findMinAppendTaskDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartnerTradeId()).compareTo(other.isSetPartnerTradeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartnerTradeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerTradeId, other.partnerTradeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMinAppendTaskDetail_args(");
      boolean first = true;

      sb.append("partnerId:");
      if (this.partnerId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partnerTradeId:");
      if (this.partnerTradeId == null) {
        sb.append("null");
      } else {
        sb.append(this.partnerTradeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMinAppendTaskDetail_argsStandardSchemeFactory implements SchemeFactory {
      public findMinAppendTaskDetail_argsStandardScheme getScheme() {
        return new findMinAppendTaskDetail_argsStandardScheme();
      }
    }

    private static class findMinAppendTaskDetail_argsStandardScheme extends StandardScheme<findMinAppendTaskDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMinAppendTaskDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerId = iprot.readString();
                struct.setPartnerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTNER_TRADE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partnerTradeId = iprot.readString();
                struct.setPartnerTradeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMinAppendTaskDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partnerId != null) {
          oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
          oprot.writeString(struct.partnerId);
          oprot.writeFieldEnd();
        }
        if (struct.partnerTradeId != null) {
          oprot.writeFieldBegin(PARTNER_TRADE_ID_FIELD_DESC);
          oprot.writeString(struct.partnerTradeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMinAppendTaskDetail_argsTupleSchemeFactory implements SchemeFactory {
      public findMinAppendTaskDetail_argsTupleScheme getScheme() {
        return new findMinAppendTaskDetail_argsTupleScheme();
      }
    }

    private static class findMinAppendTaskDetail_argsTupleScheme extends TupleScheme<findMinAppendTaskDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMinAppendTaskDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartnerId()) {
          optionals.set(0);
        }
        if (struct.isSetPartnerTradeId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartnerId()) {
          oprot.writeString(struct.partnerId);
        }
        if (struct.isSetPartnerTradeId()) {
          oprot.writeString(struct.partnerTradeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMinAppendTaskDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partnerId = iprot.readString();
          struct.setPartnerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partnerTradeId = iprot.readString();
          struct.setPartnerTradeIdIsSet(true);
        }
      }
    }

  }

  public static class findMinAppendTaskDetail_result implements org.apache.thrift.TBase<findMinAppendTaskDetail_result, findMinAppendTaskDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMinAppendTaskDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMinAppendTaskDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMinAppendTaskDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMinAppendTaskDetail_resultTupleSchemeFactory());
    }

    public AppendTaskDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendTaskDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMinAppendTaskDetail_result.class, metaDataMap);
    }

    public findMinAppendTaskDetail_result() {
    }

    public findMinAppendTaskDetail_result(
      AppendTaskDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMinAppendTaskDetail_result(findMinAppendTaskDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new AppendTaskDetail(other.success);
      }
    }

    public findMinAppendTaskDetail_result deepCopy() {
      return new findMinAppendTaskDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AppendTaskDetail getSuccess() {
      return this.success;
    }

    public findMinAppendTaskDetail_result setSuccess(AppendTaskDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AppendTaskDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMinAppendTaskDetail_result)
        return this.equals((findMinAppendTaskDetail_result)that);
      return false;
    }

    public boolean equals(findMinAppendTaskDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findMinAppendTaskDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMinAppendTaskDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMinAppendTaskDetail_resultStandardSchemeFactory implements SchemeFactory {
      public findMinAppendTaskDetail_resultStandardScheme getScheme() {
        return new findMinAppendTaskDetail_resultStandardScheme();
      }
    }

    private static class findMinAppendTaskDetail_resultStandardScheme extends StandardScheme<findMinAppendTaskDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMinAppendTaskDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AppendTaskDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMinAppendTaskDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMinAppendTaskDetail_resultTupleSchemeFactory implements SchemeFactory {
      public findMinAppendTaskDetail_resultTupleScheme getScheme() {
        return new findMinAppendTaskDetail_resultTupleScheme();
      }
    }

    private static class findMinAppendTaskDetail_resultTupleScheme extends TupleScheme<findMinAppendTaskDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMinAppendTaskDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMinAppendTaskDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AppendTaskDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopAppendTask_args implements org.apache.thrift.TBase<stopAppendTask_args, stopAppendTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopAppendTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopAppendTask_args");

    private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNoList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopAppendTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopAppendTask_argsTupleSchemeFactory());
    }

    public String appendTaskId; // required
    public List<String> issueNoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPEND_TASK_ID((short)1, "appendTaskId"),
      ISSUE_NO_LIST((short)2, "issueNoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPEND_TASK_ID
            return APPEND_TASK_ID;
          case 2: // ISSUE_NO_LIST
            return ISSUE_NO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO_LIST, new org.apache.thrift.meta_data.FieldMetaData("issueNoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopAppendTask_args.class, metaDataMap);
    }

    public stopAppendTask_args() {
    }

    public stopAppendTask_args(
      String appendTaskId,
      List<String> issueNoList)
    {
      this();
      this.appendTaskId = appendTaskId;
      this.issueNoList = issueNoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopAppendTask_args(stopAppendTask_args other) {
      if (other.isSetAppendTaskId()) {
        this.appendTaskId = other.appendTaskId;
      }
      if (other.isSetIssueNoList()) {
        List<String> __this__issueNoList = new ArrayList<String>(other.issueNoList);
        this.issueNoList = __this__issueNoList;
      }
    }

    public stopAppendTask_args deepCopy() {
      return new stopAppendTask_args(this);
    }

    @Override
    public void clear() {
      this.appendTaskId = null;
      this.issueNoList = null;
    }

    public String getAppendTaskId() {
      return this.appendTaskId;
    }

    public stopAppendTask_args setAppendTaskId(String appendTaskId) {
      this.appendTaskId = appendTaskId;
      return this;
    }

    public void unsetAppendTaskId() {
      this.appendTaskId = null;
    }

    /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppendTaskId() {
      return this.appendTaskId != null;
    }

    public void setAppendTaskIdIsSet(boolean value) {
      if (!value) {
        this.appendTaskId = null;
      }
    }

    public int getIssueNoListSize() {
      return (this.issueNoList == null) ? 0 : this.issueNoList.size();
    }

    public java.util.Iterator<String> getIssueNoListIterator() {
      return (this.issueNoList == null) ? null : this.issueNoList.iterator();
    }

    public void addToIssueNoList(String elem) {
      if (this.issueNoList == null) {
        this.issueNoList = new ArrayList<String>();
      }
      this.issueNoList.add(elem);
    }

    public List<String> getIssueNoList() {
      return this.issueNoList;
    }

    public stopAppendTask_args setIssueNoList(List<String> issueNoList) {
      this.issueNoList = issueNoList;
      return this;
    }

    public void unsetIssueNoList() {
      this.issueNoList = null;
    }

    /** Returns true if field issueNoList is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNoList() {
      return this.issueNoList != null;
    }

    public void setIssueNoListIsSet(boolean value) {
      if (!value) {
        this.issueNoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPEND_TASK_ID:
        if (value == null) {
          unsetAppendTaskId();
        } else {
          setAppendTaskId((String)value);
        }
        break;

      case ISSUE_NO_LIST:
        if (value == null) {
          unsetIssueNoList();
        } else {
          setIssueNoList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPEND_TASK_ID:
        return getAppendTaskId();

      case ISSUE_NO_LIST:
        return getIssueNoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPEND_TASK_ID:
        return isSetAppendTaskId();
      case ISSUE_NO_LIST:
        return isSetIssueNoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopAppendTask_args)
        return this.equals((stopAppendTask_args)that);
      return false;
    }

    public boolean equals(stopAppendTask_args that) {
      if (that == null)
        return false;

      boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
      boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
      if (this_present_appendTaskId || that_present_appendTaskId) {
        if (!(this_present_appendTaskId && that_present_appendTaskId))
          return false;
        if (!this.appendTaskId.equals(that.appendTaskId))
          return false;
      }

      boolean this_present_issueNoList = true && this.isSetIssueNoList();
      boolean that_present_issueNoList = true && that.isSetIssueNoList();
      if (this_present_issueNoList || that_present_issueNoList) {
        if (!(this_present_issueNoList && that_present_issueNoList))
          return false;
        if (!this.issueNoList.equals(that.issueNoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stopAppendTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppendTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNoList()).compareTo(other.isSetIssueNoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNoList, other.issueNoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopAppendTask_args(");
      boolean first = true;

      sb.append("appendTaskId:");
      if (this.appendTaskId == null) {
        sb.append("null");
      } else {
        sb.append(this.appendTaskId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNoList:");
      if (this.issueNoList == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopAppendTask_argsStandardSchemeFactory implements SchemeFactory {
      public stopAppendTask_argsStandardScheme getScheme() {
        return new stopAppendTask_argsStandardScheme();
      }
    }

    private static class stopAppendTask_argsStandardScheme extends StandardScheme<stopAppendTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopAppendTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPEND_TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appendTaskId = iprot.readString();
                struct.setAppendTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.issueNoList = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.issueNoList.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setIssueNoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopAppendTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appendTaskId != null) {
          oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
          oprot.writeString(struct.appendTaskId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNoList != null) {
          oprot.writeFieldBegin(ISSUE_NO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.issueNoList.size()));
            for (String _iter11 : struct.issueNoList)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopAppendTask_argsTupleSchemeFactory implements SchemeFactory {
      public stopAppendTask_argsTupleScheme getScheme() {
        return new stopAppendTask_argsTupleScheme();
      }
    }

    private static class stopAppendTask_argsTupleScheme extends TupleScheme<stopAppendTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopAppendTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppendTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNoList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppendTaskId()) {
          oprot.writeString(struct.appendTaskId);
        }
        if (struct.isSetIssueNoList()) {
          {
            oprot.writeI32(struct.issueNoList.size());
            for (String _iter12 : struct.issueNoList)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopAppendTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appendTaskId = iprot.readString();
          struct.setAppendTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.issueNoList = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              struct.issueNoList.add(_elem15);
            }
          }
          struct.setIssueNoListIsSet(true);
        }
      }
    }

  }

  public static class stopAppendTask_result implements org.apache.thrift.TBase<stopAppendTask_result, stopAppendTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopAppendTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopAppendTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopAppendTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopAppendTask_resultTupleSchemeFactory());
    }

    public List<AppendTaskDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppendTaskDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopAppendTask_result.class, metaDataMap);
    }

    public stopAppendTask_result() {
    }

    public stopAppendTask_result(
      List<AppendTaskDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopAppendTask_result(stopAppendTask_result other) {
      if (other.isSetSuccess()) {
        List<AppendTaskDetail> __this__success = new ArrayList<AppendTaskDetail>(other.success.size());
        for (AppendTaskDetail other_element : other.success) {
          __this__success.add(new AppendTaskDetail(other_element));
        }
        this.success = __this__success;
      }
    }

    public stopAppendTask_result deepCopy() {
      return new stopAppendTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AppendTaskDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AppendTaskDetail elem) {
      if (this.success == null) {
        this.success = new ArrayList<AppendTaskDetail>();
      }
      this.success.add(elem);
    }

    public List<AppendTaskDetail> getSuccess() {
      return this.success;
    }

    public stopAppendTask_result setSuccess(List<AppendTaskDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AppendTaskDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopAppendTask_result)
        return this.equals((stopAppendTask_result)that);
      return false;
    }

    public boolean equals(stopAppendTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stopAppendTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopAppendTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopAppendTask_resultStandardSchemeFactory implements SchemeFactory {
      public stopAppendTask_resultStandardScheme getScheme() {
        return new stopAppendTask_resultStandardScheme();
      }
    }

    private static class stopAppendTask_resultStandardScheme extends StandardScheme<stopAppendTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopAppendTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<AppendTaskDetail>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    AppendTaskDetail _elem18;
                    _elem18 = new AppendTaskDetail();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopAppendTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AppendTaskDetail _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopAppendTask_resultTupleSchemeFactory implements SchemeFactory {
      public stopAppendTask_resultTupleScheme getScheme() {
        return new stopAppendTask_resultTupleScheme();
      }
    }

    private static class stopAppendTask_resultTupleScheme extends TupleScheme<stopAppendTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopAppendTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AppendTaskDetail _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopAppendTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AppendTaskDetail>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              AppendTaskDetail _elem23;
              _elem23 = new AppendTaskDetail();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAppendTaskStatus_args implements org.apache.thrift.TBase<getAppendTaskStatus_args, getAppendTaskStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAppendTaskStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppendTaskStatus_args");

    private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppendTaskStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppendTaskStatus_argsTupleSchemeFactory());
    }

    public String appendTaskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPEND_TASK_ID((short)1, "appendTaskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPEND_TASK_ID
            return APPEND_TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppendTaskStatus_args.class, metaDataMap);
    }

    public getAppendTaskStatus_args() {
    }

    public getAppendTaskStatus_args(
      String appendTaskId)
    {
      this();
      this.appendTaskId = appendTaskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppendTaskStatus_args(getAppendTaskStatus_args other) {
      if (other.isSetAppendTaskId()) {
        this.appendTaskId = other.appendTaskId;
      }
    }

    public getAppendTaskStatus_args deepCopy() {
      return new getAppendTaskStatus_args(this);
    }

    @Override
    public void clear() {
      this.appendTaskId = null;
    }

    public String getAppendTaskId() {
      return this.appendTaskId;
    }

    public getAppendTaskStatus_args setAppendTaskId(String appendTaskId) {
      this.appendTaskId = appendTaskId;
      return this;
    }

    public void unsetAppendTaskId() {
      this.appendTaskId = null;
    }

    /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppendTaskId() {
      return this.appendTaskId != null;
    }

    public void setAppendTaskIdIsSet(boolean value) {
      if (!value) {
        this.appendTaskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPEND_TASK_ID:
        if (value == null) {
          unsetAppendTaskId();
        } else {
          setAppendTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPEND_TASK_ID:
        return getAppendTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPEND_TASK_ID:
        return isSetAppendTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppendTaskStatus_args)
        return this.equals((getAppendTaskStatus_args)that);
      return false;
    }

    public boolean equals(getAppendTaskStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
      boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
      if (this_present_appendTaskId || that_present_appendTaskId) {
        if (!(this_present_appendTaskId && that_present_appendTaskId))
          return false;
        if (!this.appendTaskId.equals(that.appendTaskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAppendTaskStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppendTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppendTaskStatus_args(");
      boolean first = true;

      sb.append("appendTaskId:");
      if (this.appendTaskId == null) {
        sb.append("null");
      } else {
        sb.append(this.appendTaskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppendTaskStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getAppendTaskStatus_argsStandardScheme getScheme() {
        return new getAppendTaskStatus_argsStandardScheme();
      }
    }

    private static class getAppendTaskStatus_argsStandardScheme extends StandardScheme<getAppendTaskStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppendTaskStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPEND_TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appendTaskId = iprot.readString();
                struct.setAppendTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppendTaskStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appendTaskId != null) {
          oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
          oprot.writeString(struct.appendTaskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppendTaskStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getAppendTaskStatus_argsTupleScheme getScheme() {
        return new getAppendTaskStatus_argsTupleScheme();
      }
    }

    private static class getAppendTaskStatus_argsTupleScheme extends TupleScheme<getAppendTaskStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppendTaskStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppendTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppendTaskId()) {
          oprot.writeString(struct.appendTaskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppendTaskStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appendTaskId = iprot.readString();
          struct.setAppendTaskIdIsSet(true);
        }
      }
    }

  }

  public static class getAppendTaskStatus_result implements org.apache.thrift.TBase<getAppendTaskStatus_result, getAppendTaskStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAppendTaskStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppendTaskStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppendTaskStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppendTaskStatus_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppendTaskStatus_result.class, metaDataMap);
    }

    public getAppendTaskStatus_result() {
    }

    public getAppendTaskStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppendTaskStatus_result(getAppendTaskStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getAppendTaskStatus_result deepCopy() {
      return new getAppendTaskStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAppendTaskStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppendTaskStatus_result)
        return this.equals((getAppendTaskStatus_result)that);
      return false;
    }

    public boolean equals(getAppendTaskStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAppendTaskStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppendTaskStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppendTaskStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getAppendTaskStatus_resultStandardScheme getScheme() {
        return new getAppendTaskStatus_resultStandardScheme();
      }
    }

    private static class getAppendTaskStatus_resultStandardScheme extends StandardScheme<getAppendTaskStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppendTaskStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppendTaskStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppendTaskStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getAppendTaskStatus_resultTupleScheme getScheme() {
        return new getAppendTaskStatus_resultTupleScheme();
      }
    }

    private static class getAppendTaskStatus_resultTupleScheme extends TupleScheme<getAppendTaskStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppendTaskStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppendTaskStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateAppendAfterOrder_args implements org.apache.thrift.TBase<updateAppendAfterOrder_args, updateAppendAfterOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppendAfterOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppendAfterOrder_args");

    private static final org.apache.thrift.protocol.TField APPEND_TASK_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskDetailId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppendAfterOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppendAfterOrder_argsTupleSchemeFactory());
    }

    public long appendTaskDetailId; // required
    public String orderNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPEND_TASK_DETAIL_ID((short)1, "appendTaskDetailId"),
      ORDER_NO((short)2, "orderNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPEND_TASK_DETAIL_ID
            return APPEND_TASK_DETAIL_ID;
          case 2: // ORDER_NO
            return ORDER_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPENDTASKDETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPEND_TASK_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskDetailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppendAfterOrder_args.class, metaDataMap);
    }

    public updateAppendAfterOrder_args() {
    }

    public updateAppendAfterOrder_args(
      long appendTaskDetailId,
      String orderNo)
    {
      this();
      this.appendTaskDetailId = appendTaskDetailId;
      setAppendTaskDetailIdIsSet(true);
      this.orderNo = orderNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppendAfterOrder_args(updateAppendAfterOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appendTaskDetailId = other.appendTaskDetailId;
      if (other.isSetOrderNo()) {
        this.orderNo = other.orderNo;
      }
    }

    public updateAppendAfterOrder_args deepCopy() {
      return new updateAppendAfterOrder_args(this);
    }

    @Override
    public void clear() {
      setAppendTaskDetailIdIsSet(false);
      this.appendTaskDetailId = 0;
      this.orderNo = null;
    }

    public long getAppendTaskDetailId() {
      return this.appendTaskDetailId;
    }

    public updateAppendAfterOrder_args setAppendTaskDetailId(long appendTaskDetailId) {
      this.appendTaskDetailId = appendTaskDetailId;
      setAppendTaskDetailIdIsSet(true);
      return this;
    }

    public void unsetAppendTaskDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDTASKDETAILID_ISSET_ID);
    }

    /** Returns true if field appendTaskDetailId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppendTaskDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __APPENDTASKDETAILID_ISSET_ID);
    }

    public void setAppendTaskDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDTASKDETAILID_ISSET_ID, value);
    }

    public String getOrderNo() {
      return this.orderNo;
    }

    public updateAppendAfterOrder_args setOrderNo(String orderNo) {
      this.orderNo = orderNo;
      return this;
    }

    public void unsetOrderNo() {
      this.orderNo = null;
    }

    /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderNo() {
      return this.orderNo != null;
    }

    public void setOrderNoIsSet(boolean value) {
      if (!value) {
        this.orderNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPEND_TASK_DETAIL_ID:
        if (value == null) {
          unsetAppendTaskDetailId();
        } else {
          setAppendTaskDetailId((Long)value);
        }
        break;

      case ORDER_NO:
        if (value == null) {
          unsetOrderNo();
        } else {
          setOrderNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPEND_TASK_DETAIL_ID:
        return Long.valueOf(getAppendTaskDetailId());

      case ORDER_NO:
        return getOrderNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPEND_TASK_DETAIL_ID:
        return isSetAppendTaskDetailId();
      case ORDER_NO:
        return isSetOrderNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppendAfterOrder_args)
        return this.equals((updateAppendAfterOrder_args)that);
      return false;
    }

    public boolean equals(updateAppendAfterOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_appendTaskDetailId = true;
      boolean that_present_appendTaskDetailId = true;
      if (this_present_appendTaskDetailId || that_present_appendTaskDetailId) {
        if (!(this_present_appendTaskDetailId && that_present_appendTaskDetailId))
          return false;
        if (this.appendTaskDetailId != that.appendTaskDetailId)
          return false;
      }

      boolean this_present_orderNo = true && this.isSetOrderNo();
      boolean that_present_orderNo = true && that.isSetOrderNo();
      if (this_present_orderNo || that_present_orderNo) {
        if (!(this_present_orderNo && that_present_orderNo))
          return false;
        if (!this.orderNo.equals(that.orderNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppendAfterOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppendTaskDetailId()).compareTo(other.isSetAppendTaskDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppendTaskDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskDetailId, other.appendTaskDetailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppendAfterOrder_args(");
      boolean first = true;

      sb.append("appendTaskDetailId:");
      sb.append(this.appendTaskDetailId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderNo:");
      if (this.orderNo == null) {
        sb.append("null");
      } else {
        sb.append(this.orderNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppendAfterOrder_argsStandardSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrder_argsStandardScheme getScheme() {
        return new updateAppendAfterOrder_argsStandardScheme();
      }
    }

    private static class updateAppendAfterOrder_argsStandardScheme extends StandardScheme<updateAppendAfterOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppendAfterOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPEND_TASK_DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.appendTaskDetailId = iprot.readI64();
                struct.setAppendTaskDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderNo = iprot.readString();
                struct.setOrderNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppendAfterOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APPEND_TASK_DETAIL_ID_FIELD_DESC);
        oprot.writeI64(struct.appendTaskDetailId);
        oprot.writeFieldEnd();
        if (struct.orderNo != null) {
          oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
          oprot.writeString(struct.orderNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppendAfterOrder_argsTupleSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrder_argsTupleScheme getScheme() {
        return new updateAppendAfterOrder_argsTupleScheme();
      }
    }

    private static class updateAppendAfterOrder_argsTupleScheme extends TupleScheme<updateAppendAfterOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppendTaskDetailId()) {
          optionals.set(0);
        }
        if (struct.isSetOrderNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppendTaskDetailId()) {
          oprot.writeI64(struct.appendTaskDetailId);
        }
        if (struct.isSetOrderNo()) {
          oprot.writeString(struct.orderNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appendTaskDetailId = iprot.readI64();
          struct.setAppendTaskDetailIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orderNo = iprot.readString();
          struct.setOrderNoIsSet(true);
        }
      }
    }

  }

  public static class updateAppendAfterOrder_result implements org.apache.thrift.TBase<updateAppendAfterOrder_result, updateAppendAfterOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppendAfterOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppendAfterOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppendAfterOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppendAfterOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppendAfterOrder_result.class, metaDataMap);
    }

    public updateAppendAfterOrder_result() {
    }

    public updateAppendAfterOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppendAfterOrder_result(updateAppendAfterOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateAppendAfterOrder_result deepCopy() {
      return new updateAppendAfterOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateAppendAfterOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppendAfterOrder_result)
        return this.equals((updateAppendAfterOrder_result)that);
      return false;
    }

    public boolean equals(updateAppendAfterOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppendAfterOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppendAfterOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppendAfterOrder_resultStandardSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrder_resultStandardScheme getScheme() {
        return new updateAppendAfterOrder_resultStandardScheme();
      }
    }

    private static class updateAppendAfterOrder_resultStandardScheme extends StandardScheme<updateAppendAfterOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppendAfterOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppendAfterOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppendAfterOrder_resultTupleSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrder_resultTupleScheme getScheme() {
        return new updateAppendAfterOrder_resultTupleScheme();
      }
    }

    private static class updateAppendAfterOrder_resultTupleScheme extends TupleScheme<updateAppendAfterOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundSerialNumberByOrderNo_args implements org.apache.thrift.TBase<getRefundSerialNumberByOrderNo_args, getRefundSerialNumberByOrderNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundSerialNumberByOrderNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundSerialNumberByOrderNo_args");

    private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundSerialNumberByOrderNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundSerialNumberByOrderNo_argsTupleSchemeFactory());
    }

    public String orderNo; // required
    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_NO((short)1, "orderNo"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_NO
            return ORDER_NO;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundSerialNumberByOrderNo_args.class, metaDataMap);
    }

    public getRefundSerialNumberByOrderNo_args() {
    }

    public getRefundSerialNumberByOrderNo_args(
      String orderNo,
      String userId)
    {
      this();
      this.orderNo = orderNo;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundSerialNumberByOrderNo_args(getRefundSerialNumberByOrderNo_args other) {
      if (other.isSetOrderNo()) {
        this.orderNo = other.orderNo;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getRefundSerialNumberByOrderNo_args deepCopy() {
      return new getRefundSerialNumberByOrderNo_args(this);
    }

    @Override
    public void clear() {
      this.orderNo = null;
      this.userId = null;
    }

    public String getOrderNo() {
      return this.orderNo;
    }

    public getRefundSerialNumberByOrderNo_args setOrderNo(String orderNo) {
      this.orderNo = orderNo;
      return this;
    }

    public void unsetOrderNo() {
      this.orderNo = null;
    }

    /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderNo() {
      return this.orderNo != null;
    }

    public void setOrderNoIsSet(boolean value) {
      if (!value) {
        this.orderNo = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public getRefundSerialNumberByOrderNo_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_NO:
        if (value == null) {
          unsetOrderNo();
        } else {
          setOrderNo((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_NO:
        return getOrderNo();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_NO:
        return isSetOrderNo();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundSerialNumberByOrderNo_args)
        return this.equals((getRefundSerialNumberByOrderNo_args)that);
      return false;
    }

    public boolean equals(getRefundSerialNumberByOrderNo_args that) {
      if (that == null)
        return false;

      boolean this_present_orderNo = true && this.isSetOrderNo();
      boolean that_present_orderNo = true && that.isSetOrderNo();
      if (this_present_orderNo || that_present_orderNo) {
        if (!(this_present_orderNo && that_present_orderNo))
          return false;
        if (!this.orderNo.equals(that.orderNo))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRefundSerialNumberByOrderNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundSerialNumberByOrderNo_args(");
      boolean first = true;

      sb.append("orderNo:");
      if (this.orderNo == null) {
        sb.append("null");
      } else {
        sb.append(this.orderNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundSerialNumberByOrderNo_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundSerialNumberByOrderNo_argsStandardScheme getScheme() {
        return new getRefundSerialNumberByOrderNo_argsStandardScheme();
      }
    }

    private static class getRefundSerialNumberByOrderNo_argsStandardScheme extends StandardScheme<getRefundSerialNumberByOrderNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundSerialNumberByOrderNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderNo = iprot.readString();
                struct.setOrderNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundSerialNumberByOrderNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderNo != null) {
          oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
          oprot.writeString(struct.orderNo);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundSerialNumberByOrderNo_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundSerialNumberByOrderNo_argsTupleScheme getScheme() {
        return new getRefundSerialNumberByOrderNo_argsTupleScheme();
      }
    }

    private static class getRefundSerialNumberByOrderNo_argsTupleScheme extends TupleScheme<getRefundSerialNumberByOrderNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundSerialNumberByOrderNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderNo()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderNo()) {
          oprot.writeString(struct.orderNo);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundSerialNumberByOrderNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderNo = iprot.readString();
          struct.setOrderNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getRefundSerialNumberByOrderNo_result implements org.apache.thrift.TBase<getRefundSerialNumberByOrderNo_result, getRefundSerialNumberByOrderNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundSerialNumberByOrderNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundSerialNumberByOrderNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundSerialNumberByOrderNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundSerialNumberByOrderNo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundSerialNumberByOrderNo_result.class, metaDataMap);
    }

    public getRefundSerialNumberByOrderNo_result() {
    }

    public getRefundSerialNumberByOrderNo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundSerialNumberByOrderNo_result(getRefundSerialNumberByOrderNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRefundSerialNumberByOrderNo_result deepCopy() {
      return new getRefundSerialNumberByOrderNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRefundSerialNumberByOrderNo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundSerialNumberByOrderNo_result)
        return this.equals((getRefundSerialNumberByOrderNo_result)that);
      return false;
    }

    public boolean equals(getRefundSerialNumberByOrderNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRefundSerialNumberByOrderNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundSerialNumberByOrderNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundSerialNumberByOrderNo_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundSerialNumberByOrderNo_resultStandardScheme getScheme() {
        return new getRefundSerialNumberByOrderNo_resultStandardScheme();
      }
    }

    private static class getRefundSerialNumberByOrderNo_resultStandardScheme extends StandardScheme<getRefundSerialNumberByOrderNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundSerialNumberByOrderNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundSerialNumberByOrderNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundSerialNumberByOrderNo_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundSerialNumberByOrderNo_resultTupleScheme getScheme() {
        return new getRefundSerialNumberByOrderNo_resultTupleScheme();
      }
    }

    private static class getRefundSerialNumberByOrderNo_resultTupleScheme extends TupleScheme<getRefundSerialNumberByOrderNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundSerialNumberByOrderNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundSerialNumberByOrderNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelAppendTask_args implements org.apache.thrift.TBase<cancelAppendTask_args, cancelAppendTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelAppendTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelAppendTask_args");

    private static final org.apache.thrift.protocol.TField APPEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appendTaskId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelAppendTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelAppendTask_argsTupleSchemeFactory());
    }

    public String appendTaskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPEND_TASK_ID((short)1, "appendTaskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPEND_TASK_ID
            return APPEND_TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("appendTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelAppendTask_args.class, metaDataMap);
    }

    public cancelAppendTask_args() {
    }

    public cancelAppendTask_args(
      String appendTaskId)
    {
      this();
      this.appendTaskId = appendTaskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelAppendTask_args(cancelAppendTask_args other) {
      if (other.isSetAppendTaskId()) {
        this.appendTaskId = other.appendTaskId;
      }
    }

    public cancelAppendTask_args deepCopy() {
      return new cancelAppendTask_args(this);
    }

    @Override
    public void clear() {
      this.appendTaskId = null;
    }

    public String getAppendTaskId() {
      return this.appendTaskId;
    }

    public cancelAppendTask_args setAppendTaskId(String appendTaskId) {
      this.appendTaskId = appendTaskId;
      return this;
    }

    public void unsetAppendTaskId() {
      this.appendTaskId = null;
    }

    /** Returns true if field appendTaskId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppendTaskId() {
      return this.appendTaskId != null;
    }

    public void setAppendTaskIdIsSet(boolean value) {
      if (!value) {
        this.appendTaskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPEND_TASK_ID:
        if (value == null) {
          unsetAppendTaskId();
        } else {
          setAppendTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPEND_TASK_ID:
        return getAppendTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPEND_TASK_ID:
        return isSetAppendTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelAppendTask_args)
        return this.equals((cancelAppendTask_args)that);
      return false;
    }

    public boolean equals(cancelAppendTask_args that) {
      if (that == null)
        return false;

      boolean this_present_appendTaskId = true && this.isSetAppendTaskId();
      boolean that_present_appendTaskId = true && that.isSetAppendTaskId();
      if (this_present_appendTaskId || that_present_appendTaskId) {
        if (!(this_present_appendTaskId && that_present_appendTaskId))
          return false;
        if (!this.appendTaskId.equals(that.appendTaskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelAppendTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppendTaskId()).compareTo(other.isSetAppendTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppendTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendTaskId, other.appendTaskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelAppendTask_args(");
      boolean first = true;

      sb.append("appendTaskId:");
      if (this.appendTaskId == null) {
        sb.append("null");
      } else {
        sb.append(this.appendTaskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelAppendTask_argsStandardSchemeFactory implements SchemeFactory {
      public cancelAppendTask_argsStandardScheme getScheme() {
        return new cancelAppendTask_argsStandardScheme();
      }
    }

    private static class cancelAppendTask_argsStandardScheme extends StandardScheme<cancelAppendTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelAppendTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPEND_TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appendTaskId = iprot.readString();
                struct.setAppendTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelAppendTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appendTaskId != null) {
          oprot.writeFieldBegin(APPEND_TASK_ID_FIELD_DESC);
          oprot.writeString(struct.appendTaskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelAppendTask_argsTupleSchemeFactory implements SchemeFactory {
      public cancelAppendTask_argsTupleScheme getScheme() {
        return new cancelAppendTask_argsTupleScheme();
      }
    }

    private static class cancelAppendTask_argsTupleScheme extends TupleScheme<cancelAppendTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelAppendTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppendTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppendTaskId()) {
          oprot.writeString(struct.appendTaskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelAppendTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appendTaskId = iprot.readString();
          struct.setAppendTaskIdIsSet(true);
        }
      }
    }

  }

  public static class cancelAppendTask_result implements org.apache.thrift.TBase<cancelAppendTask_result, cancelAppendTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelAppendTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelAppendTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelAppendTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelAppendTask_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelAppendTask_result.class, metaDataMap);
    }

    public cancelAppendTask_result() {
    }

    public cancelAppendTask_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelAppendTask_result(cancelAppendTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public cancelAppendTask_result deepCopy() {
      return new cancelAppendTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public cancelAppendTask_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelAppendTask_result)
        return this.equals((cancelAppendTask_result)that);
      return false;
    }

    public boolean equals(cancelAppendTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelAppendTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelAppendTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelAppendTask_resultStandardSchemeFactory implements SchemeFactory {
      public cancelAppendTask_resultStandardScheme getScheme() {
        return new cancelAppendTask_resultStandardScheme();
      }
    }

    private static class cancelAppendTask_resultStandardScheme extends StandardScheme<cancelAppendTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelAppendTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelAppendTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelAppendTask_resultTupleSchemeFactory implements SchemeFactory {
      public cancelAppendTask_resultTupleScheme getScheme() {
        return new cancelAppendTask_resultTupleScheme();
      }
    }

    private static class cancelAppendTask_resultTupleScheme extends TupleScheme<cancelAppendTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelAppendTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelAppendTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateDetailAfterPrint_args implements org.apache.thrift.TBase<updateDetailAfterPrint_args, updateDetailAfterPrint_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDetailAfterPrint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDetailAfterPrint_args");

    private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_PRINT_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("isPrintSuccess", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDetailAfterPrint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDetailAfterPrint_argsTupleSchemeFactory());
    }

    public String orderNo; // required
    public boolean isPrintSuccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_NO((short)1, "orderNo"),
      IS_PRINT_SUCCESS((short)2, "isPrintSuccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_NO
            return ORDER_NO;
          case 2: // IS_PRINT_SUCCESS
            return IS_PRINT_SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISPRINTSUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_PRINT_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("isPrintSuccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDetailAfterPrint_args.class, metaDataMap);
    }

    public updateDetailAfterPrint_args() {
    }

    public updateDetailAfterPrint_args(
      String orderNo,
      boolean isPrintSuccess)
    {
      this();
      this.orderNo = orderNo;
      this.isPrintSuccess = isPrintSuccess;
      setIsPrintSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDetailAfterPrint_args(updateDetailAfterPrint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrderNo()) {
        this.orderNo = other.orderNo;
      }
      this.isPrintSuccess = other.isPrintSuccess;
    }

    public updateDetailAfterPrint_args deepCopy() {
      return new updateDetailAfterPrint_args(this);
    }

    @Override
    public void clear() {
      this.orderNo = null;
      setIsPrintSuccessIsSet(false);
      this.isPrintSuccess = false;
    }

    public String getOrderNo() {
      return this.orderNo;
    }

    public updateDetailAfterPrint_args setOrderNo(String orderNo) {
      this.orderNo = orderNo;
      return this;
    }

    public void unsetOrderNo() {
      this.orderNo = null;
    }

    /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderNo() {
      return this.orderNo != null;
    }

    public void setOrderNoIsSet(boolean value) {
      if (!value) {
        this.orderNo = null;
      }
    }

    public boolean isIsPrintSuccess() {
      return this.isPrintSuccess;
    }

    public updateDetailAfterPrint_args setIsPrintSuccess(boolean isPrintSuccess) {
      this.isPrintSuccess = isPrintSuccess;
      setIsPrintSuccessIsSet(true);
      return this;
    }

    public void unsetIsPrintSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPRINTSUCCESS_ISSET_ID);
    }

    /** Returns true if field isPrintSuccess is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPrintSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __ISPRINTSUCCESS_ISSET_ID);
    }

    public void setIsPrintSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPRINTSUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_NO:
        if (value == null) {
          unsetOrderNo();
        } else {
          setOrderNo((String)value);
        }
        break;

      case IS_PRINT_SUCCESS:
        if (value == null) {
          unsetIsPrintSuccess();
        } else {
          setIsPrintSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_NO:
        return getOrderNo();

      case IS_PRINT_SUCCESS:
        return Boolean.valueOf(isIsPrintSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_NO:
        return isSetOrderNo();
      case IS_PRINT_SUCCESS:
        return isSetIsPrintSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDetailAfterPrint_args)
        return this.equals((updateDetailAfterPrint_args)that);
      return false;
    }

    public boolean equals(updateDetailAfterPrint_args that) {
      if (that == null)
        return false;

      boolean this_present_orderNo = true && this.isSetOrderNo();
      boolean that_present_orderNo = true && that.isSetOrderNo();
      if (this_present_orderNo || that_present_orderNo) {
        if (!(this_present_orderNo && that_present_orderNo))
          return false;
        if (!this.orderNo.equals(that.orderNo))
          return false;
      }

      boolean this_present_isPrintSuccess = true;
      boolean that_present_isPrintSuccess = true;
      if (this_present_isPrintSuccess || that_present_isPrintSuccess) {
        if (!(this_present_isPrintSuccess && that_present_isPrintSuccess))
          return false;
        if (this.isPrintSuccess != that.isPrintSuccess)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDetailAfterPrint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsPrintSuccess()).compareTo(other.isSetIsPrintSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPrintSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPrintSuccess, other.isPrintSuccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDetailAfterPrint_args(");
      boolean first = true;

      sb.append("orderNo:");
      if (this.orderNo == null) {
        sb.append("null");
      } else {
        sb.append(this.orderNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPrintSuccess:");
      sb.append(this.isPrintSuccess);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDetailAfterPrint_argsStandardSchemeFactory implements SchemeFactory {
      public updateDetailAfterPrint_argsStandardScheme getScheme() {
        return new updateDetailAfterPrint_argsStandardScheme();
      }
    }

    private static class updateDetailAfterPrint_argsStandardScheme extends StandardScheme<updateDetailAfterPrint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDetailAfterPrint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderNo = iprot.readString();
                struct.setOrderNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_PRINT_SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPrintSuccess = iprot.readBool();
                struct.setIsPrintSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDetailAfterPrint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderNo != null) {
          oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
          oprot.writeString(struct.orderNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PRINT_SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.isPrintSuccess);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDetailAfterPrint_argsTupleSchemeFactory implements SchemeFactory {
      public updateDetailAfterPrint_argsTupleScheme getScheme() {
        return new updateDetailAfterPrint_argsTupleScheme();
      }
    }

    private static class updateDetailAfterPrint_argsTupleScheme extends TupleScheme<updateDetailAfterPrint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDetailAfterPrint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderNo()) {
          optionals.set(0);
        }
        if (struct.isSetIsPrintSuccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderNo()) {
          oprot.writeString(struct.orderNo);
        }
        if (struct.isSetIsPrintSuccess()) {
          oprot.writeBool(struct.isPrintSuccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDetailAfterPrint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderNo = iprot.readString();
          struct.setOrderNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isPrintSuccess = iprot.readBool();
          struct.setIsPrintSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateDetailAfterPrint_result implements org.apache.thrift.TBase<updateDetailAfterPrint_result, updateDetailAfterPrint_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDetailAfterPrint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDetailAfterPrint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDetailAfterPrint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDetailAfterPrint_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDetailAfterPrint_result.class, metaDataMap);
    }

    public updateDetailAfterPrint_result() {
    }

    public updateDetailAfterPrint_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDetailAfterPrint_result(updateDetailAfterPrint_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateDetailAfterPrint_result deepCopy() {
      return new updateDetailAfterPrint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateDetailAfterPrint_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDetailAfterPrint_result)
        return this.equals((updateDetailAfterPrint_result)that);
      return false;
    }

    public boolean equals(updateDetailAfterPrint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDetailAfterPrint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDetailAfterPrint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDetailAfterPrint_resultStandardSchemeFactory implements SchemeFactory {
      public updateDetailAfterPrint_resultStandardScheme getScheme() {
        return new updateDetailAfterPrint_resultStandardScheme();
      }
    }

    private static class updateDetailAfterPrint_resultStandardScheme extends StandardScheme<updateDetailAfterPrint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDetailAfterPrint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDetailAfterPrint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDetailAfterPrint_resultTupleSchemeFactory implements SchemeFactory {
      public updateDetailAfterPrint_resultTupleScheme getScheme() {
        return new updateDetailAfterPrint_resultTupleScheme();
      }
    }

    private static class updateDetailAfterPrint_resultTupleScheme extends TupleScheme<updateDetailAfterPrint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDetailAfterPrint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDetailAfterPrint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateAppendAfterOrderPrize_args implements org.apache.thrift.TBase<updateAppendAfterOrderPrize_args, updateAppendAfterOrderPrize_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppendAfterOrderPrize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppendAfterOrderPrize_args");

    private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIZE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("prizeLevel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppendAfterOrderPrize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppendAfterOrderPrize_argsTupleSchemeFactory());
    }

    public String orderNo; // required
    public int prizeLevel; // required
    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_NO((short)1, "orderNo"),
      PRIZE_LEVEL((short)2, "prizeLevel"),
      USER_ID((short)3, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_NO
            return ORDER_NO;
          case 2: // PRIZE_LEVEL
            return PRIZE_LEVEL;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIZELEVEL_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIZE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("prizeLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppendAfterOrderPrize_args.class, metaDataMap);
    }

    public updateAppendAfterOrderPrize_args() {
    }

    public updateAppendAfterOrderPrize_args(
      String orderNo,
      int prizeLevel,
      long userId)
    {
      this();
      this.orderNo = orderNo;
      this.prizeLevel = prizeLevel;
      setPrizeLevelIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppendAfterOrderPrize_args(updateAppendAfterOrderPrize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrderNo()) {
        this.orderNo = other.orderNo;
      }
      this.prizeLevel = other.prizeLevel;
      this.userId = other.userId;
    }

    public updateAppendAfterOrderPrize_args deepCopy() {
      return new updateAppendAfterOrderPrize_args(this);
    }

    @Override
    public void clear() {
      this.orderNo = null;
      setPrizeLevelIsSet(false);
      this.prizeLevel = 0;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public String getOrderNo() {
      return this.orderNo;
    }

    public updateAppendAfterOrderPrize_args setOrderNo(String orderNo) {
      this.orderNo = orderNo;
      return this;
    }

    public void unsetOrderNo() {
      this.orderNo = null;
    }

    /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderNo() {
      return this.orderNo != null;
    }

    public void setOrderNoIsSet(boolean value) {
      if (!value) {
        this.orderNo = null;
      }
    }

    public int getPrizeLevel() {
      return this.prizeLevel;
    }

    public updateAppendAfterOrderPrize_args setPrizeLevel(int prizeLevel) {
      this.prizeLevel = prizeLevel;
      setPrizeLevelIsSet(true);
      return this;
    }

    public void unsetPrizeLevel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIZELEVEL_ISSET_ID);
    }

    /** Returns true if field prizeLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetPrizeLevel() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIZELEVEL_ISSET_ID);
    }

    public void setPrizeLevelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIZELEVEL_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public updateAppendAfterOrderPrize_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_NO:
        if (value == null) {
          unsetOrderNo();
        } else {
          setOrderNo((String)value);
        }
        break;

      case PRIZE_LEVEL:
        if (value == null) {
          unsetPrizeLevel();
        } else {
          setPrizeLevel((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_NO:
        return getOrderNo();

      case PRIZE_LEVEL:
        return Integer.valueOf(getPrizeLevel());

      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_NO:
        return isSetOrderNo();
      case PRIZE_LEVEL:
        return isSetPrizeLevel();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppendAfterOrderPrize_args)
        return this.equals((updateAppendAfterOrderPrize_args)that);
      return false;
    }

    public boolean equals(updateAppendAfterOrderPrize_args that) {
      if (that == null)
        return false;

      boolean this_present_orderNo = true && this.isSetOrderNo();
      boolean that_present_orderNo = true && that.isSetOrderNo();
      if (this_present_orderNo || that_present_orderNo) {
        if (!(this_present_orderNo && that_present_orderNo))
          return false;
        if (!this.orderNo.equals(that.orderNo))
          return false;
      }

      boolean this_present_prizeLevel = true;
      boolean that_present_prizeLevel = true;
      if (this_present_prizeLevel || that_present_prizeLevel) {
        if (!(this_present_prizeLevel && that_present_prizeLevel))
          return false;
        if (this.prizeLevel != that.prizeLevel)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppendAfterOrderPrize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrizeLevel()).compareTo(other.isSetPrizeLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrizeLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizeLevel, other.prizeLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppendAfterOrderPrize_args(");
      boolean first = true;

      sb.append("orderNo:");
      if (this.orderNo == null) {
        sb.append("null");
      } else {
        sb.append(this.orderNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prizeLevel:");
      sb.append(this.prizeLevel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppendAfterOrderPrize_argsStandardSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrderPrize_argsStandardScheme getScheme() {
        return new updateAppendAfterOrderPrize_argsStandardScheme();
      }
    }

    private static class updateAppendAfterOrderPrize_argsStandardScheme extends StandardScheme<updateAppendAfterOrderPrize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppendAfterOrderPrize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderNo = iprot.readString();
                struct.setOrderNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIZE_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prizeLevel = iprot.readI32();
                struct.setPrizeLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppendAfterOrderPrize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderNo != null) {
          oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
          oprot.writeString(struct.orderNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIZE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.prizeLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppendAfterOrderPrize_argsTupleSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrderPrize_argsTupleScheme getScheme() {
        return new updateAppendAfterOrderPrize_argsTupleScheme();
      }
    }

    private static class updateAppendAfterOrderPrize_argsTupleScheme extends TupleScheme<updateAppendAfterOrderPrize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrderPrize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderNo()) {
          optionals.set(0);
        }
        if (struct.isSetPrizeLevel()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOrderNo()) {
          oprot.writeString(struct.orderNo);
        }
        if (struct.isSetPrizeLevel()) {
          oprot.writeI32(struct.prizeLevel);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrderPrize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.orderNo = iprot.readString();
          struct.setOrderNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prizeLevel = iprot.readI32();
          struct.setPrizeLevelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class updateAppendAfterOrderPrize_result implements org.apache.thrift.TBase<updateAppendAfterOrderPrize_result, updateAppendAfterOrderPrize_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppendAfterOrderPrize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppendAfterOrderPrize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppendAfterOrderPrize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppendAfterOrderPrize_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppendAfterOrderPrize_result.class, metaDataMap);
    }

    public updateAppendAfterOrderPrize_result() {
    }

    public updateAppendAfterOrderPrize_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppendAfterOrderPrize_result(updateAppendAfterOrderPrize_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateAppendAfterOrderPrize_result deepCopy() {
      return new updateAppendAfterOrderPrize_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateAppendAfterOrderPrize_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppendAfterOrderPrize_result)
        return this.equals((updateAppendAfterOrderPrize_result)that);
      return false;
    }

    public boolean equals(updateAppendAfterOrderPrize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppendAfterOrderPrize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppendAfterOrderPrize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppendAfterOrderPrize_resultStandardSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrderPrize_resultStandardScheme getScheme() {
        return new updateAppendAfterOrderPrize_resultStandardScheme();
      }
    }

    private static class updateAppendAfterOrderPrize_resultStandardScheme extends StandardScheme<updateAppendAfterOrderPrize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppendAfterOrderPrize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppendAfterOrderPrize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppendAfterOrderPrize_resultTupleSchemeFactory implements SchemeFactory {
      public updateAppendAfterOrderPrize_resultTupleScheme getScheme() {
        return new updateAppendAfterOrderPrize_resultTupleScheme();
      }
    }

    private static class updateAppendAfterOrderPrize_resultTupleScheme extends TupleScheme<updateAppendAfterOrderPrize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrderPrize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppendAfterOrderPrize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
