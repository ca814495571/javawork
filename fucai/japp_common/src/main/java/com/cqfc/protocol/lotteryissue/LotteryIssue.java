/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LotteryIssue implements org.apache.thrift.TBase<LotteryIssue, LotteryIssue._Fields>, java.io.Serializable, Cloneable, Comparable<LotteryIssue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LotteryIssue");

  private static final org.apache.thrift.protocol.TField ISSUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issueId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("drawResult", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DRAW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("drawTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SINGLE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("singleEndTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMPOUND_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("compoundEndTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SINGLE_TOGETHER_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("singleTogetherEndTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COMPOUND_TOGETHER_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("compoundTogetherEndTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SINGLE_UPLOAD_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("singleUploadEndTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PRINT_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("printBeginTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PRINT_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("printEndTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField OFFICIAL_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialBeginTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OFFICIAL_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialEndTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PRIZE_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("prizePool", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SALES_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("salesVolume", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LotteryIssueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LotteryIssueTupleSchemeFactory());
  }

  public int issueId; // required
  public String lotteryId; // required
  public String issueNo; // required
  public String drawResult; // required
  public int state; // required
  public String drawTime; // required
  public String beginTime; // required
  public String singleEndTime; // required
  public String compoundEndTime; // required
  public String singleTogetherEndTime; // required
  public String compoundTogetherEndTime; // required
  public String singleUploadEndTime; // required
  public String printBeginTime; // required
  public String printEndTime; // required
  public String officialBeginTime; // required
  public String officialEndTime; // required
  public long prizePool; // required
  public String ext; // required
  public long salesVolume; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ISSUE_ID((short)1, "issueId"),
    LOTTERY_ID((short)2, "lotteryId"),
    ISSUE_NO((short)3, "issueNo"),
    DRAW_RESULT((short)4, "drawResult"),
    STATE((short)5, "state"),
    DRAW_TIME((short)6, "drawTime"),
    BEGIN_TIME((short)7, "beginTime"),
    SINGLE_END_TIME((short)8, "singleEndTime"),
    COMPOUND_END_TIME((short)9, "compoundEndTime"),
    SINGLE_TOGETHER_END_TIME((short)10, "singleTogetherEndTime"),
    COMPOUND_TOGETHER_END_TIME((short)11, "compoundTogetherEndTime"),
    SINGLE_UPLOAD_END_TIME((short)12, "singleUploadEndTime"),
    PRINT_BEGIN_TIME((short)13, "printBeginTime"),
    PRINT_END_TIME((short)14, "printEndTime"),
    OFFICIAL_BEGIN_TIME((short)15, "officialBeginTime"),
    OFFICIAL_END_TIME((short)16, "officialEndTime"),
    PRIZE_POOL((short)17, "prizePool"),
    EXT((short)18, "ext"),
    SALES_VOLUME((short)19, "salesVolume"),
    CREATE_TIME((short)20, "createTime"),
    LAST_UPDATE_TIME((short)21, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ISSUE_ID
          return ISSUE_ID;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // ISSUE_NO
          return ISSUE_NO;
        case 4: // DRAW_RESULT
          return DRAW_RESULT;
        case 5: // STATE
          return STATE;
        case 6: // DRAW_TIME
          return DRAW_TIME;
        case 7: // BEGIN_TIME
          return BEGIN_TIME;
        case 8: // SINGLE_END_TIME
          return SINGLE_END_TIME;
        case 9: // COMPOUND_END_TIME
          return COMPOUND_END_TIME;
        case 10: // SINGLE_TOGETHER_END_TIME
          return SINGLE_TOGETHER_END_TIME;
        case 11: // COMPOUND_TOGETHER_END_TIME
          return COMPOUND_TOGETHER_END_TIME;
        case 12: // SINGLE_UPLOAD_END_TIME
          return SINGLE_UPLOAD_END_TIME;
        case 13: // PRINT_BEGIN_TIME
          return PRINT_BEGIN_TIME;
        case 14: // PRINT_END_TIME
          return PRINT_END_TIME;
        case 15: // OFFICIAL_BEGIN_TIME
          return OFFICIAL_BEGIN_TIME;
        case 16: // OFFICIAL_END_TIME
          return OFFICIAL_END_TIME;
        case 17: // PRIZE_POOL
          return PRIZE_POOL;
        case 18: // EXT
          return EXT;
        case 19: // SALES_VOLUME
          return SALES_VOLUME;
        case 20: // CREATE_TIME
          return CREATE_TIME;
        case 21: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSUEID_ISSET_ID = 0;
  private static final int __STATE_ISSET_ID = 1;
  private static final int __PRIZEPOOL_ISSET_ID = 2;
  private static final int __SALESVOLUME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ISSUE_ID, new org.apache.thrift.meta_data.FieldMetaData("issueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("drawResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DRAW_TIME, new org.apache.thrift.meta_data.FieldMetaData("drawTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGLE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("singleEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPOUND_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("compoundEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGLE_TOGETHER_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("singleTogetherEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPOUND_TOGETHER_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("compoundTogetherEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGLE_UPLOAD_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("singleUploadEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINT_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("printBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINT_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("printEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICIAL_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("officialBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICIAL_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("officialEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIZE_POOL, new org.apache.thrift.meta_data.FieldMetaData("prizePool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALES_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("salesVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LotteryIssue.class, metaDataMap);
  }

  public LotteryIssue() {
  }

  public LotteryIssue(
    int issueId,
    String lotteryId,
    String issueNo,
    String drawResult,
    int state,
    String drawTime,
    String beginTime,
    String singleEndTime,
    String compoundEndTime,
    String singleTogetherEndTime,
    String compoundTogetherEndTime,
    String singleUploadEndTime,
    String printBeginTime,
    String printEndTime,
    String officialBeginTime,
    String officialEndTime,
    long prizePool,
    String ext,
    long salesVolume,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.issueId = issueId;
    setIssueIdIsSet(true);
    this.lotteryId = lotteryId;
    this.issueNo = issueNo;
    this.drawResult = drawResult;
    this.state = state;
    setStateIsSet(true);
    this.drawTime = drawTime;
    this.beginTime = beginTime;
    this.singleEndTime = singleEndTime;
    this.compoundEndTime = compoundEndTime;
    this.singleTogetherEndTime = singleTogetherEndTime;
    this.compoundTogetherEndTime = compoundTogetherEndTime;
    this.singleUploadEndTime = singleUploadEndTime;
    this.printBeginTime = printBeginTime;
    this.printEndTime = printEndTime;
    this.officialBeginTime = officialBeginTime;
    this.officialEndTime = officialEndTime;
    this.prizePool = prizePool;
    setPrizePoolIsSet(true);
    this.ext = ext;
    this.salesVolume = salesVolume;
    setSalesVolumeIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LotteryIssue(LotteryIssue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.issueId = other.issueId;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    if (other.isSetDrawResult()) {
      this.drawResult = other.drawResult;
    }
    this.state = other.state;
    if (other.isSetDrawTime()) {
      this.drawTime = other.drawTime;
    }
    if (other.isSetBeginTime()) {
      this.beginTime = other.beginTime;
    }
    if (other.isSetSingleEndTime()) {
      this.singleEndTime = other.singleEndTime;
    }
    if (other.isSetCompoundEndTime()) {
      this.compoundEndTime = other.compoundEndTime;
    }
    if (other.isSetSingleTogetherEndTime()) {
      this.singleTogetherEndTime = other.singleTogetherEndTime;
    }
    if (other.isSetCompoundTogetherEndTime()) {
      this.compoundTogetherEndTime = other.compoundTogetherEndTime;
    }
    if (other.isSetSingleUploadEndTime()) {
      this.singleUploadEndTime = other.singleUploadEndTime;
    }
    if (other.isSetPrintBeginTime()) {
      this.printBeginTime = other.printBeginTime;
    }
    if (other.isSetPrintEndTime()) {
      this.printEndTime = other.printEndTime;
    }
    if (other.isSetOfficialBeginTime()) {
      this.officialBeginTime = other.officialBeginTime;
    }
    if (other.isSetOfficialEndTime()) {
      this.officialEndTime = other.officialEndTime;
    }
    this.prizePool = other.prizePool;
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    this.salesVolume = other.salesVolume;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public LotteryIssue deepCopy() {
    return new LotteryIssue(this);
  }

  @Override
  public void clear() {
    setIssueIdIsSet(false);
    this.issueId = 0;
    this.lotteryId = null;
    this.issueNo = null;
    this.drawResult = null;
    setStateIsSet(false);
    this.state = 0;
    this.drawTime = null;
    this.beginTime = null;
    this.singleEndTime = null;
    this.compoundEndTime = null;
    this.singleTogetherEndTime = null;
    this.compoundTogetherEndTime = null;
    this.singleUploadEndTime = null;
    this.printBeginTime = null;
    this.printEndTime = null;
    this.officialBeginTime = null;
    this.officialEndTime = null;
    setPrizePoolIsSet(false);
    this.prizePool = 0;
    this.ext = null;
    setSalesVolumeIsSet(false);
    this.salesVolume = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public int getIssueId() {
    return this.issueId;
  }

  public LotteryIssue setIssueId(int issueId) {
    this.issueId = issueId;
    setIssueIdIsSet(true);
    return this;
  }

  public void unsetIssueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUEID_ISSET_ID);
  }

  /** Returns true if field issueId is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueId() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUEID_ISSET_ID);
  }

  public void setIssueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUEID_ISSET_ID, value);
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public LotteryIssue setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public LotteryIssue setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public String getDrawResult() {
    return this.drawResult;
  }

  public LotteryIssue setDrawResult(String drawResult) {
    this.drawResult = drawResult;
    return this;
  }

  public void unsetDrawResult() {
    this.drawResult = null;
  }

  /** Returns true if field drawResult is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawResult() {
    return this.drawResult != null;
  }

  public void setDrawResultIsSet(boolean value) {
    if (!value) {
      this.drawResult = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public LotteryIssue setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getDrawTime() {
    return this.drawTime;
  }

  public LotteryIssue setDrawTime(String drawTime) {
    this.drawTime = drawTime;
    return this;
  }

  public void unsetDrawTime() {
    this.drawTime = null;
  }

  /** Returns true if field drawTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawTime() {
    return this.drawTime != null;
  }

  public void setDrawTimeIsSet(boolean value) {
    if (!value) {
      this.drawTime = null;
    }
  }

  public String getBeginTime() {
    return this.beginTime;
  }

  public LotteryIssue setBeginTime(String beginTime) {
    this.beginTime = beginTime;
    return this;
  }

  public void unsetBeginTime() {
    this.beginTime = null;
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return this.beginTime != null;
  }

  public void setBeginTimeIsSet(boolean value) {
    if (!value) {
      this.beginTime = null;
    }
  }

  public String getSingleEndTime() {
    return this.singleEndTime;
  }

  public LotteryIssue setSingleEndTime(String singleEndTime) {
    this.singleEndTime = singleEndTime;
    return this;
  }

  public void unsetSingleEndTime() {
    this.singleEndTime = null;
  }

  /** Returns true if field singleEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleEndTime() {
    return this.singleEndTime != null;
  }

  public void setSingleEndTimeIsSet(boolean value) {
    if (!value) {
      this.singleEndTime = null;
    }
  }

  public String getCompoundEndTime() {
    return this.compoundEndTime;
  }

  public LotteryIssue setCompoundEndTime(String compoundEndTime) {
    this.compoundEndTime = compoundEndTime;
    return this;
  }

  public void unsetCompoundEndTime() {
    this.compoundEndTime = null;
  }

  /** Returns true if field compoundEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompoundEndTime() {
    return this.compoundEndTime != null;
  }

  public void setCompoundEndTimeIsSet(boolean value) {
    if (!value) {
      this.compoundEndTime = null;
    }
  }

  public String getSingleTogetherEndTime() {
    return this.singleTogetherEndTime;
  }

  public LotteryIssue setSingleTogetherEndTime(String singleTogetherEndTime) {
    this.singleTogetherEndTime = singleTogetherEndTime;
    return this;
  }

  public void unsetSingleTogetherEndTime() {
    this.singleTogetherEndTime = null;
  }

  /** Returns true if field singleTogetherEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleTogetherEndTime() {
    return this.singleTogetherEndTime != null;
  }

  public void setSingleTogetherEndTimeIsSet(boolean value) {
    if (!value) {
      this.singleTogetherEndTime = null;
    }
  }

  public String getCompoundTogetherEndTime() {
    return this.compoundTogetherEndTime;
  }

  public LotteryIssue setCompoundTogetherEndTime(String compoundTogetherEndTime) {
    this.compoundTogetherEndTime = compoundTogetherEndTime;
    return this;
  }

  public void unsetCompoundTogetherEndTime() {
    this.compoundTogetherEndTime = null;
  }

  /** Returns true if field compoundTogetherEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCompoundTogetherEndTime() {
    return this.compoundTogetherEndTime != null;
  }

  public void setCompoundTogetherEndTimeIsSet(boolean value) {
    if (!value) {
      this.compoundTogetherEndTime = null;
    }
  }

  public String getSingleUploadEndTime() {
    return this.singleUploadEndTime;
  }

  public LotteryIssue setSingleUploadEndTime(String singleUploadEndTime) {
    this.singleUploadEndTime = singleUploadEndTime;
    return this;
  }

  public void unsetSingleUploadEndTime() {
    this.singleUploadEndTime = null;
  }

  /** Returns true if field singleUploadEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleUploadEndTime() {
    return this.singleUploadEndTime != null;
  }

  public void setSingleUploadEndTimeIsSet(boolean value) {
    if (!value) {
      this.singleUploadEndTime = null;
    }
  }

  public String getPrintBeginTime() {
    return this.printBeginTime;
  }

  public LotteryIssue setPrintBeginTime(String printBeginTime) {
    this.printBeginTime = printBeginTime;
    return this;
  }

  public void unsetPrintBeginTime() {
    this.printBeginTime = null;
  }

  /** Returns true if field printBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintBeginTime() {
    return this.printBeginTime != null;
  }

  public void setPrintBeginTimeIsSet(boolean value) {
    if (!value) {
      this.printBeginTime = null;
    }
  }

  public String getPrintEndTime() {
    return this.printEndTime;
  }

  public LotteryIssue setPrintEndTime(String printEndTime) {
    this.printEndTime = printEndTime;
    return this;
  }

  public void unsetPrintEndTime() {
    this.printEndTime = null;
  }

  /** Returns true if field printEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPrintEndTime() {
    return this.printEndTime != null;
  }

  public void setPrintEndTimeIsSet(boolean value) {
    if (!value) {
      this.printEndTime = null;
    }
  }

  public String getOfficialBeginTime() {
    return this.officialBeginTime;
  }

  public LotteryIssue setOfficialBeginTime(String officialBeginTime) {
    this.officialBeginTime = officialBeginTime;
    return this;
  }

  public void unsetOfficialBeginTime() {
    this.officialBeginTime = null;
  }

  /** Returns true if field officialBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialBeginTime() {
    return this.officialBeginTime != null;
  }

  public void setOfficialBeginTimeIsSet(boolean value) {
    if (!value) {
      this.officialBeginTime = null;
    }
  }

  public String getOfficialEndTime() {
    return this.officialEndTime;
  }

  public LotteryIssue setOfficialEndTime(String officialEndTime) {
    this.officialEndTime = officialEndTime;
    return this;
  }

  public void unsetOfficialEndTime() {
    this.officialEndTime = null;
  }

  /** Returns true if field officialEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialEndTime() {
    return this.officialEndTime != null;
  }

  public void setOfficialEndTimeIsSet(boolean value) {
    if (!value) {
      this.officialEndTime = null;
    }
  }

  public long getPrizePool() {
    return this.prizePool;
  }

  public LotteryIssue setPrizePool(long prizePool) {
    this.prizePool = prizePool;
    setPrizePoolIsSet(true);
    return this;
  }

  public void unsetPrizePool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIZEPOOL_ISSET_ID);
  }

  /** Returns true if field prizePool is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizePool() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIZEPOOL_ISSET_ID);
  }

  public void setPrizePoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIZEPOOL_ISSET_ID, value);
  }

  public String getExt() {
    return this.ext;
  }

  public LotteryIssue setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public long getSalesVolume() {
    return this.salesVolume;
  }

  public LotteryIssue setSalesVolume(long salesVolume) {
    this.salesVolume = salesVolume;
    setSalesVolumeIsSet(true);
    return this;
  }

  public void unsetSalesVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALESVOLUME_ISSET_ID);
  }

  /** Returns true if field salesVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetSalesVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __SALESVOLUME_ISSET_ID);
  }

  public void setSalesVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALESVOLUME_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public LotteryIssue setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public LotteryIssue setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ISSUE_ID:
      if (value == null) {
        unsetIssueId();
      } else {
        setIssueId((Integer)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case DRAW_RESULT:
      if (value == null) {
        unsetDrawResult();
      } else {
        setDrawResult((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case DRAW_TIME:
      if (value == null) {
        unsetDrawTime();
      } else {
        setDrawTime((String)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((String)value);
      }
      break;

    case SINGLE_END_TIME:
      if (value == null) {
        unsetSingleEndTime();
      } else {
        setSingleEndTime((String)value);
      }
      break;

    case COMPOUND_END_TIME:
      if (value == null) {
        unsetCompoundEndTime();
      } else {
        setCompoundEndTime((String)value);
      }
      break;

    case SINGLE_TOGETHER_END_TIME:
      if (value == null) {
        unsetSingleTogetherEndTime();
      } else {
        setSingleTogetherEndTime((String)value);
      }
      break;

    case COMPOUND_TOGETHER_END_TIME:
      if (value == null) {
        unsetCompoundTogetherEndTime();
      } else {
        setCompoundTogetherEndTime((String)value);
      }
      break;

    case SINGLE_UPLOAD_END_TIME:
      if (value == null) {
        unsetSingleUploadEndTime();
      } else {
        setSingleUploadEndTime((String)value);
      }
      break;

    case PRINT_BEGIN_TIME:
      if (value == null) {
        unsetPrintBeginTime();
      } else {
        setPrintBeginTime((String)value);
      }
      break;

    case PRINT_END_TIME:
      if (value == null) {
        unsetPrintEndTime();
      } else {
        setPrintEndTime((String)value);
      }
      break;

    case OFFICIAL_BEGIN_TIME:
      if (value == null) {
        unsetOfficialBeginTime();
      } else {
        setOfficialBeginTime((String)value);
      }
      break;

    case OFFICIAL_END_TIME:
      if (value == null) {
        unsetOfficialEndTime();
      } else {
        setOfficialEndTime((String)value);
      }
      break;

    case PRIZE_POOL:
      if (value == null) {
        unsetPrizePool();
      } else {
        setPrizePool((Long)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case SALES_VOLUME:
      if (value == null) {
        unsetSalesVolume();
      } else {
        setSalesVolume((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ISSUE_ID:
      return Integer.valueOf(getIssueId());

    case LOTTERY_ID:
      return getLotteryId();

    case ISSUE_NO:
      return getIssueNo();

    case DRAW_RESULT:
      return getDrawResult();

    case STATE:
      return Integer.valueOf(getState());

    case DRAW_TIME:
      return getDrawTime();

    case BEGIN_TIME:
      return getBeginTime();

    case SINGLE_END_TIME:
      return getSingleEndTime();

    case COMPOUND_END_TIME:
      return getCompoundEndTime();

    case SINGLE_TOGETHER_END_TIME:
      return getSingleTogetherEndTime();

    case COMPOUND_TOGETHER_END_TIME:
      return getCompoundTogetherEndTime();

    case SINGLE_UPLOAD_END_TIME:
      return getSingleUploadEndTime();

    case PRINT_BEGIN_TIME:
      return getPrintBeginTime();

    case PRINT_END_TIME:
      return getPrintEndTime();

    case OFFICIAL_BEGIN_TIME:
      return getOfficialBeginTime();

    case OFFICIAL_END_TIME:
      return getOfficialEndTime();

    case PRIZE_POOL:
      return Long.valueOf(getPrizePool());

    case EXT:
      return getExt();

    case SALES_VOLUME:
      return Long.valueOf(getSalesVolume());

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ISSUE_ID:
      return isSetIssueId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case ISSUE_NO:
      return isSetIssueNo();
    case DRAW_RESULT:
      return isSetDrawResult();
    case STATE:
      return isSetState();
    case DRAW_TIME:
      return isSetDrawTime();
    case BEGIN_TIME:
      return isSetBeginTime();
    case SINGLE_END_TIME:
      return isSetSingleEndTime();
    case COMPOUND_END_TIME:
      return isSetCompoundEndTime();
    case SINGLE_TOGETHER_END_TIME:
      return isSetSingleTogetherEndTime();
    case COMPOUND_TOGETHER_END_TIME:
      return isSetCompoundTogetherEndTime();
    case SINGLE_UPLOAD_END_TIME:
      return isSetSingleUploadEndTime();
    case PRINT_BEGIN_TIME:
      return isSetPrintBeginTime();
    case PRINT_END_TIME:
      return isSetPrintEndTime();
    case OFFICIAL_BEGIN_TIME:
      return isSetOfficialBeginTime();
    case OFFICIAL_END_TIME:
      return isSetOfficialEndTime();
    case PRIZE_POOL:
      return isSetPrizePool();
    case EXT:
      return isSetExt();
    case SALES_VOLUME:
      return isSetSalesVolume();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LotteryIssue)
      return this.equals((LotteryIssue)that);
    return false;
  }

  public boolean equals(LotteryIssue that) {
    if (that == null)
      return false;

    boolean this_present_issueId = true;
    boolean that_present_issueId = true;
    if (this_present_issueId || that_present_issueId) {
      if (!(this_present_issueId && that_present_issueId))
        return false;
      if (this.issueId != that.issueId)
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_drawResult = true && this.isSetDrawResult();
    boolean that_present_drawResult = true && that.isSetDrawResult();
    if (this_present_drawResult || that_present_drawResult) {
      if (!(this_present_drawResult && that_present_drawResult))
        return false;
      if (!this.drawResult.equals(that.drawResult))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_drawTime = true && this.isSetDrawTime();
    boolean that_present_drawTime = true && that.isSetDrawTime();
    if (this_present_drawTime || that_present_drawTime) {
      if (!(this_present_drawTime && that_present_drawTime))
        return false;
      if (!this.drawTime.equals(that.drawTime))
        return false;
    }

    boolean this_present_beginTime = true && this.isSetBeginTime();
    boolean that_present_beginTime = true && that.isSetBeginTime();
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (!this.beginTime.equals(that.beginTime))
        return false;
    }

    boolean this_present_singleEndTime = true && this.isSetSingleEndTime();
    boolean that_present_singleEndTime = true && that.isSetSingleEndTime();
    if (this_present_singleEndTime || that_present_singleEndTime) {
      if (!(this_present_singleEndTime && that_present_singleEndTime))
        return false;
      if (!this.singleEndTime.equals(that.singleEndTime))
        return false;
    }

    boolean this_present_compoundEndTime = true && this.isSetCompoundEndTime();
    boolean that_present_compoundEndTime = true && that.isSetCompoundEndTime();
    if (this_present_compoundEndTime || that_present_compoundEndTime) {
      if (!(this_present_compoundEndTime && that_present_compoundEndTime))
        return false;
      if (!this.compoundEndTime.equals(that.compoundEndTime))
        return false;
    }

    boolean this_present_singleTogetherEndTime = true && this.isSetSingleTogetherEndTime();
    boolean that_present_singleTogetherEndTime = true && that.isSetSingleTogetherEndTime();
    if (this_present_singleTogetherEndTime || that_present_singleTogetherEndTime) {
      if (!(this_present_singleTogetherEndTime && that_present_singleTogetherEndTime))
        return false;
      if (!this.singleTogetherEndTime.equals(that.singleTogetherEndTime))
        return false;
    }

    boolean this_present_compoundTogetherEndTime = true && this.isSetCompoundTogetherEndTime();
    boolean that_present_compoundTogetherEndTime = true && that.isSetCompoundTogetherEndTime();
    if (this_present_compoundTogetherEndTime || that_present_compoundTogetherEndTime) {
      if (!(this_present_compoundTogetherEndTime && that_present_compoundTogetherEndTime))
        return false;
      if (!this.compoundTogetherEndTime.equals(that.compoundTogetherEndTime))
        return false;
    }

    boolean this_present_singleUploadEndTime = true && this.isSetSingleUploadEndTime();
    boolean that_present_singleUploadEndTime = true && that.isSetSingleUploadEndTime();
    if (this_present_singleUploadEndTime || that_present_singleUploadEndTime) {
      if (!(this_present_singleUploadEndTime && that_present_singleUploadEndTime))
        return false;
      if (!this.singleUploadEndTime.equals(that.singleUploadEndTime))
        return false;
    }

    boolean this_present_printBeginTime = true && this.isSetPrintBeginTime();
    boolean that_present_printBeginTime = true && that.isSetPrintBeginTime();
    if (this_present_printBeginTime || that_present_printBeginTime) {
      if (!(this_present_printBeginTime && that_present_printBeginTime))
        return false;
      if (!this.printBeginTime.equals(that.printBeginTime))
        return false;
    }

    boolean this_present_printEndTime = true && this.isSetPrintEndTime();
    boolean that_present_printEndTime = true && that.isSetPrintEndTime();
    if (this_present_printEndTime || that_present_printEndTime) {
      if (!(this_present_printEndTime && that_present_printEndTime))
        return false;
      if (!this.printEndTime.equals(that.printEndTime))
        return false;
    }

    boolean this_present_officialBeginTime = true && this.isSetOfficialBeginTime();
    boolean that_present_officialBeginTime = true && that.isSetOfficialBeginTime();
    if (this_present_officialBeginTime || that_present_officialBeginTime) {
      if (!(this_present_officialBeginTime && that_present_officialBeginTime))
        return false;
      if (!this.officialBeginTime.equals(that.officialBeginTime))
        return false;
    }

    boolean this_present_officialEndTime = true && this.isSetOfficialEndTime();
    boolean that_present_officialEndTime = true && that.isSetOfficialEndTime();
    if (this_present_officialEndTime || that_present_officialEndTime) {
      if (!(this_present_officialEndTime && that_present_officialEndTime))
        return false;
      if (!this.officialEndTime.equals(that.officialEndTime))
        return false;
    }

    boolean this_present_prizePool = true;
    boolean that_present_prizePool = true;
    if (this_present_prizePool || that_present_prizePool) {
      if (!(this_present_prizePool && that_present_prizePool))
        return false;
      if (this.prizePool != that.prizePool)
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_salesVolume = true;
    boolean that_present_salesVolume = true;
    if (this_present_salesVolume || that_present_salesVolume) {
      if (!(this_present_salesVolume && that_present_salesVolume))
        return false;
      if (this.salesVolume != that.salesVolume)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LotteryIssue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIssueId()).compareTo(other.isSetIssueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueId, other.issueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawResult()).compareTo(other.isSetDrawResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawResult, other.drawResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawTime()).compareTo(other.isSetDrawTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawTime, other.drawTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleEndTime()).compareTo(other.isSetSingleEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleEndTime, other.singleEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompoundEndTime()).compareTo(other.isSetCompoundEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompoundEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compoundEndTime, other.compoundEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleTogetherEndTime()).compareTo(other.isSetSingleTogetherEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleTogetherEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleTogetherEndTime, other.singleTogetherEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompoundTogetherEndTime()).compareTo(other.isSetCompoundTogetherEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompoundTogetherEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compoundTogetherEndTime, other.compoundTogetherEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleUploadEndTime()).compareTo(other.isSetSingleUploadEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleUploadEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleUploadEndTime, other.singleUploadEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintBeginTime()).compareTo(other.isSetPrintBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printBeginTime, other.printBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrintEndTime()).compareTo(other.isSetPrintEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrintEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printEndTime, other.printEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialBeginTime()).compareTo(other.isSetOfficialBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialBeginTime, other.officialBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialEndTime()).compareTo(other.isSetOfficialEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialEndTime, other.officialEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizePool()).compareTo(other.isSetPrizePool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizePool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizePool, other.prizePool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalesVolume()).compareTo(other.isSetSalesVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalesVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salesVolume, other.salesVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LotteryIssue(");
    boolean first = true;

    sb.append("issueId:");
    sb.append(this.issueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawResult:");
    if (this.drawResult == null) {
      sb.append("null");
    } else {
      sb.append(this.drawResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawTime:");
    if (this.drawTime == null) {
      sb.append("null");
    } else {
      sb.append(this.drawTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    if (this.beginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.beginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleEndTime:");
    if (this.singleEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.singleEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compoundEndTime:");
    if (this.compoundEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.compoundEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleTogetherEndTime:");
    if (this.singleTogetherEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.singleTogetherEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compoundTogetherEndTime:");
    if (this.compoundTogetherEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.compoundTogetherEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleUploadEndTime:");
    if (this.singleUploadEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.singleUploadEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printBeginTime:");
    if (this.printBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.printBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printEndTime:");
    if (this.printEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.printEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("officialBeginTime:");
    if (this.officialBeginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.officialBeginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("officialEndTime:");
    if (this.officialEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.officialEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizePool:");
    sb.append(this.prizePool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salesVolume:");
    sb.append(this.salesVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LotteryIssueStandardSchemeFactory implements SchemeFactory {
    public LotteryIssueStandardScheme getScheme() {
      return new LotteryIssueStandardScheme();
    }
  }

  private static class LotteryIssueStandardScheme extends StandardScheme<LotteryIssue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LotteryIssue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ISSUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.issueId = iprot.readI32();
              struct.setIssueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DRAW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawResult = iprot.readString();
              struct.setDrawResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DRAW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawTime = iprot.readString();
              struct.setDrawTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginTime = iprot.readString();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SINGLE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.singleEndTime = iprot.readString();
              struct.setSingleEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPOUND_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compoundEndTime = iprot.readString();
              struct.setCompoundEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SINGLE_TOGETHER_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.singleTogetherEndTime = iprot.readString();
              struct.setSingleTogetherEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPOUND_TOGETHER_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compoundTogetherEndTime = iprot.readString();
              struct.setCompoundTogetherEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SINGLE_UPLOAD_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.singleUploadEndTime = iprot.readString();
              struct.setSingleUploadEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRINT_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.printBeginTime = iprot.readString();
              struct.setPrintBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRINT_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.printEndTime = iprot.readString();
              struct.setPrintEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OFFICIAL_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officialBeginTime = iprot.readString();
              struct.setOfficialBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OFFICIAL_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officialEndTime = iprot.readString();
              struct.setOfficialEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRIZE_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prizePool = iprot.readI64();
              struct.setPrizePoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SALES_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.salesVolume = iprot.readI64();
              struct.setSalesVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LotteryIssue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ISSUE_ID_FIELD_DESC);
      oprot.writeI32(struct.issueId);
      oprot.writeFieldEnd();
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      if (struct.drawResult != null) {
        oprot.writeFieldBegin(DRAW_RESULT_FIELD_DESC);
        oprot.writeString(struct.drawResult);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.drawTime != null) {
        oprot.writeFieldBegin(DRAW_TIME_FIELD_DESC);
        oprot.writeString(struct.drawTime);
        oprot.writeFieldEnd();
      }
      if (struct.beginTime != null) {
        oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.beginTime);
        oprot.writeFieldEnd();
      }
      if (struct.singleEndTime != null) {
        oprot.writeFieldBegin(SINGLE_END_TIME_FIELD_DESC);
        oprot.writeString(struct.singleEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.compoundEndTime != null) {
        oprot.writeFieldBegin(COMPOUND_END_TIME_FIELD_DESC);
        oprot.writeString(struct.compoundEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.singleTogetherEndTime != null) {
        oprot.writeFieldBegin(SINGLE_TOGETHER_END_TIME_FIELD_DESC);
        oprot.writeString(struct.singleTogetherEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.compoundTogetherEndTime != null) {
        oprot.writeFieldBegin(COMPOUND_TOGETHER_END_TIME_FIELD_DESC);
        oprot.writeString(struct.compoundTogetherEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.singleUploadEndTime != null) {
        oprot.writeFieldBegin(SINGLE_UPLOAD_END_TIME_FIELD_DESC);
        oprot.writeString(struct.singleUploadEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.printBeginTime != null) {
        oprot.writeFieldBegin(PRINT_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.printBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.printEndTime != null) {
        oprot.writeFieldBegin(PRINT_END_TIME_FIELD_DESC);
        oprot.writeString(struct.printEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.officialBeginTime != null) {
        oprot.writeFieldBegin(OFFICIAL_BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.officialBeginTime);
        oprot.writeFieldEnd();
      }
      if (struct.officialEndTime != null) {
        oprot.writeFieldBegin(OFFICIAL_END_TIME_FIELD_DESC);
        oprot.writeString(struct.officialEndTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIZE_POOL_FIELD_DESC);
      oprot.writeI64(struct.prizePool);
      oprot.writeFieldEnd();
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALES_VOLUME_FIELD_DESC);
      oprot.writeI64(struct.salesVolume);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LotteryIssueTupleSchemeFactory implements SchemeFactory {
    public LotteryIssueTupleScheme getScheme() {
      return new LotteryIssueTupleScheme();
    }
  }

  private static class LotteryIssueTupleScheme extends TupleScheme<LotteryIssue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LotteryIssue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIssueId()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(2);
      }
      if (struct.isSetDrawResult()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetDrawTime()) {
        optionals.set(5);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(6);
      }
      if (struct.isSetSingleEndTime()) {
        optionals.set(7);
      }
      if (struct.isSetCompoundEndTime()) {
        optionals.set(8);
      }
      if (struct.isSetSingleTogetherEndTime()) {
        optionals.set(9);
      }
      if (struct.isSetCompoundTogetherEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetSingleUploadEndTime()) {
        optionals.set(11);
      }
      if (struct.isSetPrintBeginTime()) {
        optionals.set(12);
      }
      if (struct.isSetPrintEndTime()) {
        optionals.set(13);
      }
      if (struct.isSetOfficialBeginTime()) {
        optionals.set(14);
      }
      if (struct.isSetOfficialEndTime()) {
        optionals.set(15);
      }
      if (struct.isSetPrizePool()) {
        optionals.set(16);
      }
      if (struct.isSetExt()) {
        optionals.set(17);
      }
      if (struct.isSetSalesVolume()) {
        optionals.set(18);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(19);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetIssueId()) {
        oprot.writeI32(struct.issueId);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetDrawResult()) {
        oprot.writeString(struct.drawResult);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetDrawTime()) {
        oprot.writeString(struct.drawTime);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeString(struct.beginTime);
      }
      if (struct.isSetSingleEndTime()) {
        oprot.writeString(struct.singleEndTime);
      }
      if (struct.isSetCompoundEndTime()) {
        oprot.writeString(struct.compoundEndTime);
      }
      if (struct.isSetSingleTogetherEndTime()) {
        oprot.writeString(struct.singleTogetherEndTime);
      }
      if (struct.isSetCompoundTogetherEndTime()) {
        oprot.writeString(struct.compoundTogetherEndTime);
      }
      if (struct.isSetSingleUploadEndTime()) {
        oprot.writeString(struct.singleUploadEndTime);
      }
      if (struct.isSetPrintBeginTime()) {
        oprot.writeString(struct.printBeginTime);
      }
      if (struct.isSetPrintEndTime()) {
        oprot.writeString(struct.printEndTime);
      }
      if (struct.isSetOfficialBeginTime()) {
        oprot.writeString(struct.officialBeginTime);
      }
      if (struct.isSetOfficialEndTime()) {
        oprot.writeString(struct.officialEndTime);
      }
      if (struct.isSetPrizePool()) {
        oprot.writeI64(struct.prizePool);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetSalesVolume()) {
        oprot.writeI64(struct.salesVolume);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LotteryIssue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.issueId = iprot.readI32();
        struct.setIssueIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.drawResult = iprot.readString();
        struct.setDrawResultIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.drawTime = iprot.readString();
        struct.setDrawTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.beginTime = iprot.readString();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.singleEndTime = iprot.readString();
        struct.setSingleEndTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.compoundEndTime = iprot.readString();
        struct.setCompoundEndTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.singleTogetherEndTime = iprot.readString();
        struct.setSingleTogetherEndTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.compoundTogetherEndTime = iprot.readString();
        struct.setCompoundTogetherEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.singleUploadEndTime = iprot.readString();
        struct.setSingleUploadEndTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.printBeginTime = iprot.readString();
        struct.setPrintBeginTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.printEndTime = iprot.readString();
        struct.setPrintEndTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.officialBeginTime = iprot.readString();
        struct.setOfficialBeginTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.officialEndTime = iprot.readString();
        struct.setOfficialEndTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.prizePool = iprot.readI64();
        struct.setPrizePoolIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(18)) {
        struct.salesVolume = iprot.readI64();
        struct.setSalesVolumeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

