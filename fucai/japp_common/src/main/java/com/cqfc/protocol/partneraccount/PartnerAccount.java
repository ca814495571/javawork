/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partneraccount;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PartnerAccount implements org.apache.thrift.TBase<PartnerAccount, PartnerAccount._Fields>, java.io.Serializable, Cloneable, Comparable<PartnerAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartnerAccount");

  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FREEZE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("freezeAmount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField USABLE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("usableAmount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CREDIT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditLimit", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ALARM_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmValue", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartnerAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartnerAccountTupleSchemeFactory());
  }

  public String partnerId; // required
  public long totalAmount; // required
  public long freezeAmount; // required
  public long usableAmount; // required
  public long creditLimit; // required
  public long alarmValue; // required
  public int state; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER_ID((short)1, "partnerId"),
    TOTAL_AMOUNT((short)2, "totalAmount"),
    FREEZE_AMOUNT((short)3, "freezeAmount"),
    USABLE_AMOUNT((short)4, "usableAmount"),
    CREDIT_LIMIT((short)5, "creditLimit"),
    ALARM_VALUE((short)6, "alarmValue"),
    STATE((short)7, "state"),
    CREATE_TIME((short)8, "createTime"),
    LAST_UPDATE_TIME((short)9, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_ID
          return PARTNER_ID;
        case 2: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 3: // FREEZE_AMOUNT
          return FREEZE_AMOUNT;
        case 4: // USABLE_AMOUNT
          return USABLE_AMOUNT;
        case 5: // CREDIT_LIMIT
          return CREDIT_LIMIT;
        case 6: // ALARM_VALUE
          return ALARM_VALUE;
        case 7: // STATE
          return STATE;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALAMOUNT_ISSET_ID = 0;
  private static final int __FREEZEAMOUNT_ISSET_ID = 1;
  private static final int __USABLEAMOUNT_ISSET_ID = 2;
  private static final int __CREDITLIMIT_ISSET_ID = 3;
  private static final int __ALARMVALUE_ISSET_ID = 4;
  private static final int __STATE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREEZE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("freezeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USABLE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("usableAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREDIT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("creditLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALARM_VALUE, new org.apache.thrift.meta_data.FieldMetaData("alarmValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartnerAccount.class, metaDataMap);
  }

  public PartnerAccount() {
  }

  public PartnerAccount(
    String partnerId,
    long totalAmount,
    long freezeAmount,
    long usableAmount,
    long creditLimit,
    long alarmValue,
    int state,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.partnerId = partnerId;
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.freezeAmount = freezeAmount;
    setFreezeAmountIsSet(true);
    this.usableAmount = usableAmount;
    setUsableAmountIsSet(true);
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    this.alarmValue = alarmValue;
    setAlarmValueIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartnerAccount(PartnerAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.totalAmount = other.totalAmount;
    this.freezeAmount = other.freezeAmount;
    this.usableAmount = other.usableAmount;
    this.creditLimit = other.creditLimit;
    this.alarmValue = other.alarmValue;
    this.state = other.state;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public PartnerAccount deepCopy() {
    return new PartnerAccount(this);
  }

  @Override
  public void clear() {
    this.partnerId = null;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setFreezeAmountIsSet(false);
    this.freezeAmount = 0;
    setUsableAmountIsSet(false);
    this.usableAmount = 0;
    setCreditLimitIsSet(false);
    this.creditLimit = 0;
    setAlarmValueIsSet(false);
    this.alarmValue = 0;
    setStateIsSet(false);
    this.state = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public PartnerAccount setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public long getTotalAmount() {
    return this.totalAmount;
  }

  public PartnerAccount setTotalAmount(long totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public long getFreezeAmount() {
    return this.freezeAmount;
  }

  public PartnerAccount setFreezeAmount(long freezeAmount) {
    this.freezeAmount = freezeAmount;
    setFreezeAmountIsSet(true);
    return this;
  }

  public void unsetFreezeAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEZEAMOUNT_ISSET_ID);
  }

  /** Returns true if field freezeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFreezeAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEZEAMOUNT_ISSET_ID);
  }

  public void setFreezeAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEZEAMOUNT_ISSET_ID, value);
  }

  public long getUsableAmount() {
    return this.usableAmount;
  }

  public PartnerAccount setUsableAmount(long usableAmount) {
    this.usableAmount = usableAmount;
    setUsableAmountIsSet(true);
    return this;
  }

  public void unsetUsableAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USABLEAMOUNT_ISSET_ID);
  }

  /** Returns true if field usableAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetUsableAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __USABLEAMOUNT_ISSET_ID);
  }

  public void setUsableAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USABLEAMOUNT_ISSET_ID, value);
  }

  public long getCreditLimit() {
    return this.creditLimit;
  }

  public PartnerAccount setCreditLimit(long creditLimit) {
    this.creditLimit = creditLimit;
    setCreditLimitIsSet(true);
    return this;
  }

  public void unsetCreditLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  /** Returns true if field creditLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID);
  }

  public void setCreditLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITLIMIT_ISSET_ID, value);
  }

  public long getAlarmValue() {
    return this.alarmValue;
  }

  public PartnerAccount setAlarmValue(long alarmValue) {
    this.alarmValue = alarmValue;
    setAlarmValueIsSet(true);
    return this;
  }

  public void unsetAlarmValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMVALUE_ISSET_ID);
  }

  /** Returns true if field alarmValue is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMVALUE_ISSET_ID);
  }

  public void setAlarmValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMVALUE_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public PartnerAccount setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public PartnerAccount setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public PartnerAccount setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Long)value);
      }
      break;

    case FREEZE_AMOUNT:
      if (value == null) {
        unsetFreezeAmount();
      } else {
        setFreezeAmount((Long)value);
      }
      break;

    case USABLE_AMOUNT:
      if (value == null) {
        unsetUsableAmount();
      } else {
        setUsableAmount((Long)value);
      }
      break;

    case CREDIT_LIMIT:
      if (value == null) {
        unsetCreditLimit();
      } else {
        setCreditLimit((Long)value);
      }
      break;

    case ALARM_VALUE:
      if (value == null) {
        unsetAlarmValue();
      } else {
        setAlarmValue((Long)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_ID:
      return getPartnerId();

    case TOTAL_AMOUNT:
      return Long.valueOf(getTotalAmount());

    case FREEZE_AMOUNT:
      return Long.valueOf(getFreezeAmount());

    case USABLE_AMOUNT:
      return Long.valueOf(getUsableAmount());

    case CREDIT_LIMIT:
      return Long.valueOf(getCreditLimit());

    case ALARM_VALUE:
      return Long.valueOf(getAlarmValue());

    case STATE:
      return Integer.valueOf(getState());

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_ID:
      return isSetPartnerId();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case FREEZE_AMOUNT:
      return isSetFreezeAmount();
    case USABLE_AMOUNT:
      return isSetUsableAmount();
    case CREDIT_LIMIT:
      return isSetCreditLimit();
    case ALARM_VALUE:
      return isSetAlarmValue();
    case STATE:
      return isSetState();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartnerAccount)
      return this.equals((PartnerAccount)that);
    return false;
  }

  public boolean equals(PartnerAccount that) {
    if (that == null)
      return false;

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_freezeAmount = true;
    boolean that_present_freezeAmount = true;
    if (this_present_freezeAmount || that_present_freezeAmount) {
      if (!(this_present_freezeAmount && that_present_freezeAmount))
        return false;
      if (this.freezeAmount != that.freezeAmount)
        return false;
    }

    boolean this_present_usableAmount = true;
    boolean that_present_usableAmount = true;
    if (this_present_usableAmount || that_present_usableAmount) {
      if (!(this_present_usableAmount && that_present_usableAmount))
        return false;
      if (this.usableAmount != that.usableAmount)
        return false;
    }

    boolean this_present_creditLimit = true;
    boolean that_present_creditLimit = true;
    if (this_present_creditLimit || that_present_creditLimit) {
      if (!(this_present_creditLimit && that_present_creditLimit))
        return false;
      if (this.creditLimit != that.creditLimit)
        return false;
    }

    boolean this_present_alarmValue = true;
    boolean that_present_alarmValue = true;
    if (this_present_alarmValue || that_present_alarmValue) {
      if (!(this_present_alarmValue && that_present_alarmValue))
        return false;
      if (this.alarmValue != that.alarmValue)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PartnerAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreezeAmount()).compareTo(other.isSetFreezeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreezeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezeAmount, other.freezeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsableAmount()).compareTo(other.isSetUsableAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsableAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usableAmount, other.usableAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditLimit()).compareTo(other.isSetCreditLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditLimit, other.creditLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmValue()).compareTo(other.isSetAlarmValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmValue, other.alarmValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartnerAccount(");
    boolean first = true;

    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freezeAmount:");
    sb.append(this.freezeAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usableAmount:");
    sb.append(this.usableAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditLimit:");
    sb.append(this.creditLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmValue:");
    sb.append(this.alarmValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartnerAccountStandardSchemeFactory implements SchemeFactory {
    public PartnerAccountStandardScheme getScheme() {
      return new PartnerAccountStandardScheme();
    }
  }

  private static class PartnerAccountStandardScheme extends StandardScheme<PartnerAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartnerAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalAmount = iprot.readI64();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FREEZE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freezeAmount = iprot.readI64();
              struct.setFreezeAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USABLE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.usableAmount = iprot.readI64();
              struct.setUsableAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREDIT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creditLimit = iprot.readI64();
              struct.setCreditLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALARM_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.alarmValue = iprot.readI64();
              struct.setAlarmValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartnerAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREEZE_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.freezeAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USABLE_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.usableAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.creditLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_VALUE_FIELD_DESC);
      oprot.writeI64(struct.alarmValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartnerAccountTupleSchemeFactory implements SchemeFactory {
    public PartnerAccountTupleScheme getScheme() {
      return new PartnerAccountTupleScheme();
    }
  }

  private static class PartnerAccountTupleScheme extends TupleScheme<PartnerAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartnerAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerId()) {
        optionals.set(0);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(1);
      }
      if (struct.isSetFreezeAmount()) {
        optionals.set(2);
      }
      if (struct.isSetUsableAmount()) {
        optionals.set(3);
      }
      if (struct.isSetCreditLimit()) {
        optionals.set(4);
      }
      if (struct.isSetAlarmValue()) {
        optionals.set(5);
      }
      if (struct.isSetState()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI64(struct.totalAmount);
      }
      if (struct.isSetFreezeAmount()) {
        oprot.writeI64(struct.freezeAmount);
      }
      if (struct.isSetUsableAmount()) {
        oprot.writeI64(struct.usableAmount);
      }
      if (struct.isSetCreditLimit()) {
        oprot.writeI64(struct.creditLimit);
      }
      if (struct.isSetAlarmValue()) {
        oprot.writeI64(struct.alarmValue);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartnerAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalAmount = iprot.readI64();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.freezeAmount = iprot.readI64();
        struct.setFreezeAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.usableAmount = iprot.readI64();
        struct.setUsableAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creditLimit = iprot.readI64();
        struct.setCreditLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.alarmValue = iprot.readI64();
        struct.setAlarmValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

