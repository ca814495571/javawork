/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IssueSport implements org.apache.thrift.TBase<IssueSport, IssueSport._Fields>, java.io.Serializable, Cloneable, Comparable<IssueSport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IssueSport");

  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WARE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wareId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BEGIN_SELL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginSellTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_SELL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endSellTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BEGIN_OFFICIAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginOfficialTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_OFFICIAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endOfficialTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WARE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareState", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IssueSportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IssueSportTupleSchemeFactory());
  }

  public String lotteryId; // required
  public String wareIssue; // required
  public String wareId; // required
  public String beginSellTime; // required
  public String endSellTime; // required
  public String beginOfficialTime; // required
  public String endOfficialTime; // required
  public int wareState; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOTTERY_ID((short)1, "lotteryId"),
    WARE_ISSUE((short)2, "wareIssue"),
    WARE_ID((short)3, "wareId"),
    BEGIN_SELL_TIME((short)4, "beginSellTime"),
    END_SELL_TIME((short)5, "endSellTime"),
    BEGIN_OFFICIAL_TIME((short)6, "beginOfficialTime"),
    END_OFFICIAL_TIME((short)7, "endOfficialTime"),
    WARE_STATE((short)8, "wareState"),
    CREATE_TIME((short)9, "createTime"),
    LAST_UPDATE_TIME((short)10, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOTTERY_ID
          return LOTTERY_ID;
        case 2: // WARE_ISSUE
          return WARE_ISSUE;
        case 3: // WARE_ID
          return WARE_ID;
        case 4: // BEGIN_SELL_TIME
          return BEGIN_SELL_TIME;
        case 5: // END_SELL_TIME
          return END_SELL_TIME;
        case 6: // BEGIN_OFFICIAL_TIME
          return BEGIN_OFFICIAL_TIME;
        case 7: // END_OFFICIAL_TIME
          return END_OFFICIAL_TIME;
        case 8: // WARE_STATE
          return WARE_STATE;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WARESTATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_ID, new org.apache.thrift.meta_data.FieldMetaData("wareId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_SELL_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginSellTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_SELL_TIME, new org.apache.thrift.meta_data.FieldMetaData("endSellTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_OFFICIAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginOfficialTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_OFFICIAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("endOfficialTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_STATE, new org.apache.thrift.meta_data.FieldMetaData("wareState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IssueSport.class, metaDataMap);
  }

  public IssueSport() {
  }

  public IssueSport(
    String lotteryId,
    String wareIssue,
    String wareId,
    String beginSellTime,
    String endSellTime,
    String beginOfficialTime,
    String endOfficialTime,
    int wareState,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.lotteryId = lotteryId;
    this.wareIssue = wareIssue;
    this.wareId = wareId;
    this.beginSellTime = beginSellTime;
    this.endSellTime = endSellTime;
    this.beginOfficialTime = beginOfficialTime;
    this.endOfficialTime = endOfficialTime;
    this.wareState = wareState;
    setWareStateIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IssueSport(IssueSport other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetWareIssue()) {
      this.wareIssue = other.wareIssue;
    }
    if (other.isSetWareId()) {
      this.wareId = other.wareId;
    }
    if (other.isSetBeginSellTime()) {
      this.beginSellTime = other.beginSellTime;
    }
    if (other.isSetEndSellTime()) {
      this.endSellTime = other.endSellTime;
    }
    if (other.isSetBeginOfficialTime()) {
      this.beginOfficialTime = other.beginOfficialTime;
    }
    if (other.isSetEndOfficialTime()) {
      this.endOfficialTime = other.endOfficialTime;
    }
    this.wareState = other.wareState;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public IssueSport deepCopy() {
    return new IssueSport(this);
  }

  @Override
  public void clear() {
    this.lotteryId = null;
    this.wareIssue = null;
    this.wareId = null;
    this.beginSellTime = null;
    this.endSellTime = null;
    this.beginOfficialTime = null;
    this.endOfficialTime = null;
    setWareStateIsSet(false);
    this.wareState = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public IssueSport setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getWareIssue() {
    return this.wareIssue;
  }

  public IssueSport setWareIssue(String wareIssue) {
    this.wareIssue = wareIssue;
    return this;
  }

  public void unsetWareIssue() {
    this.wareIssue = null;
  }

  /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
  public boolean isSetWareIssue() {
    return this.wareIssue != null;
  }

  public void setWareIssueIsSet(boolean value) {
    if (!value) {
      this.wareIssue = null;
    }
  }

  public String getWareId() {
    return this.wareId;
  }

  public IssueSport setWareId(String wareId) {
    this.wareId = wareId;
    return this;
  }

  public void unsetWareId() {
    this.wareId = null;
  }

  /** Returns true if field wareId is set (has been assigned a value) and false otherwise */
  public boolean isSetWareId() {
    return this.wareId != null;
  }

  public void setWareIdIsSet(boolean value) {
    if (!value) {
      this.wareId = null;
    }
  }

  public String getBeginSellTime() {
    return this.beginSellTime;
  }

  public IssueSport setBeginSellTime(String beginSellTime) {
    this.beginSellTime = beginSellTime;
    return this;
  }

  public void unsetBeginSellTime() {
    this.beginSellTime = null;
  }

  /** Returns true if field beginSellTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginSellTime() {
    return this.beginSellTime != null;
  }

  public void setBeginSellTimeIsSet(boolean value) {
    if (!value) {
      this.beginSellTime = null;
    }
  }

  public String getEndSellTime() {
    return this.endSellTime;
  }

  public IssueSport setEndSellTime(String endSellTime) {
    this.endSellTime = endSellTime;
    return this;
  }

  public void unsetEndSellTime() {
    this.endSellTime = null;
  }

  /** Returns true if field endSellTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndSellTime() {
    return this.endSellTime != null;
  }

  public void setEndSellTimeIsSet(boolean value) {
    if (!value) {
      this.endSellTime = null;
    }
  }

  public String getBeginOfficialTime() {
    return this.beginOfficialTime;
  }

  public IssueSport setBeginOfficialTime(String beginOfficialTime) {
    this.beginOfficialTime = beginOfficialTime;
    return this;
  }

  public void unsetBeginOfficialTime() {
    this.beginOfficialTime = null;
  }

  /** Returns true if field beginOfficialTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginOfficialTime() {
    return this.beginOfficialTime != null;
  }

  public void setBeginOfficialTimeIsSet(boolean value) {
    if (!value) {
      this.beginOfficialTime = null;
    }
  }

  public String getEndOfficialTime() {
    return this.endOfficialTime;
  }

  public IssueSport setEndOfficialTime(String endOfficialTime) {
    this.endOfficialTime = endOfficialTime;
    return this;
  }

  public void unsetEndOfficialTime() {
    this.endOfficialTime = null;
  }

  /** Returns true if field endOfficialTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndOfficialTime() {
    return this.endOfficialTime != null;
  }

  public void setEndOfficialTimeIsSet(boolean value) {
    if (!value) {
      this.endOfficialTime = null;
    }
  }

  public int getWareState() {
    return this.wareState;
  }

  public IssueSport setWareState(int wareState) {
    this.wareState = wareState;
    setWareStateIsSet(true);
    return this;
  }

  public void unsetWareState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WARESTATE_ISSET_ID);
  }

  /** Returns true if field wareState is set (has been assigned a value) and false otherwise */
  public boolean isSetWareState() {
    return EncodingUtils.testBit(__isset_bitfield, __WARESTATE_ISSET_ID);
  }

  public void setWareStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WARESTATE_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public IssueSport setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public IssueSport setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case WARE_ISSUE:
      if (value == null) {
        unsetWareIssue();
      } else {
        setWareIssue((String)value);
      }
      break;

    case WARE_ID:
      if (value == null) {
        unsetWareId();
      } else {
        setWareId((String)value);
      }
      break;

    case BEGIN_SELL_TIME:
      if (value == null) {
        unsetBeginSellTime();
      } else {
        setBeginSellTime((String)value);
      }
      break;

    case END_SELL_TIME:
      if (value == null) {
        unsetEndSellTime();
      } else {
        setEndSellTime((String)value);
      }
      break;

    case BEGIN_OFFICIAL_TIME:
      if (value == null) {
        unsetBeginOfficialTime();
      } else {
        setBeginOfficialTime((String)value);
      }
      break;

    case END_OFFICIAL_TIME:
      if (value == null) {
        unsetEndOfficialTime();
      } else {
        setEndOfficialTime((String)value);
      }
      break;

    case WARE_STATE:
      if (value == null) {
        unsetWareState();
      } else {
        setWareState((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOTTERY_ID:
      return getLotteryId();

    case WARE_ISSUE:
      return getWareIssue();

    case WARE_ID:
      return getWareId();

    case BEGIN_SELL_TIME:
      return getBeginSellTime();

    case END_SELL_TIME:
      return getEndSellTime();

    case BEGIN_OFFICIAL_TIME:
      return getBeginOfficialTime();

    case END_OFFICIAL_TIME:
      return getEndOfficialTime();

    case WARE_STATE:
      return Integer.valueOf(getWareState());

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOTTERY_ID:
      return isSetLotteryId();
    case WARE_ISSUE:
      return isSetWareIssue();
    case WARE_ID:
      return isSetWareId();
    case BEGIN_SELL_TIME:
      return isSetBeginSellTime();
    case END_SELL_TIME:
      return isSetEndSellTime();
    case BEGIN_OFFICIAL_TIME:
      return isSetBeginOfficialTime();
    case END_OFFICIAL_TIME:
      return isSetEndOfficialTime();
    case WARE_STATE:
      return isSetWareState();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IssueSport)
      return this.equals((IssueSport)that);
    return false;
  }

  public boolean equals(IssueSport that) {
    if (that == null)
      return false;

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_wareIssue = true && this.isSetWareIssue();
    boolean that_present_wareIssue = true && that.isSetWareIssue();
    if (this_present_wareIssue || that_present_wareIssue) {
      if (!(this_present_wareIssue && that_present_wareIssue))
        return false;
      if (!this.wareIssue.equals(that.wareIssue))
        return false;
    }

    boolean this_present_wareId = true && this.isSetWareId();
    boolean that_present_wareId = true && that.isSetWareId();
    if (this_present_wareId || that_present_wareId) {
      if (!(this_present_wareId && that_present_wareId))
        return false;
      if (!this.wareId.equals(that.wareId))
        return false;
    }

    boolean this_present_beginSellTime = true && this.isSetBeginSellTime();
    boolean that_present_beginSellTime = true && that.isSetBeginSellTime();
    if (this_present_beginSellTime || that_present_beginSellTime) {
      if (!(this_present_beginSellTime && that_present_beginSellTime))
        return false;
      if (!this.beginSellTime.equals(that.beginSellTime))
        return false;
    }

    boolean this_present_endSellTime = true && this.isSetEndSellTime();
    boolean that_present_endSellTime = true && that.isSetEndSellTime();
    if (this_present_endSellTime || that_present_endSellTime) {
      if (!(this_present_endSellTime && that_present_endSellTime))
        return false;
      if (!this.endSellTime.equals(that.endSellTime))
        return false;
    }

    boolean this_present_beginOfficialTime = true && this.isSetBeginOfficialTime();
    boolean that_present_beginOfficialTime = true && that.isSetBeginOfficialTime();
    if (this_present_beginOfficialTime || that_present_beginOfficialTime) {
      if (!(this_present_beginOfficialTime && that_present_beginOfficialTime))
        return false;
      if (!this.beginOfficialTime.equals(that.beginOfficialTime))
        return false;
    }

    boolean this_present_endOfficialTime = true && this.isSetEndOfficialTime();
    boolean that_present_endOfficialTime = true && that.isSetEndOfficialTime();
    if (this_present_endOfficialTime || that_present_endOfficialTime) {
      if (!(this_present_endOfficialTime && that_present_endOfficialTime))
        return false;
      if (!this.endOfficialTime.equals(that.endOfficialTime))
        return false;
    }

    boolean this_present_wareState = true;
    boolean that_present_wareState = true;
    if (this_present_wareState || that_present_wareState) {
      if (!(this_present_wareState && that_present_wareState))
        return false;
      if (this.wareState != that.wareState)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(IssueSport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWareId()).compareTo(other.isSetWareId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareId, other.wareId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginSellTime()).compareTo(other.isSetBeginSellTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginSellTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginSellTime, other.beginSellTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndSellTime()).compareTo(other.isSetEndSellTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndSellTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endSellTime, other.endSellTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginOfficialTime()).compareTo(other.isSetBeginOfficialTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginOfficialTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginOfficialTime, other.beginOfficialTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndOfficialTime()).compareTo(other.isSetEndOfficialTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndOfficialTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endOfficialTime, other.endOfficialTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWareState()).compareTo(other.isSetWareState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareState, other.wareState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IssueSport(");
    boolean first = true;

    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wareIssue:");
    if (this.wareIssue == null) {
      sb.append("null");
    } else {
      sb.append(this.wareIssue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wareId:");
    if (this.wareId == null) {
      sb.append("null");
    } else {
      sb.append(this.wareId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginSellTime:");
    if (this.beginSellTime == null) {
      sb.append("null");
    } else {
      sb.append(this.beginSellTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endSellTime:");
    if (this.endSellTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endSellTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginOfficialTime:");
    if (this.beginOfficialTime == null) {
      sb.append("null");
    } else {
      sb.append(this.beginOfficialTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endOfficialTime:");
    if (this.endOfficialTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endOfficialTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wareState:");
    sb.append(this.wareState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IssueSportStandardSchemeFactory implements SchemeFactory {
    public IssueSportStandardScheme getScheme() {
      return new IssueSportStandardScheme();
    }
  }

  private static class IssueSportStandardScheme extends StandardScheme<IssueSport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IssueSport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WARE_ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareIssue = iprot.readString();
              struct.setWareIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WARE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareId = iprot.readString();
              struct.setWareIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BEGIN_SELL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginSellTime = iprot.readString();
              struct.setBeginSellTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_SELL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endSellTime = iprot.readString();
              struct.setEndSellTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BEGIN_OFFICIAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginOfficialTime = iprot.readString();
              struct.setBeginOfficialTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_OFFICIAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endOfficialTime = iprot.readString();
              struct.setEndOfficialTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WARE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wareState = iprot.readI32();
              struct.setWareStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IssueSport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.wareIssue != null) {
        oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
        oprot.writeString(struct.wareIssue);
        oprot.writeFieldEnd();
      }
      if (struct.wareId != null) {
        oprot.writeFieldBegin(WARE_ID_FIELD_DESC);
        oprot.writeString(struct.wareId);
        oprot.writeFieldEnd();
      }
      if (struct.beginSellTime != null) {
        oprot.writeFieldBegin(BEGIN_SELL_TIME_FIELD_DESC);
        oprot.writeString(struct.beginSellTime);
        oprot.writeFieldEnd();
      }
      if (struct.endSellTime != null) {
        oprot.writeFieldBegin(END_SELL_TIME_FIELD_DESC);
        oprot.writeString(struct.endSellTime);
        oprot.writeFieldEnd();
      }
      if (struct.beginOfficialTime != null) {
        oprot.writeFieldBegin(BEGIN_OFFICIAL_TIME_FIELD_DESC);
        oprot.writeString(struct.beginOfficialTime);
        oprot.writeFieldEnd();
      }
      if (struct.endOfficialTime != null) {
        oprot.writeFieldBegin(END_OFFICIAL_TIME_FIELD_DESC);
        oprot.writeString(struct.endOfficialTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WARE_STATE_FIELD_DESC);
      oprot.writeI32(struct.wareState);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IssueSportTupleSchemeFactory implements SchemeFactory {
    public IssueSportTupleScheme getScheme() {
      return new IssueSportTupleScheme();
    }
  }

  private static class IssueSportTupleScheme extends TupleScheme<IssueSport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IssueSport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLotteryId()) {
        optionals.set(0);
      }
      if (struct.isSetWareIssue()) {
        optionals.set(1);
      }
      if (struct.isSetWareId()) {
        optionals.set(2);
      }
      if (struct.isSetBeginSellTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndSellTime()) {
        optionals.set(4);
      }
      if (struct.isSetBeginOfficialTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndOfficialTime()) {
        optionals.set(6);
      }
      if (struct.isSetWareState()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetWareIssue()) {
        oprot.writeString(struct.wareIssue);
      }
      if (struct.isSetWareId()) {
        oprot.writeString(struct.wareId);
      }
      if (struct.isSetBeginSellTime()) {
        oprot.writeString(struct.beginSellTime);
      }
      if (struct.isSetEndSellTime()) {
        oprot.writeString(struct.endSellTime);
      }
      if (struct.isSetBeginOfficialTime()) {
        oprot.writeString(struct.beginOfficialTime);
      }
      if (struct.isSetEndOfficialTime()) {
        oprot.writeString(struct.endOfficialTime);
      }
      if (struct.isSetWareState()) {
        oprot.writeI32(struct.wareState);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IssueSport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wareIssue = iprot.readString();
        struct.setWareIssueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wareId = iprot.readString();
        struct.setWareIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.beginSellTime = iprot.readString();
        struct.setBeginSellTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endSellTime = iprot.readString();
        struct.setEndSellTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.beginOfficialTime = iprot.readString();
        struct.setBeginOfficialTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endOfficialTime = iprot.readString();
        struct.setEndOfficialTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.wareState = iprot.readI32();
        struct.setWareStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

