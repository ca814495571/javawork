/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FucaiPartnerInfo implements org.apache.thrift.TBase<FucaiPartnerInfo, FucaiPartnerInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FucaiPartnerInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FucaiPartnerInfo");

  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("serverUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALIAS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("aliasKey", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField KEY_STORE_PASS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyStorePass", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PRIVATE_SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("privateSecretKey", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ID_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("idCard", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PARTNER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerType", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FucaiPartnerInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FucaiPartnerInfoTupleSchemeFactory());
  }

  public String partnerId; // required
  public String serverUrl; // required
  public String aliasKey; // required
  public String keyStorePass; // required
  public String privateSecretKey; // required
  public String userId; // required
  public String realName; // required
  public String idCard; // required
  public String phone; // required
  public String version; // required
  public String province; // required
  public String partnerType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER_ID((short)1, "partnerId"),
    SERVER_URL((short)2, "serverUrl"),
    ALIAS_KEY((short)7, "aliasKey"),
    KEY_STORE_PASS((short)8, "keyStorePass"),
    PRIVATE_SECRET_KEY((short)9, "privateSecretKey"),
    USER_ID((short)10, "userId"),
    REAL_NAME((short)11, "realName"),
    ID_CARD((short)12, "idCard"),
    PHONE((short)13, "phone"),
    VERSION((short)14, "version"),
    PROVINCE((short)15, "province"),
    PARTNER_TYPE((short)16, "partnerType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_ID
          return PARTNER_ID;
        case 2: // SERVER_URL
          return SERVER_URL;
        case 7: // ALIAS_KEY
          return ALIAS_KEY;
        case 8: // KEY_STORE_PASS
          return KEY_STORE_PASS;
        case 9: // PRIVATE_SECRET_KEY
          return PRIVATE_SECRET_KEY;
        case 10: // USER_ID
          return USER_ID;
        case 11: // REAL_NAME
          return REAL_NAME;
        case 12: // ID_CARD
          return ID_CARD;
        case 13: // PHONE
          return PHONE;
        case 14: // VERSION
          return VERSION;
        case 15: // PROVINCE
          return PROVINCE;
        case 16: // PARTNER_TYPE
          return PARTNER_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_URL, new org.apache.thrift.meta_data.FieldMetaData("serverUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIAS_KEY, new org.apache.thrift.meta_data.FieldMetaData("aliasKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_STORE_PASS, new org.apache.thrift.meta_data.FieldMetaData("keyStorePass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVATE_SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("privateSecretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD, new org.apache.thrift.meta_data.FieldMetaData("idCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partnerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FucaiPartnerInfo.class, metaDataMap);
  }

  public FucaiPartnerInfo() {
  }

  public FucaiPartnerInfo(
    String partnerId,
    String serverUrl,
    String aliasKey,
    String keyStorePass,
    String privateSecretKey,
    String userId,
    String realName,
    String idCard,
    String phone,
    String version,
    String province,
    String partnerType)
  {
    this();
    this.partnerId = partnerId;
    this.serverUrl = serverUrl;
    this.aliasKey = aliasKey;
    this.keyStorePass = keyStorePass;
    this.privateSecretKey = privateSecretKey;
    this.userId = userId;
    this.realName = realName;
    this.idCard = idCard;
    this.phone = phone;
    this.version = version;
    this.province = province;
    this.partnerType = partnerType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FucaiPartnerInfo(FucaiPartnerInfo other) {
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetServerUrl()) {
      this.serverUrl = other.serverUrl;
    }
    if (other.isSetAliasKey()) {
      this.aliasKey = other.aliasKey;
    }
    if (other.isSetKeyStorePass()) {
      this.keyStorePass = other.keyStorePass;
    }
    if (other.isSetPrivateSecretKey()) {
      this.privateSecretKey = other.privateSecretKey;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetIdCard()) {
      this.idCard = other.idCard;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetPartnerType()) {
      this.partnerType = other.partnerType;
    }
  }

  public FucaiPartnerInfo deepCopy() {
    return new FucaiPartnerInfo(this);
  }

  @Override
  public void clear() {
    this.partnerId = null;
    this.serverUrl = null;
    this.aliasKey = null;
    this.keyStorePass = null;
    this.privateSecretKey = null;
    this.userId = null;
    this.realName = null;
    this.idCard = null;
    this.phone = null;
    this.version = null;
    this.province = null;
    this.partnerType = null;
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public FucaiPartnerInfo setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getServerUrl() {
    return this.serverUrl;
  }

  public FucaiPartnerInfo setServerUrl(String serverUrl) {
    this.serverUrl = serverUrl;
    return this;
  }

  public void unsetServerUrl() {
    this.serverUrl = null;
  }

  /** Returns true if field serverUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetServerUrl() {
    return this.serverUrl != null;
  }

  public void setServerUrlIsSet(boolean value) {
    if (!value) {
      this.serverUrl = null;
    }
  }

  public String getAliasKey() {
    return this.aliasKey;
  }

  public FucaiPartnerInfo setAliasKey(String aliasKey) {
    this.aliasKey = aliasKey;
    return this;
  }

  public void unsetAliasKey() {
    this.aliasKey = null;
  }

  /** Returns true if field aliasKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAliasKey() {
    return this.aliasKey != null;
  }

  public void setAliasKeyIsSet(boolean value) {
    if (!value) {
      this.aliasKey = null;
    }
  }

  public String getKeyStorePass() {
    return this.keyStorePass;
  }

  public FucaiPartnerInfo setKeyStorePass(String keyStorePass) {
    this.keyStorePass = keyStorePass;
    return this;
  }

  public void unsetKeyStorePass() {
    this.keyStorePass = null;
  }

  /** Returns true if field keyStorePass is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyStorePass() {
    return this.keyStorePass != null;
  }

  public void setKeyStorePassIsSet(boolean value) {
    if (!value) {
      this.keyStorePass = null;
    }
  }

  public String getPrivateSecretKey() {
    return this.privateSecretKey;
  }

  public FucaiPartnerInfo setPrivateSecretKey(String privateSecretKey) {
    this.privateSecretKey = privateSecretKey;
    return this;
  }

  public void unsetPrivateSecretKey() {
    this.privateSecretKey = null;
  }

  /** Returns true if field privateSecretKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivateSecretKey() {
    return this.privateSecretKey != null;
  }

  public void setPrivateSecretKeyIsSet(boolean value) {
    if (!value) {
      this.privateSecretKey = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public FucaiPartnerInfo setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public FucaiPartnerInfo setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getIdCard() {
    return this.idCard;
  }

  public FucaiPartnerInfo setIdCard(String idCard) {
    this.idCard = idCard;
    return this;
  }

  public void unsetIdCard() {
    this.idCard = null;
  }

  /** Returns true if field idCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCard() {
    return this.idCard != null;
  }

  public void setIdCardIsSet(boolean value) {
    if (!value) {
      this.idCard = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public FucaiPartnerInfo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public FucaiPartnerInfo setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getProvince() {
    return this.province;
  }

  public FucaiPartnerInfo setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getPartnerType() {
    return this.partnerType;
  }

  public FucaiPartnerInfo setPartnerType(String partnerType) {
    this.partnerType = partnerType;
    return this;
  }

  public void unsetPartnerType() {
    this.partnerType = null;
  }

  /** Returns true if field partnerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerType() {
    return this.partnerType != null;
  }

  public void setPartnerTypeIsSet(boolean value) {
    if (!value) {
      this.partnerType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case SERVER_URL:
      if (value == null) {
        unsetServerUrl();
      } else {
        setServerUrl((String)value);
      }
      break;

    case ALIAS_KEY:
      if (value == null) {
        unsetAliasKey();
      } else {
        setAliasKey((String)value);
      }
      break;

    case KEY_STORE_PASS:
      if (value == null) {
        unsetKeyStorePass();
      } else {
        setKeyStorePass((String)value);
      }
      break;

    case PRIVATE_SECRET_KEY:
      if (value == null) {
        unsetPrivateSecretKey();
      } else {
        setPrivateSecretKey((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case ID_CARD:
      if (value == null) {
        unsetIdCard();
      } else {
        setIdCard((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case PARTNER_TYPE:
      if (value == null) {
        unsetPartnerType();
      } else {
        setPartnerType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_ID:
      return getPartnerId();

    case SERVER_URL:
      return getServerUrl();

    case ALIAS_KEY:
      return getAliasKey();

    case KEY_STORE_PASS:
      return getKeyStorePass();

    case PRIVATE_SECRET_KEY:
      return getPrivateSecretKey();

    case USER_ID:
      return getUserId();

    case REAL_NAME:
      return getRealName();

    case ID_CARD:
      return getIdCard();

    case PHONE:
      return getPhone();

    case VERSION:
      return getVersion();

    case PROVINCE:
      return getProvince();

    case PARTNER_TYPE:
      return getPartnerType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_ID:
      return isSetPartnerId();
    case SERVER_URL:
      return isSetServerUrl();
    case ALIAS_KEY:
      return isSetAliasKey();
    case KEY_STORE_PASS:
      return isSetKeyStorePass();
    case PRIVATE_SECRET_KEY:
      return isSetPrivateSecretKey();
    case USER_ID:
      return isSetUserId();
    case REAL_NAME:
      return isSetRealName();
    case ID_CARD:
      return isSetIdCard();
    case PHONE:
      return isSetPhone();
    case VERSION:
      return isSetVersion();
    case PROVINCE:
      return isSetProvince();
    case PARTNER_TYPE:
      return isSetPartnerType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FucaiPartnerInfo)
      return this.equals((FucaiPartnerInfo)that);
    return false;
  }

  public boolean equals(FucaiPartnerInfo that) {
    if (that == null)
      return false;

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_serverUrl = true && this.isSetServerUrl();
    boolean that_present_serverUrl = true && that.isSetServerUrl();
    if (this_present_serverUrl || that_present_serverUrl) {
      if (!(this_present_serverUrl && that_present_serverUrl))
        return false;
      if (!this.serverUrl.equals(that.serverUrl))
        return false;
    }

    boolean this_present_aliasKey = true && this.isSetAliasKey();
    boolean that_present_aliasKey = true && that.isSetAliasKey();
    if (this_present_aliasKey || that_present_aliasKey) {
      if (!(this_present_aliasKey && that_present_aliasKey))
        return false;
      if (!this.aliasKey.equals(that.aliasKey))
        return false;
    }

    boolean this_present_keyStorePass = true && this.isSetKeyStorePass();
    boolean that_present_keyStorePass = true && that.isSetKeyStorePass();
    if (this_present_keyStorePass || that_present_keyStorePass) {
      if (!(this_present_keyStorePass && that_present_keyStorePass))
        return false;
      if (!this.keyStorePass.equals(that.keyStorePass))
        return false;
    }

    boolean this_present_privateSecretKey = true && this.isSetPrivateSecretKey();
    boolean that_present_privateSecretKey = true && that.isSetPrivateSecretKey();
    if (this_present_privateSecretKey || that_present_privateSecretKey) {
      if (!(this_present_privateSecretKey && that_present_privateSecretKey))
        return false;
      if (!this.privateSecretKey.equals(that.privateSecretKey))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_idCard = true && this.isSetIdCard();
    boolean that_present_idCard = true && that.isSetIdCard();
    if (this_present_idCard || that_present_idCard) {
      if (!(this_present_idCard && that_present_idCard))
        return false;
      if (!this.idCard.equals(that.idCard))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_partnerType = true && this.isSetPartnerType();
    boolean that_present_partnerType = true && that.isSetPartnerType();
    if (this_present_partnerType || that_present_partnerType) {
      if (!(this_present_partnerType && that_present_partnerType))
        return false;
      if (!this.partnerType.equals(that.partnerType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FucaiPartnerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerUrl()).compareTo(other.isSetServerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverUrl, other.serverUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAliasKey()).compareTo(other.isSetAliasKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliasKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasKey, other.aliasKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyStorePass()).compareTo(other.isSetKeyStorePass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyStorePass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyStorePass, other.keyStorePass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivateSecretKey()).compareTo(other.isSetPrivateSecretKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivateSecretKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateSecretKey, other.privateSecretKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCard()).compareTo(other.isSetIdCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCard, other.idCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerType()).compareTo(other.isSetPartnerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerType, other.partnerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FucaiPartnerInfo(");
    boolean first = true;

    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverUrl:");
    if (this.serverUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.serverUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aliasKey:");
    if (this.aliasKey == null) {
      sb.append("null");
    } else {
      sb.append(this.aliasKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyStorePass:");
    if (this.keyStorePass == null) {
      sb.append("null");
    } else {
      sb.append(this.keyStorePass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privateSecretKey:");
    if (this.privateSecretKey == null) {
      sb.append("null");
    } else {
      sb.append(this.privateSecretKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCard:");
    if (this.idCard == null) {
      sb.append("null");
    } else {
      sb.append(this.idCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerType:");
    if (this.partnerType == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FucaiPartnerInfoStandardSchemeFactory implements SchemeFactory {
    public FucaiPartnerInfoStandardScheme getScheme() {
      return new FucaiPartnerInfoStandardScheme();
    }
  }

  private static class FucaiPartnerInfoStandardScheme extends StandardScheme<FucaiPartnerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FucaiPartnerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverUrl = iprot.readString();
              struct.setServerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALIAS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aliasKey = iprot.readString();
              struct.setAliasKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KEY_STORE_PASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyStorePass = iprot.readString();
              struct.setKeyStorePassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRIVATE_SECRET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privateSecretKey = iprot.readString();
              struct.setPrivateSecretKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ID_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCard = iprot.readString();
              struct.setIdCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PARTNER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerType = iprot.readString();
              struct.setPartnerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FucaiPartnerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.serverUrl != null) {
        oprot.writeFieldBegin(SERVER_URL_FIELD_DESC);
        oprot.writeString(struct.serverUrl);
        oprot.writeFieldEnd();
      }
      if (struct.aliasKey != null) {
        oprot.writeFieldBegin(ALIAS_KEY_FIELD_DESC);
        oprot.writeString(struct.aliasKey);
        oprot.writeFieldEnd();
      }
      if (struct.keyStorePass != null) {
        oprot.writeFieldBegin(KEY_STORE_PASS_FIELD_DESC);
        oprot.writeString(struct.keyStorePass);
        oprot.writeFieldEnd();
      }
      if (struct.privateSecretKey != null) {
        oprot.writeFieldBegin(PRIVATE_SECRET_KEY_FIELD_DESC);
        oprot.writeString(struct.privateSecretKey);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.idCard != null) {
        oprot.writeFieldBegin(ID_CARD_FIELD_DESC);
        oprot.writeString(struct.idCard);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.partnerType != null) {
        oprot.writeFieldBegin(PARTNER_TYPE_FIELD_DESC);
        oprot.writeString(struct.partnerType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FucaiPartnerInfoTupleSchemeFactory implements SchemeFactory {
    public FucaiPartnerInfoTupleScheme getScheme() {
      return new FucaiPartnerInfoTupleScheme();
    }
  }

  private static class FucaiPartnerInfoTupleScheme extends TupleScheme<FucaiPartnerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FucaiPartnerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerId()) {
        optionals.set(0);
      }
      if (struct.isSetServerUrl()) {
        optionals.set(1);
      }
      if (struct.isSetAliasKey()) {
        optionals.set(2);
      }
      if (struct.isSetKeyStorePass()) {
        optionals.set(3);
      }
      if (struct.isSetPrivateSecretKey()) {
        optionals.set(4);
      }
      if (struct.isSetUserId()) {
        optionals.set(5);
      }
      if (struct.isSetRealName()) {
        optionals.set(6);
      }
      if (struct.isSetIdCard()) {
        optionals.set(7);
      }
      if (struct.isSetPhone()) {
        optionals.set(8);
      }
      if (struct.isSetVersion()) {
        optionals.set(9);
      }
      if (struct.isSetProvince()) {
        optionals.set(10);
      }
      if (struct.isSetPartnerType()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetServerUrl()) {
        oprot.writeString(struct.serverUrl);
      }
      if (struct.isSetAliasKey()) {
        oprot.writeString(struct.aliasKey);
      }
      if (struct.isSetKeyStorePass()) {
        oprot.writeString(struct.keyStorePass);
      }
      if (struct.isSetPrivateSecretKey()) {
        oprot.writeString(struct.privateSecretKey);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetIdCard()) {
        oprot.writeString(struct.idCard);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetPartnerType()) {
        oprot.writeString(struct.partnerType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FucaiPartnerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverUrl = iprot.readString();
        struct.setServerUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aliasKey = iprot.readString();
        struct.setAliasKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.keyStorePass = iprot.readString();
        struct.setKeyStorePassIsSet(true);
      }
      if (incoming.get(4)) {
        struct.privateSecretKey = iprot.readString();
        struct.setPrivateSecretKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.idCard = iprot.readString();
        struct.setIdCardIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.partnerType = iprot.readString();
        struct.setPartnerTypeIsSet(true);
      }
    }
  }

}

