/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserAccountInfo implements org.apache.thrift.TBase<UserAccountInfo, UserAccountInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserAccountInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserAccountInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ID_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PUSERKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("puserkey", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField GIFTCASH_FIELD_DESC = new org.apache.thrift.protocol.TField("giftcash", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FORZENCASH_FIELD_DESC = new org.apache.thrift.protocol.TField("forzencash", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserAccountInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserAccountInfoTupleSchemeFactory());
  }

  public long userId; // required
  public String realName; // required
  public String idCardNo; // required
  public String phone; // required
  public String status; // required
  public String puserkey; // required
  public long cash; // required
  public long giftcash; // required
  public long forzencash; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    REAL_NAME((short)2, "realName"),
    ID_CARD_NO((short)3, "idCardNo"),
    PHONE((short)4, "phone"),
    STATUS((short)5, "status"),
    PUSERKEY((short)6, "puserkey"),
    CASH((short)7, "cash"),
    GIFTCASH((short)8, "giftcash"),
    FORZENCASH((short)9, "forzencash");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // REAL_NAME
          return REAL_NAME;
        case 3: // ID_CARD_NO
          return ID_CARD_NO;
        case 4: // PHONE
          return PHONE;
        case 5: // STATUS
          return STATUS;
        case 6: // PUSERKEY
          return PUSERKEY;
        case 7: // CASH
          return CASH;
        case 8: // GIFTCASH
          return GIFTCASH;
        case 9: // FORZENCASH
          return FORZENCASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __CASH_ISSET_ID = 1;
  private static final int __GIFTCASH_ISSET_ID = 2;
  private static final int __FORZENCASH_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("idCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSERKEY, new org.apache.thrift.meta_data.FieldMetaData("puserkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GIFTCASH, new org.apache.thrift.meta_data.FieldMetaData("giftcash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FORZENCASH, new org.apache.thrift.meta_data.FieldMetaData("forzencash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAccountInfo.class, metaDataMap);
  }

  public UserAccountInfo() {
  }

  public UserAccountInfo(
    long userId,
    String realName,
    String idCardNo,
    String phone,
    String status,
    String puserkey,
    long cash,
    long giftcash,
    long forzencash)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.realName = realName;
    this.idCardNo = idCardNo;
    this.phone = phone;
    this.status = status;
    this.puserkey = puserkey;
    this.cash = cash;
    setCashIsSet(true);
    this.giftcash = giftcash;
    setGiftcashIsSet(true);
    this.forzencash = forzencash;
    setForzencashIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserAccountInfo(UserAccountInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetIdCardNo()) {
      this.idCardNo = other.idCardNo;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetPuserkey()) {
      this.puserkey = other.puserkey;
    }
    this.cash = other.cash;
    this.giftcash = other.giftcash;
    this.forzencash = other.forzencash;
  }

  public UserAccountInfo deepCopy() {
    return new UserAccountInfo(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.realName = null;
    this.idCardNo = null;
    this.phone = null;
    this.status = null;
    this.puserkey = null;
    setCashIsSet(false);
    this.cash = 0;
    setGiftcashIsSet(false);
    this.giftcash = 0;
    setForzencashIsSet(false);
    this.forzencash = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public UserAccountInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public UserAccountInfo setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getIdCardNo() {
    return this.idCardNo;
  }

  public UserAccountInfo setIdCardNo(String idCardNo) {
    this.idCardNo = idCardNo;
    return this;
  }

  public void unsetIdCardNo() {
    this.idCardNo = null;
  }

  /** Returns true if field idCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardNo() {
    return this.idCardNo != null;
  }

  public void setIdCardNoIsSet(boolean value) {
    if (!value) {
      this.idCardNo = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public UserAccountInfo setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public UserAccountInfo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getPuserkey() {
    return this.puserkey;
  }

  public UserAccountInfo setPuserkey(String puserkey) {
    this.puserkey = puserkey;
    return this;
  }

  public void unsetPuserkey() {
    this.puserkey = null;
  }

  /** Returns true if field puserkey is set (has been assigned a value) and false otherwise */
  public boolean isSetPuserkey() {
    return this.puserkey != null;
  }

  public void setPuserkeyIsSet(boolean value) {
    if (!value) {
      this.puserkey = null;
    }
  }

  public long getCash() {
    return this.cash;
  }

  public UserAccountInfo setCash(long cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  public long getGiftcash() {
    return this.giftcash;
  }

  public UserAccountInfo setGiftcash(long giftcash) {
    this.giftcash = giftcash;
    setGiftcashIsSet(true);
    return this;
  }

  public void unsetGiftcash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTCASH_ISSET_ID);
  }

  /** Returns true if field giftcash is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftcash() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTCASH_ISSET_ID);
  }

  public void setGiftcashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTCASH_ISSET_ID, value);
  }

  public long getForzencash() {
    return this.forzencash;
  }

  public UserAccountInfo setForzencash(long forzencash) {
    this.forzencash = forzencash;
    setForzencashIsSet(true);
    return this;
  }

  public void unsetForzencash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORZENCASH_ISSET_ID);
  }

  /** Returns true if field forzencash is set (has been assigned a value) and false otherwise */
  public boolean isSetForzencash() {
    return EncodingUtils.testBit(__isset_bitfield, __FORZENCASH_ISSET_ID);
  }

  public void setForzencashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORZENCASH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case ID_CARD_NO:
      if (value == null) {
        unsetIdCardNo();
      } else {
        setIdCardNo((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case PUSERKEY:
      if (value == null) {
        unsetPuserkey();
      } else {
        setPuserkey((String)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Long)value);
      }
      break;

    case GIFTCASH:
      if (value == null) {
        unsetGiftcash();
      } else {
        setGiftcash((Long)value);
      }
      break;

    case FORZENCASH:
      if (value == null) {
        unsetForzencash();
      } else {
        setForzencash((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case REAL_NAME:
      return getRealName();

    case ID_CARD_NO:
      return getIdCardNo();

    case PHONE:
      return getPhone();

    case STATUS:
      return getStatus();

    case PUSERKEY:
      return getPuserkey();

    case CASH:
      return Long.valueOf(getCash());

    case GIFTCASH:
      return Long.valueOf(getGiftcash());

    case FORZENCASH:
      return Long.valueOf(getForzencash());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case REAL_NAME:
      return isSetRealName();
    case ID_CARD_NO:
      return isSetIdCardNo();
    case PHONE:
      return isSetPhone();
    case STATUS:
      return isSetStatus();
    case PUSERKEY:
      return isSetPuserkey();
    case CASH:
      return isSetCash();
    case GIFTCASH:
      return isSetGiftcash();
    case FORZENCASH:
      return isSetForzencash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserAccountInfo)
      return this.equals((UserAccountInfo)that);
    return false;
  }

  public boolean equals(UserAccountInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_idCardNo = true && this.isSetIdCardNo();
    boolean that_present_idCardNo = true && that.isSetIdCardNo();
    if (this_present_idCardNo || that_present_idCardNo) {
      if (!(this_present_idCardNo && that_present_idCardNo))
        return false;
      if (!this.idCardNo.equals(that.idCardNo))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_puserkey = true && this.isSetPuserkey();
    boolean that_present_puserkey = true && that.isSetPuserkey();
    if (this_present_puserkey || that_present_puserkey) {
      if (!(this_present_puserkey && that_present_puserkey))
        return false;
      if (!this.puserkey.equals(that.puserkey))
        return false;
    }

    boolean this_present_cash = true;
    boolean that_present_cash = true;
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_giftcash = true;
    boolean that_present_giftcash = true;
    if (this_present_giftcash || that_present_giftcash) {
      if (!(this_present_giftcash && that_present_giftcash))
        return false;
      if (this.giftcash != that.giftcash)
        return false;
    }

    boolean this_present_forzencash = true;
    boolean that_present_forzencash = true;
    if (this_present_forzencash || that_present_forzencash) {
      if (!(this_present_forzencash && that_present_forzencash))
        return false;
      if (this.forzencash != that.forzencash)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserAccountInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardNo()).compareTo(other.isSetIdCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardNo, other.idCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPuserkey()).compareTo(other.isSetPuserkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPuserkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.puserkey, other.puserkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftcash()).compareTo(other.isSetGiftcash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftcash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftcash, other.giftcash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForzencash()).compareTo(other.isSetForzencash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForzencash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forzencash, other.forzencash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserAccountInfo(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardNo:");
    if (this.idCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("puserkey:");
    if (this.puserkey == null) {
      sb.append("null");
    } else {
      sb.append(this.puserkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cash:");
    sb.append(this.cash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftcash:");
    sb.append(this.giftcash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forzencash:");
    sb.append(this.forzencash);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserAccountInfoStandardSchemeFactory implements SchemeFactory {
    public UserAccountInfoStandardScheme getScheme() {
      return new UserAccountInfoStandardScheme();
    }
  }

  private static class UserAccountInfoStandardScheme extends StandardScheme<UserAccountInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserAccountInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardNo = iprot.readString();
              struct.setIdCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUSERKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.puserkey = iprot.readString();
              struct.setPuserkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cash = iprot.readI64();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GIFTCASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.giftcash = iprot.readI64();
              struct.setGiftcashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FORZENCASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.forzencash = iprot.readI64();
              struct.setForzencashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserAccountInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.idCardNo != null) {
        oprot.writeFieldBegin(ID_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.idCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.puserkey != null) {
        oprot.writeFieldBegin(PUSERKEY_FIELD_DESC);
        oprot.writeString(struct.puserkey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CASH_FIELD_DESC);
      oprot.writeI64(struct.cash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFTCASH_FIELD_DESC);
      oprot.writeI64(struct.giftcash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORZENCASH_FIELD_DESC);
      oprot.writeI64(struct.forzencash);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserAccountInfoTupleSchemeFactory implements SchemeFactory {
    public UserAccountInfoTupleScheme getScheme() {
      return new UserAccountInfoTupleScheme();
    }
  }

  private static class UserAccountInfoTupleScheme extends TupleScheme<UserAccountInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserAccountInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetRealName()) {
        optionals.set(1);
      }
      if (struct.isSetIdCardNo()) {
        optionals.set(2);
      }
      if (struct.isSetPhone()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetPuserkey()) {
        optionals.set(5);
      }
      if (struct.isSetCash()) {
        optionals.set(6);
      }
      if (struct.isSetGiftcash()) {
        optionals.set(7);
      }
      if (struct.isSetForzencash()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetIdCardNo()) {
        oprot.writeString(struct.idCardNo);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetPuserkey()) {
        oprot.writeString(struct.puserkey);
      }
      if (struct.isSetCash()) {
        oprot.writeI64(struct.cash);
      }
      if (struct.isSetGiftcash()) {
        oprot.writeI64(struct.giftcash);
      }
      if (struct.isSetForzencash()) {
        oprot.writeI64(struct.forzencash);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserAccountInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.idCardNo = iprot.readString();
        struct.setIdCardNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.puserkey = iprot.readString();
        struct.setPuserkeyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cash = iprot.readI64();
        struct.setCashIsSet(true);
      }
      if (incoming.get(7)) {
        struct.giftcash = iprot.readI64();
        struct.setGiftcashIsSet(true);
      }
      if (incoming.get(8)) {
        struct.forzencash = iprot.readI64();
        struct.setForzencashIsSet(true);
      }
    }
  }

}

