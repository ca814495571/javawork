/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Pv implements org.apache.thrift.TBase<Pv, Pv._Fields>, java.io.Serializable, Cloneable, Comparable<Pv> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pv");

  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GGRQ_FIELD_DESC = new org.apache.thrift.protocol.TField("ggrq", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DGRQ_FIELD_DESC = new org.apache.thrift.protocol.TField("dgrq", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GGPV_FIELD_DESC = new org.apache.thrift.protocol.TField("ggpv", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DGPV_FIELD_DESC = new org.apache.thrift.protocol.TField("dgpv", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GG_SALE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ggSaleStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DG_SALE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("dgSaleStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DGGD_SALE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("dggdSaleStatus", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PvStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PvTupleSchemeFactory());
  }

  public String lotteryId; // required
  public String ggrq; // required
  public String dgrq; // required
  public String ggpv; // required
  public String dgpv; // required
  public int ggSaleStatus; // required
  public int dgSaleStatus; // required
  public int dggdSaleStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOTTERY_ID((short)1, "lotteryId"),
    GGRQ((short)2, "ggrq"),
    DGRQ((short)3, "dgrq"),
    GGPV((short)4, "ggpv"),
    DGPV((short)5, "dgpv"),
    GG_SALE_STATUS((short)6, "ggSaleStatus"),
    DG_SALE_STATUS((short)7, "dgSaleStatus"),
    DGGD_SALE_STATUS((short)8, "dggdSaleStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOTTERY_ID
          return LOTTERY_ID;
        case 2: // GGRQ
          return GGRQ;
        case 3: // DGRQ
          return DGRQ;
        case 4: // GGPV
          return GGPV;
        case 5: // DGPV
          return DGPV;
        case 6: // GG_SALE_STATUS
          return GG_SALE_STATUS;
        case 7: // DG_SALE_STATUS
          return DG_SALE_STATUS;
        case 8: // DGGD_SALE_STATUS
          return DGGD_SALE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GGSALESTATUS_ISSET_ID = 0;
  private static final int __DGSALESTATUS_ISSET_ID = 1;
  private static final int __DGGDSALESTATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GGRQ, new org.apache.thrift.meta_data.FieldMetaData("ggrq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DGRQ, new org.apache.thrift.meta_data.FieldMetaData("dgrq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GGPV, new org.apache.thrift.meta_data.FieldMetaData("ggpv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DGPV, new org.apache.thrift.meta_data.FieldMetaData("dgpv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GG_SALE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ggSaleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DG_SALE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("dgSaleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DGGD_SALE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("dggdSaleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pv.class, metaDataMap);
  }

  public Pv() {
  }

  public Pv(
    String lotteryId,
    String ggrq,
    String dgrq,
    String ggpv,
    String dgpv,
    int ggSaleStatus,
    int dgSaleStatus,
    int dggdSaleStatus)
  {
    this();
    this.lotteryId = lotteryId;
    this.ggrq = ggrq;
    this.dgrq = dgrq;
    this.ggpv = ggpv;
    this.dgpv = dgpv;
    this.ggSaleStatus = ggSaleStatus;
    setGgSaleStatusIsSet(true);
    this.dgSaleStatus = dgSaleStatus;
    setDgSaleStatusIsSet(true);
    this.dggdSaleStatus = dggdSaleStatus;
    setDggdSaleStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Pv(Pv other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetGgrq()) {
      this.ggrq = other.ggrq;
    }
    if (other.isSetDgrq()) {
      this.dgrq = other.dgrq;
    }
    if (other.isSetGgpv()) {
      this.ggpv = other.ggpv;
    }
    if (other.isSetDgpv()) {
      this.dgpv = other.dgpv;
    }
    this.ggSaleStatus = other.ggSaleStatus;
    this.dgSaleStatus = other.dgSaleStatus;
    this.dggdSaleStatus = other.dggdSaleStatus;
  }

  public Pv deepCopy() {
    return new Pv(this);
  }

  @Override
  public void clear() {
    this.lotteryId = null;
    this.ggrq = null;
    this.dgrq = null;
    this.ggpv = null;
    this.dgpv = null;
    setGgSaleStatusIsSet(false);
    this.ggSaleStatus = 0;
    setDgSaleStatusIsSet(false);
    this.dgSaleStatus = 0;
    setDggdSaleStatusIsSet(false);
    this.dggdSaleStatus = 0;
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public Pv setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getGgrq() {
    return this.ggrq;
  }

  public Pv setGgrq(String ggrq) {
    this.ggrq = ggrq;
    return this;
  }

  public void unsetGgrq() {
    this.ggrq = null;
  }

  /** Returns true if field ggrq is set (has been assigned a value) and false otherwise */
  public boolean isSetGgrq() {
    return this.ggrq != null;
  }

  public void setGgrqIsSet(boolean value) {
    if (!value) {
      this.ggrq = null;
    }
  }

  public String getDgrq() {
    return this.dgrq;
  }

  public Pv setDgrq(String dgrq) {
    this.dgrq = dgrq;
    return this;
  }

  public void unsetDgrq() {
    this.dgrq = null;
  }

  /** Returns true if field dgrq is set (has been assigned a value) and false otherwise */
  public boolean isSetDgrq() {
    return this.dgrq != null;
  }

  public void setDgrqIsSet(boolean value) {
    if (!value) {
      this.dgrq = null;
    }
  }

  public String getGgpv() {
    return this.ggpv;
  }

  public Pv setGgpv(String ggpv) {
    this.ggpv = ggpv;
    return this;
  }

  public void unsetGgpv() {
    this.ggpv = null;
  }

  /** Returns true if field ggpv is set (has been assigned a value) and false otherwise */
  public boolean isSetGgpv() {
    return this.ggpv != null;
  }

  public void setGgpvIsSet(boolean value) {
    if (!value) {
      this.ggpv = null;
    }
  }

  public String getDgpv() {
    return this.dgpv;
  }

  public Pv setDgpv(String dgpv) {
    this.dgpv = dgpv;
    return this;
  }

  public void unsetDgpv() {
    this.dgpv = null;
  }

  /** Returns true if field dgpv is set (has been assigned a value) and false otherwise */
  public boolean isSetDgpv() {
    return this.dgpv != null;
  }

  public void setDgpvIsSet(boolean value) {
    if (!value) {
      this.dgpv = null;
    }
  }

  public int getGgSaleStatus() {
    return this.ggSaleStatus;
  }

  public Pv setGgSaleStatus(int ggSaleStatus) {
    this.ggSaleStatus = ggSaleStatus;
    setGgSaleStatusIsSet(true);
    return this;
  }

  public void unsetGgSaleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GGSALESTATUS_ISSET_ID);
  }

  /** Returns true if field ggSaleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetGgSaleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __GGSALESTATUS_ISSET_ID);
  }

  public void setGgSaleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GGSALESTATUS_ISSET_ID, value);
  }

  public int getDgSaleStatus() {
    return this.dgSaleStatus;
  }

  public Pv setDgSaleStatus(int dgSaleStatus) {
    this.dgSaleStatus = dgSaleStatus;
    setDgSaleStatusIsSet(true);
    return this;
  }

  public void unsetDgSaleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DGSALESTATUS_ISSET_ID);
  }

  /** Returns true if field dgSaleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetDgSaleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __DGSALESTATUS_ISSET_ID);
  }

  public void setDgSaleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DGSALESTATUS_ISSET_ID, value);
  }

  public int getDggdSaleStatus() {
    return this.dggdSaleStatus;
  }

  public Pv setDggdSaleStatus(int dggdSaleStatus) {
    this.dggdSaleStatus = dggdSaleStatus;
    setDggdSaleStatusIsSet(true);
    return this;
  }

  public void unsetDggdSaleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DGGDSALESTATUS_ISSET_ID);
  }

  /** Returns true if field dggdSaleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetDggdSaleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __DGGDSALESTATUS_ISSET_ID);
  }

  public void setDggdSaleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DGGDSALESTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case GGRQ:
      if (value == null) {
        unsetGgrq();
      } else {
        setGgrq((String)value);
      }
      break;

    case DGRQ:
      if (value == null) {
        unsetDgrq();
      } else {
        setDgrq((String)value);
      }
      break;

    case GGPV:
      if (value == null) {
        unsetGgpv();
      } else {
        setGgpv((String)value);
      }
      break;

    case DGPV:
      if (value == null) {
        unsetDgpv();
      } else {
        setDgpv((String)value);
      }
      break;

    case GG_SALE_STATUS:
      if (value == null) {
        unsetGgSaleStatus();
      } else {
        setGgSaleStatus((Integer)value);
      }
      break;

    case DG_SALE_STATUS:
      if (value == null) {
        unsetDgSaleStatus();
      } else {
        setDgSaleStatus((Integer)value);
      }
      break;

    case DGGD_SALE_STATUS:
      if (value == null) {
        unsetDggdSaleStatus();
      } else {
        setDggdSaleStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOTTERY_ID:
      return getLotteryId();

    case GGRQ:
      return getGgrq();

    case DGRQ:
      return getDgrq();

    case GGPV:
      return getGgpv();

    case DGPV:
      return getDgpv();

    case GG_SALE_STATUS:
      return Integer.valueOf(getGgSaleStatus());

    case DG_SALE_STATUS:
      return Integer.valueOf(getDgSaleStatus());

    case DGGD_SALE_STATUS:
      return Integer.valueOf(getDggdSaleStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOTTERY_ID:
      return isSetLotteryId();
    case GGRQ:
      return isSetGgrq();
    case DGRQ:
      return isSetDgrq();
    case GGPV:
      return isSetGgpv();
    case DGPV:
      return isSetDgpv();
    case GG_SALE_STATUS:
      return isSetGgSaleStatus();
    case DG_SALE_STATUS:
      return isSetDgSaleStatus();
    case DGGD_SALE_STATUS:
      return isSetDggdSaleStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Pv)
      return this.equals((Pv)that);
    return false;
  }

  public boolean equals(Pv that) {
    if (that == null)
      return false;

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_ggrq = true && this.isSetGgrq();
    boolean that_present_ggrq = true && that.isSetGgrq();
    if (this_present_ggrq || that_present_ggrq) {
      if (!(this_present_ggrq && that_present_ggrq))
        return false;
      if (!this.ggrq.equals(that.ggrq))
        return false;
    }

    boolean this_present_dgrq = true && this.isSetDgrq();
    boolean that_present_dgrq = true && that.isSetDgrq();
    if (this_present_dgrq || that_present_dgrq) {
      if (!(this_present_dgrq && that_present_dgrq))
        return false;
      if (!this.dgrq.equals(that.dgrq))
        return false;
    }

    boolean this_present_ggpv = true && this.isSetGgpv();
    boolean that_present_ggpv = true && that.isSetGgpv();
    if (this_present_ggpv || that_present_ggpv) {
      if (!(this_present_ggpv && that_present_ggpv))
        return false;
      if (!this.ggpv.equals(that.ggpv))
        return false;
    }

    boolean this_present_dgpv = true && this.isSetDgpv();
    boolean that_present_dgpv = true && that.isSetDgpv();
    if (this_present_dgpv || that_present_dgpv) {
      if (!(this_present_dgpv && that_present_dgpv))
        return false;
      if (!this.dgpv.equals(that.dgpv))
        return false;
    }

    boolean this_present_ggSaleStatus = true;
    boolean that_present_ggSaleStatus = true;
    if (this_present_ggSaleStatus || that_present_ggSaleStatus) {
      if (!(this_present_ggSaleStatus && that_present_ggSaleStatus))
        return false;
      if (this.ggSaleStatus != that.ggSaleStatus)
        return false;
    }

    boolean this_present_dgSaleStatus = true;
    boolean that_present_dgSaleStatus = true;
    if (this_present_dgSaleStatus || that_present_dgSaleStatus) {
      if (!(this_present_dgSaleStatus && that_present_dgSaleStatus))
        return false;
      if (this.dgSaleStatus != that.dgSaleStatus)
        return false;
    }

    boolean this_present_dggdSaleStatus = true;
    boolean that_present_dggdSaleStatus = true;
    if (this_present_dggdSaleStatus || that_present_dggdSaleStatus) {
      if (!(this_present_dggdSaleStatus && that_present_dggdSaleStatus))
        return false;
      if (this.dggdSaleStatus != that.dggdSaleStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Pv other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGgrq()).compareTo(other.isSetGgrq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGgrq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ggrq, other.ggrq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgrq()).compareTo(other.isSetDgrq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgrq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgrq, other.dgrq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGgpv()).compareTo(other.isSetGgpv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGgpv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ggpv, other.ggpv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgpv()).compareTo(other.isSetDgpv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgpv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgpv, other.dgpv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGgSaleStatus()).compareTo(other.isSetGgSaleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGgSaleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ggSaleStatus, other.ggSaleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDgSaleStatus()).compareTo(other.isSetDgSaleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDgSaleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dgSaleStatus, other.dgSaleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDggdSaleStatus()).compareTo(other.isSetDggdSaleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDggdSaleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dggdSaleStatus, other.dggdSaleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Pv(");
    boolean first = true;

    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ggrq:");
    if (this.ggrq == null) {
      sb.append("null");
    } else {
      sb.append(this.ggrq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgrq:");
    if (this.dgrq == null) {
      sb.append("null");
    } else {
      sb.append(this.dgrq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ggpv:");
    if (this.ggpv == null) {
      sb.append("null");
    } else {
      sb.append(this.ggpv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgpv:");
    if (this.dgpv == null) {
      sb.append("null");
    } else {
      sb.append(this.dgpv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ggSaleStatus:");
    sb.append(this.ggSaleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dgSaleStatus:");
    sb.append(this.dgSaleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dggdSaleStatus:");
    sb.append(this.dggdSaleStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PvStandardSchemeFactory implements SchemeFactory {
    public PvStandardScheme getScheme() {
      return new PvStandardScheme();
    }
  }

  private static class PvStandardScheme extends StandardScheme<Pv> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Pv struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GGRQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ggrq = iprot.readString();
              struct.setGgrqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DGRQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dgrq = iprot.readString();
              struct.setDgrqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GGPV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ggpv = iprot.readString();
              struct.setGgpvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DGPV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dgpv = iprot.readString();
              struct.setDgpvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GG_SALE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ggSaleStatus = iprot.readI32();
              struct.setGgSaleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DG_SALE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dgSaleStatus = iprot.readI32();
              struct.setDgSaleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DGGD_SALE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dggdSaleStatus = iprot.readI32();
              struct.setDggdSaleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Pv struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.ggrq != null) {
        oprot.writeFieldBegin(GGRQ_FIELD_DESC);
        oprot.writeString(struct.ggrq);
        oprot.writeFieldEnd();
      }
      if (struct.dgrq != null) {
        oprot.writeFieldBegin(DGRQ_FIELD_DESC);
        oprot.writeString(struct.dgrq);
        oprot.writeFieldEnd();
      }
      if (struct.ggpv != null) {
        oprot.writeFieldBegin(GGPV_FIELD_DESC);
        oprot.writeString(struct.ggpv);
        oprot.writeFieldEnd();
      }
      if (struct.dgpv != null) {
        oprot.writeFieldBegin(DGPV_FIELD_DESC);
        oprot.writeString(struct.dgpv);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GG_SALE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.ggSaleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DG_SALE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.dgSaleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DGGD_SALE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.dggdSaleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PvTupleSchemeFactory implements SchemeFactory {
    public PvTupleScheme getScheme() {
      return new PvTupleScheme();
    }
  }

  private static class PvTupleScheme extends TupleScheme<Pv> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Pv struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLotteryId()) {
        optionals.set(0);
      }
      if (struct.isSetGgrq()) {
        optionals.set(1);
      }
      if (struct.isSetDgrq()) {
        optionals.set(2);
      }
      if (struct.isSetGgpv()) {
        optionals.set(3);
      }
      if (struct.isSetDgpv()) {
        optionals.set(4);
      }
      if (struct.isSetGgSaleStatus()) {
        optionals.set(5);
      }
      if (struct.isSetDgSaleStatus()) {
        optionals.set(6);
      }
      if (struct.isSetDggdSaleStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetGgrq()) {
        oprot.writeString(struct.ggrq);
      }
      if (struct.isSetDgrq()) {
        oprot.writeString(struct.dgrq);
      }
      if (struct.isSetGgpv()) {
        oprot.writeString(struct.ggpv);
      }
      if (struct.isSetDgpv()) {
        oprot.writeString(struct.dgpv);
      }
      if (struct.isSetGgSaleStatus()) {
        oprot.writeI32(struct.ggSaleStatus);
      }
      if (struct.isSetDgSaleStatus()) {
        oprot.writeI32(struct.dgSaleStatus);
      }
      if (struct.isSetDggdSaleStatus()) {
        oprot.writeI32(struct.dggdSaleStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Pv struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ggrq = iprot.readString();
        struct.setGgrqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dgrq = iprot.readString();
        struct.setDgrqIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ggpv = iprot.readString();
        struct.setGgpvIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dgpv = iprot.readString();
        struct.setDgpvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ggSaleStatus = iprot.readI32();
        struct.setGgSaleStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dgSaleStatus = iprot.readI32();
        struct.setDgSaleStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dggdSaleStatus = iprot.readI32();
        struct.setDggdSaleStatusIsSet(true);
      }
    }
  }

}

