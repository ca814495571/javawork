/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LotteryPartner implements org.apache.thrift.TBase<LotteryPartner, LotteryPartner._Fields>, java.io.Serializable, Cloneable, Comparable<LotteryPartner> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LotteryPartner");

  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerType", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("minBalance", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CALLBACK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("callbackUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField REGISTRATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PARTNER_IP_ADDRESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerIpAddressList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ALIAS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("aliasKey", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField KEY_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyStore", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LotteryPartnerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LotteryPartnerTupleSchemeFactory());
  }

  public String partnerId; // required
  public String partnerName; // required
  public short partnerType; // required
  public String secretKey; // required
  public short state; // required
  public long minBalance; // required
  public String callbackUrl; // required
  public String ext; // required
  public long userId; // required
  public String registrationTime; // required
  public String lastUpdateTime; // required
  public List<PartnerIpAddress> partnerIpAddressList; // required
  public String publicKey; // required
  public String aliasKey; // required
  public String keyStore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER_ID((short)1, "partnerId"),
    PARTNER_NAME((short)2, "partnerName"),
    PARTNER_TYPE((short)3, "partnerType"),
    SECRET_KEY((short)4, "secretKey"),
    STATE((short)5, "state"),
    MIN_BALANCE((short)6, "minBalance"),
    CALLBACK_URL((short)7, "callbackUrl"),
    EXT((short)8, "ext"),
    USER_ID((short)9, "userId"),
    REGISTRATION_TIME((short)10, "registrationTime"),
    LAST_UPDATE_TIME((short)11, "lastUpdateTime"),
    PARTNER_IP_ADDRESS_LIST((short)12, "partnerIpAddressList"),
    PUBLIC_KEY((short)13, "publicKey"),
    ALIAS_KEY((short)14, "aliasKey"),
    KEY_STORE((short)15, "keyStore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_ID
          return PARTNER_ID;
        case 2: // PARTNER_NAME
          return PARTNER_NAME;
        case 3: // PARTNER_TYPE
          return PARTNER_TYPE;
        case 4: // SECRET_KEY
          return SECRET_KEY;
        case 5: // STATE
          return STATE;
        case 6: // MIN_BALANCE
          return MIN_BALANCE;
        case 7: // CALLBACK_URL
          return CALLBACK_URL;
        case 8: // EXT
          return EXT;
        case 9: // USER_ID
          return USER_ID;
        case 10: // REGISTRATION_TIME
          return REGISTRATION_TIME;
        case 11: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 12: // PARTNER_IP_ADDRESS_LIST
          return PARTNER_IP_ADDRESS_LIST;
        case 13: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 14: // ALIAS_KEY
          return ALIAS_KEY;
        case 15: // KEY_STORE
          return KEY_STORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARTNERTYPE_ISSET_ID = 0;
  private static final int __STATE_ISSET_ID = 1;
  private static final int __MINBALANCE_ISSET_ID = 2;
  private static final int __USERID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_NAME, new org.apache.thrift.meta_data.FieldMetaData("partnerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partnerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MIN_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("minBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CALLBACK_URL, new org.apache.thrift.meta_data.FieldMetaData("callbackUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGISTRATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("registrationTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_IP_ADDRESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("partnerIpAddressList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartnerIpAddress.class))));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIAS_KEY, new org.apache.thrift.meta_data.FieldMetaData("aliasKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_STORE, new org.apache.thrift.meta_data.FieldMetaData("keyStore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LotteryPartner.class, metaDataMap);
  }

  public LotteryPartner() {
  }

  public LotteryPartner(
    String partnerId,
    String partnerName,
    short partnerType,
    String secretKey,
    short state,
    long minBalance,
    String callbackUrl,
    String ext,
    long userId,
    String registrationTime,
    String lastUpdateTime,
    List<PartnerIpAddress> partnerIpAddressList,
    String publicKey,
    String aliasKey,
    String keyStore)
  {
    this();
    this.partnerId = partnerId;
    this.partnerName = partnerName;
    this.partnerType = partnerType;
    setPartnerTypeIsSet(true);
    this.secretKey = secretKey;
    this.state = state;
    setStateIsSet(true);
    this.minBalance = minBalance;
    setMinBalanceIsSet(true);
    this.callbackUrl = callbackUrl;
    this.ext = ext;
    this.userId = userId;
    setUserIdIsSet(true);
    this.registrationTime = registrationTime;
    this.lastUpdateTime = lastUpdateTime;
    this.partnerIpAddressList = partnerIpAddressList;
    this.publicKey = publicKey;
    this.aliasKey = aliasKey;
    this.keyStore = keyStore;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LotteryPartner(LotteryPartner other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetPartnerName()) {
      this.partnerName = other.partnerName;
    }
    this.partnerType = other.partnerType;
    if (other.isSetSecretKey()) {
      this.secretKey = other.secretKey;
    }
    this.state = other.state;
    this.minBalance = other.minBalance;
    if (other.isSetCallbackUrl()) {
      this.callbackUrl = other.callbackUrl;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    this.userId = other.userId;
    if (other.isSetRegistrationTime()) {
      this.registrationTime = other.registrationTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetPartnerIpAddressList()) {
      List<PartnerIpAddress> __this__partnerIpAddressList = new ArrayList<PartnerIpAddress>(other.partnerIpAddressList.size());
      for (PartnerIpAddress other_element : other.partnerIpAddressList) {
        __this__partnerIpAddressList.add(new PartnerIpAddress(other_element));
      }
      this.partnerIpAddressList = __this__partnerIpAddressList;
    }
    if (other.isSetPublicKey()) {
      this.publicKey = other.publicKey;
    }
    if (other.isSetAliasKey()) {
      this.aliasKey = other.aliasKey;
    }
    if (other.isSetKeyStore()) {
      this.keyStore = other.keyStore;
    }
  }

  public LotteryPartner deepCopy() {
    return new LotteryPartner(this);
  }

  @Override
  public void clear() {
    this.partnerId = null;
    this.partnerName = null;
    setPartnerTypeIsSet(false);
    this.partnerType = 0;
    this.secretKey = null;
    setStateIsSet(false);
    this.state = 0;
    setMinBalanceIsSet(false);
    this.minBalance = 0;
    this.callbackUrl = null;
    this.ext = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.registrationTime = null;
    this.lastUpdateTime = null;
    this.partnerIpAddressList = null;
    this.publicKey = null;
    this.aliasKey = null;
    this.keyStore = null;
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public LotteryPartner setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getPartnerName() {
    return this.partnerName;
  }

  public LotteryPartner setPartnerName(String partnerName) {
    this.partnerName = partnerName;
    return this;
  }

  public void unsetPartnerName() {
    this.partnerName = null;
  }

  /** Returns true if field partnerName is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerName() {
    return this.partnerName != null;
  }

  public void setPartnerNameIsSet(boolean value) {
    if (!value) {
      this.partnerName = null;
    }
  }

  public short getPartnerType() {
    return this.partnerType;
  }

  public LotteryPartner setPartnerType(short partnerType) {
    this.partnerType = partnerType;
    setPartnerTypeIsSet(true);
    return this;
  }

  public void unsetPartnerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID);
  }

  /** Returns true if field partnerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerType() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID);
  }

  public void setPartnerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID, value);
  }

  public String getSecretKey() {
    return this.secretKey;
  }

  public LotteryPartner setSecretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

  public void unsetSecretKey() {
    this.secretKey = null;
  }

  /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSecretKey() {
    return this.secretKey != null;
  }

  public void setSecretKeyIsSet(boolean value) {
    if (!value) {
      this.secretKey = null;
    }
  }

  public short getState() {
    return this.state;
  }

  public LotteryPartner setState(short state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public long getMinBalance() {
    return this.minBalance;
  }

  public LotteryPartner setMinBalance(long minBalance) {
    this.minBalance = minBalance;
    setMinBalanceIsSet(true);
    return this;
  }

  public void unsetMinBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINBALANCE_ISSET_ID);
  }

  /** Returns true if field minBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetMinBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __MINBALANCE_ISSET_ID);
  }

  public void setMinBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINBALANCE_ISSET_ID, value);
  }

  public String getCallbackUrl() {
    return this.callbackUrl;
  }

  public LotteryPartner setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  public void unsetCallbackUrl() {
    this.callbackUrl = null;
  }

  /** Returns true if field callbackUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCallbackUrl() {
    return this.callbackUrl != null;
  }

  public void setCallbackUrlIsSet(boolean value) {
    if (!value) {
      this.callbackUrl = null;
    }
  }

  public String getExt() {
    return this.ext;
  }

  public LotteryPartner setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public LotteryPartner setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getRegistrationTime() {
    return this.registrationTime;
  }

  public LotteryPartner setRegistrationTime(String registrationTime) {
    this.registrationTime = registrationTime;
    return this;
  }

  public void unsetRegistrationTime() {
    this.registrationTime = null;
  }

  /** Returns true if field registrationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationTime() {
    return this.registrationTime != null;
  }

  public void setRegistrationTimeIsSet(boolean value) {
    if (!value) {
      this.registrationTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public LotteryPartner setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getPartnerIpAddressListSize() {
    return (this.partnerIpAddressList == null) ? 0 : this.partnerIpAddressList.size();
  }

  public java.util.Iterator<PartnerIpAddress> getPartnerIpAddressListIterator() {
    return (this.partnerIpAddressList == null) ? null : this.partnerIpAddressList.iterator();
  }

  public void addToPartnerIpAddressList(PartnerIpAddress elem) {
    if (this.partnerIpAddressList == null) {
      this.partnerIpAddressList = new ArrayList<PartnerIpAddress>();
    }
    this.partnerIpAddressList.add(elem);
  }

  public List<PartnerIpAddress> getPartnerIpAddressList() {
    return this.partnerIpAddressList;
  }

  public LotteryPartner setPartnerIpAddressList(List<PartnerIpAddress> partnerIpAddressList) {
    this.partnerIpAddressList = partnerIpAddressList;
    return this;
  }

  public void unsetPartnerIpAddressList() {
    this.partnerIpAddressList = null;
  }

  /** Returns true if field partnerIpAddressList is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerIpAddressList() {
    return this.partnerIpAddressList != null;
  }

  public void setPartnerIpAddressListIsSet(boolean value) {
    if (!value) {
      this.partnerIpAddressList = null;
    }
  }

  public String getPublicKey() {
    return this.publicKey;
  }

  public LotteryPartner setPublicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public String getAliasKey() {
    return this.aliasKey;
  }

  public LotteryPartner setAliasKey(String aliasKey) {
    this.aliasKey = aliasKey;
    return this;
  }

  public void unsetAliasKey() {
    this.aliasKey = null;
  }

  /** Returns true if field aliasKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAliasKey() {
    return this.aliasKey != null;
  }

  public void setAliasKeyIsSet(boolean value) {
    if (!value) {
      this.aliasKey = null;
    }
  }

  public String getKeyStore() {
    return this.keyStore;
  }

  public LotteryPartner setKeyStore(String keyStore) {
    this.keyStore = keyStore;
    return this;
  }

  public void unsetKeyStore() {
    this.keyStore = null;
  }

  /** Returns true if field keyStore is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyStore() {
    return this.keyStore != null;
  }

  public void setKeyStoreIsSet(boolean value) {
    if (!value) {
      this.keyStore = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case PARTNER_NAME:
      if (value == null) {
        unsetPartnerName();
      } else {
        setPartnerName((String)value);
      }
      break;

    case PARTNER_TYPE:
      if (value == null) {
        unsetPartnerType();
      } else {
        setPartnerType((Short)value);
      }
      break;

    case SECRET_KEY:
      if (value == null) {
        unsetSecretKey();
      } else {
        setSecretKey((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Short)value);
      }
      break;

    case MIN_BALANCE:
      if (value == null) {
        unsetMinBalance();
      } else {
        setMinBalance((Long)value);
      }
      break;

    case CALLBACK_URL:
      if (value == null) {
        unsetCallbackUrl();
      } else {
        setCallbackUrl((String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REGISTRATION_TIME:
      if (value == null) {
        unsetRegistrationTime();
      } else {
        setRegistrationTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case PARTNER_IP_ADDRESS_LIST:
      if (value == null) {
        unsetPartnerIpAddressList();
      } else {
        setPartnerIpAddressList((List<PartnerIpAddress>)value);
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        setPublicKey((String)value);
      }
      break;

    case ALIAS_KEY:
      if (value == null) {
        unsetAliasKey();
      } else {
        setAliasKey((String)value);
      }
      break;

    case KEY_STORE:
      if (value == null) {
        unsetKeyStore();
      } else {
        setKeyStore((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_ID:
      return getPartnerId();

    case PARTNER_NAME:
      return getPartnerName();

    case PARTNER_TYPE:
      return Short.valueOf(getPartnerType());

    case SECRET_KEY:
      return getSecretKey();

    case STATE:
      return Short.valueOf(getState());

    case MIN_BALANCE:
      return Long.valueOf(getMinBalance());

    case CALLBACK_URL:
      return getCallbackUrl();

    case EXT:
      return getExt();

    case USER_ID:
      return Long.valueOf(getUserId());

    case REGISTRATION_TIME:
      return getRegistrationTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case PARTNER_IP_ADDRESS_LIST:
      return getPartnerIpAddressList();

    case PUBLIC_KEY:
      return getPublicKey();

    case ALIAS_KEY:
      return getAliasKey();

    case KEY_STORE:
      return getKeyStore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_ID:
      return isSetPartnerId();
    case PARTNER_NAME:
      return isSetPartnerName();
    case PARTNER_TYPE:
      return isSetPartnerType();
    case SECRET_KEY:
      return isSetSecretKey();
    case STATE:
      return isSetState();
    case MIN_BALANCE:
      return isSetMinBalance();
    case CALLBACK_URL:
      return isSetCallbackUrl();
    case EXT:
      return isSetExt();
    case USER_ID:
      return isSetUserId();
    case REGISTRATION_TIME:
      return isSetRegistrationTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case PARTNER_IP_ADDRESS_LIST:
      return isSetPartnerIpAddressList();
    case PUBLIC_KEY:
      return isSetPublicKey();
    case ALIAS_KEY:
      return isSetAliasKey();
    case KEY_STORE:
      return isSetKeyStore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LotteryPartner)
      return this.equals((LotteryPartner)that);
    return false;
  }

  public boolean equals(LotteryPartner that) {
    if (that == null)
      return false;

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_partnerName = true && this.isSetPartnerName();
    boolean that_present_partnerName = true && that.isSetPartnerName();
    if (this_present_partnerName || that_present_partnerName) {
      if (!(this_present_partnerName && that_present_partnerName))
        return false;
      if (!this.partnerName.equals(that.partnerName))
        return false;
    }

    boolean this_present_partnerType = true;
    boolean that_present_partnerType = true;
    if (this_present_partnerType || that_present_partnerType) {
      if (!(this_present_partnerType && that_present_partnerType))
        return false;
      if (this.partnerType != that.partnerType)
        return false;
    }

    boolean this_present_secretKey = true && this.isSetSecretKey();
    boolean that_present_secretKey = true && that.isSetSecretKey();
    if (this_present_secretKey || that_present_secretKey) {
      if (!(this_present_secretKey && that_present_secretKey))
        return false;
      if (!this.secretKey.equals(that.secretKey))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_minBalance = true;
    boolean that_present_minBalance = true;
    if (this_present_minBalance || that_present_minBalance) {
      if (!(this_present_minBalance && that_present_minBalance))
        return false;
      if (this.minBalance != that.minBalance)
        return false;
    }

    boolean this_present_callbackUrl = true && this.isSetCallbackUrl();
    boolean that_present_callbackUrl = true && that.isSetCallbackUrl();
    if (this_present_callbackUrl || that_present_callbackUrl) {
      if (!(this_present_callbackUrl && that_present_callbackUrl))
        return false;
      if (!this.callbackUrl.equals(that.callbackUrl))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_registrationTime = true && this.isSetRegistrationTime();
    boolean that_present_registrationTime = true && that.isSetRegistrationTime();
    if (this_present_registrationTime || that_present_registrationTime) {
      if (!(this_present_registrationTime && that_present_registrationTime))
        return false;
      if (!this.registrationTime.equals(that.registrationTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_partnerIpAddressList = true && this.isSetPartnerIpAddressList();
    boolean that_present_partnerIpAddressList = true && that.isSetPartnerIpAddressList();
    if (this_present_partnerIpAddressList || that_present_partnerIpAddressList) {
      if (!(this_present_partnerIpAddressList && that_present_partnerIpAddressList))
        return false;
      if (!this.partnerIpAddressList.equals(that.partnerIpAddressList))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    boolean this_present_aliasKey = true && this.isSetAliasKey();
    boolean that_present_aliasKey = true && that.isSetAliasKey();
    if (this_present_aliasKey || that_present_aliasKey) {
      if (!(this_present_aliasKey && that_present_aliasKey))
        return false;
      if (!this.aliasKey.equals(that.aliasKey))
        return false;
    }

    boolean this_present_keyStore = true && this.isSetKeyStore();
    boolean that_present_keyStore = true && that.isSetKeyStore();
    if (this_present_keyStore || that_present_keyStore) {
      if (!(this_present_keyStore && that_present_keyStore))
        return false;
      if (!this.keyStore.equals(that.keyStore))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LotteryPartner other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerName()).compareTo(other.isSetPartnerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerName, other.partnerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerType()).compareTo(other.isSetPartnerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerType, other.partnerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecretKey()).compareTo(other.isSetSecretKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecretKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, other.secretKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinBalance()).compareTo(other.isSetMinBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minBalance, other.minBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallbackUrl()).compareTo(other.isSetCallbackUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallbackUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callbackUrl, other.callbackUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationTime()).compareTo(other.isSetRegistrationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationTime, other.registrationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerIpAddressList()).compareTo(other.isSetPartnerIpAddressList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerIpAddressList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerIpAddressList, other.partnerIpAddressList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicKey()).compareTo(other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAliasKey()).compareTo(other.isSetAliasKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliasKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasKey, other.aliasKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyStore()).compareTo(other.isSetKeyStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyStore, other.keyStore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LotteryPartner(");
    boolean first = true;

    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerName:");
    if (this.partnerName == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerType:");
    sb.append(this.partnerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("secretKey:");
    if (this.secretKey == null) {
      sb.append("null");
    } else {
      sb.append(this.secretKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minBalance:");
    sb.append(this.minBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("callbackUrl:");
    if (this.callbackUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.callbackUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrationTime:");
    if (this.registrationTime == null) {
      sb.append("null");
    } else {
      sb.append(this.registrationTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerIpAddressList:");
    if (this.partnerIpAddressList == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerIpAddressList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      sb.append(this.publicKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aliasKey:");
    if (this.aliasKey == null) {
      sb.append("null");
    } else {
      sb.append(this.aliasKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyStore:");
    if (this.keyStore == null) {
      sb.append("null");
    } else {
      sb.append(this.keyStore);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LotteryPartnerStandardSchemeFactory implements SchemeFactory {
    public LotteryPartnerStandardScheme getScheme() {
      return new LotteryPartnerStandardScheme();
    }
  }

  private static class LotteryPartnerStandardScheme extends StandardScheme<LotteryPartner> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LotteryPartner struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerName = iprot.readString();
              struct.setPartnerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.partnerType = iprot.readI16();
              struct.setPartnerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECRET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secretKey = iprot.readString();
              struct.setSecretKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.state = iprot.readI16();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minBalance = iprot.readI64();
              struct.setMinBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CALLBACK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callbackUrl = iprot.readString();
              struct.setCallbackUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGISTRATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registrationTime = iprot.readString();
              struct.setRegistrationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PARTNER_IP_ADDRESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.partnerIpAddressList = new ArrayList<PartnerIpAddress>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  PartnerIpAddress _elem2;
                  _elem2 = new PartnerIpAddress();
                  _elem2.read(iprot);
                  struct.partnerIpAddressList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPartnerIpAddressListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicKey = iprot.readString();
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ALIAS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aliasKey = iprot.readString();
              struct.setAliasKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // KEY_STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyStore = iprot.readString();
              struct.setKeyStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LotteryPartner struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerName != null) {
        oprot.writeFieldBegin(PARTNER_NAME_FIELD_DESC);
        oprot.writeString(struct.partnerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_TYPE_FIELD_DESC);
      oprot.writeI16(struct.partnerType);
      oprot.writeFieldEnd();
      if (struct.secretKey != null) {
        oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
        oprot.writeString(struct.secretKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI16(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_BALANCE_FIELD_DESC);
      oprot.writeI64(struct.minBalance);
      oprot.writeFieldEnd();
      if (struct.callbackUrl != null) {
        oprot.writeFieldBegin(CALLBACK_URL_FIELD_DESC);
        oprot.writeString(struct.callbackUrl);
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.registrationTime != null) {
        oprot.writeFieldBegin(REGISTRATION_TIME_FIELD_DESC);
        oprot.writeString(struct.registrationTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.partnerIpAddressList != null) {
        oprot.writeFieldBegin(PARTNER_IP_ADDRESS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partnerIpAddressList.size()));
          for (PartnerIpAddress _iter3 : struct.partnerIpAddressList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        oprot.writeString(struct.publicKey);
        oprot.writeFieldEnd();
      }
      if (struct.aliasKey != null) {
        oprot.writeFieldBegin(ALIAS_KEY_FIELD_DESC);
        oprot.writeString(struct.aliasKey);
        oprot.writeFieldEnd();
      }
      if (struct.keyStore != null) {
        oprot.writeFieldBegin(KEY_STORE_FIELD_DESC);
        oprot.writeString(struct.keyStore);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LotteryPartnerTupleSchemeFactory implements SchemeFactory {
    public LotteryPartnerTupleScheme getScheme() {
      return new LotteryPartnerTupleScheme();
    }
  }

  private static class LotteryPartnerTupleScheme extends TupleScheme<LotteryPartner> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LotteryPartner struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerId()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerName()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerType()) {
        optionals.set(2);
      }
      if (struct.isSetSecretKey()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetMinBalance()) {
        optionals.set(5);
      }
      if (struct.isSetCallbackUrl()) {
        optionals.set(6);
      }
      if (struct.isSetExt()) {
        optionals.set(7);
      }
      if (struct.isSetUserId()) {
        optionals.set(8);
      }
      if (struct.isSetRegistrationTime()) {
        optionals.set(9);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetPartnerIpAddressList()) {
        optionals.set(11);
      }
      if (struct.isSetPublicKey()) {
        optionals.set(12);
      }
      if (struct.isSetAliasKey()) {
        optionals.set(13);
      }
      if (struct.isSetKeyStore()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetPartnerName()) {
        oprot.writeString(struct.partnerName);
      }
      if (struct.isSetPartnerType()) {
        oprot.writeI16(struct.partnerType);
      }
      if (struct.isSetSecretKey()) {
        oprot.writeString(struct.secretKey);
      }
      if (struct.isSetState()) {
        oprot.writeI16(struct.state);
      }
      if (struct.isSetMinBalance()) {
        oprot.writeI64(struct.minBalance);
      }
      if (struct.isSetCallbackUrl()) {
        oprot.writeString(struct.callbackUrl);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRegistrationTime()) {
        oprot.writeString(struct.registrationTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetPartnerIpAddressList()) {
        {
          oprot.writeI32(struct.partnerIpAddressList.size());
          for (PartnerIpAddress _iter4 : struct.partnerIpAddressList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetPublicKey()) {
        oprot.writeString(struct.publicKey);
      }
      if (struct.isSetAliasKey()) {
        oprot.writeString(struct.aliasKey);
      }
      if (struct.isSetKeyStore()) {
        oprot.writeString(struct.keyStore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LotteryPartner struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerName = iprot.readString();
        struct.setPartnerNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerType = iprot.readI16();
        struct.setPartnerTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.secretKey = iprot.readString();
        struct.setSecretKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readI16();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.minBalance = iprot.readI64();
        struct.setMinBalanceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.callbackUrl = iprot.readString();
        struct.setCallbackUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.registrationTime = iprot.readString();
        struct.setRegistrationTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partnerIpAddressList = new ArrayList<PartnerIpAddress>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            PartnerIpAddress _elem7;
            _elem7 = new PartnerIpAddress();
            _elem7.read(iprot);
            struct.partnerIpAddressList.add(_elem7);
          }
        }
        struct.setPartnerIpAddressListIsSet(true);
      }
      if (incoming.get(12)) {
        struct.publicKey = iprot.readString();
        struct.setPublicKeyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.aliasKey = iprot.readString();
        struct.setAliasKeyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.keyStore = iprot.readString();
        struct.setKeyStoreIsSet(true);
      }
    }
  }

}

