/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LotteryDrawResult implements org.apache.thrift.TBase<LotteryDrawResult, LotteryDrawResult._Fields>, java.io.Serializable, Cloneable, Comparable<LotteryDrawResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LotteryDrawResult");

  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("drawResult", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOTTERY_DRAW_LEVEL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryDrawLevelList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PRIZE_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("prizePool", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SALES_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("salesVolume", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssue", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LotteryDrawResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LotteryDrawResultTupleSchemeFactory());
  }

  public String lotteryId; // required
  public String issueNo; // required
  public String drawResult; // required
  public int state; // required
  public int priority; // required
  public String ext; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public List<LotteryDrawLevel> lotteryDrawLevelList; // required
  public long prizePool; // required
  public long salesVolume; // required
  public LotteryIssue lotteryIssue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOTTERY_ID((short)1, "lotteryId"),
    ISSUE_NO((short)2, "issueNo"),
    DRAW_RESULT((short)3, "drawResult"),
    STATE((short)4, "state"),
    PRIORITY((short)5, "priority"),
    EXT((short)6, "ext"),
    CREATE_TIME((short)7, "createTime"),
    LAST_UPDATE_TIME((short)8, "lastUpdateTime"),
    LOTTERY_DRAW_LEVEL_LIST((short)9, "lotteryDrawLevelList"),
    PRIZE_POOL((short)10, "prizePool"),
    SALES_VOLUME((short)11, "salesVolume"),
    LOTTERY_ISSUE((short)12, "lotteryIssue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOTTERY_ID
          return LOTTERY_ID;
        case 2: // ISSUE_NO
          return ISSUE_NO;
        case 3: // DRAW_RESULT
          return DRAW_RESULT;
        case 4: // STATE
          return STATE;
        case 5: // PRIORITY
          return PRIORITY;
        case 6: // EXT
          return EXT;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 9: // LOTTERY_DRAW_LEVEL_LIST
          return LOTTERY_DRAW_LEVEL_LIST;
        case 10: // PRIZE_POOL
          return PRIZE_POOL;
        case 11: // SALES_VOLUME
          return SALES_VOLUME;
        case 12: // LOTTERY_ISSUE
          return LOTTERY_ISSUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATE_ISSET_ID = 0;
  private static final int __PRIORITY_ISSET_ID = 1;
  private static final int __PRIZEPOOL_ISSET_ID = 2;
  private static final int __SALESVOLUME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("drawResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_DRAW_LEVEL_LIST, new org.apache.thrift.meta_data.FieldMetaData("lotteryDrawLevelList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryDrawLevel.class))));
    tmpMap.put(_Fields.PRIZE_POOL, new org.apache.thrift.meta_data.FieldMetaData("prizePool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SALES_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("salesVolume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOTTERY_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssue.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LotteryDrawResult.class, metaDataMap);
  }

  public LotteryDrawResult() {
  }

  public LotteryDrawResult(
    String lotteryId,
    String issueNo,
    String drawResult,
    int state,
    int priority,
    String ext,
    String createTime,
    String lastUpdateTime,
    List<LotteryDrawLevel> lotteryDrawLevelList,
    long prizePool,
    long salesVolume,
    LotteryIssue lotteryIssue)
  {
    this();
    this.lotteryId = lotteryId;
    this.issueNo = issueNo;
    this.drawResult = drawResult;
    this.state = state;
    setStateIsSet(true);
    this.priority = priority;
    setPriorityIsSet(true);
    this.ext = ext;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.lotteryDrawLevelList = lotteryDrawLevelList;
    this.prizePool = prizePool;
    setPrizePoolIsSet(true);
    this.salesVolume = salesVolume;
    setSalesVolumeIsSet(true);
    this.lotteryIssue = lotteryIssue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LotteryDrawResult(LotteryDrawResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    if (other.isSetDrawResult()) {
      this.drawResult = other.drawResult;
    }
    this.state = other.state;
    this.priority = other.priority;
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetLotteryDrawLevelList()) {
      List<LotteryDrawLevel> __this__lotteryDrawLevelList = new ArrayList<LotteryDrawLevel>(other.lotteryDrawLevelList.size());
      for (LotteryDrawLevel other_element : other.lotteryDrawLevelList) {
        __this__lotteryDrawLevelList.add(new LotteryDrawLevel(other_element));
      }
      this.lotteryDrawLevelList = __this__lotteryDrawLevelList;
    }
    this.prizePool = other.prizePool;
    this.salesVolume = other.salesVolume;
    if (other.isSetLotteryIssue()) {
      this.lotteryIssue = new LotteryIssue(other.lotteryIssue);
    }
  }

  public LotteryDrawResult deepCopy() {
    return new LotteryDrawResult(this);
  }

  @Override
  public void clear() {
    this.lotteryId = null;
    this.issueNo = null;
    this.drawResult = null;
    setStateIsSet(false);
    this.state = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    this.ext = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    this.lotteryDrawLevelList = null;
    setPrizePoolIsSet(false);
    this.prizePool = 0;
    setSalesVolumeIsSet(false);
    this.salesVolume = 0;
    this.lotteryIssue = null;
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public LotteryDrawResult setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public LotteryDrawResult setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public String getDrawResult() {
    return this.drawResult;
  }

  public LotteryDrawResult setDrawResult(String drawResult) {
    this.drawResult = drawResult;
    return this;
  }

  public void unsetDrawResult() {
    this.drawResult = null;
  }

  /** Returns true if field drawResult is set (has been assigned a value) and false otherwise */
  public boolean isSetDrawResult() {
    return this.drawResult != null;
  }

  public void setDrawResultIsSet(boolean value) {
    if (!value) {
      this.drawResult = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public LotteryDrawResult setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public LotteryDrawResult setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public String getExt() {
    return this.ext;
  }

  public LotteryDrawResult setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public LotteryDrawResult setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public LotteryDrawResult setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getLotteryDrawLevelListSize() {
    return (this.lotteryDrawLevelList == null) ? 0 : this.lotteryDrawLevelList.size();
  }

  public java.util.Iterator<LotteryDrawLevel> getLotteryDrawLevelListIterator() {
    return (this.lotteryDrawLevelList == null) ? null : this.lotteryDrawLevelList.iterator();
  }

  public void addToLotteryDrawLevelList(LotteryDrawLevel elem) {
    if (this.lotteryDrawLevelList == null) {
      this.lotteryDrawLevelList = new ArrayList<LotteryDrawLevel>();
    }
    this.lotteryDrawLevelList.add(elem);
  }

  public List<LotteryDrawLevel> getLotteryDrawLevelList() {
    return this.lotteryDrawLevelList;
  }

  public LotteryDrawResult setLotteryDrawLevelList(List<LotteryDrawLevel> lotteryDrawLevelList) {
    this.lotteryDrawLevelList = lotteryDrawLevelList;
    return this;
  }

  public void unsetLotteryDrawLevelList() {
    this.lotteryDrawLevelList = null;
  }

  /** Returns true if field lotteryDrawLevelList is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryDrawLevelList() {
    return this.lotteryDrawLevelList != null;
  }

  public void setLotteryDrawLevelListIsSet(boolean value) {
    if (!value) {
      this.lotteryDrawLevelList = null;
    }
  }

  public long getPrizePool() {
    return this.prizePool;
  }

  public LotteryDrawResult setPrizePool(long prizePool) {
    this.prizePool = prizePool;
    setPrizePoolIsSet(true);
    return this;
  }

  public void unsetPrizePool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIZEPOOL_ISSET_ID);
  }

  /** Returns true if field prizePool is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizePool() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIZEPOOL_ISSET_ID);
  }

  public void setPrizePoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIZEPOOL_ISSET_ID, value);
  }

  public long getSalesVolume() {
    return this.salesVolume;
  }

  public LotteryDrawResult setSalesVolume(long salesVolume) {
    this.salesVolume = salesVolume;
    setSalesVolumeIsSet(true);
    return this;
  }

  public void unsetSalesVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALESVOLUME_ISSET_ID);
  }

  /** Returns true if field salesVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetSalesVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __SALESVOLUME_ISSET_ID);
  }

  public void setSalesVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALESVOLUME_ISSET_ID, value);
  }

  public LotteryIssue getLotteryIssue() {
    return this.lotteryIssue;
  }

  public LotteryDrawResult setLotteryIssue(LotteryIssue lotteryIssue) {
    this.lotteryIssue = lotteryIssue;
    return this;
  }

  public void unsetLotteryIssue() {
    this.lotteryIssue = null;
  }

  /** Returns true if field lotteryIssue is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryIssue() {
    return this.lotteryIssue != null;
  }

  public void setLotteryIssueIsSet(boolean value) {
    if (!value) {
      this.lotteryIssue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case DRAW_RESULT:
      if (value == null) {
        unsetDrawResult();
      } else {
        setDrawResult((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case LOTTERY_DRAW_LEVEL_LIST:
      if (value == null) {
        unsetLotteryDrawLevelList();
      } else {
        setLotteryDrawLevelList((List<LotteryDrawLevel>)value);
      }
      break;

    case PRIZE_POOL:
      if (value == null) {
        unsetPrizePool();
      } else {
        setPrizePool((Long)value);
      }
      break;

    case SALES_VOLUME:
      if (value == null) {
        unsetSalesVolume();
      } else {
        setSalesVolume((Long)value);
      }
      break;

    case LOTTERY_ISSUE:
      if (value == null) {
        unsetLotteryIssue();
      } else {
        setLotteryIssue((LotteryIssue)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOTTERY_ID:
      return getLotteryId();

    case ISSUE_NO:
      return getIssueNo();

    case DRAW_RESULT:
      return getDrawResult();

    case STATE:
      return Integer.valueOf(getState());

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case EXT:
      return getExt();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case LOTTERY_DRAW_LEVEL_LIST:
      return getLotteryDrawLevelList();

    case PRIZE_POOL:
      return Long.valueOf(getPrizePool());

    case SALES_VOLUME:
      return Long.valueOf(getSalesVolume());

    case LOTTERY_ISSUE:
      return getLotteryIssue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOTTERY_ID:
      return isSetLotteryId();
    case ISSUE_NO:
      return isSetIssueNo();
    case DRAW_RESULT:
      return isSetDrawResult();
    case STATE:
      return isSetState();
    case PRIORITY:
      return isSetPriority();
    case EXT:
      return isSetExt();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case LOTTERY_DRAW_LEVEL_LIST:
      return isSetLotteryDrawLevelList();
    case PRIZE_POOL:
      return isSetPrizePool();
    case SALES_VOLUME:
      return isSetSalesVolume();
    case LOTTERY_ISSUE:
      return isSetLotteryIssue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LotteryDrawResult)
      return this.equals((LotteryDrawResult)that);
    return false;
  }

  public boolean equals(LotteryDrawResult that) {
    if (that == null)
      return false;

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_drawResult = true && this.isSetDrawResult();
    boolean that_present_drawResult = true && that.isSetDrawResult();
    if (this_present_drawResult || that_present_drawResult) {
      if (!(this_present_drawResult && that_present_drawResult))
        return false;
      if (!this.drawResult.equals(that.drawResult))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_lotteryDrawLevelList = true && this.isSetLotteryDrawLevelList();
    boolean that_present_lotteryDrawLevelList = true && that.isSetLotteryDrawLevelList();
    if (this_present_lotteryDrawLevelList || that_present_lotteryDrawLevelList) {
      if (!(this_present_lotteryDrawLevelList && that_present_lotteryDrawLevelList))
        return false;
      if (!this.lotteryDrawLevelList.equals(that.lotteryDrawLevelList))
        return false;
    }

    boolean this_present_prizePool = true;
    boolean that_present_prizePool = true;
    if (this_present_prizePool || that_present_prizePool) {
      if (!(this_present_prizePool && that_present_prizePool))
        return false;
      if (this.prizePool != that.prizePool)
        return false;
    }

    boolean this_present_salesVolume = true;
    boolean that_present_salesVolume = true;
    if (this_present_salesVolume || that_present_salesVolume) {
      if (!(this_present_salesVolume && that_present_salesVolume))
        return false;
      if (this.salesVolume != that.salesVolume)
        return false;
    }

    boolean this_present_lotteryIssue = true && this.isSetLotteryIssue();
    boolean that_present_lotteryIssue = true && that.isSetLotteryIssue();
    if (this_present_lotteryIssue || that_present_lotteryIssue) {
      if (!(this_present_lotteryIssue && that_present_lotteryIssue))
        return false;
      if (!this.lotteryIssue.equals(that.lotteryIssue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LotteryDrawResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrawResult()).compareTo(other.isSetDrawResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrawResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drawResult, other.drawResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryDrawLevelList()).compareTo(other.isSetLotteryDrawLevelList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryDrawLevelList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryDrawLevelList, other.lotteryDrawLevelList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizePool()).compareTo(other.isSetPrizePool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizePool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizePool, other.prizePool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalesVolume()).compareTo(other.isSetSalesVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalesVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salesVolume, other.salesVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryIssue()).compareTo(other.isSetLotteryIssue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryIssue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssue, other.lotteryIssue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LotteryDrawResult(");
    boolean first = true;

    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drawResult:");
    if (this.drawResult == null) {
      sb.append("null");
    } else {
      sb.append(this.drawResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryDrawLevelList:");
    if (this.lotteryDrawLevelList == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryDrawLevelList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizePool:");
    sb.append(this.prizePool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salesVolume:");
    sb.append(this.salesVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryIssue:");
    if (this.lotteryIssue == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryIssue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (lotteryIssue != null) {
      lotteryIssue.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LotteryDrawResultStandardSchemeFactory implements SchemeFactory {
    public LotteryDrawResultStandardScheme getScheme() {
      return new LotteryDrawResultStandardScheme();
    }
  }

  private static class LotteryDrawResultStandardScheme extends StandardScheme<LotteryDrawResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LotteryDrawResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DRAW_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drawResult = iprot.readString();
              struct.setDrawResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOTTERY_DRAW_LEVEL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.lotteryDrawLevelList = new ArrayList<LotteryDrawLevel>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  LotteryDrawLevel _elem2;
                  _elem2 = new LotteryDrawLevel();
                  _elem2.read(iprot);
                  struct.lotteryDrawLevelList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setLotteryDrawLevelListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRIZE_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prizePool = iprot.readI64();
              struct.setPrizePoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SALES_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.salesVolume = iprot.readI64();
              struct.setSalesVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOTTERY_ISSUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lotteryIssue = new LotteryIssue();
              struct.lotteryIssue.read(iprot);
              struct.setLotteryIssueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LotteryDrawResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      if (struct.drawResult != null) {
        oprot.writeFieldBegin(DRAW_RESULT_FIELD_DESC);
        oprot.writeString(struct.drawResult);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        oprot.writeString(struct.ext);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryDrawLevelList != null) {
        oprot.writeFieldBegin(LOTTERY_DRAW_LEVEL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lotteryDrawLevelList.size()));
          for (LotteryDrawLevel _iter3 : struct.lotteryDrawLevelList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIZE_POOL_FIELD_DESC);
      oprot.writeI64(struct.prizePool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALES_VOLUME_FIELD_DESC);
      oprot.writeI64(struct.salesVolume);
      oprot.writeFieldEnd();
      if (struct.lotteryIssue != null) {
        oprot.writeFieldBegin(LOTTERY_ISSUE_FIELD_DESC);
        struct.lotteryIssue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LotteryDrawResultTupleSchemeFactory implements SchemeFactory {
    public LotteryDrawResultTupleScheme getScheme() {
      return new LotteryDrawResultTupleScheme();
    }
  }

  private static class LotteryDrawResultTupleScheme extends TupleScheme<LotteryDrawResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LotteryDrawResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLotteryId()) {
        optionals.set(0);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(1);
      }
      if (struct.isSetDrawResult()) {
        optionals.set(2);
      }
      if (struct.isSetState()) {
        optionals.set(3);
      }
      if (struct.isSetPriority()) {
        optionals.set(4);
      }
      if (struct.isSetExt()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(7);
      }
      if (struct.isSetLotteryDrawLevelList()) {
        optionals.set(8);
      }
      if (struct.isSetPrizePool()) {
        optionals.set(9);
      }
      if (struct.isSetSalesVolume()) {
        optionals.set(10);
      }
      if (struct.isSetLotteryIssue()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetDrawResult()) {
        oprot.writeString(struct.drawResult);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetLotteryDrawLevelList()) {
        {
          oprot.writeI32(struct.lotteryDrawLevelList.size());
          for (LotteryDrawLevel _iter4 : struct.lotteryDrawLevelList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetPrizePool()) {
        oprot.writeI64(struct.prizePool);
      }
      if (struct.isSetSalesVolume()) {
        oprot.writeI64(struct.salesVolume);
      }
      if (struct.isSetLotteryIssue()) {
        struct.lotteryIssue.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LotteryDrawResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.drawResult = iprot.readString();
        struct.setDrawResultIsSet(true);
      }
      if (incoming.get(3)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lotteryDrawLevelList = new ArrayList<LotteryDrawLevel>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            LotteryDrawLevel _elem7;
            _elem7 = new LotteryDrawLevel();
            _elem7.read(iprot);
            struct.lotteryDrawLevelList.add(_elem7);
          }
        }
        struct.setLotteryDrawLevelListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.prizePool = iprot.readI64();
        struct.setPrizePoolIsSet(true);
      }
      if (incoming.get(10)) {
        struct.salesVolume = iprot.readI64();
        struct.setSalesVolumeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lotteryIssue = new LotteryIssue();
        struct.lotteryIssue.read(iprot);
        struct.setLotteryIssueIsSet(true);
      }
    }
  }

}

