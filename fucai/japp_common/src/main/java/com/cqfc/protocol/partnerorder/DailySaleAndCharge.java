/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DailySaleAndCharge implements org.apache.thrift.TBase<DailySaleAndCharge, DailySaleAndCharge._Fields>, java.io.Serializable, Cloneable, Comparable<DailySaleAndCharge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DailySaleAndCharge");

  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField AWARD_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("awardPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CHARGE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeTotalMoney", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ENCASH_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("encashTotalMoney", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField COUNT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("countTime", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DailySaleAndChargeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DailySaleAndChargeTupleSchemeFactory());
  }

  public String partnerId; // required
  public String lotteryId; // required
  public long totalMoney; // required
  public long awardPrizeMoney; // required
  public long chargeTotalMoney; // required
  public long encashTotalMoney; // required
  public String countTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER_ID((short)1, "partnerId"),
    LOTTERY_ID((short)2, "lotteryId"),
    TOTAL_MONEY((short)3, "totalMoney"),
    AWARD_PRIZE_MONEY((short)4, "awardPrizeMoney"),
    CHARGE_TOTAL_MONEY((short)5, "chargeTotalMoney"),
    ENCASH_TOTAL_MONEY((short)6, "encashTotalMoney"),
    COUNT_TIME((short)7, "countTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_ID
          return PARTNER_ID;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 4: // AWARD_PRIZE_MONEY
          return AWARD_PRIZE_MONEY;
        case 5: // CHARGE_TOTAL_MONEY
          return CHARGE_TOTAL_MONEY;
        case 6: // ENCASH_TOTAL_MONEY
          return ENCASH_TOTAL_MONEY;
        case 7: // COUNT_TIME
          return COUNT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALMONEY_ISSET_ID = 0;
  private static final int __AWARDPRIZEMONEY_ISSET_ID = 1;
  private static final int __CHARGETOTALMONEY_ISSET_ID = 2;
  private static final int __ENCASHTOTALMONEY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AWARD_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("awardPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("chargeTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENCASH_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("encashTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT_TIME, new org.apache.thrift.meta_data.FieldMetaData("countTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DailySaleAndCharge.class, metaDataMap);
  }

  public DailySaleAndCharge() {
  }

  public DailySaleAndCharge(
    String partnerId,
    String lotteryId,
    long totalMoney,
    long awardPrizeMoney,
    long chargeTotalMoney,
    long encashTotalMoney,
    String countTime)
  {
    this();
    this.partnerId = partnerId;
    this.lotteryId = lotteryId;
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.awardPrizeMoney = awardPrizeMoney;
    setAwardPrizeMoneyIsSet(true);
    this.chargeTotalMoney = chargeTotalMoney;
    setChargeTotalMoneyIsSet(true);
    this.encashTotalMoney = encashTotalMoney;
    setEncashTotalMoneyIsSet(true);
    this.countTime = countTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DailySaleAndCharge(DailySaleAndCharge other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    this.totalMoney = other.totalMoney;
    this.awardPrizeMoney = other.awardPrizeMoney;
    this.chargeTotalMoney = other.chargeTotalMoney;
    this.encashTotalMoney = other.encashTotalMoney;
    if (other.isSetCountTime()) {
      this.countTime = other.countTime;
    }
  }

  public DailySaleAndCharge deepCopy() {
    return new DailySaleAndCharge(this);
  }

  @Override
  public void clear() {
    this.partnerId = null;
    this.lotteryId = null;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0;
    setAwardPrizeMoneyIsSet(false);
    this.awardPrizeMoney = 0;
    setChargeTotalMoneyIsSet(false);
    this.chargeTotalMoney = 0;
    setEncashTotalMoneyIsSet(false);
    this.encashTotalMoney = 0;
    this.countTime = null;
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public DailySaleAndCharge setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public DailySaleAndCharge setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public long getTotalMoney() {
    return this.totalMoney;
  }

  public DailySaleAndCharge setTotalMoney(long totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public long getAwardPrizeMoney() {
    return this.awardPrizeMoney;
  }

  public DailySaleAndCharge setAwardPrizeMoney(long awardPrizeMoney) {
    this.awardPrizeMoney = awardPrizeMoney;
    setAwardPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetAwardPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field awardPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID);
  }

  public void setAwardPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID, value);
  }

  public long getChargeTotalMoney() {
    return this.chargeTotalMoney;
  }

  public DailySaleAndCharge setChargeTotalMoney(long chargeTotalMoney) {
    this.chargeTotalMoney = chargeTotalMoney;
    setChargeTotalMoneyIsSet(true);
    return this;
  }

  public void unsetChargeTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field chargeTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGETOTALMONEY_ISSET_ID);
  }

  public void setChargeTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGETOTALMONEY_ISSET_ID, value);
  }

  public long getEncashTotalMoney() {
    return this.encashTotalMoney;
  }

  public DailySaleAndCharge setEncashTotalMoney(long encashTotalMoney) {
    this.encashTotalMoney = encashTotalMoney;
    setEncashTotalMoneyIsSet(true);
    return this;
  }

  public void unsetEncashTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENCASHTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field encashTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetEncashTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ENCASHTOTALMONEY_ISSET_ID);
  }

  public void setEncashTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENCASHTOTALMONEY_ISSET_ID, value);
  }

  public String getCountTime() {
    return this.countTime;
  }

  public DailySaleAndCharge setCountTime(String countTime) {
    this.countTime = countTime;
    return this;
  }

  public void unsetCountTime() {
    this.countTime = null;
  }

  /** Returns true if field countTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCountTime() {
    return this.countTime != null;
  }

  public void setCountTimeIsSet(boolean value) {
    if (!value) {
      this.countTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Long)value);
      }
      break;

    case AWARD_PRIZE_MONEY:
      if (value == null) {
        unsetAwardPrizeMoney();
      } else {
        setAwardPrizeMoney((Long)value);
      }
      break;

    case CHARGE_TOTAL_MONEY:
      if (value == null) {
        unsetChargeTotalMoney();
      } else {
        setChargeTotalMoney((Long)value);
      }
      break;

    case ENCASH_TOTAL_MONEY:
      if (value == null) {
        unsetEncashTotalMoney();
      } else {
        setEncashTotalMoney((Long)value);
      }
      break;

    case COUNT_TIME:
      if (value == null) {
        unsetCountTime();
      } else {
        setCountTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_ID:
      return getPartnerId();

    case LOTTERY_ID:
      return getLotteryId();

    case TOTAL_MONEY:
      return Long.valueOf(getTotalMoney());

    case AWARD_PRIZE_MONEY:
      return Long.valueOf(getAwardPrizeMoney());

    case CHARGE_TOTAL_MONEY:
      return Long.valueOf(getChargeTotalMoney());

    case ENCASH_TOTAL_MONEY:
      return Long.valueOf(getEncashTotalMoney());

    case COUNT_TIME:
      return getCountTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_ID:
      return isSetPartnerId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case AWARD_PRIZE_MONEY:
      return isSetAwardPrizeMoney();
    case CHARGE_TOTAL_MONEY:
      return isSetChargeTotalMoney();
    case ENCASH_TOTAL_MONEY:
      return isSetEncashTotalMoney();
    case COUNT_TIME:
      return isSetCountTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DailySaleAndCharge)
      return this.equals((DailySaleAndCharge)that);
    return false;
  }

  public boolean equals(DailySaleAndCharge that) {
    if (that == null)
      return false;

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_awardPrizeMoney = true;
    boolean that_present_awardPrizeMoney = true;
    if (this_present_awardPrizeMoney || that_present_awardPrizeMoney) {
      if (!(this_present_awardPrizeMoney && that_present_awardPrizeMoney))
        return false;
      if (this.awardPrizeMoney != that.awardPrizeMoney)
        return false;
    }

    boolean this_present_chargeTotalMoney = true;
    boolean that_present_chargeTotalMoney = true;
    if (this_present_chargeTotalMoney || that_present_chargeTotalMoney) {
      if (!(this_present_chargeTotalMoney && that_present_chargeTotalMoney))
        return false;
      if (this.chargeTotalMoney != that.chargeTotalMoney)
        return false;
    }

    boolean this_present_encashTotalMoney = true;
    boolean that_present_encashTotalMoney = true;
    if (this_present_encashTotalMoney || that_present_encashTotalMoney) {
      if (!(this_present_encashTotalMoney && that_present_encashTotalMoney))
        return false;
      if (this.encashTotalMoney != that.encashTotalMoney)
        return false;
    }

    boolean this_present_countTime = true && this.isSetCountTime();
    boolean that_present_countTime = true && that.isSetCountTime();
    if (this_present_countTime || that_present_countTime) {
      if (!(this_present_countTime && that_present_countTime))
        return false;
      if (!this.countTime.equals(that.countTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DailySaleAndCharge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardPrizeMoney()).compareTo(other.isSetAwardPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardPrizeMoney, other.awardPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeTotalMoney()).compareTo(other.isSetChargeTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeTotalMoney, other.chargeTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncashTotalMoney()).compareTo(other.isSetEncashTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncashTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encashTotalMoney, other.encashTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountTime()).compareTo(other.isSetCountTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countTime, other.countTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DailySaleAndCharge(");
    boolean first = true;

    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("awardPrizeMoney:");
    sb.append(this.awardPrizeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeTotalMoney:");
    sb.append(this.chargeTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encashTotalMoney:");
    sb.append(this.encashTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countTime:");
    if (this.countTime == null) {
      sb.append("null");
    } else {
      sb.append(this.countTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DailySaleAndChargeStandardSchemeFactory implements SchemeFactory {
    public DailySaleAndChargeStandardScheme getScheme() {
      return new DailySaleAndChargeStandardScheme();
    }
  }

  private static class DailySaleAndChargeStandardScheme extends StandardScheme<DailySaleAndCharge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DailySaleAndCharge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMoney = iprot.readI64();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AWARD_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.awardPrizeMoney = iprot.readI64();
              struct.setAwardPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHARGE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeTotalMoney = iprot.readI64();
              struct.setChargeTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENCASH_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.encashTotalMoney = iprot.readI64();
              struct.setEncashTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COUNT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countTime = iprot.readString();
              struct.setCountTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DailySaleAndCharge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AWARD_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.awardPrizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.chargeTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCASH_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.encashTotalMoney);
      oprot.writeFieldEnd();
      if (struct.countTime != null) {
        oprot.writeFieldBegin(COUNT_TIME_FIELD_DESC);
        oprot.writeString(struct.countTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DailySaleAndChargeTupleSchemeFactory implements SchemeFactory {
    public DailySaleAndChargeTupleScheme getScheme() {
      return new DailySaleAndChargeTupleScheme();
    }
  }

  private static class DailySaleAndChargeTupleScheme extends TupleScheme<DailySaleAndCharge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DailySaleAndCharge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerId()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(2);
      }
      if (struct.isSetAwardPrizeMoney()) {
        optionals.set(3);
      }
      if (struct.isSetChargeTotalMoney()) {
        optionals.set(4);
      }
      if (struct.isSetEncashTotalMoney()) {
        optionals.set(5);
      }
      if (struct.isSetCountTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeI64(struct.totalMoney);
      }
      if (struct.isSetAwardPrizeMoney()) {
        oprot.writeI64(struct.awardPrizeMoney);
      }
      if (struct.isSetChargeTotalMoney()) {
        oprot.writeI64(struct.chargeTotalMoney);
      }
      if (struct.isSetEncashTotalMoney()) {
        oprot.writeI64(struct.encashTotalMoney);
      }
      if (struct.isSetCountTime()) {
        oprot.writeString(struct.countTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DailySaleAndCharge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalMoney = iprot.readI64();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.awardPrizeMoney = iprot.readI64();
        struct.setAwardPrizeMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.chargeTotalMoney = iprot.readI64();
        struct.setChargeTotalMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.encashTotalMoney = iprot.readI64();
        struct.setEncashTotalMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.countTime = iprot.readString();
        struct.setCountTimeIsSet(true);
      }
    }
  }

}

