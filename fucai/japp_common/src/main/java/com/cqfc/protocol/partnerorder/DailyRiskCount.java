/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.partnerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DailyRiskCount implements org.apache.thrift.TBase<DailyRiskCount, DailyRiskCount._Fields>, java.io.Serializable, Cloneable, Comparable<DailyRiskCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DailyRiskCount");

  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SALE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("saleTotalMoney", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RECHARGE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rechargeTotalMoney", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField WITHDRAW_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawTotalMoney", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField AWARD_PRIZE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("awardPrizeMoney", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DailyRiskCountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DailyRiskCountTupleSchemeFactory());
  }

  public String day; // required
  public long saleTotalMoney; // required
  public long rechargeTotalMoney; // required
  public long withdrawTotalMoney; // required
  public long awardPrizeMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAY((short)1, "day"),
    SALE_TOTAL_MONEY((short)2, "saleTotalMoney"),
    RECHARGE_TOTAL_MONEY((short)3, "rechargeTotalMoney"),
    WITHDRAW_TOTAL_MONEY((short)4, "withdrawTotalMoney"),
    AWARD_PRIZE_MONEY((short)5, "awardPrizeMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAY
          return DAY;
        case 2: // SALE_TOTAL_MONEY
          return SALE_TOTAL_MONEY;
        case 3: // RECHARGE_TOTAL_MONEY
          return RECHARGE_TOTAL_MONEY;
        case 4: // WITHDRAW_TOTAL_MONEY
          return WITHDRAW_TOTAL_MONEY;
        case 5: // AWARD_PRIZE_MONEY
          return AWARD_PRIZE_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SALETOTALMONEY_ISSET_ID = 0;
  private static final int __RECHARGETOTALMONEY_ISSET_ID = 1;
  private static final int __WITHDRAWTOTALMONEY_ISSET_ID = 2;
  private static final int __AWARDPRIZEMONEY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("saleTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECHARGE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rechargeTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WITHDRAW_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("withdrawTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AWARD_PRIZE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("awardPrizeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DailyRiskCount.class, metaDataMap);
  }

  public DailyRiskCount() {
  }

  public DailyRiskCount(
    String day,
    long saleTotalMoney,
    long rechargeTotalMoney,
    long withdrawTotalMoney,
    long awardPrizeMoney)
  {
    this();
    this.day = day;
    this.saleTotalMoney = saleTotalMoney;
    setSaleTotalMoneyIsSet(true);
    this.rechargeTotalMoney = rechargeTotalMoney;
    setRechargeTotalMoneyIsSet(true);
    this.withdrawTotalMoney = withdrawTotalMoney;
    setWithdrawTotalMoneyIsSet(true);
    this.awardPrizeMoney = awardPrizeMoney;
    setAwardPrizeMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DailyRiskCount(DailyRiskCount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDay()) {
      this.day = other.day;
    }
    this.saleTotalMoney = other.saleTotalMoney;
    this.rechargeTotalMoney = other.rechargeTotalMoney;
    this.withdrawTotalMoney = other.withdrawTotalMoney;
    this.awardPrizeMoney = other.awardPrizeMoney;
  }

  public DailyRiskCount deepCopy() {
    return new DailyRiskCount(this);
  }

  @Override
  public void clear() {
    this.day = null;
    setSaleTotalMoneyIsSet(false);
    this.saleTotalMoney = 0;
    setRechargeTotalMoneyIsSet(false);
    this.rechargeTotalMoney = 0;
    setWithdrawTotalMoneyIsSet(false);
    this.withdrawTotalMoney = 0;
    setAwardPrizeMoneyIsSet(false);
    this.awardPrizeMoney = 0;
  }

  public String getDay() {
    return this.day;
  }

  public DailyRiskCount setDay(String day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public long getSaleTotalMoney() {
    return this.saleTotalMoney;
  }

  public DailyRiskCount setSaleTotalMoney(long saleTotalMoney) {
    this.saleTotalMoney = saleTotalMoney;
    setSaleTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSaleTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field saleTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SALETOTALMONEY_ISSET_ID);
  }

  public void setSaleTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALETOTALMONEY_ISSET_ID, value);
  }

  public long getRechargeTotalMoney() {
    return this.rechargeTotalMoney;
  }

  public DailyRiskCount setRechargeTotalMoney(long rechargeTotalMoney) {
    this.rechargeTotalMoney = rechargeTotalMoney;
    setRechargeTotalMoneyIsSet(true);
    return this;
  }

  public void unsetRechargeTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECHARGETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field rechargeTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRechargeTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECHARGETOTALMONEY_ISSET_ID);
  }

  public void setRechargeTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECHARGETOTALMONEY_ISSET_ID, value);
  }

  public long getWithdrawTotalMoney() {
    return this.withdrawTotalMoney;
  }

  public DailyRiskCount setWithdrawTotalMoney(long withdrawTotalMoney) {
    this.withdrawTotalMoney = withdrawTotalMoney;
    setWithdrawTotalMoneyIsSet(true);
    return this;
  }

  public void unsetWithdrawTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field withdrawTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWTOTALMONEY_ISSET_ID);
  }

  public void setWithdrawTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWTOTALMONEY_ISSET_ID, value);
  }

  public long getAwardPrizeMoney() {
    return this.awardPrizeMoney;
  }

  public DailyRiskCount setAwardPrizeMoney(long awardPrizeMoney) {
    this.awardPrizeMoney = awardPrizeMoney;
    setAwardPrizeMoneyIsSet(true);
    return this;
  }

  public void unsetAwardPrizeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID);
  }

  /** Returns true if field awardPrizeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardPrizeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID);
  }

  public void setAwardPrizeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AWARDPRIZEMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((String)value);
      }
      break;

    case SALE_TOTAL_MONEY:
      if (value == null) {
        unsetSaleTotalMoney();
      } else {
        setSaleTotalMoney((Long)value);
      }
      break;

    case RECHARGE_TOTAL_MONEY:
      if (value == null) {
        unsetRechargeTotalMoney();
      } else {
        setRechargeTotalMoney((Long)value);
      }
      break;

    case WITHDRAW_TOTAL_MONEY:
      if (value == null) {
        unsetWithdrawTotalMoney();
      } else {
        setWithdrawTotalMoney((Long)value);
      }
      break;

    case AWARD_PRIZE_MONEY:
      if (value == null) {
        unsetAwardPrizeMoney();
      } else {
        setAwardPrizeMoney((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAY:
      return getDay();

    case SALE_TOTAL_MONEY:
      return Long.valueOf(getSaleTotalMoney());

    case RECHARGE_TOTAL_MONEY:
      return Long.valueOf(getRechargeTotalMoney());

    case WITHDRAW_TOTAL_MONEY:
      return Long.valueOf(getWithdrawTotalMoney());

    case AWARD_PRIZE_MONEY:
      return Long.valueOf(getAwardPrizeMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAY:
      return isSetDay();
    case SALE_TOTAL_MONEY:
      return isSetSaleTotalMoney();
    case RECHARGE_TOTAL_MONEY:
      return isSetRechargeTotalMoney();
    case WITHDRAW_TOTAL_MONEY:
      return isSetWithdrawTotalMoney();
    case AWARD_PRIZE_MONEY:
      return isSetAwardPrizeMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DailyRiskCount)
      return this.equals((DailyRiskCount)that);
    return false;
  }

  public boolean equals(DailyRiskCount that) {
    if (that == null)
      return false;

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_saleTotalMoney = true;
    boolean that_present_saleTotalMoney = true;
    if (this_present_saleTotalMoney || that_present_saleTotalMoney) {
      if (!(this_present_saleTotalMoney && that_present_saleTotalMoney))
        return false;
      if (this.saleTotalMoney != that.saleTotalMoney)
        return false;
    }

    boolean this_present_rechargeTotalMoney = true;
    boolean that_present_rechargeTotalMoney = true;
    if (this_present_rechargeTotalMoney || that_present_rechargeTotalMoney) {
      if (!(this_present_rechargeTotalMoney && that_present_rechargeTotalMoney))
        return false;
      if (this.rechargeTotalMoney != that.rechargeTotalMoney)
        return false;
    }

    boolean this_present_withdrawTotalMoney = true;
    boolean that_present_withdrawTotalMoney = true;
    if (this_present_withdrawTotalMoney || that_present_withdrawTotalMoney) {
      if (!(this_present_withdrawTotalMoney && that_present_withdrawTotalMoney))
        return false;
      if (this.withdrawTotalMoney != that.withdrawTotalMoney)
        return false;
    }

    boolean this_present_awardPrizeMoney = true;
    boolean that_present_awardPrizeMoney = true;
    if (this_present_awardPrizeMoney || that_present_awardPrizeMoney) {
      if (!(this_present_awardPrizeMoney && that_present_awardPrizeMoney))
        return false;
      if (this.awardPrizeMoney != that.awardPrizeMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DailyRiskCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaleTotalMoney()).compareTo(other.isSetSaleTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleTotalMoney, other.saleTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeTotalMoney()).compareTo(other.isSetRechargeTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rechargeTotalMoney, other.rechargeTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawTotalMoney()).compareTo(other.isSetWithdrawTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawTotalMoney, other.withdrawTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardPrizeMoney()).compareTo(other.isSetAwardPrizeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardPrizeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardPrizeMoney, other.awardPrizeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DailyRiskCount(");
    boolean first = true;

    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saleTotalMoney:");
    sb.append(this.saleTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeTotalMoney:");
    sb.append(this.rechargeTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawTotalMoney:");
    sb.append(this.withdrawTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("awardPrizeMoney:");
    sb.append(this.awardPrizeMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DailyRiskCountStandardSchemeFactory implements SchemeFactory {
    public DailyRiskCountStandardScheme getScheme() {
      return new DailyRiskCountStandardScheme();
    }
  }

  private static class DailyRiskCountStandardScheme extends StandardScheme<DailyRiskCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DailyRiskCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.day = iprot.readString();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SALE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.saleTotalMoney = iprot.readI64();
              struct.setSaleTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECHARGE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rechargeTotalMoney = iprot.readI64();
              struct.setRechargeTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WITHDRAW_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.withdrawTotalMoney = iprot.readI64();
              struct.setWithdrawTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AWARD_PRIZE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.awardPrizeMoney = iprot.readI64();
              struct.setAwardPrizeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DailyRiskCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.day != null) {
        oprot.writeFieldBegin(DAY_FIELD_DESC);
        oprot.writeString(struct.day);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.saleTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECHARGE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.rechargeTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITHDRAW_TOTAL_MONEY_FIELD_DESC);
      oprot.writeI64(struct.withdrawTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AWARD_PRIZE_MONEY_FIELD_DESC);
      oprot.writeI64(struct.awardPrizeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DailyRiskCountTupleSchemeFactory implements SchemeFactory {
    public DailyRiskCountTupleScheme getScheme() {
      return new DailyRiskCountTupleScheme();
    }
  }

  private static class DailyRiskCountTupleScheme extends TupleScheme<DailyRiskCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DailyRiskCount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDay()) {
        optionals.set(0);
      }
      if (struct.isSetSaleTotalMoney()) {
        optionals.set(1);
      }
      if (struct.isSetRechargeTotalMoney()) {
        optionals.set(2);
      }
      if (struct.isSetWithdrawTotalMoney()) {
        optionals.set(3);
      }
      if (struct.isSetAwardPrizeMoney()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDay()) {
        oprot.writeString(struct.day);
      }
      if (struct.isSetSaleTotalMoney()) {
        oprot.writeI64(struct.saleTotalMoney);
      }
      if (struct.isSetRechargeTotalMoney()) {
        oprot.writeI64(struct.rechargeTotalMoney);
      }
      if (struct.isSetWithdrawTotalMoney()) {
        oprot.writeI64(struct.withdrawTotalMoney);
      }
      if (struct.isSetAwardPrizeMoney()) {
        oprot.writeI64(struct.awardPrizeMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DailyRiskCount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.day = iprot.readString();
        struct.setDayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.saleTotalMoney = iprot.readI64();
        struct.setSaleTotalMoneyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rechargeTotalMoney = iprot.readI64();
        struct.setRechargeTotalMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.withdrawTotalMoney = iprot.readI64();
        struct.setWithdrawTotalMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.awardPrizeMoney = iprot.readI64();
        struct.setAwardPrizeMoneyIsSet(true);
      }
    }
  }

}

