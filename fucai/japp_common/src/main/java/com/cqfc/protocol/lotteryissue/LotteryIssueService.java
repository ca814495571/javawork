/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LotteryIssueService {

  public interface Iface {

    public int addOrUpdateLotteryItem(LotteryItem lotteryItem) throws org.apache.thrift.TException;

    public List<LotteryItem> getLotteryItemList() throws org.apache.thrift.TException;

    public LotteryItem findLotteryItemByLotteryId(String lotteryId) throws org.apache.thrift.TException;

    public int createLotteryIssue(String beginTime, String endTime, String lotteryId) throws org.apache.thrift.TException;

    public ReturnData getLotteryIssueList(LotteryIssue lotteryIssue, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public LotteryIssue findLotteryIssue(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public String getCreateMinTime(String lotteryId) throws org.apache.thrift.TException;

    public int updateLotteryIssueState(int issueId, int state) throws org.apache.thrift.TException;

    public LotteryDrawResult findLotteryDrawResult(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public DrawResultData getLotteryDrawResultList(LotteryDrawResult lotteryDrawResult, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public ReturnData getLotteryIssueByParam(LotteryIssue lotteryIssue, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int updateLotteryIssueStateByParam(String lotteryId, String issueNo, int state) throws org.apache.thrift.TException;

    public int deleteIssueNo(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public int updateLotteryIssue(LotteryIssue lotteryIssue) throws org.apache.thrift.TException;

    public int createLotteryDrawResult(LotteryDrawResult lotteryDrawResult) throws org.apache.thrift.TException;

    public int createLZCLotteryIssue(LotteryIssue lotteryIssue) throws org.apache.thrift.TException;

    public MatchCompetive getMatchCompetiveResultList(String wareIssue, String transferId) throws org.apache.thrift.TException;

    public MatchCompetive getMatchCompetiveResult(String wareIssue, String lotteryId, String transferId) throws org.apache.thrift.TException;

    public MatchCompetive getMatchCompetive(String wareIssue, String transferId) throws org.apache.thrift.TException;

    public MatchCompetive getMatchCompetiveByLotteryId(String wareIssue, String transferId, String lotteryId) throws org.apache.thrift.TException;

    public int createIssueSport(List<IssueSport> issueSportList) throws org.apache.thrift.TException;

    public IssueSport findIssueSport(String lotteryId, String wareIssue) throws org.apache.thrift.TException;

    public List<MatchCompetive> getMatchCompetiveListByMatchType(String lotteryId) throws org.apache.thrift.TException;

    public boolean createMatchCompetiveList(List<MatchCompetive> matchCompetiveList) throws org.apache.thrift.TException;

    public boolean createMatchCompetiveResultList(List<MatchCompetive> matchCompetiveList) throws org.apache.thrift.TException;

    public MatchCompetiveData getMatchCompetiveList(MatchCompetive matchCompetive, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int updateMatchCompetive(MatchCompetive matchCompetive) throws org.apache.thrift.TException;

    public int deleteMatchCompetive(String wareIssue, String transferId) throws org.apache.thrift.TException;

    public boolean createMatchFootball(List<MatchFootball> matchFootballList) throws org.apache.thrift.TException;

    public List<MatchFootball> getMatchFootballList(String lotteryId, String wareIssue) throws org.apache.thrift.TException;

    public MatchFootballDate getMatchFootballDate(MatchFootball matchFootball, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public MatchFootball getMatchFootball(String lotteryId, String wareIssue, String matchNo) throws org.apache.thrift.TException;

    public int updateMatchFootball(MatchFootball matchFootball) throws org.apache.thrift.TException;

    public int saveOrUpdateMatchCompetiveResult(MatchCompetiveResult matchCompetiveResult) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addOrUpdateLotteryItem(LotteryItem lotteryItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLotteryItemList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findLotteryItemByLotteryId(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createLotteryIssue(String beginTime, String endTime, String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLotteryIssueList(LotteryIssue lotteryIssue, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findLotteryIssue(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCreateMinTime(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLotteryIssueState(int issueId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findLotteryDrawResult(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLotteryDrawResultList(LotteryDrawResult lotteryDrawResult, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLotteryIssueByParam(LotteryIssue lotteryIssue, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLotteryIssueStateByParam(String lotteryId, String issueNo, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteIssueNo(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLotteryIssue(LotteryIssue lotteryIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createLotteryDrawResult(LotteryDrawResult lotteryDrawResult, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createLZCLotteryIssue(LotteryIssue lotteryIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchCompetiveResultList(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchCompetiveResult(String wareIssue, String lotteryId, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchCompetive(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchCompetiveByLotteryId(String wareIssue, String transferId, String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createIssueSport(List<IssueSport> issueSportList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findIssueSport(String lotteryId, String wareIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchCompetiveListByMatchType(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createMatchCompetiveList(List<MatchCompetive> matchCompetiveList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createMatchCompetiveResultList(List<MatchCompetive> matchCompetiveList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchCompetiveList(MatchCompetive matchCompetive, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMatchCompetive(MatchCompetive matchCompetive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMatchCompetive(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createMatchFootball(List<MatchFootball> matchFootballList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchFootballList(String lotteryId, String wareIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchFootballDate(MatchFootball matchFootball, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchFootball(String lotteryId, String wareIssue, String matchNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMatchFootball(MatchFootball matchFootball, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveOrUpdateMatchCompetiveResult(MatchCompetiveResult matchCompetiveResult, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addOrUpdateLotteryItem(LotteryItem lotteryItem) throws org.apache.thrift.TException
    {
      send_addOrUpdateLotteryItem(lotteryItem);
      return recv_addOrUpdateLotteryItem();
    }

    public void send_addOrUpdateLotteryItem(LotteryItem lotteryItem) throws org.apache.thrift.TException
    {
      addOrUpdateLotteryItem_args args = new addOrUpdateLotteryItem_args();
      args.setLotteryItem(lotteryItem);
      sendBase("addOrUpdateLotteryItem", args);
    }

    public int recv_addOrUpdateLotteryItem() throws org.apache.thrift.TException
    {
      addOrUpdateLotteryItem_result result = new addOrUpdateLotteryItem_result();
      receiveBase(result, "addOrUpdateLotteryItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrUpdateLotteryItem failed: unknown result");
    }

    public List<LotteryItem> getLotteryItemList() throws org.apache.thrift.TException
    {
      send_getLotteryItemList();
      return recv_getLotteryItemList();
    }

    public void send_getLotteryItemList() throws org.apache.thrift.TException
    {
      getLotteryItemList_args args = new getLotteryItemList_args();
      sendBase("getLotteryItemList", args);
    }

    public List<LotteryItem> recv_getLotteryItemList() throws org.apache.thrift.TException
    {
      getLotteryItemList_result result = new getLotteryItemList_result();
      receiveBase(result, "getLotteryItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryItemList failed: unknown result");
    }

    public LotteryItem findLotteryItemByLotteryId(String lotteryId) throws org.apache.thrift.TException
    {
      send_findLotteryItemByLotteryId(lotteryId);
      return recv_findLotteryItemByLotteryId();
    }

    public void send_findLotteryItemByLotteryId(String lotteryId) throws org.apache.thrift.TException
    {
      findLotteryItemByLotteryId_args args = new findLotteryItemByLotteryId_args();
      args.setLotteryId(lotteryId);
      sendBase("findLotteryItemByLotteryId", args);
    }

    public LotteryItem recv_findLotteryItemByLotteryId() throws org.apache.thrift.TException
    {
      findLotteryItemByLotteryId_result result = new findLotteryItemByLotteryId_result();
      receiveBase(result, "findLotteryItemByLotteryId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLotteryItemByLotteryId failed: unknown result");
    }

    public int createLotteryIssue(String beginTime, String endTime, String lotteryId) throws org.apache.thrift.TException
    {
      send_createLotteryIssue(beginTime, endTime, lotteryId);
      return recv_createLotteryIssue();
    }

    public void send_createLotteryIssue(String beginTime, String endTime, String lotteryId) throws org.apache.thrift.TException
    {
      createLotteryIssue_args args = new createLotteryIssue_args();
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      args.setLotteryId(lotteryId);
      sendBase("createLotteryIssue", args);
    }

    public int recv_createLotteryIssue() throws org.apache.thrift.TException
    {
      createLotteryIssue_result result = new createLotteryIssue_result();
      receiveBase(result, "createLotteryIssue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLotteryIssue failed: unknown result");
    }

    public ReturnData getLotteryIssueList(LotteryIssue lotteryIssue, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getLotteryIssueList(lotteryIssue, currentPage, pageSize);
      return recv_getLotteryIssueList();
    }

    public void send_getLotteryIssueList(LotteryIssue lotteryIssue, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getLotteryIssueList_args args = new getLotteryIssueList_args();
      args.setLotteryIssue(lotteryIssue);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getLotteryIssueList", args);
    }

    public ReturnData recv_getLotteryIssueList() throws org.apache.thrift.TException
    {
      getLotteryIssueList_result result = new getLotteryIssueList_result();
      receiveBase(result, "getLotteryIssueList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryIssueList failed: unknown result");
    }

    public LotteryIssue findLotteryIssue(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_findLotteryIssue(lotteryId, issueNo);
      return recv_findLotteryIssue();
    }

    public void send_findLotteryIssue(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      findLotteryIssue_args args = new findLotteryIssue_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("findLotteryIssue", args);
    }

    public LotteryIssue recv_findLotteryIssue() throws org.apache.thrift.TException
    {
      findLotteryIssue_result result = new findLotteryIssue_result();
      receiveBase(result, "findLotteryIssue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLotteryIssue failed: unknown result");
    }

    public String getCreateMinTime(String lotteryId) throws org.apache.thrift.TException
    {
      send_getCreateMinTime(lotteryId);
      return recv_getCreateMinTime();
    }

    public void send_getCreateMinTime(String lotteryId) throws org.apache.thrift.TException
    {
      getCreateMinTime_args args = new getCreateMinTime_args();
      args.setLotteryId(lotteryId);
      sendBase("getCreateMinTime", args);
    }

    public String recv_getCreateMinTime() throws org.apache.thrift.TException
    {
      getCreateMinTime_result result = new getCreateMinTime_result();
      receiveBase(result, "getCreateMinTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCreateMinTime failed: unknown result");
    }

    public int updateLotteryIssueState(int issueId, int state) throws org.apache.thrift.TException
    {
      send_updateLotteryIssueState(issueId, state);
      return recv_updateLotteryIssueState();
    }

    public void send_updateLotteryIssueState(int issueId, int state) throws org.apache.thrift.TException
    {
      updateLotteryIssueState_args args = new updateLotteryIssueState_args();
      args.setIssueId(issueId);
      args.setState(state);
      sendBase("updateLotteryIssueState", args);
    }

    public int recv_updateLotteryIssueState() throws org.apache.thrift.TException
    {
      updateLotteryIssueState_result result = new updateLotteryIssueState_result();
      receiveBase(result, "updateLotteryIssueState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLotteryIssueState failed: unknown result");
    }

    public LotteryDrawResult findLotteryDrawResult(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_findLotteryDrawResult(lotteryId, issueNo);
      return recv_findLotteryDrawResult();
    }

    public void send_findLotteryDrawResult(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      findLotteryDrawResult_args args = new findLotteryDrawResult_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("findLotteryDrawResult", args);
    }

    public LotteryDrawResult recv_findLotteryDrawResult() throws org.apache.thrift.TException
    {
      findLotteryDrawResult_result result = new findLotteryDrawResult_result();
      receiveBase(result, "findLotteryDrawResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLotteryDrawResult failed: unknown result");
    }

    public DrawResultData getLotteryDrawResultList(LotteryDrawResult lotteryDrawResult, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getLotteryDrawResultList(lotteryDrawResult, currentPage, pageSize);
      return recv_getLotteryDrawResultList();
    }

    public void send_getLotteryDrawResultList(LotteryDrawResult lotteryDrawResult, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getLotteryDrawResultList_args args = new getLotteryDrawResultList_args();
      args.setLotteryDrawResult(lotteryDrawResult);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getLotteryDrawResultList", args);
    }

    public DrawResultData recv_getLotteryDrawResultList() throws org.apache.thrift.TException
    {
      getLotteryDrawResultList_result result = new getLotteryDrawResultList_result();
      receiveBase(result, "getLotteryDrawResultList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryDrawResultList failed: unknown result");
    }

    public ReturnData getLotteryIssueByParam(LotteryIssue lotteryIssue, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getLotteryIssueByParam(lotteryIssue, currentPage, pageSize);
      return recv_getLotteryIssueByParam();
    }

    public void send_getLotteryIssueByParam(LotteryIssue lotteryIssue, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getLotteryIssueByParam_args args = new getLotteryIssueByParam_args();
      args.setLotteryIssue(lotteryIssue);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getLotteryIssueByParam", args);
    }

    public ReturnData recv_getLotteryIssueByParam() throws org.apache.thrift.TException
    {
      getLotteryIssueByParam_result result = new getLotteryIssueByParam_result();
      receiveBase(result, "getLotteryIssueByParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLotteryIssueByParam failed: unknown result");
    }

    public int updateLotteryIssueStateByParam(String lotteryId, String issueNo, int state) throws org.apache.thrift.TException
    {
      send_updateLotteryIssueStateByParam(lotteryId, issueNo, state);
      return recv_updateLotteryIssueStateByParam();
    }

    public void send_updateLotteryIssueStateByParam(String lotteryId, String issueNo, int state) throws org.apache.thrift.TException
    {
      updateLotteryIssueStateByParam_args args = new updateLotteryIssueStateByParam_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      args.setState(state);
      sendBase("updateLotteryIssueStateByParam", args);
    }

    public int recv_updateLotteryIssueStateByParam() throws org.apache.thrift.TException
    {
      updateLotteryIssueStateByParam_result result = new updateLotteryIssueStateByParam_result();
      receiveBase(result, "updateLotteryIssueStateByParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLotteryIssueStateByParam failed: unknown result");
    }

    public int deleteIssueNo(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_deleteIssueNo(lotteryId, issueNo);
      return recv_deleteIssueNo();
    }

    public void send_deleteIssueNo(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      deleteIssueNo_args args = new deleteIssueNo_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("deleteIssueNo", args);
    }

    public int recv_deleteIssueNo() throws org.apache.thrift.TException
    {
      deleteIssueNo_result result = new deleteIssueNo_result();
      receiveBase(result, "deleteIssueNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteIssueNo failed: unknown result");
    }

    public int updateLotteryIssue(LotteryIssue lotteryIssue) throws org.apache.thrift.TException
    {
      send_updateLotteryIssue(lotteryIssue);
      return recv_updateLotteryIssue();
    }

    public void send_updateLotteryIssue(LotteryIssue lotteryIssue) throws org.apache.thrift.TException
    {
      updateLotteryIssue_args args = new updateLotteryIssue_args();
      args.setLotteryIssue(lotteryIssue);
      sendBase("updateLotteryIssue", args);
    }

    public int recv_updateLotteryIssue() throws org.apache.thrift.TException
    {
      updateLotteryIssue_result result = new updateLotteryIssue_result();
      receiveBase(result, "updateLotteryIssue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLotteryIssue failed: unknown result");
    }

    public int createLotteryDrawResult(LotteryDrawResult lotteryDrawResult) throws org.apache.thrift.TException
    {
      send_createLotteryDrawResult(lotteryDrawResult);
      return recv_createLotteryDrawResult();
    }

    public void send_createLotteryDrawResult(LotteryDrawResult lotteryDrawResult) throws org.apache.thrift.TException
    {
      createLotteryDrawResult_args args = new createLotteryDrawResult_args();
      args.setLotteryDrawResult(lotteryDrawResult);
      sendBase("createLotteryDrawResult", args);
    }

    public int recv_createLotteryDrawResult() throws org.apache.thrift.TException
    {
      createLotteryDrawResult_result result = new createLotteryDrawResult_result();
      receiveBase(result, "createLotteryDrawResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLotteryDrawResult failed: unknown result");
    }

    public int createLZCLotteryIssue(LotteryIssue lotteryIssue) throws org.apache.thrift.TException
    {
      send_createLZCLotteryIssue(lotteryIssue);
      return recv_createLZCLotteryIssue();
    }

    public void send_createLZCLotteryIssue(LotteryIssue lotteryIssue) throws org.apache.thrift.TException
    {
      createLZCLotteryIssue_args args = new createLZCLotteryIssue_args();
      args.setLotteryIssue(lotteryIssue);
      sendBase("createLZCLotteryIssue", args);
    }

    public int recv_createLZCLotteryIssue() throws org.apache.thrift.TException
    {
      createLZCLotteryIssue_result result = new createLZCLotteryIssue_result();
      receiveBase(result, "createLZCLotteryIssue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLZCLotteryIssue failed: unknown result");
    }

    public MatchCompetive getMatchCompetiveResultList(String wareIssue, String transferId) throws org.apache.thrift.TException
    {
      send_getMatchCompetiveResultList(wareIssue, transferId);
      return recv_getMatchCompetiveResultList();
    }

    public void send_getMatchCompetiveResultList(String wareIssue, String transferId) throws org.apache.thrift.TException
    {
      getMatchCompetiveResultList_args args = new getMatchCompetiveResultList_args();
      args.setWareIssue(wareIssue);
      args.setTransferId(transferId);
      sendBase("getMatchCompetiveResultList", args);
    }

    public MatchCompetive recv_getMatchCompetiveResultList() throws org.apache.thrift.TException
    {
      getMatchCompetiveResultList_result result = new getMatchCompetiveResultList_result();
      receiveBase(result, "getMatchCompetiveResultList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchCompetiveResultList failed: unknown result");
    }

    public MatchCompetive getMatchCompetiveResult(String wareIssue, String lotteryId, String transferId) throws org.apache.thrift.TException
    {
      send_getMatchCompetiveResult(wareIssue, lotteryId, transferId);
      return recv_getMatchCompetiveResult();
    }

    public void send_getMatchCompetiveResult(String wareIssue, String lotteryId, String transferId) throws org.apache.thrift.TException
    {
      getMatchCompetiveResult_args args = new getMatchCompetiveResult_args();
      args.setWareIssue(wareIssue);
      args.setLotteryId(lotteryId);
      args.setTransferId(transferId);
      sendBase("getMatchCompetiveResult", args);
    }

    public MatchCompetive recv_getMatchCompetiveResult() throws org.apache.thrift.TException
    {
      getMatchCompetiveResult_result result = new getMatchCompetiveResult_result();
      receiveBase(result, "getMatchCompetiveResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchCompetiveResult failed: unknown result");
    }

    public MatchCompetive getMatchCompetive(String wareIssue, String transferId) throws org.apache.thrift.TException
    {
      send_getMatchCompetive(wareIssue, transferId);
      return recv_getMatchCompetive();
    }

    public void send_getMatchCompetive(String wareIssue, String transferId) throws org.apache.thrift.TException
    {
      getMatchCompetive_args args = new getMatchCompetive_args();
      args.setWareIssue(wareIssue);
      args.setTransferId(transferId);
      sendBase("getMatchCompetive", args);
    }

    public MatchCompetive recv_getMatchCompetive() throws org.apache.thrift.TException
    {
      getMatchCompetive_result result = new getMatchCompetive_result();
      receiveBase(result, "getMatchCompetive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchCompetive failed: unknown result");
    }

    public MatchCompetive getMatchCompetiveByLotteryId(String wareIssue, String transferId, String lotteryId) throws org.apache.thrift.TException
    {
      send_getMatchCompetiveByLotteryId(wareIssue, transferId, lotteryId);
      return recv_getMatchCompetiveByLotteryId();
    }

    public void send_getMatchCompetiveByLotteryId(String wareIssue, String transferId, String lotteryId) throws org.apache.thrift.TException
    {
      getMatchCompetiveByLotteryId_args args = new getMatchCompetiveByLotteryId_args();
      args.setWareIssue(wareIssue);
      args.setTransferId(transferId);
      args.setLotteryId(lotteryId);
      sendBase("getMatchCompetiveByLotteryId", args);
    }

    public MatchCompetive recv_getMatchCompetiveByLotteryId() throws org.apache.thrift.TException
    {
      getMatchCompetiveByLotteryId_result result = new getMatchCompetiveByLotteryId_result();
      receiveBase(result, "getMatchCompetiveByLotteryId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchCompetiveByLotteryId failed: unknown result");
    }

    public int createIssueSport(List<IssueSport> issueSportList) throws org.apache.thrift.TException
    {
      send_createIssueSport(issueSportList);
      return recv_createIssueSport();
    }

    public void send_createIssueSport(List<IssueSport> issueSportList) throws org.apache.thrift.TException
    {
      createIssueSport_args args = new createIssueSport_args();
      args.setIssueSportList(issueSportList);
      sendBase("createIssueSport", args);
    }

    public int recv_createIssueSport() throws org.apache.thrift.TException
    {
      createIssueSport_result result = new createIssueSport_result();
      receiveBase(result, "createIssueSport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createIssueSport failed: unknown result");
    }

    public IssueSport findIssueSport(String lotteryId, String wareIssue) throws org.apache.thrift.TException
    {
      send_findIssueSport(lotteryId, wareIssue);
      return recv_findIssueSport();
    }

    public void send_findIssueSport(String lotteryId, String wareIssue) throws org.apache.thrift.TException
    {
      findIssueSport_args args = new findIssueSport_args();
      args.setLotteryId(lotteryId);
      args.setWareIssue(wareIssue);
      sendBase("findIssueSport", args);
    }

    public IssueSport recv_findIssueSport() throws org.apache.thrift.TException
    {
      findIssueSport_result result = new findIssueSport_result();
      receiveBase(result, "findIssueSport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findIssueSport failed: unknown result");
    }

    public List<MatchCompetive> getMatchCompetiveListByMatchType(String lotteryId) throws org.apache.thrift.TException
    {
      send_getMatchCompetiveListByMatchType(lotteryId);
      return recv_getMatchCompetiveListByMatchType();
    }

    public void send_getMatchCompetiveListByMatchType(String lotteryId) throws org.apache.thrift.TException
    {
      getMatchCompetiveListByMatchType_args args = new getMatchCompetiveListByMatchType_args();
      args.setLotteryId(lotteryId);
      sendBase("getMatchCompetiveListByMatchType", args);
    }

    public List<MatchCompetive> recv_getMatchCompetiveListByMatchType() throws org.apache.thrift.TException
    {
      getMatchCompetiveListByMatchType_result result = new getMatchCompetiveListByMatchType_result();
      receiveBase(result, "getMatchCompetiveListByMatchType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchCompetiveListByMatchType failed: unknown result");
    }

    public boolean createMatchCompetiveList(List<MatchCompetive> matchCompetiveList) throws org.apache.thrift.TException
    {
      send_createMatchCompetiveList(matchCompetiveList);
      return recv_createMatchCompetiveList();
    }

    public void send_createMatchCompetiveList(List<MatchCompetive> matchCompetiveList) throws org.apache.thrift.TException
    {
      createMatchCompetiveList_args args = new createMatchCompetiveList_args();
      args.setMatchCompetiveList(matchCompetiveList);
      sendBase("createMatchCompetiveList", args);
    }

    public boolean recv_createMatchCompetiveList() throws org.apache.thrift.TException
    {
      createMatchCompetiveList_result result = new createMatchCompetiveList_result();
      receiveBase(result, "createMatchCompetiveList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMatchCompetiveList failed: unknown result");
    }

    public boolean createMatchCompetiveResultList(List<MatchCompetive> matchCompetiveList) throws org.apache.thrift.TException
    {
      send_createMatchCompetiveResultList(matchCompetiveList);
      return recv_createMatchCompetiveResultList();
    }

    public void send_createMatchCompetiveResultList(List<MatchCompetive> matchCompetiveList) throws org.apache.thrift.TException
    {
      createMatchCompetiveResultList_args args = new createMatchCompetiveResultList_args();
      args.setMatchCompetiveList(matchCompetiveList);
      sendBase("createMatchCompetiveResultList", args);
    }

    public boolean recv_createMatchCompetiveResultList() throws org.apache.thrift.TException
    {
      createMatchCompetiveResultList_result result = new createMatchCompetiveResultList_result();
      receiveBase(result, "createMatchCompetiveResultList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMatchCompetiveResultList failed: unknown result");
    }

    public MatchCompetiveData getMatchCompetiveList(MatchCompetive matchCompetive, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getMatchCompetiveList(matchCompetive, currentPage, pageSize);
      return recv_getMatchCompetiveList();
    }

    public void send_getMatchCompetiveList(MatchCompetive matchCompetive, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getMatchCompetiveList_args args = new getMatchCompetiveList_args();
      args.setMatchCompetive(matchCompetive);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getMatchCompetiveList", args);
    }

    public MatchCompetiveData recv_getMatchCompetiveList() throws org.apache.thrift.TException
    {
      getMatchCompetiveList_result result = new getMatchCompetiveList_result();
      receiveBase(result, "getMatchCompetiveList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchCompetiveList failed: unknown result");
    }

    public int updateMatchCompetive(MatchCompetive matchCompetive) throws org.apache.thrift.TException
    {
      send_updateMatchCompetive(matchCompetive);
      return recv_updateMatchCompetive();
    }

    public void send_updateMatchCompetive(MatchCompetive matchCompetive) throws org.apache.thrift.TException
    {
      updateMatchCompetive_args args = new updateMatchCompetive_args();
      args.setMatchCompetive(matchCompetive);
      sendBase("updateMatchCompetive", args);
    }

    public int recv_updateMatchCompetive() throws org.apache.thrift.TException
    {
      updateMatchCompetive_result result = new updateMatchCompetive_result();
      receiveBase(result, "updateMatchCompetive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMatchCompetive failed: unknown result");
    }

    public int deleteMatchCompetive(String wareIssue, String transferId) throws org.apache.thrift.TException
    {
      send_deleteMatchCompetive(wareIssue, transferId);
      return recv_deleteMatchCompetive();
    }

    public void send_deleteMatchCompetive(String wareIssue, String transferId) throws org.apache.thrift.TException
    {
      deleteMatchCompetive_args args = new deleteMatchCompetive_args();
      args.setWareIssue(wareIssue);
      args.setTransferId(transferId);
      sendBase("deleteMatchCompetive", args);
    }

    public int recv_deleteMatchCompetive() throws org.apache.thrift.TException
    {
      deleteMatchCompetive_result result = new deleteMatchCompetive_result();
      receiveBase(result, "deleteMatchCompetive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMatchCompetive failed: unknown result");
    }

    public boolean createMatchFootball(List<MatchFootball> matchFootballList) throws org.apache.thrift.TException
    {
      send_createMatchFootball(matchFootballList);
      return recv_createMatchFootball();
    }

    public void send_createMatchFootball(List<MatchFootball> matchFootballList) throws org.apache.thrift.TException
    {
      createMatchFootball_args args = new createMatchFootball_args();
      args.setMatchFootballList(matchFootballList);
      sendBase("createMatchFootball", args);
    }

    public boolean recv_createMatchFootball() throws org.apache.thrift.TException
    {
      createMatchFootball_result result = new createMatchFootball_result();
      receiveBase(result, "createMatchFootball");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMatchFootball failed: unknown result");
    }

    public List<MatchFootball> getMatchFootballList(String lotteryId, String wareIssue) throws org.apache.thrift.TException
    {
      send_getMatchFootballList(lotteryId, wareIssue);
      return recv_getMatchFootballList();
    }

    public void send_getMatchFootballList(String lotteryId, String wareIssue) throws org.apache.thrift.TException
    {
      getMatchFootballList_args args = new getMatchFootballList_args();
      args.setLotteryId(lotteryId);
      args.setWareIssue(wareIssue);
      sendBase("getMatchFootballList", args);
    }

    public List<MatchFootball> recv_getMatchFootballList() throws org.apache.thrift.TException
    {
      getMatchFootballList_result result = new getMatchFootballList_result();
      receiveBase(result, "getMatchFootballList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchFootballList failed: unknown result");
    }

    public MatchFootballDate getMatchFootballDate(MatchFootball matchFootball, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getMatchFootballDate(matchFootball, currentPage, pageSize);
      return recv_getMatchFootballDate();
    }

    public void send_getMatchFootballDate(MatchFootball matchFootball, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getMatchFootballDate_args args = new getMatchFootballDate_args();
      args.setMatchFootball(matchFootball);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getMatchFootballDate", args);
    }

    public MatchFootballDate recv_getMatchFootballDate() throws org.apache.thrift.TException
    {
      getMatchFootballDate_result result = new getMatchFootballDate_result();
      receiveBase(result, "getMatchFootballDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchFootballDate failed: unknown result");
    }

    public MatchFootball getMatchFootball(String lotteryId, String wareIssue, String matchNo) throws org.apache.thrift.TException
    {
      send_getMatchFootball(lotteryId, wareIssue, matchNo);
      return recv_getMatchFootball();
    }

    public void send_getMatchFootball(String lotteryId, String wareIssue, String matchNo) throws org.apache.thrift.TException
    {
      getMatchFootball_args args = new getMatchFootball_args();
      args.setLotteryId(lotteryId);
      args.setWareIssue(wareIssue);
      args.setMatchNo(matchNo);
      sendBase("getMatchFootball", args);
    }

    public MatchFootball recv_getMatchFootball() throws org.apache.thrift.TException
    {
      getMatchFootball_result result = new getMatchFootball_result();
      receiveBase(result, "getMatchFootball");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchFootball failed: unknown result");
    }

    public int updateMatchFootball(MatchFootball matchFootball) throws org.apache.thrift.TException
    {
      send_updateMatchFootball(matchFootball);
      return recv_updateMatchFootball();
    }

    public void send_updateMatchFootball(MatchFootball matchFootball) throws org.apache.thrift.TException
    {
      updateMatchFootball_args args = new updateMatchFootball_args();
      args.setMatchFootball(matchFootball);
      sendBase("updateMatchFootball", args);
    }

    public int recv_updateMatchFootball() throws org.apache.thrift.TException
    {
      updateMatchFootball_result result = new updateMatchFootball_result();
      receiveBase(result, "updateMatchFootball");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMatchFootball failed: unknown result");
    }

    public int saveOrUpdateMatchCompetiveResult(MatchCompetiveResult matchCompetiveResult) throws org.apache.thrift.TException
    {
      send_saveOrUpdateMatchCompetiveResult(matchCompetiveResult);
      return recv_saveOrUpdateMatchCompetiveResult();
    }

    public void send_saveOrUpdateMatchCompetiveResult(MatchCompetiveResult matchCompetiveResult) throws org.apache.thrift.TException
    {
      saveOrUpdateMatchCompetiveResult_args args = new saveOrUpdateMatchCompetiveResult_args();
      args.setMatchCompetiveResult(matchCompetiveResult);
      sendBase("saveOrUpdateMatchCompetiveResult", args);
    }

    public int recv_saveOrUpdateMatchCompetiveResult() throws org.apache.thrift.TException
    {
      saveOrUpdateMatchCompetiveResult_result result = new saveOrUpdateMatchCompetiveResult_result();
      receiveBase(result, "saveOrUpdateMatchCompetiveResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveOrUpdateMatchCompetiveResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOrUpdateLotteryItem(LotteryItem lotteryItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrUpdateLotteryItem_call method_call = new addOrUpdateLotteryItem_call(lotteryItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrUpdateLotteryItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryItem lotteryItem;
      public addOrUpdateLotteryItem_call(LotteryItem lotteryItem, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryItem = lotteryItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrUpdateLotteryItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrUpdateLotteryItem_args args = new addOrUpdateLotteryItem_args();
        args.setLotteryItem(lotteryItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrUpdateLotteryItem();
      }
    }

    public void getLotteryItemList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryItemList_call method_call = new getLotteryItemList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getLotteryItemList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryItemList_args args = new getLotteryItemList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LotteryItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryItemList();
      }
    }

    public void findLotteryItemByLotteryId(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLotteryItemByLotteryId_call method_call = new findLotteryItemByLotteryId_call(lotteryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLotteryItemByLotteryId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      public findLotteryItemByLotteryId_call(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLotteryItemByLotteryId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLotteryItemByLotteryId_args args = new findLotteryItemByLotteryId_args();
        args.setLotteryId(lotteryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LotteryItem getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLotteryItemByLotteryId();
      }
    }

    public void createLotteryIssue(String beginTime, String endTime, String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLotteryIssue_call method_call = new createLotteryIssue_call(beginTime, endTime, lotteryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLotteryIssue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String beginTime;
      private String endTime;
      private String lotteryId;
      public createLotteryIssue_call(String beginTime, String endTime, String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.lotteryId = lotteryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLotteryIssue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLotteryIssue_args args = new createLotteryIssue_args();
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.setLotteryId(lotteryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLotteryIssue();
      }
    }

    public void getLotteryIssueList(LotteryIssue lotteryIssue, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryIssueList_call method_call = new getLotteryIssueList_call(lotteryIssue, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryIssueList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryIssue lotteryIssue;
      private int currentPage;
      private int pageSize;
      public getLotteryIssueList_call(LotteryIssue lotteryIssue, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryIssue = lotteryIssue;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryIssueList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryIssueList_args args = new getLotteryIssueList_args();
        args.setLotteryIssue(lotteryIssue);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryIssueList();
      }
    }

    public void findLotteryIssue(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLotteryIssue_call method_call = new findLotteryIssue_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLotteryIssue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public findLotteryIssue_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLotteryIssue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLotteryIssue_args args = new findLotteryIssue_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LotteryIssue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLotteryIssue();
      }
    }

    public void getCreateMinTime(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCreateMinTime_call method_call = new getCreateMinTime_call(lotteryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCreateMinTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      public getCreateMinTime_call(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCreateMinTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCreateMinTime_args args = new getCreateMinTime_args();
        args.setLotteryId(lotteryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCreateMinTime();
      }
    }

    public void updateLotteryIssueState(int issueId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLotteryIssueState_call method_call = new updateLotteryIssueState_call(issueId, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLotteryIssueState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int issueId;
      private int state;
      public updateLotteryIssueState_call(int issueId, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.issueId = issueId;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLotteryIssueState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLotteryIssueState_args args = new updateLotteryIssueState_args();
        args.setIssueId(issueId);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLotteryIssueState();
      }
    }

    public void findLotteryDrawResult(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLotteryDrawResult_call method_call = new findLotteryDrawResult_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLotteryDrawResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public findLotteryDrawResult_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLotteryDrawResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLotteryDrawResult_args args = new findLotteryDrawResult_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LotteryDrawResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLotteryDrawResult();
      }
    }

    public void getLotteryDrawResultList(LotteryDrawResult lotteryDrawResult, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryDrawResultList_call method_call = new getLotteryDrawResultList_call(lotteryDrawResult, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryDrawResultList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryDrawResult lotteryDrawResult;
      private int currentPage;
      private int pageSize;
      public getLotteryDrawResultList_call(LotteryDrawResult lotteryDrawResult, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryDrawResult = lotteryDrawResult;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryDrawResultList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryDrawResultList_args args = new getLotteryDrawResultList_args();
        args.setLotteryDrawResult(lotteryDrawResult);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DrawResultData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryDrawResultList();
      }
    }

    public void getLotteryIssueByParam(LotteryIssue lotteryIssue, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLotteryIssueByParam_call method_call = new getLotteryIssueByParam_call(lotteryIssue, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLotteryIssueByParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryIssue lotteryIssue;
      private int currentPage;
      private int pageSize;
      public getLotteryIssueByParam_call(LotteryIssue lotteryIssue, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryIssue = lotteryIssue;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLotteryIssueByParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLotteryIssueByParam_args args = new getLotteryIssueByParam_args();
        args.setLotteryIssue(lotteryIssue);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLotteryIssueByParam();
      }
    }

    public void updateLotteryIssueStateByParam(String lotteryId, String issueNo, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLotteryIssueStateByParam_call method_call = new updateLotteryIssueStateByParam_call(lotteryId, issueNo, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLotteryIssueStateByParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      private int state;
      public updateLotteryIssueStateByParam_call(String lotteryId, String issueNo, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLotteryIssueStateByParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLotteryIssueStateByParam_args args = new updateLotteryIssueStateByParam_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLotteryIssueStateByParam();
      }
    }

    public void deleteIssueNo(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteIssueNo_call method_call = new deleteIssueNo_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteIssueNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public deleteIssueNo_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteIssueNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteIssueNo_args args = new deleteIssueNo_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteIssueNo();
      }
    }

    public void updateLotteryIssue(LotteryIssue lotteryIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLotteryIssue_call method_call = new updateLotteryIssue_call(lotteryIssue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLotteryIssue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryIssue lotteryIssue;
      public updateLotteryIssue_call(LotteryIssue lotteryIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryIssue = lotteryIssue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLotteryIssue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLotteryIssue_args args = new updateLotteryIssue_args();
        args.setLotteryIssue(lotteryIssue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLotteryIssue();
      }
    }

    public void createLotteryDrawResult(LotteryDrawResult lotteryDrawResult, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLotteryDrawResult_call method_call = new createLotteryDrawResult_call(lotteryDrawResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLotteryDrawResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryDrawResult lotteryDrawResult;
      public createLotteryDrawResult_call(LotteryDrawResult lotteryDrawResult, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryDrawResult = lotteryDrawResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLotteryDrawResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLotteryDrawResult_args args = new createLotteryDrawResult_args();
        args.setLotteryDrawResult(lotteryDrawResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLotteryDrawResult();
      }
    }

    public void createLZCLotteryIssue(LotteryIssue lotteryIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLZCLotteryIssue_call method_call = new createLZCLotteryIssue_call(lotteryIssue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLZCLotteryIssue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LotteryIssue lotteryIssue;
      public createLZCLotteryIssue_call(LotteryIssue lotteryIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryIssue = lotteryIssue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLZCLotteryIssue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLZCLotteryIssue_args args = new createLZCLotteryIssue_args();
        args.setLotteryIssue(lotteryIssue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLZCLotteryIssue();
      }
    }

    public void getMatchCompetiveResultList(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchCompetiveResultList_call method_call = new getMatchCompetiveResultList_call(wareIssue, transferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchCompetiveResultList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String wareIssue;
      private String transferId;
      public getMatchCompetiveResultList_call(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wareIssue = wareIssue;
        this.transferId = transferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchCompetiveResultList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchCompetiveResultList_args args = new getMatchCompetiveResultList_args();
        args.setWareIssue(wareIssue);
        args.setTransferId(transferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchCompetive getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchCompetiveResultList();
      }
    }

    public void getMatchCompetiveResult(String wareIssue, String lotteryId, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchCompetiveResult_call method_call = new getMatchCompetiveResult_call(wareIssue, lotteryId, transferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchCompetiveResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String wareIssue;
      private String lotteryId;
      private String transferId;
      public getMatchCompetiveResult_call(String wareIssue, String lotteryId, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wareIssue = wareIssue;
        this.lotteryId = lotteryId;
        this.transferId = transferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchCompetiveResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchCompetiveResult_args args = new getMatchCompetiveResult_args();
        args.setWareIssue(wareIssue);
        args.setLotteryId(lotteryId);
        args.setTransferId(transferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchCompetive getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchCompetiveResult();
      }
    }

    public void getMatchCompetive(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchCompetive_call method_call = new getMatchCompetive_call(wareIssue, transferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchCompetive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String wareIssue;
      private String transferId;
      public getMatchCompetive_call(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wareIssue = wareIssue;
        this.transferId = transferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchCompetive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchCompetive_args args = new getMatchCompetive_args();
        args.setWareIssue(wareIssue);
        args.setTransferId(transferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchCompetive getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchCompetive();
      }
    }

    public void getMatchCompetiveByLotteryId(String wareIssue, String transferId, String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchCompetiveByLotteryId_call method_call = new getMatchCompetiveByLotteryId_call(wareIssue, transferId, lotteryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchCompetiveByLotteryId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String wareIssue;
      private String transferId;
      private String lotteryId;
      public getMatchCompetiveByLotteryId_call(String wareIssue, String transferId, String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wareIssue = wareIssue;
        this.transferId = transferId;
        this.lotteryId = lotteryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchCompetiveByLotteryId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchCompetiveByLotteryId_args args = new getMatchCompetiveByLotteryId_args();
        args.setWareIssue(wareIssue);
        args.setTransferId(transferId);
        args.setLotteryId(lotteryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchCompetive getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchCompetiveByLotteryId();
      }
    }

    public void createIssueSport(List<IssueSport> issueSportList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createIssueSport_call method_call = new createIssueSport_call(issueSportList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createIssueSport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<IssueSport> issueSportList;
      public createIssueSport_call(List<IssueSport> issueSportList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.issueSportList = issueSportList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createIssueSport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createIssueSport_args args = new createIssueSport_args();
        args.setIssueSportList(issueSportList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createIssueSport();
      }
    }

    public void findIssueSport(String lotteryId, String wareIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findIssueSport_call method_call = new findIssueSport_call(lotteryId, wareIssue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findIssueSport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String wareIssue;
      public findIssueSport_call(String lotteryId, String wareIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.wareIssue = wareIssue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findIssueSport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findIssueSport_args args = new findIssueSport_args();
        args.setLotteryId(lotteryId);
        args.setWareIssue(wareIssue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IssueSport getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findIssueSport();
      }
    }

    public void getMatchCompetiveListByMatchType(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchCompetiveListByMatchType_call method_call = new getMatchCompetiveListByMatchType_call(lotteryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchCompetiveListByMatchType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      public getMatchCompetiveListByMatchType_call(String lotteryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchCompetiveListByMatchType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchCompetiveListByMatchType_args args = new getMatchCompetiveListByMatchType_args();
        args.setLotteryId(lotteryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MatchCompetive> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchCompetiveListByMatchType();
      }
    }

    public void createMatchCompetiveList(List<MatchCompetive> matchCompetiveList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMatchCompetiveList_call method_call = new createMatchCompetiveList_call(matchCompetiveList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMatchCompetiveList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<MatchCompetive> matchCompetiveList;
      public createMatchCompetiveList_call(List<MatchCompetive> matchCompetiveList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchCompetiveList = matchCompetiveList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMatchCompetiveList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMatchCompetiveList_args args = new createMatchCompetiveList_args();
        args.setMatchCompetiveList(matchCompetiveList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMatchCompetiveList();
      }
    }

    public void createMatchCompetiveResultList(List<MatchCompetive> matchCompetiveList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMatchCompetiveResultList_call method_call = new createMatchCompetiveResultList_call(matchCompetiveList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMatchCompetiveResultList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<MatchCompetive> matchCompetiveList;
      public createMatchCompetiveResultList_call(List<MatchCompetive> matchCompetiveList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchCompetiveList = matchCompetiveList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMatchCompetiveResultList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMatchCompetiveResultList_args args = new createMatchCompetiveResultList_args();
        args.setMatchCompetiveList(matchCompetiveList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMatchCompetiveResultList();
      }
    }

    public void getMatchCompetiveList(MatchCompetive matchCompetive, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchCompetiveList_call method_call = new getMatchCompetiveList_call(matchCompetive, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchCompetiveList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MatchCompetive matchCompetive;
      private int currentPage;
      private int pageSize;
      public getMatchCompetiveList_call(MatchCompetive matchCompetive, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchCompetive = matchCompetive;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchCompetiveList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchCompetiveList_args args = new getMatchCompetiveList_args();
        args.setMatchCompetive(matchCompetive);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchCompetiveData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchCompetiveList();
      }
    }

    public void updateMatchCompetive(MatchCompetive matchCompetive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMatchCompetive_call method_call = new updateMatchCompetive_call(matchCompetive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMatchCompetive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MatchCompetive matchCompetive;
      public updateMatchCompetive_call(MatchCompetive matchCompetive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchCompetive = matchCompetive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMatchCompetive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMatchCompetive_args args = new updateMatchCompetive_args();
        args.setMatchCompetive(matchCompetive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMatchCompetive();
      }
    }

    public void deleteMatchCompetive(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMatchCompetive_call method_call = new deleteMatchCompetive_call(wareIssue, transferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMatchCompetive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String wareIssue;
      private String transferId;
      public deleteMatchCompetive_call(String wareIssue, String transferId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wareIssue = wareIssue;
        this.transferId = transferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMatchCompetive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMatchCompetive_args args = new deleteMatchCompetive_args();
        args.setWareIssue(wareIssue);
        args.setTransferId(transferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMatchCompetive();
      }
    }

    public void createMatchFootball(List<MatchFootball> matchFootballList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMatchFootball_call method_call = new createMatchFootball_call(matchFootballList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMatchFootball_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<MatchFootball> matchFootballList;
      public createMatchFootball_call(List<MatchFootball> matchFootballList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchFootballList = matchFootballList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMatchFootball", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMatchFootball_args args = new createMatchFootball_args();
        args.setMatchFootballList(matchFootballList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMatchFootball();
      }
    }

    public void getMatchFootballList(String lotteryId, String wareIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchFootballList_call method_call = new getMatchFootballList_call(lotteryId, wareIssue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchFootballList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String wareIssue;
      public getMatchFootballList_call(String lotteryId, String wareIssue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.wareIssue = wareIssue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchFootballList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchFootballList_args args = new getMatchFootballList_args();
        args.setLotteryId(lotteryId);
        args.setWareIssue(wareIssue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MatchFootball> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchFootballList();
      }
    }

    public void getMatchFootballDate(MatchFootball matchFootball, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchFootballDate_call method_call = new getMatchFootballDate_call(matchFootball, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchFootballDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MatchFootball matchFootball;
      private int currentPage;
      private int pageSize;
      public getMatchFootballDate_call(MatchFootball matchFootball, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchFootball = matchFootball;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchFootballDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchFootballDate_args args = new getMatchFootballDate_args();
        args.setMatchFootball(matchFootball);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchFootballDate getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchFootballDate();
      }
    }

    public void getMatchFootball(String lotteryId, String wareIssue, String matchNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchFootball_call method_call = new getMatchFootball_call(lotteryId, wareIssue, matchNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchFootball_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String wareIssue;
      private String matchNo;
      public getMatchFootball_call(String lotteryId, String wareIssue, String matchNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.wareIssue = wareIssue;
        this.matchNo = matchNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchFootball", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchFootball_args args = new getMatchFootball_args();
        args.setLotteryId(lotteryId);
        args.setWareIssue(wareIssue);
        args.setMatchNo(matchNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MatchFootball getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchFootball();
      }
    }

    public void updateMatchFootball(MatchFootball matchFootball, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMatchFootball_call method_call = new updateMatchFootball_call(matchFootball, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMatchFootball_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MatchFootball matchFootball;
      public updateMatchFootball_call(MatchFootball matchFootball, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchFootball = matchFootball;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMatchFootball", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMatchFootball_args args = new updateMatchFootball_args();
        args.setMatchFootball(matchFootball);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMatchFootball();
      }
    }

    public void saveOrUpdateMatchCompetiveResult(MatchCompetiveResult matchCompetiveResult, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOrUpdateMatchCompetiveResult_call method_call = new saveOrUpdateMatchCompetiveResult_call(matchCompetiveResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOrUpdateMatchCompetiveResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MatchCompetiveResult matchCompetiveResult;
      public saveOrUpdateMatchCompetiveResult_call(MatchCompetiveResult matchCompetiveResult, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.matchCompetiveResult = matchCompetiveResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOrUpdateMatchCompetiveResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOrUpdateMatchCompetiveResult_args args = new saveOrUpdateMatchCompetiveResult_args();
        args.setMatchCompetiveResult(matchCompetiveResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveOrUpdateMatchCompetiveResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOrUpdateLotteryItem", new addOrUpdateLotteryItem());
      processMap.put("getLotteryItemList", new getLotteryItemList());
      processMap.put("findLotteryItemByLotteryId", new findLotteryItemByLotteryId());
      processMap.put("createLotteryIssue", new createLotteryIssue());
      processMap.put("getLotteryIssueList", new getLotteryIssueList());
      processMap.put("findLotteryIssue", new findLotteryIssue());
      processMap.put("getCreateMinTime", new getCreateMinTime());
      processMap.put("updateLotteryIssueState", new updateLotteryIssueState());
      processMap.put("findLotteryDrawResult", new findLotteryDrawResult());
      processMap.put("getLotteryDrawResultList", new getLotteryDrawResultList());
      processMap.put("getLotteryIssueByParam", new getLotteryIssueByParam());
      processMap.put("updateLotteryIssueStateByParam", new updateLotteryIssueStateByParam());
      processMap.put("deleteIssueNo", new deleteIssueNo());
      processMap.put("updateLotteryIssue", new updateLotteryIssue());
      processMap.put("createLotteryDrawResult", new createLotteryDrawResult());
      processMap.put("createLZCLotteryIssue", new createLZCLotteryIssue());
      processMap.put("getMatchCompetiveResultList", new getMatchCompetiveResultList());
      processMap.put("getMatchCompetiveResult", new getMatchCompetiveResult());
      processMap.put("getMatchCompetive", new getMatchCompetive());
      processMap.put("getMatchCompetiveByLotteryId", new getMatchCompetiveByLotteryId());
      processMap.put("createIssueSport", new createIssueSport());
      processMap.put("findIssueSport", new findIssueSport());
      processMap.put("getMatchCompetiveListByMatchType", new getMatchCompetiveListByMatchType());
      processMap.put("createMatchCompetiveList", new createMatchCompetiveList());
      processMap.put("createMatchCompetiveResultList", new createMatchCompetiveResultList());
      processMap.put("getMatchCompetiveList", new getMatchCompetiveList());
      processMap.put("updateMatchCompetive", new updateMatchCompetive());
      processMap.put("deleteMatchCompetive", new deleteMatchCompetive());
      processMap.put("createMatchFootball", new createMatchFootball());
      processMap.put("getMatchFootballList", new getMatchFootballList());
      processMap.put("getMatchFootballDate", new getMatchFootballDate());
      processMap.put("getMatchFootball", new getMatchFootball());
      processMap.put("updateMatchFootball", new updateMatchFootball());
      processMap.put("saveOrUpdateMatchCompetiveResult", new saveOrUpdateMatchCompetiveResult());
      return processMap;
    }

    public static class addOrUpdateLotteryItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrUpdateLotteryItem_args> {
      public addOrUpdateLotteryItem() {
        super("addOrUpdateLotteryItem");
      }

      public addOrUpdateLotteryItem_args getEmptyArgsInstance() {
        return new addOrUpdateLotteryItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrUpdateLotteryItem_result getResult(I iface, addOrUpdateLotteryItem_args args) throws org.apache.thrift.TException {
        addOrUpdateLotteryItem_result result = new addOrUpdateLotteryItem_result();
        result.success = iface.addOrUpdateLotteryItem(args.lotteryItem);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLotteryItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryItemList_args> {
      public getLotteryItemList() {
        super("getLotteryItemList");
      }

      public getLotteryItemList_args getEmptyArgsInstance() {
        return new getLotteryItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryItemList_result getResult(I iface, getLotteryItemList_args args) throws org.apache.thrift.TException {
        getLotteryItemList_result result = new getLotteryItemList_result();
        result.success = iface.getLotteryItemList();
        return result;
      }
    }

    public static class findLotteryItemByLotteryId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLotteryItemByLotteryId_args> {
      public findLotteryItemByLotteryId() {
        super("findLotteryItemByLotteryId");
      }

      public findLotteryItemByLotteryId_args getEmptyArgsInstance() {
        return new findLotteryItemByLotteryId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findLotteryItemByLotteryId_result getResult(I iface, findLotteryItemByLotteryId_args args) throws org.apache.thrift.TException {
        findLotteryItemByLotteryId_result result = new findLotteryItemByLotteryId_result();
        result.success = iface.findLotteryItemByLotteryId(args.lotteryId);
        return result;
      }
    }

    public static class createLotteryIssue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLotteryIssue_args> {
      public createLotteryIssue() {
        super("createLotteryIssue");
      }

      public createLotteryIssue_args getEmptyArgsInstance() {
        return new createLotteryIssue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLotteryIssue_result getResult(I iface, createLotteryIssue_args args) throws org.apache.thrift.TException {
        createLotteryIssue_result result = new createLotteryIssue_result();
        result.success = iface.createLotteryIssue(args.beginTime, args.endTime, args.lotteryId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLotteryIssueList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryIssueList_args> {
      public getLotteryIssueList() {
        super("getLotteryIssueList");
      }

      public getLotteryIssueList_args getEmptyArgsInstance() {
        return new getLotteryIssueList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryIssueList_result getResult(I iface, getLotteryIssueList_args args) throws org.apache.thrift.TException {
        getLotteryIssueList_result result = new getLotteryIssueList_result();
        result.success = iface.getLotteryIssueList(args.lotteryIssue, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class findLotteryIssue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLotteryIssue_args> {
      public findLotteryIssue() {
        super("findLotteryIssue");
      }

      public findLotteryIssue_args getEmptyArgsInstance() {
        return new findLotteryIssue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findLotteryIssue_result getResult(I iface, findLotteryIssue_args args) throws org.apache.thrift.TException {
        findLotteryIssue_result result = new findLotteryIssue_result();
        result.success = iface.findLotteryIssue(args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getCreateMinTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCreateMinTime_args> {
      public getCreateMinTime() {
        super("getCreateMinTime");
      }

      public getCreateMinTime_args getEmptyArgsInstance() {
        return new getCreateMinTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCreateMinTime_result getResult(I iface, getCreateMinTime_args args) throws org.apache.thrift.TException {
        getCreateMinTime_result result = new getCreateMinTime_result();
        result.success = iface.getCreateMinTime(args.lotteryId);
        return result;
      }
    }

    public static class updateLotteryIssueState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLotteryIssueState_args> {
      public updateLotteryIssueState() {
        super("updateLotteryIssueState");
      }

      public updateLotteryIssueState_args getEmptyArgsInstance() {
        return new updateLotteryIssueState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLotteryIssueState_result getResult(I iface, updateLotteryIssueState_args args) throws org.apache.thrift.TException {
        updateLotteryIssueState_result result = new updateLotteryIssueState_result();
        result.success = iface.updateLotteryIssueState(args.issueId, args.state);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findLotteryDrawResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLotteryDrawResult_args> {
      public findLotteryDrawResult() {
        super("findLotteryDrawResult");
      }

      public findLotteryDrawResult_args getEmptyArgsInstance() {
        return new findLotteryDrawResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findLotteryDrawResult_result getResult(I iface, findLotteryDrawResult_args args) throws org.apache.thrift.TException {
        findLotteryDrawResult_result result = new findLotteryDrawResult_result();
        result.success = iface.findLotteryDrawResult(args.lotteryId, args.issueNo);
        return result;
      }
    }

    public static class getLotteryDrawResultList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryDrawResultList_args> {
      public getLotteryDrawResultList() {
        super("getLotteryDrawResultList");
      }

      public getLotteryDrawResultList_args getEmptyArgsInstance() {
        return new getLotteryDrawResultList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryDrawResultList_result getResult(I iface, getLotteryDrawResultList_args args) throws org.apache.thrift.TException {
        getLotteryDrawResultList_result result = new getLotteryDrawResultList_result();
        result.success = iface.getLotteryDrawResultList(args.lotteryDrawResult, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class getLotteryIssueByParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLotteryIssueByParam_args> {
      public getLotteryIssueByParam() {
        super("getLotteryIssueByParam");
      }

      public getLotteryIssueByParam_args getEmptyArgsInstance() {
        return new getLotteryIssueByParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLotteryIssueByParam_result getResult(I iface, getLotteryIssueByParam_args args) throws org.apache.thrift.TException {
        getLotteryIssueByParam_result result = new getLotteryIssueByParam_result();
        result.success = iface.getLotteryIssueByParam(args.lotteryIssue, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class updateLotteryIssueStateByParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLotteryIssueStateByParam_args> {
      public updateLotteryIssueStateByParam() {
        super("updateLotteryIssueStateByParam");
      }

      public updateLotteryIssueStateByParam_args getEmptyArgsInstance() {
        return new updateLotteryIssueStateByParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLotteryIssueStateByParam_result getResult(I iface, updateLotteryIssueStateByParam_args args) throws org.apache.thrift.TException {
        updateLotteryIssueStateByParam_result result = new updateLotteryIssueStateByParam_result();
        result.success = iface.updateLotteryIssueStateByParam(args.lotteryId, args.issueNo, args.state);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteIssueNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteIssueNo_args> {
      public deleteIssueNo() {
        super("deleteIssueNo");
      }

      public deleteIssueNo_args getEmptyArgsInstance() {
        return new deleteIssueNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteIssueNo_result getResult(I iface, deleteIssueNo_args args) throws org.apache.thrift.TException {
        deleteIssueNo_result result = new deleteIssueNo_result();
        result.success = iface.deleteIssueNo(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateLotteryIssue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLotteryIssue_args> {
      public updateLotteryIssue() {
        super("updateLotteryIssue");
      }

      public updateLotteryIssue_args getEmptyArgsInstance() {
        return new updateLotteryIssue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLotteryIssue_result getResult(I iface, updateLotteryIssue_args args) throws org.apache.thrift.TException {
        updateLotteryIssue_result result = new updateLotteryIssue_result();
        result.success = iface.updateLotteryIssue(args.lotteryIssue);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createLotteryDrawResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLotteryDrawResult_args> {
      public createLotteryDrawResult() {
        super("createLotteryDrawResult");
      }

      public createLotteryDrawResult_args getEmptyArgsInstance() {
        return new createLotteryDrawResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLotteryDrawResult_result getResult(I iface, createLotteryDrawResult_args args) throws org.apache.thrift.TException {
        createLotteryDrawResult_result result = new createLotteryDrawResult_result();
        result.success = iface.createLotteryDrawResult(args.lotteryDrawResult);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createLZCLotteryIssue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLZCLotteryIssue_args> {
      public createLZCLotteryIssue() {
        super("createLZCLotteryIssue");
      }

      public createLZCLotteryIssue_args getEmptyArgsInstance() {
        return new createLZCLotteryIssue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLZCLotteryIssue_result getResult(I iface, createLZCLotteryIssue_args args) throws org.apache.thrift.TException {
        createLZCLotteryIssue_result result = new createLZCLotteryIssue_result();
        result.success = iface.createLZCLotteryIssue(args.lotteryIssue);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getMatchCompetiveResultList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchCompetiveResultList_args> {
      public getMatchCompetiveResultList() {
        super("getMatchCompetiveResultList");
      }

      public getMatchCompetiveResultList_args getEmptyArgsInstance() {
        return new getMatchCompetiveResultList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchCompetiveResultList_result getResult(I iface, getMatchCompetiveResultList_args args) throws org.apache.thrift.TException {
        getMatchCompetiveResultList_result result = new getMatchCompetiveResultList_result();
        result.success = iface.getMatchCompetiveResultList(args.wareIssue, args.transferId);
        return result;
      }
    }

    public static class getMatchCompetiveResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchCompetiveResult_args> {
      public getMatchCompetiveResult() {
        super("getMatchCompetiveResult");
      }

      public getMatchCompetiveResult_args getEmptyArgsInstance() {
        return new getMatchCompetiveResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchCompetiveResult_result getResult(I iface, getMatchCompetiveResult_args args) throws org.apache.thrift.TException {
        getMatchCompetiveResult_result result = new getMatchCompetiveResult_result();
        result.success = iface.getMatchCompetiveResult(args.wareIssue, args.lotteryId, args.transferId);
        return result;
      }
    }

    public static class getMatchCompetive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchCompetive_args> {
      public getMatchCompetive() {
        super("getMatchCompetive");
      }

      public getMatchCompetive_args getEmptyArgsInstance() {
        return new getMatchCompetive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchCompetive_result getResult(I iface, getMatchCompetive_args args) throws org.apache.thrift.TException {
        getMatchCompetive_result result = new getMatchCompetive_result();
        result.success = iface.getMatchCompetive(args.wareIssue, args.transferId);
        return result;
      }
    }

    public static class getMatchCompetiveByLotteryId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchCompetiveByLotteryId_args> {
      public getMatchCompetiveByLotteryId() {
        super("getMatchCompetiveByLotteryId");
      }

      public getMatchCompetiveByLotteryId_args getEmptyArgsInstance() {
        return new getMatchCompetiveByLotteryId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchCompetiveByLotteryId_result getResult(I iface, getMatchCompetiveByLotteryId_args args) throws org.apache.thrift.TException {
        getMatchCompetiveByLotteryId_result result = new getMatchCompetiveByLotteryId_result();
        result.success = iface.getMatchCompetiveByLotteryId(args.wareIssue, args.transferId, args.lotteryId);
        return result;
      }
    }

    public static class createIssueSport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createIssueSport_args> {
      public createIssueSport() {
        super("createIssueSport");
      }

      public createIssueSport_args getEmptyArgsInstance() {
        return new createIssueSport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createIssueSport_result getResult(I iface, createIssueSport_args args) throws org.apache.thrift.TException {
        createIssueSport_result result = new createIssueSport_result();
        result.success = iface.createIssueSport(args.issueSportList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findIssueSport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findIssueSport_args> {
      public findIssueSport() {
        super("findIssueSport");
      }

      public findIssueSport_args getEmptyArgsInstance() {
        return new findIssueSport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findIssueSport_result getResult(I iface, findIssueSport_args args) throws org.apache.thrift.TException {
        findIssueSport_result result = new findIssueSport_result();
        result.success = iface.findIssueSport(args.lotteryId, args.wareIssue);
        return result;
      }
    }

    public static class getMatchCompetiveListByMatchType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchCompetiveListByMatchType_args> {
      public getMatchCompetiveListByMatchType() {
        super("getMatchCompetiveListByMatchType");
      }

      public getMatchCompetiveListByMatchType_args getEmptyArgsInstance() {
        return new getMatchCompetiveListByMatchType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchCompetiveListByMatchType_result getResult(I iface, getMatchCompetiveListByMatchType_args args) throws org.apache.thrift.TException {
        getMatchCompetiveListByMatchType_result result = new getMatchCompetiveListByMatchType_result();
        result.success = iface.getMatchCompetiveListByMatchType(args.lotteryId);
        return result;
      }
    }

    public static class createMatchCompetiveList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMatchCompetiveList_args> {
      public createMatchCompetiveList() {
        super("createMatchCompetiveList");
      }

      public createMatchCompetiveList_args getEmptyArgsInstance() {
        return new createMatchCompetiveList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMatchCompetiveList_result getResult(I iface, createMatchCompetiveList_args args) throws org.apache.thrift.TException {
        createMatchCompetiveList_result result = new createMatchCompetiveList_result();
        result.success = iface.createMatchCompetiveList(args.matchCompetiveList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createMatchCompetiveResultList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMatchCompetiveResultList_args> {
      public createMatchCompetiveResultList() {
        super("createMatchCompetiveResultList");
      }

      public createMatchCompetiveResultList_args getEmptyArgsInstance() {
        return new createMatchCompetiveResultList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMatchCompetiveResultList_result getResult(I iface, createMatchCompetiveResultList_args args) throws org.apache.thrift.TException {
        createMatchCompetiveResultList_result result = new createMatchCompetiveResultList_result();
        result.success = iface.createMatchCompetiveResultList(args.matchCompetiveList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getMatchCompetiveList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchCompetiveList_args> {
      public getMatchCompetiveList() {
        super("getMatchCompetiveList");
      }

      public getMatchCompetiveList_args getEmptyArgsInstance() {
        return new getMatchCompetiveList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchCompetiveList_result getResult(I iface, getMatchCompetiveList_args args) throws org.apache.thrift.TException {
        getMatchCompetiveList_result result = new getMatchCompetiveList_result();
        result.success = iface.getMatchCompetiveList(args.matchCompetive, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class updateMatchCompetive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMatchCompetive_args> {
      public updateMatchCompetive() {
        super("updateMatchCompetive");
      }

      public updateMatchCompetive_args getEmptyArgsInstance() {
        return new updateMatchCompetive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMatchCompetive_result getResult(I iface, updateMatchCompetive_args args) throws org.apache.thrift.TException {
        updateMatchCompetive_result result = new updateMatchCompetive_result();
        result.success = iface.updateMatchCompetive(args.matchCompetive);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteMatchCompetive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMatchCompetive_args> {
      public deleteMatchCompetive() {
        super("deleteMatchCompetive");
      }

      public deleteMatchCompetive_args getEmptyArgsInstance() {
        return new deleteMatchCompetive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMatchCompetive_result getResult(I iface, deleteMatchCompetive_args args) throws org.apache.thrift.TException {
        deleteMatchCompetive_result result = new deleteMatchCompetive_result();
        result.success = iface.deleteMatchCompetive(args.wareIssue, args.transferId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createMatchFootball<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMatchFootball_args> {
      public createMatchFootball() {
        super("createMatchFootball");
      }

      public createMatchFootball_args getEmptyArgsInstance() {
        return new createMatchFootball_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMatchFootball_result getResult(I iface, createMatchFootball_args args) throws org.apache.thrift.TException {
        createMatchFootball_result result = new createMatchFootball_result();
        result.success = iface.createMatchFootball(args.matchFootballList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getMatchFootballList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchFootballList_args> {
      public getMatchFootballList() {
        super("getMatchFootballList");
      }

      public getMatchFootballList_args getEmptyArgsInstance() {
        return new getMatchFootballList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchFootballList_result getResult(I iface, getMatchFootballList_args args) throws org.apache.thrift.TException {
        getMatchFootballList_result result = new getMatchFootballList_result();
        result.success = iface.getMatchFootballList(args.lotteryId, args.wareIssue);
        return result;
      }
    }

    public static class getMatchFootballDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchFootballDate_args> {
      public getMatchFootballDate() {
        super("getMatchFootballDate");
      }

      public getMatchFootballDate_args getEmptyArgsInstance() {
        return new getMatchFootballDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchFootballDate_result getResult(I iface, getMatchFootballDate_args args) throws org.apache.thrift.TException {
        getMatchFootballDate_result result = new getMatchFootballDate_result();
        result.success = iface.getMatchFootballDate(args.matchFootball, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class getMatchFootball<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchFootball_args> {
      public getMatchFootball() {
        super("getMatchFootball");
      }

      public getMatchFootball_args getEmptyArgsInstance() {
        return new getMatchFootball_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchFootball_result getResult(I iface, getMatchFootball_args args) throws org.apache.thrift.TException {
        getMatchFootball_result result = new getMatchFootball_result();
        result.success = iface.getMatchFootball(args.lotteryId, args.wareIssue, args.matchNo);
        return result;
      }
    }

    public static class updateMatchFootball<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMatchFootball_args> {
      public updateMatchFootball() {
        super("updateMatchFootball");
      }

      public updateMatchFootball_args getEmptyArgsInstance() {
        return new updateMatchFootball_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMatchFootball_result getResult(I iface, updateMatchFootball_args args) throws org.apache.thrift.TException {
        updateMatchFootball_result result = new updateMatchFootball_result();
        result.success = iface.updateMatchFootball(args.matchFootball);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveOrUpdateMatchCompetiveResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOrUpdateMatchCompetiveResult_args> {
      public saveOrUpdateMatchCompetiveResult() {
        super("saveOrUpdateMatchCompetiveResult");
      }

      public saveOrUpdateMatchCompetiveResult_args getEmptyArgsInstance() {
        return new saveOrUpdateMatchCompetiveResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOrUpdateMatchCompetiveResult_result getResult(I iface, saveOrUpdateMatchCompetiveResult_args args) throws org.apache.thrift.TException {
        saveOrUpdateMatchCompetiveResult_result result = new saveOrUpdateMatchCompetiveResult_result();
        result.success = iface.saveOrUpdateMatchCompetiveResult(args.matchCompetiveResult);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOrUpdateLotteryItem", new addOrUpdateLotteryItem());
      processMap.put("getLotteryItemList", new getLotteryItemList());
      processMap.put("findLotteryItemByLotteryId", new findLotteryItemByLotteryId());
      processMap.put("createLotteryIssue", new createLotteryIssue());
      processMap.put("getLotteryIssueList", new getLotteryIssueList());
      processMap.put("findLotteryIssue", new findLotteryIssue());
      processMap.put("getCreateMinTime", new getCreateMinTime());
      processMap.put("updateLotteryIssueState", new updateLotteryIssueState());
      processMap.put("findLotteryDrawResult", new findLotteryDrawResult());
      processMap.put("getLotteryDrawResultList", new getLotteryDrawResultList());
      processMap.put("getLotteryIssueByParam", new getLotteryIssueByParam());
      processMap.put("updateLotteryIssueStateByParam", new updateLotteryIssueStateByParam());
      processMap.put("deleteIssueNo", new deleteIssueNo());
      processMap.put("updateLotteryIssue", new updateLotteryIssue());
      processMap.put("createLotteryDrawResult", new createLotteryDrawResult());
      processMap.put("createLZCLotteryIssue", new createLZCLotteryIssue());
      processMap.put("getMatchCompetiveResultList", new getMatchCompetiveResultList());
      processMap.put("getMatchCompetiveResult", new getMatchCompetiveResult());
      processMap.put("getMatchCompetive", new getMatchCompetive());
      processMap.put("getMatchCompetiveByLotteryId", new getMatchCompetiveByLotteryId());
      processMap.put("createIssueSport", new createIssueSport());
      processMap.put("findIssueSport", new findIssueSport());
      processMap.put("getMatchCompetiveListByMatchType", new getMatchCompetiveListByMatchType());
      processMap.put("createMatchCompetiveList", new createMatchCompetiveList());
      processMap.put("createMatchCompetiveResultList", new createMatchCompetiveResultList());
      processMap.put("getMatchCompetiveList", new getMatchCompetiveList());
      processMap.put("updateMatchCompetive", new updateMatchCompetive());
      processMap.put("deleteMatchCompetive", new deleteMatchCompetive());
      processMap.put("createMatchFootball", new createMatchFootball());
      processMap.put("getMatchFootballList", new getMatchFootballList());
      processMap.put("getMatchFootballDate", new getMatchFootballDate());
      processMap.put("getMatchFootball", new getMatchFootball());
      processMap.put("updateMatchFootball", new updateMatchFootball());
      processMap.put("saveOrUpdateMatchCompetiveResult", new saveOrUpdateMatchCompetiveResult());
      return processMap;
    }

    public static class addOrUpdateLotteryItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrUpdateLotteryItem_args, Integer> {
      public addOrUpdateLotteryItem() {
        super("addOrUpdateLotteryItem");
      }

      public addOrUpdateLotteryItem_args getEmptyArgsInstance() {
        return new addOrUpdateLotteryItem_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addOrUpdateLotteryItem_result result = new addOrUpdateLotteryItem_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrUpdateLotteryItem_result result = new addOrUpdateLotteryItem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrUpdateLotteryItem_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addOrUpdateLotteryItem(args.lotteryItem,resultHandler);
      }
    }

    public static class getLotteryItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryItemList_args, List<LotteryItem>> {
      public getLotteryItemList() {
        super("getLotteryItemList");
      }

      public getLotteryItemList_args getEmptyArgsInstance() {
        return new getLotteryItemList_args();
      }

      public AsyncMethodCallback<List<LotteryItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LotteryItem>>() { 
          public void onComplete(List<LotteryItem> o) {
            getLotteryItemList_result result = new getLotteryItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryItemList_result result = new getLotteryItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryItemList_args args, org.apache.thrift.async.AsyncMethodCallback<List<LotteryItem>> resultHandler) throws TException {
        iface.getLotteryItemList(resultHandler);
      }
    }

    public static class findLotteryItemByLotteryId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLotteryItemByLotteryId_args, LotteryItem> {
      public findLotteryItemByLotteryId() {
        super("findLotteryItemByLotteryId");
      }

      public findLotteryItemByLotteryId_args getEmptyArgsInstance() {
        return new findLotteryItemByLotteryId_args();
      }

      public AsyncMethodCallback<LotteryItem> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LotteryItem>() { 
          public void onComplete(LotteryItem o) {
            findLotteryItemByLotteryId_result result = new findLotteryItemByLotteryId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findLotteryItemByLotteryId_result result = new findLotteryItemByLotteryId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLotteryItemByLotteryId_args args, org.apache.thrift.async.AsyncMethodCallback<LotteryItem> resultHandler) throws TException {
        iface.findLotteryItemByLotteryId(args.lotteryId,resultHandler);
      }
    }

    public static class createLotteryIssue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLotteryIssue_args, Integer> {
      public createLotteryIssue() {
        super("createLotteryIssue");
      }

      public createLotteryIssue_args getEmptyArgsInstance() {
        return new createLotteryIssue_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createLotteryIssue_result result = new createLotteryIssue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLotteryIssue_result result = new createLotteryIssue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLotteryIssue_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createLotteryIssue(args.beginTime, args.endTime, args.lotteryId,resultHandler);
      }
    }

    public static class getLotteryIssueList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryIssueList_args, ReturnData> {
      public getLotteryIssueList() {
        super("getLotteryIssueList");
      }

      public getLotteryIssueList_args getEmptyArgsInstance() {
        return new getLotteryIssueList_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getLotteryIssueList_result result = new getLotteryIssueList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryIssueList_result result = new getLotteryIssueList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryIssueList_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getLotteryIssueList(args.lotteryIssue, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class findLotteryIssue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLotteryIssue_args, LotteryIssue> {
      public findLotteryIssue() {
        super("findLotteryIssue");
      }

      public findLotteryIssue_args getEmptyArgsInstance() {
        return new findLotteryIssue_args();
      }

      public AsyncMethodCallback<LotteryIssue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LotteryIssue>() { 
          public void onComplete(LotteryIssue o) {
            findLotteryIssue_result result = new findLotteryIssue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findLotteryIssue_result result = new findLotteryIssue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLotteryIssue_args args, org.apache.thrift.async.AsyncMethodCallback<LotteryIssue> resultHandler) throws TException {
        iface.findLotteryIssue(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getCreateMinTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCreateMinTime_args, String> {
      public getCreateMinTime() {
        super("getCreateMinTime");
      }

      public getCreateMinTime_args getEmptyArgsInstance() {
        return new getCreateMinTime_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getCreateMinTime_result result = new getCreateMinTime_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCreateMinTime_result result = new getCreateMinTime_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCreateMinTime_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getCreateMinTime(args.lotteryId,resultHandler);
      }
    }

    public static class updateLotteryIssueState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLotteryIssueState_args, Integer> {
      public updateLotteryIssueState() {
        super("updateLotteryIssueState");
      }

      public updateLotteryIssueState_args getEmptyArgsInstance() {
        return new updateLotteryIssueState_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateLotteryIssueState_result result = new updateLotteryIssueState_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLotteryIssueState_result result = new updateLotteryIssueState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLotteryIssueState_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateLotteryIssueState(args.issueId, args.state,resultHandler);
      }
    }

    public static class findLotteryDrawResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLotteryDrawResult_args, LotteryDrawResult> {
      public findLotteryDrawResult() {
        super("findLotteryDrawResult");
      }

      public findLotteryDrawResult_args getEmptyArgsInstance() {
        return new findLotteryDrawResult_args();
      }

      public AsyncMethodCallback<LotteryDrawResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LotteryDrawResult>() { 
          public void onComplete(LotteryDrawResult o) {
            findLotteryDrawResult_result result = new findLotteryDrawResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findLotteryDrawResult_result result = new findLotteryDrawResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLotteryDrawResult_args args, org.apache.thrift.async.AsyncMethodCallback<LotteryDrawResult> resultHandler) throws TException {
        iface.findLotteryDrawResult(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getLotteryDrawResultList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryDrawResultList_args, DrawResultData> {
      public getLotteryDrawResultList() {
        super("getLotteryDrawResultList");
      }

      public getLotteryDrawResultList_args getEmptyArgsInstance() {
        return new getLotteryDrawResultList_args();
      }

      public AsyncMethodCallback<DrawResultData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DrawResultData>() { 
          public void onComplete(DrawResultData o) {
            getLotteryDrawResultList_result result = new getLotteryDrawResultList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryDrawResultList_result result = new getLotteryDrawResultList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryDrawResultList_args args, org.apache.thrift.async.AsyncMethodCallback<DrawResultData> resultHandler) throws TException {
        iface.getLotteryDrawResultList(args.lotteryDrawResult, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class getLotteryIssueByParam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLotteryIssueByParam_args, ReturnData> {
      public getLotteryIssueByParam() {
        super("getLotteryIssueByParam");
      }

      public getLotteryIssueByParam_args getEmptyArgsInstance() {
        return new getLotteryIssueByParam_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getLotteryIssueByParam_result result = new getLotteryIssueByParam_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLotteryIssueByParam_result result = new getLotteryIssueByParam_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLotteryIssueByParam_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getLotteryIssueByParam(args.lotteryIssue, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class updateLotteryIssueStateByParam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLotteryIssueStateByParam_args, Integer> {
      public updateLotteryIssueStateByParam() {
        super("updateLotteryIssueStateByParam");
      }

      public updateLotteryIssueStateByParam_args getEmptyArgsInstance() {
        return new updateLotteryIssueStateByParam_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateLotteryIssueStateByParam_result result = new updateLotteryIssueStateByParam_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLotteryIssueStateByParam_result result = new updateLotteryIssueStateByParam_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLotteryIssueStateByParam_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateLotteryIssueStateByParam(args.lotteryId, args.issueNo, args.state,resultHandler);
      }
    }

    public static class deleteIssueNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteIssueNo_args, Integer> {
      public deleteIssueNo() {
        super("deleteIssueNo");
      }

      public deleteIssueNo_args getEmptyArgsInstance() {
        return new deleteIssueNo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteIssueNo_result result = new deleteIssueNo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteIssueNo_result result = new deleteIssueNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteIssueNo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteIssueNo(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class updateLotteryIssue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLotteryIssue_args, Integer> {
      public updateLotteryIssue() {
        super("updateLotteryIssue");
      }

      public updateLotteryIssue_args getEmptyArgsInstance() {
        return new updateLotteryIssue_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateLotteryIssue_result result = new updateLotteryIssue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLotteryIssue_result result = new updateLotteryIssue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLotteryIssue_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateLotteryIssue(args.lotteryIssue,resultHandler);
      }
    }

    public static class createLotteryDrawResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLotteryDrawResult_args, Integer> {
      public createLotteryDrawResult() {
        super("createLotteryDrawResult");
      }

      public createLotteryDrawResult_args getEmptyArgsInstance() {
        return new createLotteryDrawResult_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createLotteryDrawResult_result result = new createLotteryDrawResult_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLotteryDrawResult_result result = new createLotteryDrawResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLotteryDrawResult_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createLotteryDrawResult(args.lotteryDrawResult,resultHandler);
      }
    }

    public static class createLZCLotteryIssue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLZCLotteryIssue_args, Integer> {
      public createLZCLotteryIssue() {
        super("createLZCLotteryIssue");
      }

      public createLZCLotteryIssue_args getEmptyArgsInstance() {
        return new createLZCLotteryIssue_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createLZCLotteryIssue_result result = new createLZCLotteryIssue_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLZCLotteryIssue_result result = new createLZCLotteryIssue_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLZCLotteryIssue_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createLZCLotteryIssue(args.lotteryIssue,resultHandler);
      }
    }

    public static class getMatchCompetiveResultList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchCompetiveResultList_args, MatchCompetive> {
      public getMatchCompetiveResultList() {
        super("getMatchCompetiveResultList");
      }

      public getMatchCompetiveResultList_args getEmptyArgsInstance() {
        return new getMatchCompetiveResultList_args();
      }

      public AsyncMethodCallback<MatchCompetive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchCompetive>() { 
          public void onComplete(MatchCompetive o) {
            getMatchCompetiveResultList_result result = new getMatchCompetiveResultList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchCompetiveResultList_result result = new getMatchCompetiveResultList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchCompetiveResultList_args args, org.apache.thrift.async.AsyncMethodCallback<MatchCompetive> resultHandler) throws TException {
        iface.getMatchCompetiveResultList(args.wareIssue, args.transferId,resultHandler);
      }
    }

    public static class getMatchCompetiveResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchCompetiveResult_args, MatchCompetive> {
      public getMatchCompetiveResult() {
        super("getMatchCompetiveResult");
      }

      public getMatchCompetiveResult_args getEmptyArgsInstance() {
        return new getMatchCompetiveResult_args();
      }

      public AsyncMethodCallback<MatchCompetive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchCompetive>() { 
          public void onComplete(MatchCompetive o) {
            getMatchCompetiveResult_result result = new getMatchCompetiveResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchCompetiveResult_result result = new getMatchCompetiveResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchCompetiveResult_args args, org.apache.thrift.async.AsyncMethodCallback<MatchCompetive> resultHandler) throws TException {
        iface.getMatchCompetiveResult(args.wareIssue, args.lotteryId, args.transferId,resultHandler);
      }
    }

    public static class getMatchCompetive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchCompetive_args, MatchCompetive> {
      public getMatchCompetive() {
        super("getMatchCompetive");
      }

      public getMatchCompetive_args getEmptyArgsInstance() {
        return new getMatchCompetive_args();
      }

      public AsyncMethodCallback<MatchCompetive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchCompetive>() { 
          public void onComplete(MatchCompetive o) {
            getMatchCompetive_result result = new getMatchCompetive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchCompetive_result result = new getMatchCompetive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchCompetive_args args, org.apache.thrift.async.AsyncMethodCallback<MatchCompetive> resultHandler) throws TException {
        iface.getMatchCompetive(args.wareIssue, args.transferId,resultHandler);
      }
    }

    public static class getMatchCompetiveByLotteryId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchCompetiveByLotteryId_args, MatchCompetive> {
      public getMatchCompetiveByLotteryId() {
        super("getMatchCompetiveByLotteryId");
      }

      public getMatchCompetiveByLotteryId_args getEmptyArgsInstance() {
        return new getMatchCompetiveByLotteryId_args();
      }

      public AsyncMethodCallback<MatchCompetive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchCompetive>() { 
          public void onComplete(MatchCompetive o) {
            getMatchCompetiveByLotteryId_result result = new getMatchCompetiveByLotteryId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchCompetiveByLotteryId_result result = new getMatchCompetiveByLotteryId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchCompetiveByLotteryId_args args, org.apache.thrift.async.AsyncMethodCallback<MatchCompetive> resultHandler) throws TException {
        iface.getMatchCompetiveByLotteryId(args.wareIssue, args.transferId, args.lotteryId,resultHandler);
      }
    }

    public static class createIssueSport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createIssueSport_args, Integer> {
      public createIssueSport() {
        super("createIssueSport");
      }

      public createIssueSport_args getEmptyArgsInstance() {
        return new createIssueSport_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createIssueSport_result result = new createIssueSport_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createIssueSport_result result = new createIssueSport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createIssueSport_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createIssueSport(args.issueSportList,resultHandler);
      }
    }

    public static class findIssueSport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findIssueSport_args, IssueSport> {
      public findIssueSport() {
        super("findIssueSport");
      }

      public findIssueSport_args getEmptyArgsInstance() {
        return new findIssueSport_args();
      }

      public AsyncMethodCallback<IssueSport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IssueSport>() { 
          public void onComplete(IssueSport o) {
            findIssueSport_result result = new findIssueSport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findIssueSport_result result = new findIssueSport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findIssueSport_args args, org.apache.thrift.async.AsyncMethodCallback<IssueSport> resultHandler) throws TException {
        iface.findIssueSport(args.lotteryId, args.wareIssue,resultHandler);
      }
    }

    public static class getMatchCompetiveListByMatchType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchCompetiveListByMatchType_args, List<MatchCompetive>> {
      public getMatchCompetiveListByMatchType() {
        super("getMatchCompetiveListByMatchType");
      }

      public getMatchCompetiveListByMatchType_args getEmptyArgsInstance() {
        return new getMatchCompetiveListByMatchType_args();
      }

      public AsyncMethodCallback<List<MatchCompetive>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MatchCompetive>>() { 
          public void onComplete(List<MatchCompetive> o) {
            getMatchCompetiveListByMatchType_result result = new getMatchCompetiveListByMatchType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchCompetiveListByMatchType_result result = new getMatchCompetiveListByMatchType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchCompetiveListByMatchType_args args, org.apache.thrift.async.AsyncMethodCallback<List<MatchCompetive>> resultHandler) throws TException {
        iface.getMatchCompetiveListByMatchType(args.lotteryId,resultHandler);
      }
    }

    public static class createMatchCompetiveList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMatchCompetiveList_args, Boolean> {
      public createMatchCompetiveList() {
        super("createMatchCompetiveList");
      }

      public createMatchCompetiveList_args getEmptyArgsInstance() {
        return new createMatchCompetiveList_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createMatchCompetiveList_result result = new createMatchCompetiveList_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createMatchCompetiveList_result result = new createMatchCompetiveList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMatchCompetiveList_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createMatchCompetiveList(args.matchCompetiveList,resultHandler);
      }
    }

    public static class createMatchCompetiveResultList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMatchCompetiveResultList_args, Boolean> {
      public createMatchCompetiveResultList() {
        super("createMatchCompetiveResultList");
      }

      public createMatchCompetiveResultList_args getEmptyArgsInstance() {
        return new createMatchCompetiveResultList_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createMatchCompetiveResultList_result result = new createMatchCompetiveResultList_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createMatchCompetiveResultList_result result = new createMatchCompetiveResultList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMatchCompetiveResultList_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createMatchCompetiveResultList(args.matchCompetiveList,resultHandler);
      }
    }

    public static class getMatchCompetiveList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchCompetiveList_args, MatchCompetiveData> {
      public getMatchCompetiveList() {
        super("getMatchCompetiveList");
      }

      public getMatchCompetiveList_args getEmptyArgsInstance() {
        return new getMatchCompetiveList_args();
      }

      public AsyncMethodCallback<MatchCompetiveData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchCompetiveData>() { 
          public void onComplete(MatchCompetiveData o) {
            getMatchCompetiveList_result result = new getMatchCompetiveList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchCompetiveList_result result = new getMatchCompetiveList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchCompetiveList_args args, org.apache.thrift.async.AsyncMethodCallback<MatchCompetiveData> resultHandler) throws TException {
        iface.getMatchCompetiveList(args.matchCompetive, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class updateMatchCompetive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMatchCompetive_args, Integer> {
      public updateMatchCompetive() {
        super("updateMatchCompetive");
      }

      public updateMatchCompetive_args getEmptyArgsInstance() {
        return new updateMatchCompetive_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateMatchCompetive_result result = new updateMatchCompetive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMatchCompetive_result result = new updateMatchCompetive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMatchCompetive_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateMatchCompetive(args.matchCompetive,resultHandler);
      }
    }

    public static class deleteMatchCompetive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMatchCompetive_args, Integer> {
      public deleteMatchCompetive() {
        super("deleteMatchCompetive");
      }

      public deleteMatchCompetive_args getEmptyArgsInstance() {
        return new deleteMatchCompetive_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteMatchCompetive_result result = new deleteMatchCompetive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMatchCompetive_result result = new deleteMatchCompetive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMatchCompetive_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteMatchCompetive(args.wareIssue, args.transferId,resultHandler);
      }
    }

    public static class createMatchFootball<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMatchFootball_args, Boolean> {
      public createMatchFootball() {
        super("createMatchFootball");
      }

      public createMatchFootball_args getEmptyArgsInstance() {
        return new createMatchFootball_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createMatchFootball_result result = new createMatchFootball_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createMatchFootball_result result = new createMatchFootball_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMatchFootball_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createMatchFootball(args.matchFootballList,resultHandler);
      }
    }

    public static class getMatchFootballList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchFootballList_args, List<MatchFootball>> {
      public getMatchFootballList() {
        super("getMatchFootballList");
      }

      public getMatchFootballList_args getEmptyArgsInstance() {
        return new getMatchFootballList_args();
      }

      public AsyncMethodCallback<List<MatchFootball>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MatchFootball>>() { 
          public void onComplete(List<MatchFootball> o) {
            getMatchFootballList_result result = new getMatchFootballList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchFootballList_result result = new getMatchFootballList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchFootballList_args args, org.apache.thrift.async.AsyncMethodCallback<List<MatchFootball>> resultHandler) throws TException {
        iface.getMatchFootballList(args.lotteryId, args.wareIssue,resultHandler);
      }
    }

    public static class getMatchFootballDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchFootballDate_args, MatchFootballDate> {
      public getMatchFootballDate() {
        super("getMatchFootballDate");
      }

      public getMatchFootballDate_args getEmptyArgsInstance() {
        return new getMatchFootballDate_args();
      }

      public AsyncMethodCallback<MatchFootballDate> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchFootballDate>() { 
          public void onComplete(MatchFootballDate o) {
            getMatchFootballDate_result result = new getMatchFootballDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchFootballDate_result result = new getMatchFootballDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchFootballDate_args args, org.apache.thrift.async.AsyncMethodCallback<MatchFootballDate> resultHandler) throws TException {
        iface.getMatchFootballDate(args.matchFootball, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class getMatchFootball<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchFootball_args, MatchFootball> {
      public getMatchFootball() {
        super("getMatchFootball");
      }

      public getMatchFootball_args getEmptyArgsInstance() {
        return new getMatchFootball_args();
      }

      public AsyncMethodCallback<MatchFootball> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MatchFootball>() { 
          public void onComplete(MatchFootball o) {
            getMatchFootball_result result = new getMatchFootball_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchFootball_result result = new getMatchFootball_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchFootball_args args, org.apache.thrift.async.AsyncMethodCallback<MatchFootball> resultHandler) throws TException {
        iface.getMatchFootball(args.lotteryId, args.wareIssue, args.matchNo,resultHandler);
      }
    }

    public static class updateMatchFootball<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMatchFootball_args, Integer> {
      public updateMatchFootball() {
        super("updateMatchFootball");
      }

      public updateMatchFootball_args getEmptyArgsInstance() {
        return new updateMatchFootball_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateMatchFootball_result result = new updateMatchFootball_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMatchFootball_result result = new updateMatchFootball_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMatchFootball_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateMatchFootball(args.matchFootball,resultHandler);
      }
    }

    public static class saveOrUpdateMatchCompetiveResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOrUpdateMatchCompetiveResult_args, Integer> {
      public saveOrUpdateMatchCompetiveResult() {
        super("saveOrUpdateMatchCompetiveResult");
      }

      public saveOrUpdateMatchCompetiveResult_args getEmptyArgsInstance() {
        return new saveOrUpdateMatchCompetiveResult_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveOrUpdateMatchCompetiveResult_result result = new saveOrUpdateMatchCompetiveResult_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveOrUpdateMatchCompetiveResult_result result = new saveOrUpdateMatchCompetiveResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOrUpdateMatchCompetiveResult_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveOrUpdateMatchCompetiveResult(args.matchCompetiveResult,resultHandler);
      }
    }

  }

  public static class addOrUpdateLotteryItem_args implements org.apache.thrift.TBase<addOrUpdateLotteryItem_args, addOrUpdateLotteryItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrUpdateLotteryItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrUpdateLotteryItem_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryItem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrUpdateLotteryItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrUpdateLotteryItem_argsTupleSchemeFactory());
    }

    public LotteryItem lotteryItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ITEM((short)1, "lotteryItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ITEM
            return LOTTERY_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ITEM, new org.apache.thrift.meta_data.FieldMetaData("lotteryItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrUpdateLotteryItem_args.class, metaDataMap);
    }

    public addOrUpdateLotteryItem_args() {
    }

    public addOrUpdateLotteryItem_args(
      LotteryItem lotteryItem)
    {
      this();
      this.lotteryItem = lotteryItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrUpdateLotteryItem_args(addOrUpdateLotteryItem_args other) {
      if (other.isSetLotteryItem()) {
        this.lotteryItem = new LotteryItem(other.lotteryItem);
      }
    }

    public addOrUpdateLotteryItem_args deepCopy() {
      return new addOrUpdateLotteryItem_args(this);
    }

    @Override
    public void clear() {
      this.lotteryItem = null;
    }

    public LotteryItem getLotteryItem() {
      return this.lotteryItem;
    }

    public addOrUpdateLotteryItem_args setLotteryItem(LotteryItem lotteryItem) {
      this.lotteryItem = lotteryItem;
      return this;
    }

    public void unsetLotteryItem() {
      this.lotteryItem = null;
    }

    /** Returns true if field lotteryItem is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryItem() {
      return this.lotteryItem != null;
    }

    public void setLotteryItemIsSet(boolean value) {
      if (!value) {
        this.lotteryItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ITEM:
        if (value == null) {
          unsetLotteryItem();
        } else {
          setLotteryItem((LotteryItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ITEM:
        return getLotteryItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ITEM:
        return isSetLotteryItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrUpdateLotteryItem_args)
        return this.equals((addOrUpdateLotteryItem_args)that);
      return false;
    }

    public boolean equals(addOrUpdateLotteryItem_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryItem = true && this.isSetLotteryItem();
      boolean that_present_lotteryItem = true && that.isSetLotteryItem();
      if (this_present_lotteryItem || that_present_lotteryItem) {
        if (!(this_present_lotteryItem && that_present_lotteryItem))
          return false;
        if (!this.lotteryItem.equals(that.lotteryItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addOrUpdateLotteryItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryItem()).compareTo(other.isSetLotteryItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryItem, other.lotteryItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrUpdateLotteryItem_args(");
      boolean first = true;

      sb.append("lotteryItem:");
      if (this.lotteryItem == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryItem != null) {
        lotteryItem.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrUpdateLotteryItem_argsStandardSchemeFactory implements SchemeFactory {
      public addOrUpdateLotteryItem_argsStandardScheme getScheme() {
        return new addOrUpdateLotteryItem_argsStandardScheme();
      }
    }

    private static class addOrUpdateLotteryItem_argsStandardScheme extends StandardScheme<addOrUpdateLotteryItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrUpdateLotteryItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryItem = new LotteryItem();
                struct.lotteryItem.read(iprot);
                struct.setLotteryItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrUpdateLotteryItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryItem != null) {
          oprot.writeFieldBegin(LOTTERY_ITEM_FIELD_DESC);
          struct.lotteryItem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrUpdateLotteryItem_argsTupleSchemeFactory implements SchemeFactory {
      public addOrUpdateLotteryItem_argsTupleScheme getScheme() {
        return new addOrUpdateLotteryItem_argsTupleScheme();
      }
    }

    private static class addOrUpdateLotteryItem_argsTupleScheme extends TupleScheme<addOrUpdateLotteryItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrUpdateLotteryItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryItem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryItem()) {
          struct.lotteryItem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrUpdateLotteryItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryItem = new LotteryItem();
          struct.lotteryItem.read(iprot);
          struct.setLotteryItemIsSet(true);
        }
      }
    }

  }

  public static class addOrUpdateLotteryItem_result implements org.apache.thrift.TBase<addOrUpdateLotteryItem_result, addOrUpdateLotteryItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrUpdateLotteryItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrUpdateLotteryItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrUpdateLotteryItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrUpdateLotteryItem_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrUpdateLotteryItem_result.class, metaDataMap);
    }

    public addOrUpdateLotteryItem_result() {
    }

    public addOrUpdateLotteryItem_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrUpdateLotteryItem_result(addOrUpdateLotteryItem_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addOrUpdateLotteryItem_result deepCopy() {
      return new addOrUpdateLotteryItem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addOrUpdateLotteryItem_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrUpdateLotteryItem_result)
        return this.equals((addOrUpdateLotteryItem_result)that);
      return false;
    }

    public boolean equals(addOrUpdateLotteryItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addOrUpdateLotteryItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrUpdateLotteryItem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrUpdateLotteryItem_resultStandardSchemeFactory implements SchemeFactory {
      public addOrUpdateLotteryItem_resultStandardScheme getScheme() {
        return new addOrUpdateLotteryItem_resultStandardScheme();
      }
    }

    private static class addOrUpdateLotteryItem_resultStandardScheme extends StandardScheme<addOrUpdateLotteryItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrUpdateLotteryItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrUpdateLotteryItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrUpdateLotteryItem_resultTupleSchemeFactory implements SchemeFactory {
      public addOrUpdateLotteryItem_resultTupleScheme getScheme() {
        return new addOrUpdateLotteryItem_resultTupleScheme();
      }
    }

    private static class addOrUpdateLotteryItem_resultTupleScheme extends TupleScheme<addOrUpdateLotteryItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrUpdateLotteryItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrUpdateLotteryItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLotteryItemList_args implements org.apache.thrift.TBase<getLotteryItemList_args, getLotteryItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryItemList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryItemList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryItemList_args.class, metaDataMap);
    }

    public getLotteryItemList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryItemList_args(getLotteryItemList_args other) {
    }

    public getLotteryItemList_args deepCopy() {
      return new getLotteryItemList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryItemList_args)
        return this.equals((getLotteryItemList_args)that);
      return false;
    }

    public boolean equals(getLotteryItemList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryItemList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryItemList_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryItemList_argsStandardScheme getScheme() {
        return new getLotteryItemList_argsStandardScheme();
      }
    }

    private static class getLotteryItemList_argsStandardScheme extends StandardScheme<getLotteryItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryItemList_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryItemList_argsTupleScheme getScheme() {
        return new getLotteryItemList_argsTupleScheme();
      }
    }

    private static class getLotteryItemList_argsTupleScheme extends TupleScheme<getLotteryItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLotteryItemList_result implements org.apache.thrift.TBase<getLotteryItemList_result, getLotteryItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryItemList_resultTupleSchemeFactory());
    }

    public List<LotteryItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryItemList_result.class, metaDataMap);
    }

    public getLotteryItemList_result() {
    }

    public getLotteryItemList_result(
      List<LotteryItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryItemList_result(getLotteryItemList_result other) {
      if (other.isSetSuccess()) {
        List<LotteryItem> __this__success = new ArrayList<LotteryItem>(other.success.size());
        for (LotteryItem other_element : other.success) {
          __this__success.add(new LotteryItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLotteryItemList_result deepCopy() {
      return new getLotteryItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LotteryItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LotteryItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<LotteryItem>();
      }
      this.success.add(elem);
    }

    public List<LotteryItem> getSuccess() {
      return this.success;
    }

    public getLotteryItemList_result setSuccess(List<LotteryItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LotteryItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryItemList_result)
        return this.equals((getLotteryItemList_result)that);
      return false;
    }

    public boolean equals(getLotteryItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryItemList_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryItemList_resultStandardScheme getScheme() {
        return new getLotteryItemList_resultStandardScheme();
      }
    }

    private static class getLotteryItemList_resultStandardScheme extends StandardScheme<getLotteryItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<LotteryItem>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    LotteryItem _elem58;
                    _elem58 = new LotteryItem();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LotteryItem _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryItemList_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryItemList_resultTupleScheme getScheme() {
        return new getLotteryItemList_resultTupleScheme();
      }
    }

    private static class getLotteryItemList_resultTupleScheme extends TupleScheme<getLotteryItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LotteryItem _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LotteryItem>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              LotteryItem _elem63;
              _elem63 = new LotteryItem();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findLotteryItemByLotteryId_args implements org.apache.thrift.TBase<findLotteryItemByLotteryId_args, findLotteryItemByLotteryId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryItemByLotteryId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryItemByLotteryId_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryItemByLotteryId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryItemByLotteryId_argsTupleSchemeFactory());
    }

    public String lotteryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryItemByLotteryId_args.class, metaDataMap);
    }

    public findLotteryItemByLotteryId_args() {
    }

    public findLotteryItemByLotteryId_args(
      String lotteryId)
    {
      this();
      this.lotteryId = lotteryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryItemByLotteryId_args(findLotteryItemByLotteryId_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
    }

    public findLotteryItemByLotteryId_args deepCopy() {
      return new findLotteryItemByLotteryId_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public findLotteryItemByLotteryId_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryItemByLotteryId_args)
        return this.equals((findLotteryItemByLotteryId_args)that);
      return false;
    }

    public boolean equals(findLotteryItemByLotteryId_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryItemByLotteryId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryItemByLotteryId_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryItemByLotteryId_argsStandardSchemeFactory implements SchemeFactory {
      public findLotteryItemByLotteryId_argsStandardScheme getScheme() {
        return new findLotteryItemByLotteryId_argsStandardScheme();
      }
    }

    private static class findLotteryItemByLotteryId_argsStandardScheme extends StandardScheme<findLotteryItemByLotteryId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryItemByLotteryId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryItemByLotteryId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryItemByLotteryId_argsTupleSchemeFactory implements SchemeFactory {
      public findLotteryItemByLotteryId_argsTupleScheme getScheme() {
        return new findLotteryItemByLotteryId_argsTupleScheme();
      }
    }

    private static class findLotteryItemByLotteryId_argsTupleScheme extends TupleScheme<findLotteryItemByLotteryId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryItemByLotteryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryItemByLotteryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
      }
    }

  }

  public static class findLotteryItemByLotteryId_result implements org.apache.thrift.TBase<findLotteryItemByLotteryId_result, findLotteryItemByLotteryId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryItemByLotteryId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryItemByLotteryId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryItemByLotteryId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryItemByLotteryId_resultTupleSchemeFactory());
    }

    public LotteryItem success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryItemByLotteryId_result.class, metaDataMap);
    }

    public findLotteryItemByLotteryId_result() {
    }

    public findLotteryItemByLotteryId_result(
      LotteryItem success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryItemByLotteryId_result(findLotteryItemByLotteryId_result other) {
      if (other.isSetSuccess()) {
        this.success = new LotteryItem(other.success);
      }
    }

    public findLotteryItemByLotteryId_result deepCopy() {
      return new findLotteryItemByLotteryId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LotteryItem getSuccess() {
      return this.success;
    }

    public findLotteryItemByLotteryId_result setSuccess(LotteryItem success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LotteryItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryItemByLotteryId_result)
        return this.equals((findLotteryItemByLotteryId_result)that);
      return false;
    }

    public boolean equals(findLotteryItemByLotteryId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryItemByLotteryId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryItemByLotteryId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryItemByLotteryId_resultStandardSchemeFactory implements SchemeFactory {
      public findLotteryItemByLotteryId_resultStandardScheme getScheme() {
        return new findLotteryItemByLotteryId_resultStandardScheme();
      }
    }

    private static class findLotteryItemByLotteryId_resultStandardScheme extends StandardScheme<findLotteryItemByLotteryId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryItemByLotteryId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LotteryItem();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryItemByLotteryId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryItemByLotteryId_resultTupleSchemeFactory implements SchemeFactory {
      public findLotteryItemByLotteryId_resultTupleScheme getScheme() {
        return new findLotteryItemByLotteryId_resultTupleScheme();
      }
    }

    private static class findLotteryItemByLotteryId_resultTupleScheme extends TupleScheme<findLotteryItemByLotteryId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryItemByLotteryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryItemByLotteryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LotteryItem();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createLotteryIssue_args implements org.apache.thrift.TBase<createLotteryIssue_args, createLotteryIssue_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLotteryIssue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLotteryIssue_args");

    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLotteryIssue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLotteryIssue_argsTupleSchemeFactory());
    }

    public String beginTime; // required
    public String endTime; // required
    public String lotteryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEGIN_TIME((short)1, "beginTime"),
      END_TIME((short)2, "endTime"),
      LOTTERY_ID((short)3, "lotteryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEGIN_TIME
            return BEGIN_TIME;
          case 2: // END_TIME
            return END_TIME;
          case 3: // LOTTERY_ID
            return LOTTERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLotteryIssue_args.class, metaDataMap);
    }

    public createLotteryIssue_args() {
    }

    public createLotteryIssue_args(
      String beginTime,
      String endTime,
      String lotteryId)
    {
      this();
      this.beginTime = beginTime;
      this.endTime = endTime;
      this.lotteryId = lotteryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLotteryIssue_args(createLotteryIssue_args other) {
      if (other.isSetBeginTime()) {
        this.beginTime = other.beginTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
    }

    public createLotteryIssue_args deepCopy() {
      return new createLotteryIssue_args(this);
    }

    @Override
    public void clear() {
      this.beginTime = null;
      this.endTime = null;
      this.lotteryId = null;
    }

    public String getBeginTime() {
      return this.beginTime;
    }

    public createLotteryIssue_args setBeginTime(String beginTime) {
      this.beginTime = beginTime;
      return this;
    }

    public void unsetBeginTime() {
      this.beginTime = null;
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return this.beginTime != null;
    }

    public void setBeginTimeIsSet(boolean value) {
      if (!value) {
        this.beginTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public createLotteryIssue_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public createLotteryIssue_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BEGIN_TIME:
        return getBeginTime();

      case END_TIME:
        return getEndTime();

      case LOTTERY_ID:
        return getLotteryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      case LOTTERY_ID:
        return isSetLotteryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLotteryIssue_args)
        return this.equals((createLotteryIssue_args)that);
      return false;
    }

    public boolean equals(createLotteryIssue_args that) {
      if (that == null)
        return false;

      boolean this_present_beginTime = true && this.isSetBeginTime();
      boolean that_present_beginTime = true && that.isSetBeginTime();
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (!this.beginTime.equals(that.beginTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLotteryIssue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLotteryIssue_args(");
      boolean first = true;

      sb.append("beginTime:");
      if (this.beginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.beginTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLotteryIssue_argsStandardSchemeFactory implements SchemeFactory {
      public createLotteryIssue_argsStandardScheme getScheme() {
        return new createLotteryIssue_argsStandardScheme();
      }
    }

    private static class createLotteryIssue_argsStandardScheme extends StandardScheme<createLotteryIssue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLotteryIssue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginTime = iprot.readString();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLotteryIssue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.beginTime != null) {
          oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.beginTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLotteryIssue_argsTupleSchemeFactory implements SchemeFactory {
      public createLotteryIssue_argsTupleScheme getScheme() {
        return new createLotteryIssue_argsTupleScheme();
      }
    }

    private static class createLotteryIssue_argsTupleScheme extends TupleScheme<createLotteryIssue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBeginTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        if (struct.isSetLotteryId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBeginTime()) {
          oprot.writeString(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.beginTime = iprot.readString();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
      }
    }

  }

  public static class createLotteryIssue_result implements org.apache.thrift.TBase<createLotteryIssue_result, createLotteryIssue_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLotteryIssue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLotteryIssue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLotteryIssue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLotteryIssue_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLotteryIssue_result.class, metaDataMap);
    }

    public createLotteryIssue_result() {
    }

    public createLotteryIssue_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLotteryIssue_result(createLotteryIssue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createLotteryIssue_result deepCopy() {
      return new createLotteryIssue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createLotteryIssue_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLotteryIssue_result)
        return this.equals((createLotteryIssue_result)that);
      return false;
    }

    public boolean equals(createLotteryIssue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLotteryIssue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLotteryIssue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLotteryIssue_resultStandardSchemeFactory implements SchemeFactory {
      public createLotteryIssue_resultStandardScheme getScheme() {
        return new createLotteryIssue_resultStandardScheme();
      }
    }

    private static class createLotteryIssue_resultStandardScheme extends StandardScheme<createLotteryIssue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLotteryIssue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLotteryIssue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLotteryIssue_resultTupleSchemeFactory implements SchemeFactory {
      public createLotteryIssue_resultTupleScheme getScheme() {
        return new createLotteryIssue_resultTupleScheme();
      }
    }

    private static class createLotteryIssue_resultTupleScheme extends TupleScheme<createLotteryIssue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLotteryIssueList_args implements org.apache.thrift.TBase<getLotteryIssueList_args, getLotteryIssueList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryIssueList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryIssueList_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryIssueList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryIssueList_argsTupleSchemeFactory());
    }

    public LotteryIssue lotteryIssue; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ISSUE((short)1, "lotteryIssue"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ISSUE
            return LOTTERY_ISSUE;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssue.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryIssueList_args.class, metaDataMap);
    }

    public getLotteryIssueList_args() {
    }

    public getLotteryIssueList_args(
      LotteryIssue lotteryIssue,
      int currentPage,
      int pageSize)
    {
      this();
      this.lotteryIssue = lotteryIssue;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryIssueList_args(getLotteryIssueList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryIssue()) {
        this.lotteryIssue = new LotteryIssue(other.lotteryIssue);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getLotteryIssueList_args deepCopy() {
      return new getLotteryIssueList_args(this);
    }

    @Override
    public void clear() {
      this.lotteryIssue = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public LotteryIssue getLotteryIssue() {
      return this.lotteryIssue;
    }

    public getLotteryIssueList_args setLotteryIssue(LotteryIssue lotteryIssue) {
      this.lotteryIssue = lotteryIssue;
      return this;
    }

    public void unsetLotteryIssue() {
      this.lotteryIssue = null;
    }

    /** Returns true if field lotteryIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryIssue() {
      return this.lotteryIssue != null;
    }

    public void setLotteryIssueIsSet(boolean value) {
      if (!value) {
        this.lotteryIssue = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getLotteryIssueList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getLotteryIssueList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ISSUE:
        if (value == null) {
          unsetLotteryIssue();
        } else {
          setLotteryIssue((LotteryIssue)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ISSUE:
        return getLotteryIssue();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ISSUE:
        return isSetLotteryIssue();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryIssueList_args)
        return this.equals((getLotteryIssueList_args)that);
      return false;
    }

    public boolean equals(getLotteryIssueList_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryIssue = true && this.isSetLotteryIssue();
      boolean that_present_lotteryIssue = true && that.isSetLotteryIssue();
      if (this_present_lotteryIssue || that_present_lotteryIssue) {
        if (!(this_present_lotteryIssue && that_present_lotteryIssue))
          return false;
        if (!this.lotteryIssue.equals(that.lotteryIssue))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryIssueList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryIssue()).compareTo(other.isSetLotteryIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssue, other.lotteryIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryIssueList_args(");
      boolean first = true;

      sb.append("lotteryIssue:");
      if (this.lotteryIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryIssue != null) {
        lotteryIssue.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryIssueList_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryIssueList_argsStandardScheme getScheme() {
        return new getLotteryIssueList_argsStandardScheme();
      }
    }

    private static class getLotteryIssueList_argsStandardScheme extends StandardScheme<getLotteryIssueList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryIssueList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryIssue = new LotteryIssue();
                struct.lotteryIssue.read(iprot);
                struct.setLotteryIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryIssueList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryIssue != null) {
          oprot.writeFieldBegin(LOTTERY_ISSUE_FIELD_DESC);
          struct.lotteryIssue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryIssueList_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryIssueList_argsTupleScheme getScheme() {
        return new getLotteryIssueList_argsTupleScheme();
      }
    }

    private static class getLotteryIssueList_argsTupleScheme extends TupleScheme<getLotteryIssueList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryIssue()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryIssue()) {
          struct.lotteryIssue.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryIssue = new LotteryIssue();
          struct.lotteryIssue.read(iprot);
          struct.setLotteryIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getLotteryIssueList_result implements org.apache.thrift.TBase<getLotteryIssueList_result, getLotteryIssueList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryIssueList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryIssueList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryIssueList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryIssueList_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryIssueList_result.class, metaDataMap);
    }

    public getLotteryIssueList_result() {
    }

    public getLotteryIssueList_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryIssueList_result(getLotteryIssueList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getLotteryIssueList_result deepCopy() {
      return new getLotteryIssueList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getLotteryIssueList_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryIssueList_result)
        return this.equals((getLotteryIssueList_result)that);
      return false;
    }

    public boolean equals(getLotteryIssueList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryIssueList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryIssueList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryIssueList_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryIssueList_resultStandardScheme getScheme() {
        return new getLotteryIssueList_resultStandardScheme();
      }
    }

    private static class getLotteryIssueList_resultStandardScheme extends StandardScheme<getLotteryIssueList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryIssueList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryIssueList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryIssueList_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryIssueList_resultTupleScheme getScheme() {
        return new getLotteryIssueList_resultTupleScheme();
      }
    }

    private static class getLotteryIssueList_resultTupleScheme extends TupleScheme<getLotteryIssueList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findLotteryIssue_args implements org.apache.thrift.TBase<findLotteryIssue_args, findLotteryIssue_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryIssue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryIssue_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryIssue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryIssue_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryIssue_args.class, metaDataMap);
    }

    public findLotteryIssue_args() {
    }

    public findLotteryIssue_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryIssue_args(findLotteryIssue_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public findLotteryIssue_args deepCopy() {
      return new findLotteryIssue_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public findLotteryIssue_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public findLotteryIssue_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryIssue_args)
        return this.equals((findLotteryIssue_args)that);
      return false;
    }

    public boolean equals(findLotteryIssue_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryIssue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryIssue_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryIssue_argsStandardSchemeFactory implements SchemeFactory {
      public findLotteryIssue_argsStandardScheme getScheme() {
        return new findLotteryIssue_argsStandardScheme();
      }
    }

    private static class findLotteryIssue_argsStandardScheme extends StandardScheme<findLotteryIssue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryIssue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryIssue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryIssue_argsTupleSchemeFactory implements SchemeFactory {
      public findLotteryIssue_argsTupleScheme getScheme() {
        return new findLotteryIssue_argsTupleScheme();
      }
    }

    private static class findLotteryIssue_argsTupleScheme extends TupleScheme<findLotteryIssue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class findLotteryIssue_result implements org.apache.thrift.TBase<findLotteryIssue_result, findLotteryIssue_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryIssue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryIssue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryIssue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryIssue_resultTupleSchemeFactory());
    }

    public LotteryIssue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryIssue_result.class, metaDataMap);
    }

    public findLotteryIssue_result() {
    }

    public findLotteryIssue_result(
      LotteryIssue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryIssue_result(findLotteryIssue_result other) {
      if (other.isSetSuccess()) {
        this.success = new LotteryIssue(other.success);
      }
    }

    public findLotteryIssue_result deepCopy() {
      return new findLotteryIssue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LotteryIssue getSuccess() {
      return this.success;
    }

    public findLotteryIssue_result setSuccess(LotteryIssue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LotteryIssue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryIssue_result)
        return this.equals((findLotteryIssue_result)that);
      return false;
    }

    public boolean equals(findLotteryIssue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryIssue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryIssue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryIssue_resultStandardSchemeFactory implements SchemeFactory {
      public findLotteryIssue_resultStandardScheme getScheme() {
        return new findLotteryIssue_resultStandardScheme();
      }
    }

    private static class findLotteryIssue_resultStandardScheme extends StandardScheme<findLotteryIssue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryIssue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LotteryIssue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryIssue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryIssue_resultTupleSchemeFactory implements SchemeFactory {
      public findLotteryIssue_resultTupleScheme getScheme() {
        return new findLotteryIssue_resultTupleScheme();
      }
    }

    private static class findLotteryIssue_resultTupleScheme extends TupleScheme<findLotteryIssue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LotteryIssue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCreateMinTime_args implements org.apache.thrift.TBase<getCreateMinTime_args, getCreateMinTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCreateMinTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCreateMinTime_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCreateMinTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCreateMinTime_argsTupleSchemeFactory());
    }

    public String lotteryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCreateMinTime_args.class, metaDataMap);
    }

    public getCreateMinTime_args() {
    }

    public getCreateMinTime_args(
      String lotteryId)
    {
      this();
      this.lotteryId = lotteryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCreateMinTime_args(getCreateMinTime_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
    }

    public getCreateMinTime_args deepCopy() {
      return new getCreateMinTime_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getCreateMinTime_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCreateMinTime_args)
        return this.equals((getCreateMinTime_args)that);
      return false;
    }

    public boolean equals(getCreateMinTime_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCreateMinTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCreateMinTime_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCreateMinTime_argsStandardSchemeFactory implements SchemeFactory {
      public getCreateMinTime_argsStandardScheme getScheme() {
        return new getCreateMinTime_argsStandardScheme();
      }
    }

    private static class getCreateMinTime_argsStandardScheme extends StandardScheme<getCreateMinTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCreateMinTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCreateMinTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCreateMinTime_argsTupleSchemeFactory implements SchemeFactory {
      public getCreateMinTime_argsTupleScheme getScheme() {
        return new getCreateMinTime_argsTupleScheme();
      }
    }

    private static class getCreateMinTime_argsTupleScheme extends TupleScheme<getCreateMinTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCreateMinTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCreateMinTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
      }
    }

  }

  public static class getCreateMinTime_result implements org.apache.thrift.TBase<getCreateMinTime_result, getCreateMinTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCreateMinTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCreateMinTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCreateMinTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCreateMinTime_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCreateMinTime_result.class, metaDataMap);
    }

    public getCreateMinTime_result() {
    }

    public getCreateMinTime_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCreateMinTime_result(getCreateMinTime_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getCreateMinTime_result deepCopy() {
      return new getCreateMinTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getCreateMinTime_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCreateMinTime_result)
        return this.equals((getCreateMinTime_result)that);
      return false;
    }

    public boolean equals(getCreateMinTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCreateMinTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCreateMinTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCreateMinTime_resultStandardSchemeFactory implements SchemeFactory {
      public getCreateMinTime_resultStandardScheme getScheme() {
        return new getCreateMinTime_resultStandardScheme();
      }
    }

    private static class getCreateMinTime_resultStandardScheme extends StandardScheme<getCreateMinTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCreateMinTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCreateMinTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCreateMinTime_resultTupleSchemeFactory implements SchemeFactory {
      public getCreateMinTime_resultTupleScheme getScheme() {
        return new getCreateMinTime_resultTupleScheme();
      }
    }

    private static class getCreateMinTime_resultTupleScheme extends TupleScheme<getCreateMinTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCreateMinTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCreateMinTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryIssueState_args implements org.apache.thrift.TBase<updateLotteryIssueState_args, updateLotteryIssueState_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryIssueState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryIssueState_args");

    private static final org.apache.thrift.protocol.TField ISSUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issueId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryIssueState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryIssueState_argsTupleSchemeFactory());
    }

    public int issueId; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ISSUE_ID((short)1, "issueId"),
      STATE((short)2, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ISSUE_ID
            return ISSUE_ID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISSUEID_ISSET_ID = 0;
    private static final int __STATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ISSUE_ID, new org.apache.thrift.meta_data.FieldMetaData("issueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryIssueState_args.class, metaDataMap);
    }

    public updateLotteryIssueState_args() {
    }

    public updateLotteryIssueState_args(
      int issueId,
      int state)
    {
      this();
      this.issueId = issueId;
      setIssueIdIsSet(true);
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryIssueState_args(updateLotteryIssueState_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.issueId = other.issueId;
      this.state = other.state;
    }

    public updateLotteryIssueState_args deepCopy() {
      return new updateLotteryIssueState_args(this);
    }

    @Override
    public void clear() {
      setIssueIdIsSet(false);
      this.issueId = 0;
      setStateIsSet(false);
      this.state = 0;
    }

    public int getIssueId() {
      return this.issueId;
    }

    public updateLotteryIssueState_args setIssueId(int issueId) {
      this.issueId = issueId;
      setIssueIdIsSet(true);
      return this;
    }

    public void unsetIssueId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUEID_ISSET_ID);
    }

    /** Returns true if field issueId is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueId() {
      return EncodingUtils.testBit(__isset_bitfield, __ISSUEID_ISSET_ID);
    }

    public void setIssueIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUEID_ISSET_ID, value);
    }

    public int getState() {
      return this.state;
    }

    public updateLotteryIssueState_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ISSUE_ID:
        if (value == null) {
          unsetIssueId();
        } else {
          setIssueId((Integer)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ISSUE_ID:
        return Integer.valueOf(getIssueId());

      case STATE:
        return Integer.valueOf(getState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ISSUE_ID:
        return isSetIssueId();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryIssueState_args)
        return this.equals((updateLotteryIssueState_args)that);
      return false;
    }

    public boolean equals(updateLotteryIssueState_args that) {
      if (that == null)
        return false;

      boolean this_present_issueId = true;
      boolean that_present_issueId = true;
      if (this_present_issueId || that_present_issueId) {
        if (!(this_present_issueId && that_present_issueId))
          return false;
        if (this.issueId != that.issueId)
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryIssueState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIssueId()).compareTo(other.isSetIssueId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueId, other.issueId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryIssueState_args(");
      boolean first = true;

      sb.append("issueId:");
      sb.append(this.issueId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryIssueState_argsStandardSchemeFactory implements SchemeFactory {
      public updateLotteryIssueState_argsStandardScheme getScheme() {
        return new updateLotteryIssueState_argsStandardScheme();
      }
    }

    private static class updateLotteryIssueState_argsStandardScheme extends StandardScheme<updateLotteryIssueState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryIssueState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ISSUE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.issueId = iprot.readI32();
                struct.setIssueIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryIssueState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ISSUE_ID_FIELD_DESC);
        oprot.writeI32(struct.issueId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryIssueState_argsTupleSchemeFactory implements SchemeFactory {
      public updateLotteryIssueState_argsTupleScheme getScheme() {
        return new updateLotteryIssueState_argsTupleScheme();
      }
    }

    private static class updateLotteryIssueState_argsTupleScheme extends TupleScheme<updateLotteryIssueState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIssueId()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIssueId()) {
          oprot.writeI32(struct.issueId);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.issueId = iprot.readI32();
          struct.setIssueIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryIssueState_result implements org.apache.thrift.TBase<updateLotteryIssueState_result, updateLotteryIssueState_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryIssueState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryIssueState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryIssueState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryIssueState_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryIssueState_result.class, metaDataMap);
    }

    public updateLotteryIssueState_result() {
    }

    public updateLotteryIssueState_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryIssueState_result(updateLotteryIssueState_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateLotteryIssueState_result deepCopy() {
      return new updateLotteryIssueState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateLotteryIssueState_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryIssueState_result)
        return this.equals((updateLotteryIssueState_result)that);
      return false;
    }

    public boolean equals(updateLotteryIssueState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryIssueState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryIssueState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryIssueState_resultStandardSchemeFactory implements SchemeFactory {
      public updateLotteryIssueState_resultStandardScheme getScheme() {
        return new updateLotteryIssueState_resultStandardScheme();
      }
    }

    private static class updateLotteryIssueState_resultStandardScheme extends StandardScheme<updateLotteryIssueState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryIssueState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryIssueState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryIssueState_resultTupleSchemeFactory implements SchemeFactory {
      public updateLotteryIssueState_resultTupleScheme getScheme() {
        return new updateLotteryIssueState_resultTupleScheme();
      }
    }

    private static class updateLotteryIssueState_resultTupleScheme extends TupleScheme<updateLotteryIssueState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findLotteryDrawResult_args implements org.apache.thrift.TBase<findLotteryDrawResult_args, findLotteryDrawResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryDrawResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryDrawResult_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryDrawResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryDrawResult_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryDrawResult_args.class, metaDataMap);
    }

    public findLotteryDrawResult_args() {
    }

    public findLotteryDrawResult_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryDrawResult_args(findLotteryDrawResult_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public findLotteryDrawResult_args deepCopy() {
      return new findLotteryDrawResult_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public findLotteryDrawResult_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public findLotteryDrawResult_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryDrawResult_args)
        return this.equals((findLotteryDrawResult_args)that);
      return false;
    }

    public boolean equals(findLotteryDrawResult_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryDrawResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryDrawResult_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryDrawResult_argsStandardSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_argsStandardScheme getScheme() {
        return new findLotteryDrawResult_argsStandardScheme();
      }
    }

    private static class findLotteryDrawResult_argsStandardScheme extends StandardScheme<findLotteryDrawResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryDrawResult_argsTupleSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_argsTupleScheme getScheme() {
        return new findLotteryDrawResult_argsTupleScheme();
      }
    }

    private static class findLotteryDrawResult_argsTupleScheme extends TupleScheme<findLotteryDrawResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class findLotteryDrawResult_result implements org.apache.thrift.TBase<findLotteryDrawResult_result, findLotteryDrawResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLotteryDrawResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLotteryDrawResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLotteryDrawResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLotteryDrawResult_resultTupleSchemeFactory());
    }

    public LotteryDrawResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryDrawResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLotteryDrawResult_result.class, metaDataMap);
    }

    public findLotteryDrawResult_result() {
    }

    public findLotteryDrawResult_result(
      LotteryDrawResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLotteryDrawResult_result(findLotteryDrawResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new LotteryDrawResult(other.success);
      }
    }

    public findLotteryDrawResult_result deepCopy() {
      return new findLotteryDrawResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LotteryDrawResult getSuccess() {
      return this.success;
    }

    public findLotteryDrawResult_result setSuccess(LotteryDrawResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LotteryDrawResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLotteryDrawResult_result)
        return this.equals((findLotteryDrawResult_result)that);
      return false;
    }

    public boolean equals(findLotteryDrawResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findLotteryDrawResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLotteryDrawResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLotteryDrawResult_resultStandardSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_resultStandardScheme getScheme() {
        return new findLotteryDrawResult_resultStandardScheme();
      }
    }

    private static class findLotteryDrawResult_resultStandardScheme extends StandardScheme<findLotteryDrawResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LotteryDrawResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLotteryDrawResult_resultTupleSchemeFactory implements SchemeFactory {
      public findLotteryDrawResult_resultTupleScheme getScheme() {
        return new findLotteryDrawResult_resultTupleScheme();
      }
    }

    private static class findLotteryDrawResult_resultTupleScheme extends TupleScheme<findLotteryDrawResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LotteryDrawResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLotteryDrawResultList_args implements org.apache.thrift.TBase<getLotteryDrawResultList_args, getLotteryDrawResultList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryDrawResultList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryDrawResultList_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryDrawResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryDrawResultList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryDrawResultList_argsTupleSchemeFactory());
    }

    public LotteryDrawResult lotteryDrawResult; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_DRAW_RESULT((short)1, "lotteryDrawResult"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_DRAW_RESULT
            return LOTTERY_DRAW_RESULT;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("lotteryDrawResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryDrawResult.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryDrawResultList_args.class, metaDataMap);
    }

    public getLotteryDrawResultList_args() {
    }

    public getLotteryDrawResultList_args(
      LotteryDrawResult lotteryDrawResult,
      int currentPage,
      int pageSize)
    {
      this();
      this.lotteryDrawResult = lotteryDrawResult;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryDrawResultList_args(getLotteryDrawResultList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryDrawResult()) {
        this.lotteryDrawResult = new LotteryDrawResult(other.lotteryDrawResult);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getLotteryDrawResultList_args deepCopy() {
      return new getLotteryDrawResultList_args(this);
    }

    @Override
    public void clear() {
      this.lotteryDrawResult = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public LotteryDrawResult getLotteryDrawResult() {
      return this.lotteryDrawResult;
    }

    public getLotteryDrawResultList_args setLotteryDrawResult(LotteryDrawResult lotteryDrawResult) {
      this.lotteryDrawResult = lotteryDrawResult;
      return this;
    }

    public void unsetLotteryDrawResult() {
      this.lotteryDrawResult = null;
    }

    /** Returns true if field lotteryDrawResult is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryDrawResult() {
      return this.lotteryDrawResult != null;
    }

    public void setLotteryDrawResultIsSet(boolean value) {
      if (!value) {
        this.lotteryDrawResult = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getLotteryDrawResultList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getLotteryDrawResultList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_DRAW_RESULT:
        if (value == null) {
          unsetLotteryDrawResult();
        } else {
          setLotteryDrawResult((LotteryDrawResult)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_DRAW_RESULT:
        return getLotteryDrawResult();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_DRAW_RESULT:
        return isSetLotteryDrawResult();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryDrawResultList_args)
        return this.equals((getLotteryDrawResultList_args)that);
      return false;
    }

    public boolean equals(getLotteryDrawResultList_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryDrawResult = true && this.isSetLotteryDrawResult();
      boolean that_present_lotteryDrawResult = true && that.isSetLotteryDrawResult();
      if (this_present_lotteryDrawResult || that_present_lotteryDrawResult) {
        if (!(this_present_lotteryDrawResult && that_present_lotteryDrawResult))
          return false;
        if (!this.lotteryDrawResult.equals(that.lotteryDrawResult))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryDrawResultList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryDrawResult()).compareTo(other.isSetLotteryDrawResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryDrawResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryDrawResult, other.lotteryDrawResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryDrawResultList_args(");
      boolean first = true;

      sb.append("lotteryDrawResult:");
      if (this.lotteryDrawResult == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryDrawResult);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryDrawResult != null) {
        lotteryDrawResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryDrawResultList_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryDrawResultList_argsStandardScheme getScheme() {
        return new getLotteryDrawResultList_argsStandardScheme();
      }
    }

    private static class getLotteryDrawResultList_argsStandardScheme extends StandardScheme<getLotteryDrawResultList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryDrawResultList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_DRAW_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryDrawResult = new LotteryDrawResult();
                struct.lotteryDrawResult.read(iprot);
                struct.setLotteryDrawResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryDrawResultList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryDrawResult != null) {
          oprot.writeFieldBegin(LOTTERY_DRAW_RESULT_FIELD_DESC);
          struct.lotteryDrawResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryDrawResultList_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryDrawResultList_argsTupleScheme getScheme() {
        return new getLotteryDrawResultList_argsTupleScheme();
      }
    }

    private static class getLotteryDrawResultList_argsTupleScheme extends TupleScheme<getLotteryDrawResultList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryDrawResultList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryDrawResult()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryDrawResult()) {
          struct.lotteryDrawResult.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryDrawResultList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryDrawResult = new LotteryDrawResult();
          struct.lotteryDrawResult.read(iprot);
          struct.setLotteryDrawResultIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getLotteryDrawResultList_result implements org.apache.thrift.TBase<getLotteryDrawResultList_result, getLotteryDrawResultList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryDrawResultList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryDrawResultList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryDrawResultList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryDrawResultList_resultTupleSchemeFactory());
    }

    public DrawResultData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DrawResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryDrawResultList_result.class, metaDataMap);
    }

    public getLotteryDrawResultList_result() {
    }

    public getLotteryDrawResultList_result(
      DrawResultData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryDrawResultList_result(getLotteryDrawResultList_result other) {
      if (other.isSetSuccess()) {
        this.success = new DrawResultData(other.success);
      }
    }

    public getLotteryDrawResultList_result deepCopy() {
      return new getLotteryDrawResultList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DrawResultData getSuccess() {
      return this.success;
    }

    public getLotteryDrawResultList_result setSuccess(DrawResultData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DrawResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryDrawResultList_result)
        return this.equals((getLotteryDrawResultList_result)that);
      return false;
    }

    public boolean equals(getLotteryDrawResultList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryDrawResultList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryDrawResultList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryDrawResultList_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryDrawResultList_resultStandardScheme getScheme() {
        return new getLotteryDrawResultList_resultStandardScheme();
      }
    }

    private static class getLotteryDrawResultList_resultStandardScheme extends StandardScheme<getLotteryDrawResultList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryDrawResultList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DrawResultData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryDrawResultList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryDrawResultList_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryDrawResultList_resultTupleScheme getScheme() {
        return new getLotteryDrawResultList_resultTupleScheme();
      }
    }

    private static class getLotteryDrawResultList_resultTupleScheme extends TupleScheme<getLotteryDrawResultList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryDrawResultList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryDrawResultList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DrawResultData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLotteryIssueByParam_args implements org.apache.thrift.TBase<getLotteryIssueByParam_args, getLotteryIssueByParam_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryIssueByParam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryIssueByParam_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryIssueByParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryIssueByParam_argsTupleSchemeFactory());
    }

    public LotteryIssue lotteryIssue; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ISSUE((short)1, "lotteryIssue"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ISSUE
            return LOTTERY_ISSUE;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssue.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryIssueByParam_args.class, metaDataMap);
    }

    public getLotteryIssueByParam_args() {
    }

    public getLotteryIssueByParam_args(
      LotteryIssue lotteryIssue,
      int currentPage,
      int pageSize)
    {
      this();
      this.lotteryIssue = lotteryIssue;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryIssueByParam_args(getLotteryIssueByParam_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryIssue()) {
        this.lotteryIssue = new LotteryIssue(other.lotteryIssue);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getLotteryIssueByParam_args deepCopy() {
      return new getLotteryIssueByParam_args(this);
    }

    @Override
    public void clear() {
      this.lotteryIssue = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public LotteryIssue getLotteryIssue() {
      return this.lotteryIssue;
    }

    public getLotteryIssueByParam_args setLotteryIssue(LotteryIssue lotteryIssue) {
      this.lotteryIssue = lotteryIssue;
      return this;
    }

    public void unsetLotteryIssue() {
      this.lotteryIssue = null;
    }

    /** Returns true if field lotteryIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryIssue() {
      return this.lotteryIssue != null;
    }

    public void setLotteryIssueIsSet(boolean value) {
      if (!value) {
        this.lotteryIssue = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getLotteryIssueByParam_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getLotteryIssueByParam_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ISSUE:
        if (value == null) {
          unsetLotteryIssue();
        } else {
          setLotteryIssue((LotteryIssue)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ISSUE:
        return getLotteryIssue();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ISSUE:
        return isSetLotteryIssue();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryIssueByParam_args)
        return this.equals((getLotteryIssueByParam_args)that);
      return false;
    }

    public boolean equals(getLotteryIssueByParam_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryIssue = true && this.isSetLotteryIssue();
      boolean that_present_lotteryIssue = true && that.isSetLotteryIssue();
      if (this_present_lotteryIssue || that_present_lotteryIssue) {
        if (!(this_present_lotteryIssue && that_present_lotteryIssue))
          return false;
        if (!this.lotteryIssue.equals(that.lotteryIssue))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryIssueByParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryIssue()).compareTo(other.isSetLotteryIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssue, other.lotteryIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryIssueByParam_args(");
      boolean first = true;

      sb.append("lotteryIssue:");
      if (this.lotteryIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryIssue != null) {
        lotteryIssue.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryIssueByParam_argsStandardSchemeFactory implements SchemeFactory {
      public getLotteryIssueByParam_argsStandardScheme getScheme() {
        return new getLotteryIssueByParam_argsStandardScheme();
      }
    }

    private static class getLotteryIssueByParam_argsStandardScheme extends StandardScheme<getLotteryIssueByParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryIssueByParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryIssue = new LotteryIssue();
                struct.lotteryIssue.read(iprot);
                struct.setLotteryIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryIssueByParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryIssue != null) {
          oprot.writeFieldBegin(LOTTERY_ISSUE_FIELD_DESC);
          struct.lotteryIssue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryIssueByParam_argsTupleSchemeFactory implements SchemeFactory {
      public getLotteryIssueByParam_argsTupleScheme getScheme() {
        return new getLotteryIssueByParam_argsTupleScheme();
      }
    }

    private static class getLotteryIssueByParam_argsTupleScheme extends TupleScheme<getLotteryIssueByParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueByParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryIssue()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryIssue()) {
          struct.lotteryIssue.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueByParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryIssue = new LotteryIssue();
          struct.lotteryIssue.read(iprot);
          struct.setLotteryIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getLotteryIssueByParam_result implements org.apache.thrift.TBase<getLotteryIssueByParam_result, getLotteryIssueByParam_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLotteryIssueByParam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLotteryIssueByParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLotteryIssueByParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLotteryIssueByParam_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLotteryIssueByParam_result.class, metaDataMap);
    }

    public getLotteryIssueByParam_result() {
    }

    public getLotteryIssueByParam_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLotteryIssueByParam_result(getLotteryIssueByParam_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getLotteryIssueByParam_result deepCopy() {
      return new getLotteryIssueByParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getLotteryIssueByParam_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLotteryIssueByParam_result)
        return this.equals((getLotteryIssueByParam_result)that);
      return false;
    }

    public boolean equals(getLotteryIssueByParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLotteryIssueByParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLotteryIssueByParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLotteryIssueByParam_resultStandardSchemeFactory implements SchemeFactory {
      public getLotteryIssueByParam_resultStandardScheme getScheme() {
        return new getLotteryIssueByParam_resultStandardScheme();
      }
    }

    private static class getLotteryIssueByParam_resultStandardScheme extends StandardScheme<getLotteryIssueByParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLotteryIssueByParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLotteryIssueByParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLotteryIssueByParam_resultTupleSchemeFactory implements SchemeFactory {
      public getLotteryIssueByParam_resultTupleScheme getScheme() {
        return new getLotteryIssueByParam_resultTupleScheme();
      }
    }

    private static class getLotteryIssueByParam_resultTupleScheme extends TupleScheme<getLotteryIssueByParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueByParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLotteryIssueByParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryIssueStateByParam_args implements org.apache.thrift.TBase<updateLotteryIssueStateByParam_args, updateLotteryIssueStateByParam_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryIssueStateByParam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryIssueStateByParam_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryIssueStateByParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryIssueStateByParam_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo"),
      STATE((short)3, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          case 3: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryIssueStateByParam_args.class, metaDataMap);
    }

    public updateLotteryIssueStateByParam_args() {
    }

    public updateLotteryIssueStateByParam_args(
      String lotteryId,
      String issueNo,
      int state)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryIssueStateByParam_args(updateLotteryIssueStateByParam_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
      this.state = other.state;
    }

    public updateLotteryIssueStateByParam_args deepCopy() {
      return new updateLotteryIssueStateByParam_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public updateLotteryIssueStateByParam_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public updateLotteryIssueStateByParam_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public updateLotteryIssueStateByParam_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      case STATE:
        return Integer.valueOf(getState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryIssueStateByParam_args)
        return this.equals((updateLotteryIssueStateByParam_args)that);
      return false;
    }

    public boolean equals(updateLotteryIssueStateByParam_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryIssueStateByParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryIssueStateByParam_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryIssueStateByParam_argsStandardSchemeFactory implements SchemeFactory {
      public updateLotteryIssueStateByParam_argsStandardScheme getScheme() {
        return new updateLotteryIssueStateByParam_argsStandardScheme();
      }
    }

    private static class updateLotteryIssueStateByParam_argsStandardScheme extends StandardScheme<updateLotteryIssueStateByParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryIssueStateByParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryIssueStateByParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryIssueStateByParam_argsTupleSchemeFactory implements SchemeFactory {
      public updateLotteryIssueStateByParam_argsTupleScheme getScheme() {
        return new updateLotteryIssueStateByParam_argsTupleScheme();
      }
    }

    private static class updateLotteryIssueStateByParam_argsTupleScheme extends TupleScheme<updateLotteryIssueStateByParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueStateByParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueStateByParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryIssueStateByParam_result implements org.apache.thrift.TBase<updateLotteryIssueStateByParam_result, updateLotteryIssueStateByParam_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryIssueStateByParam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryIssueStateByParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryIssueStateByParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryIssueStateByParam_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryIssueStateByParam_result.class, metaDataMap);
    }

    public updateLotteryIssueStateByParam_result() {
    }

    public updateLotteryIssueStateByParam_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryIssueStateByParam_result(updateLotteryIssueStateByParam_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateLotteryIssueStateByParam_result deepCopy() {
      return new updateLotteryIssueStateByParam_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateLotteryIssueStateByParam_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryIssueStateByParam_result)
        return this.equals((updateLotteryIssueStateByParam_result)that);
      return false;
    }

    public boolean equals(updateLotteryIssueStateByParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryIssueStateByParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryIssueStateByParam_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryIssueStateByParam_resultStandardSchemeFactory implements SchemeFactory {
      public updateLotteryIssueStateByParam_resultStandardScheme getScheme() {
        return new updateLotteryIssueStateByParam_resultStandardScheme();
      }
    }

    private static class updateLotteryIssueStateByParam_resultStandardScheme extends StandardScheme<updateLotteryIssueStateByParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryIssueStateByParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryIssueStateByParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryIssueStateByParam_resultTupleSchemeFactory implements SchemeFactory {
      public updateLotteryIssueStateByParam_resultTupleScheme getScheme() {
        return new updateLotteryIssueStateByParam_resultTupleScheme();
      }
    }

    private static class updateLotteryIssueStateByParam_resultTupleScheme extends TupleScheme<updateLotteryIssueStateByParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueStateByParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssueStateByParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteIssueNo_args implements org.apache.thrift.TBase<deleteIssueNo_args, deleteIssueNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteIssueNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteIssueNo_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteIssueNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteIssueNo_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteIssueNo_args.class, metaDataMap);
    }

    public deleteIssueNo_args() {
    }

    public deleteIssueNo_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteIssueNo_args(deleteIssueNo_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public deleteIssueNo_args deepCopy() {
      return new deleteIssueNo_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public deleteIssueNo_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public deleteIssueNo_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteIssueNo_args)
        return this.equals((deleteIssueNo_args)that);
      return false;
    }

    public boolean equals(deleteIssueNo_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteIssueNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteIssueNo_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteIssueNo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteIssueNo_argsStandardScheme getScheme() {
        return new deleteIssueNo_argsStandardScheme();
      }
    }

    private static class deleteIssueNo_argsStandardScheme extends StandardScheme<deleteIssueNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteIssueNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteIssueNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteIssueNo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteIssueNo_argsTupleScheme getScheme() {
        return new deleteIssueNo_argsTupleScheme();
      }
    }

    private static class deleteIssueNo_argsTupleScheme extends TupleScheme<deleteIssueNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteIssueNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteIssueNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class deleteIssueNo_result implements org.apache.thrift.TBase<deleteIssueNo_result, deleteIssueNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteIssueNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteIssueNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteIssueNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteIssueNo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteIssueNo_result.class, metaDataMap);
    }

    public deleteIssueNo_result() {
    }

    public deleteIssueNo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteIssueNo_result(deleteIssueNo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteIssueNo_result deepCopy() {
      return new deleteIssueNo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteIssueNo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteIssueNo_result)
        return this.equals((deleteIssueNo_result)that);
      return false;
    }

    public boolean equals(deleteIssueNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteIssueNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteIssueNo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteIssueNo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteIssueNo_resultStandardScheme getScheme() {
        return new deleteIssueNo_resultStandardScheme();
      }
    }

    private static class deleteIssueNo_resultStandardScheme extends StandardScheme<deleteIssueNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteIssueNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteIssueNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteIssueNo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteIssueNo_resultTupleScheme getScheme() {
        return new deleteIssueNo_resultTupleScheme();
      }
    }

    private static class deleteIssueNo_resultTupleScheme extends TupleScheme<deleteIssueNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteIssueNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteIssueNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryIssue_args implements org.apache.thrift.TBase<updateLotteryIssue_args, updateLotteryIssue_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryIssue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryIssue_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssue", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryIssue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryIssue_argsTupleSchemeFactory());
    }

    public LotteryIssue lotteryIssue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ISSUE((short)1, "lotteryIssue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ISSUE
            return LOTTERY_ISSUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryIssue_args.class, metaDataMap);
    }

    public updateLotteryIssue_args() {
    }

    public updateLotteryIssue_args(
      LotteryIssue lotteryIssue)
    {
      this();
      this.lotteryIssue = lotteryIssue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryIssue_args(updateLotteryIssue_args other) {
      if (other.isSetLotteryIssue()) {
        this.lotteryIssue = new LotteryIssue(other.lotteryIssue);
      }
    }

    public updateLotteryIssue_args deepCopy() {
      return new updateLotteryIssue_args(this);
    }

    @Override
    public void clear() {
      this.lotteryIssue = null;
    }

    public LotteryIssue getLotteryIssue() {
      return this.lotteryIssue;
    }

    public updateLotteryIssue_args setLotteryIssue(LotteryIssue lotteryIssue) {
      this.lotteryIssue = lotteryIssue;
      return this;
    }

    public void unsetLotteryIssue() {
      this.lotteryIssue = null;
    }

    /** Returns true if field lotteryIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryIssue() {
      return this.lotteryIssue != null;
    }

    public void setLotteryIssueIsSet(boolean value) {
      if (!value) {
        this.lotteryIssue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ISSUE:
        if (value == null) {
          unsetLotteryIssue();
        } else {
          setLotteryIssue((LotteryIssue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ISSUE:
        return getLotteryIssue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ISSUE:
        return isSetLotteryIssue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryIssue_args)
        return this.equals((updateLotteryIssue_args)that);
      return false;
    }

    public boolean equals(updateLotteryIssue_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryIssue = true && this.isSetLotteryIssue();
      boolean that_present_lotteryIssue = true && that.isSetLotteryIssue();
      if (this_present_lotteryIssue || that_present_lotteryIssue) {
        if (!(this_present_lotteryIssue && that_present_lotteryIssue))
          return false;
        if (!this.lotteryIssue.equals(that.lotteryIssue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryIssue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryIssue()).compareTo(other.isSetLotteryIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssue, other.lotteryIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryIssue_args(");
      boolean first = true;

      sb.append("lotteryIssue:");
      if (this.lotteryIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryIssue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryIssue != null) {
        lotteryIssue.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryIssue_argsStandardSchemeFactory implements SchemeFactory {
      public updateLotteryIssue_argsStandardScheme getScheme() {
        return new updateLotteryIssue_argsStandardScheme();
      }
    }

    private static class updateLotteryIssue_argsStandardScheme extends StandardScheme<updateLotteryIssue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryIssue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryIssue = new LotteryIssue();
                struct.lotteryIssue.read(iprot);
                struct.setLotteryIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryIssue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryIssue != null) {
          oprot.writeFieldBegin(LOTTERY_ISSUE_FIELD_DESC);
          struct.lotteryIssue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryIssue_argsTupleSchemeFactory implements SchemeFactory {
      public updateLotteryIssue_argsTupleScheme getScheme() {
        return new updateLotteryIssue_argsTupleScheme();
      }
    }

    private static class updateLotteryIssue_argsTupleScheme extends TupleScheme<updateLotteryIssue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryIssue()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryIssue()) {
          struct.lotteryIssue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryIssue = new LotteryIssue();
          struct.lotteryIssue.read(iprot);
          struct.setLotteryIssueIsSet(true);
        }
      }
    }

  }

  public static class updateLotteryIssue_result implements org.apache.thrift.TBase<updateLotteryIssue_result, updateLotteryIssue_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLotteryIssue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLotteryIssue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLotteryIssue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLotteryIssue_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLotteryIssue_result.class, metaDataMap);
    }

    public updateLotteryIssue_result() {
    }

    public updateLotteryIssue_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLotteryIssue_result(updateLotteryIssue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateLotteryIssue_result deepCopy() {
      return new updateLotteryIssue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateLotteryIssue_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLotteryIssue_result)
        return this.equals((updateLotteryIssue_result)that);
      return false;
    }

    public boolean equals(updateLotteryIssue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLotteryIssue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLotteryIssue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLotteryIssue_resultStandardSchemeFactory implements SchemeFactory {
      public updateLotteryIssue_resultStandardScheme getScheme() {
        return new updateLotteryIssue_resultStandardScheme();
      }
    }

    private static class updateLotteryIssue_resultStandardScheme extends StandardScheme<updateLotteryIssue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLotteryIssue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLotteryIssue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLotteryIssue_resultTupleSchemeFactory implements SchemeFactory {
      public updateLotteryIssue_resultTupleScheme getScheme() {
        return new updateLotteryIssue_resultTupleScheme();
      }
    }

    private static class updateLotteryIssue_resultTupleScheme extends TupleScheme<updateLotteryIssue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createLotteryDrawResult_args implements org.apache.thrift.TBase<createLotteryDrawResult_args, createLotteryDrawResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLotteryDrawResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLotteryDrawResult_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_DRAW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryDrawResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLotteryDrawResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLotteryDrawResult_argsTupleSchemeFactory());
    }

    public LotteryDrawResult lotteryDrawResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_DRAW_RESULT((short)1, "lotteryDrawResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_DRAW_RESULT
            return LOTTERY_DRAW_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_DRAW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("lotteryDrawResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryDrawResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLotteryDrawResult_args.class, metaDataMap);
    }

    public createLotteryDrawResult_args() {
    }

    public createLotteryDrawResult_args(
      LotteryDrawResult lotteryDrawResult)
    {
      this();
      this.lotteryDrawResult = lotteryDrawResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLotteryDrawResult_args(createLotteryDrawResult_args other) {
      if (other.isSetLotteryDrawResult()) {
        this.lotteryDrawResult = new LotteryDrawResult(other.lotteryDrawResult);
      }
    }

    public createLotteryDrawResult_args deepCopy() {
      return new createLotteryDrawResult_args(this);
    }

    @Override
    public void clear() {
      this.lotteryDrawResult = null;
    }

    public LotteryDrawResult getLotteryDrawResult() {
      return this.lotteryDrawResult;
    }

    public createLotteryDrawResult_args setLotteryDrawResult(LotteryDrawResult lotteryDrawResult) {
      this.lotteryDrawResult = lotteryDrawResult;
      return this;
    }

    public void unsetLotteryDrawResult() {
      this.lotteryDrawResult = null;
    }

    /** Returns true if field lotteryDrawResult is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryDrawResult() {
      return this.lotteryDrawResult != null;
    }

    public void setLotteryDrawResultIsSet(boolean value) {
      if (!value) {
        this.lotteryDrawResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_DRAW_RESULT:
        if (value == null) {
          unsetLotteryDrawResult();
        } else {
          setLotteryDrawResult((LotteryDrawResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_DRAW_RESULT:
        return getLotteryDrawResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_DRAW_RESULT:
        return isSetLotteryDrawResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLotteryDrawResult_args)
        return this.equals((createLotteryDrawResult_args)that);
      return false;
    }

    public boolean equals(createLotteryDrawResult_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryDrawResult = true && this.isSetLotteryDrawResult();
      boolean that_present_lotteryDrawResult = true && that.isSetLotteryDrawResult();
      if (this_present_lotteryDrawResult || that_present_lotteryDrawResult) {
        if (!(this_present_lotteryDrawResult && that_present_lotteryDrawResult))
          return false;
        if (!this.lotteryDrawResult.equals(that.lotteryDrawResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLotteryDrawResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryDrawResult()).compareTo(other.isSetLotteryDrawResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryDrawResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryDrawResult, other.lotteryDrawResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLotteryDrawResult_args(");
      boolean first = true;

      sb.append("lotteryDrawResult:");
      if (this.lotteryDrawResult == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryDrawResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryDrawResult != null) {
        lotteryDrawResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLotteryDrawResult_argsStandardSchemeFactory implements SchemeFactory {
      public createLotteryDrawResult_argsStandardScheme getScheme() {
        return new createLotteryDrawResult_argsStandardScheme();
      }
    }

    private static class createLotteryDrawResult_argsStandardScheme extends StandardScheme<createLotteryDrawResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_DRAW_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryDrawResult = new LotteryDrawResult();
                struct.lotteryDrawResult.read(iprot);
                struct.setLotteryDrawResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryDrawResult != null) {
          oprot.writeFieldBegin(LOTTERY_DRAW_RESULT_FIELD_DESC);
          struct.lotteryDrawResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLotteryDrawResult_argsTupleSchemeFactory implements SchemeFactory {
      public createLotteryDrawResult_argsTupleScheme getScheme() {
        return new createLotteryDrawResult_argsTupleScheme();
      }
    }

    private static class createLotteryDrawResult_argsTupleScheme extends TupleScheme<createLotteryDrawResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryDrawResult()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryDrawResult()) {
          struct.lotteryDrawResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLotteryDrawResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryDrawResult = new LotteryDrawResult();
          struct.lotteryDrawResult.read(iprot);
          struct.setLotteryDrawResultIsSet(true);
        }
      }
    }

  }

  public static class createLotteryDrawResult_result implements org.apache.thrift.TBase<createLotteryDrawResult_result, createLotteryDrawResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLotteryDrawResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLotteryDrawResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLotteryDrawResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLotteryDrawResult_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLotteryDrawResult_result.class, metaDataMap);
    }

    public createLotteryDrawResult_result() {
    }

    public createLotteryDrawResult_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLotteryDrawResult_result(createLotteryDrawResult_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createLotteryDrawResult_result deepCopy() {
      return new createLotteryDrawResult_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createLotteryDrawResult_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLotteryDrawResult_result)
        return this.equals((createLotteryDrawResult_result)that);
      return false;
    }

    public boolean equals(createLotteryDrawResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLotteryDrawResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLotteryDrawResult_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLotteryDrawResult_resultStandardSchemeFactory implements SchemeFactory {
      public createLotteryDrawResult_resultStandardScheme getScheme() {
        return new createLotteryDrawResult_resultStandardScheme();
      }
    }

    private static class createLotteryDrawResult_resultStandardScheme extends StandardScheme<createLotteryDrawResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLotteryDrawResult_resultTupleSchemeFactory implements SchemeFactory {
      public createLotteryDrawResult_resultTupleScheme getScheme() {
        return new createLotteryDrawResult_resultTupleScheme();
      }
    }

    private static class createLotteryDrawResult_resultTupleScheme extends TupleScheme<createLotteryDrawResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLotteryDrawResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createLZCLotteryIssue_args implements org.apache.thrift.TBase<createLZCLotteryIssue_args, createLZCLotteryIssue_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLZCLotteryIssue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLZCLotteryIssue_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryIssue", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLZCLotteryIssue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLZCLotteryIssue_argsTupleSchemeFactory());
    }

    public LotteryIssue lotteryIssue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ISSUE((short)1, "lotteryIssue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ISSUE
            return LOTTERY_ISSUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("lotteryIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LotteryIssue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLZCLotteryIssue_args.class, metaDataMap);
    }

    public createLZCLotteryIssue_args() {
    }

    public createLZCLotteryIssue_args(
      LotteryIssue lotteryIssue)
    {
      this();
      this.lotteryIssue = lotteryIssue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLZCLotteryIssue_args(createLZCLotteryIssue_args other) {
      if (other.isSetLotteryIssue()) {
        this.lotteryIssue = new LotteryIssue(other.lotteryIssue);
      }
    }

    public createLZCLotteryIssue_args deepCopy() {
      return new createLZCLotteryIssue_args(this);
    }

    @Override
    public void clear() {
      this.lotteryIssue = null;
    }

    public LotteryIssue getLotteryIssue() {
      return this.lotteryIssue;
    }

    public createLZCLotteryIssue_args setLotteryIssue(LotteryIssue lotteryIssue) {
      this.lotteryIssue = lotteryIssue;
      return this;
    }

    public void unsetLotteryIssue() {
      this.lotteryIssue = null;
    }

    /** Returns true if field lotteryIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryIssue() {
      return this.lotteryIssue != null;
    }

    public void setLotteryIssueIsSet(boolean value) {
      if (!value) {
        this.lotteryIssue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ISSUE:
        if (value == null) {
          unsetLotteryIssue();
        } else {
          setLotteryIssue((LotteryIssue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ISSUE:
        return getLotteryIssue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ISSUE:
        return isSetLotteryIssue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLZCLotteryIssue_args)
        return this.equals((createLZCLotteryIssue_args)that);
      return false;
    }

    public boolean equals(createLZCLotteryIssue_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryIssue = true && this.isSetLotteryIssue();
      boolean that_present_lotteryIssue = true && that.isSetLotteryIssue();
      if (this_present_lotteryIssue || that_present_lotteryIssue) {
        if (!(this_present_lotteryIssue && that_present_lotteryIssue))
          return false;
        if (!this.lotteryIssue.equals(that.lotteryIssue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLZCLotteryIssue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryIssue()).compareTo(other.isSetLotteryIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryIssue, other.lotteryIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLZCLotteryIssue_args(");
      boolean first = true;

      sb.append("lotteryIssue:");
      if (this.lotteryIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryIssue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lotteryIssue != null) {
        lotteryIssue.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLZCLotteryIssue_argsStandardSchemeFactory implements SchemeFactory {
      public createLZCLotteryIssue_argsStandardScheme getScheme() {
        return new createLZCLotteryIssue_argsStandardScheme();
      }
    }

    private static class createLZCLotteryIssue_argsStandardScheme extends StandardScheme<createLZCLotteryIssue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLZCLotteryIssue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lotteryIssue = new LotteryIssue();
                struct.lotteryIssue.read(iprot);
                struct.setLotteryIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLZCLotteryIssue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryIssue != null) {
          oprot.writeFieldBegin(LOTTERY_ISSUE_FIELD_DESC);
          struct.lotteryIssue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLZCLotteryIssue_argsTupleSchemeFactory implements SchemeFactory {
      public createLZCLotteryIssue_argsTupleScheme getScheme() {
        return new createLZCLotteryIssue_argsTupleScheme();
      }
    }

    private static class createLZCLotteryIssue_argsTupleScheme extends TupleScheme<createLZCLotteryIssue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLZCLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryIssue()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryIssue()) {
          struct.lotteryIssue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLZCLotteryIssue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryIssue = new LotteryIssue();
          struct.lotteryIssue.read(iprot);
          struct.setLotteryIssueIsSet(true);
        }
      }
    }

  }

  public static class createLZCLotteryIssue_result implements org.apache.thrift.TBase<createLZCLotteryIssue_result, createLZCLotteryIssue_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLZCLotteryIssue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLZCLotteryIssue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLZCLotteryIssue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLZCLotteryIssue_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLZCLotteryIssue_result.class, metaDataMap);
    }

    public createLZCLotteryIssue_result() {
    }

    public createLZCLotteryIssue_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLZCLotteryIssue_result(createLZCLotteryIssue_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createLZCLotteryIssue_result deepCopy() {
      return new createLZCLotteryIssue_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createLZCLotteryIssue_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLZCLotteryIssue_result)
        return this.equals((createLZCLotteryIssue_result)that);
      return false;
    }

    public boolean equals(createLZCLotteryIssue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createLZCLotteryIssue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLZCLotteryIssue_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLZCLotteryIssue_resultStandardSchemeFactory implements SchemeFactory {
      public createLZCLotteryIssue_resultStandardScheme getScheme() {
        return new createLZCLotteryIssue_resultStandardScheme();
      }
    }

    private static class createLZCLotteryIssue_resultStandardScheme extends StandardScheme<createLZCLotteryIssue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLZCLotteryIssue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLZCLotteryIssue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLZCLotteryIssue_resultTupleSchemeFactory implements SchemeFactory {
      public createLZCLotteryIssue_resultTupleScheme getScheme() {
        return new createLZCLotteryIssue_resultTupleScheme();
      }
    }

    private static class createLZCLotteryIssue_resultTupleScheme extends TupleScheme<createLZCLotteryIssue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLZCLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLZCLotteryIssue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveResultList_args implements org.apache.thrift.TBase<getMatchCompetiveResultList_args, getMatchCompetiveResultList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveResultList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveResultList_args");

    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveResultList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveResultList_argsTupleSchemeFactory());
    }

    public String wareIssue; // required
    public String transferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WARE_ISSUE((short)1, "wareIssue"),
      TRANSFER_ID((short)2, "transferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WARE_ISSUE
            return WARE_ISSUE;
          case 2: // TRANSFER_ID
            return TRANSFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveResultList_args.class, metaDataMap);
    }

    public getMatchCompetiveResultList_args() {
    }

    public getMatchCompetiveResultList_args(
      String wareIssue,
      String transferId)
    {
      this();
      this.wareIssue = wareIssue;
      this.transferId = transferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveResultList_args(getMatchCompetiveResultList_args other) {
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
      if (other.isSetTransferId()) {
        this.transferId = other.transferId;
      }
    }

    public getMatchCompetiveResultList_args deepCopy() {
      return new getMatchCompetiveResultList_args(this);
    }

    @Override
    public void clear() {
      this.wareIssue = null;
      this.transferId = null;
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public getMatchCompetiveResultList_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public String getTransferId() {
      return this.transferId;
    }

    public getMatchCompetiveResultList_args setTransferId(String transferId) {
      this.transferId = transferId;
      return this;
    }

    public void unsetTransferId() {
      this.transferId = null;
    }

    /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferId() {
      return this.transferId != null;
    }

    public void setTransferIdIsSet(boolean value) {
      if (!value) {
        this.transferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      case TRANSFER_ID:
        if (value == null) {
          unsetTransferId();
        } else {
          setTransferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WARE_ISSUE:
        return getWareIssue();

      case TRANSFER_ID:
        return getTransferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WARE_ISSUE:
        return isSetWareIssue();
      case TRANSFER_ID:
        return isSetTransferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveResultList_args)
        return this.equals((getMatchCompetiveResultList_args)that);
      return false;
    }

    public boolean equals(getMatchCompetiveResultList_args that) {
      if (that == null)
        return false;

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      boolean this_present_transferId = true && this.isSetTransferId();
      boolean that_present_transferId = true && that.isSetTransferId();
      if (this_present_transferId || that_present_transferId) {
        if (!(this_present_transferId && that_present_transferId))
          return false;
        if (!this.transferId.equals(that.transferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveResultList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveResultList_args(");
      boolean first = true;

      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferId:");
      if (this.transferId == null) {
        sb.append("null");
      } else {
        sb.append(this.transferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveResultList_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResultList_argsStandardScheme getScheme() {
        return new getMatchCompetiveResultList_argsStandardScheme();
      }
    }

    private static class getMatchCompetiveResultList_argsStandardScheme extends StandardScheme<getMatchCompetiveResultList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transferId = iprot.readString();
                struct.setTransferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        if (struct.transferId != null) {
          oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
          oprot.writeString(struct.transferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveResultList_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResultList_argsTupleScheme getScheme() {
        return new getMatchCompetiveResultList_argsTupleScheme();
      }
    }

    private static class getMatchCompetiveResultList_argsTupleScheme extends TupleScheme<getMatchCompetiveResultList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWareIssue()) {
          optionals.set(0);
        }
        if (struct.isSetTransferId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
        if (struct.isSetTransferId()) {
          oprot.writeString(struct.transferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transferId = iprot.readString();
          struct.setTransferIdIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveResultList_result implements org.apache.thrift.TBase<getMatchCompetiveResultList_result, getMatchCompetiveResultList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveResultList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveResultList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveResultList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveResultList_resultTupleSchemeFactory());
    }

    public MatchCompetive success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveResultList_result.class, metaDataMap);
    }

    public getMatchCompetiveResultList_result() {
    }

    public getMatchCompetiveResultList_result(
      MatchCompetive success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveResultList_result(getMatchCompetiveResultList_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchCompetive(other.success);
      }
    }

    public getMatchCompetiveResultList_result deepCopy() {
      return new getMatchCompetiveResultList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchCompetive getSuccess() {
      return this.success;
    }

    public getMatchCompetiveResultList_result setSuccess(MatchCompetive success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchCompetive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveResultList_result)
        return this.equals((getMatchCompetiveResultList_result)that);
      return false;
    }

    public boolean equals(getMatchCompetiveResultList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveResultList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveResultList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveResultList_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResultList_resultStandardScheme getScheme() {
        return new getMatchCompetiveResultList_resultStandardScheme();
      }
    }

    private static class getMatchCompetiveResultList_resultStandardScheme extends StandardScheme<getMatchCompetiveResultList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchCompetive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveResultList_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResultList_resultTupleScheme getScheme() {
        return new getMatchCompetiveResultList_resultTupleScheme();
      }
    }

    private static class getMatchCompetiveResultList_resultTupleScheme extends TupleScheme<getMatchCompetiveResultList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchCompetive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveResult_args implements org.apache.thrift.TBase<getMatchCompetiveResult_args, getMatchCompetiveResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveResult_args");

    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveResult_argsTupleSchemeFactory());
    }

    public String wareIssue; // required
    public String lotteryId; // required
    public String transferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WARE_ISSUE((short)1, "wareIssue"),
      LOTTERY_ID((short)2, "lotteryId"),
      TRANSFER_ID((short)3, "transferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WARE_ISSUE
            return WARE_ISSUE;
          case 2: // LOTTERY_ID
            return LOTTERY_ID;
          case 3: // TRANSFER_ID
            return TRANSFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveResult_args.class, metaDataMap);
    }

    public getMatchCompetiveResult_args() {
    }

    public getMatchCompetiveResult_args(
      String wareIssue,
      String lotteryId,
      String transferId)
    {
      this();
      this.wareIssue = wareIssue;
      this.lotteryId = lotteryId;
      this.transferId = transferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveResult_args(getMatchCompetiveResult_args other) {
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetTransferId()) {
        this.transferId = other.transferId;
      }
    }

    public getMatchCompetiveResult_args deepCopy() {
      return new getMatchCompetiveResult_args(this);
    }

    @Override
    public void clear() {
      this.wareIssue = null;
      this.lotteryId = null;
      this.transferId = null;
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public getMatchCompetiveResult_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getMatchCompetiveResult_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getTransferId() {
      return this.transferId;
    }

    public getMatchCompetiveResult_args setTransferId(String transferId) {
      this.transferId = transferId;
      return this;
    }

    public void unsetTransferId() {
      this.transferId = null;
    }

    /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferId() {
      return this.transferId != null;
    }

    public void setTransferIdIsSet(boolean value) {
      if (!value) {
        this.transferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case TRANSFER_ID:
        if (value == null) {
          unsetTransferId();
        } else {
          setTransferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WARE_ISSUE:
        return getWareIssue();

      case LOTTERY_ID:
        return getLotteryId();

      case TRANSFER_ID:
        return getTransferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WARE_ISSUE:
        return isSetWareIssue();
      case LOTTERY_ID:
        return isSetLotteryId();
      case TRANSFER_ID:
        return isSetTransferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveResult_args)
        return this.equals((getMatchCompetiveResult_args)that);
      return false;
    }

    public boolean equals(getMatchCompetiveResult_args that) {
      if (that == null)
        return false;

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_transferId = true && this.isSetTransferId();
      boolean that_present_transferId = true && that.isSetTransferId();
      if (this_present_transferId || that_present_transferId) {
        if (!(this_present_transferId && that_present_transferId))
          return false;
        if (!this.transferId.equals(that.transferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveResult_args(");
      boolean first = true;

      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferId:");
      if (this.transferId == null) {
        sb.append("null");
      } else {
        sb.append(this.transferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveResult_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResult_argsStandardScheme getScheme() {
        return new getMatchCompetiveResult_argsStandardScheme();
      }
    }

    private static class getMatchCompetiveResult_argsStandardScheme extends StandardScheme<getMatchCompetiveResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRANSFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transferId = iprot.readString();
                struct.setTransferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.transferId != null) {
          oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
          oprot.writeString(struct.transferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveResult_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResult_argsTupleScheme getScheme() {
        return new getMatchCompetiveResult_argsTupleScheme();
      }
    }

    private static class getMatchCompetiveResult_argsTupleScheme extends TupleScheme<getMatchCompetiveResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWareIssue()) {
          optionals.set(0);
        }
        if (struct.isSetLotteryId()) {
          optionals.set(1);
        }
        if (struct.isSetTransferId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetTransferId()) {
          oprot.writeString(struct.transferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.transferId = iprot.readString();
          struct.setTransferIdIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveResult_result implements org.apache.thrift.TBase<getMatchCompetiveResult_result, getMatchCompetiveResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveResult_resultTupleSchemeFactory());
    }

    public MatchCompetive success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveResult_result.class, metaDataMap);
    }

    public getMatchCompetiveResult_result() {
    }

    public getMatchCompetiveResult_result(
      MatchCompetive success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveResult_result(getMatchCompetiveResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchCompetive(other.success);
      }
    }

    public getMatchCompetiveResult_result deepCopy() {
      return new getMatchCompetiveResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchCompetive getSuccess() {
      return this.success;
    }

    public getMatchCompetiveResult_result setSuccess(MatchCompetive success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchCompetive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveResult_result)
        return this.equals((getMatchCompetiveResult_result)that);
      return false;
    }

    public boolean equals(getMatchCompetiveResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveResult_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResult_resultStandardScheme getScheme() {
        return new getMatchCompetiveResult_resultStandardScheme();
      }
    }

    private static class getMatchCompetiveResult_resultStandardScheme extends StandardScheme<getMatchCompetiveResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchCompetive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveResult_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveResult_resultTupleScheme getScheme() {
        return new getMatchCompetiveResult_resultTupleScheme();
      }
    }

    private static class getMatchCompetiveResult_resultTupleScheme extends TupleScheme<getMatchCompetiveResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchCompetive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetive_args implements org.apache.thrift.TBase<getMatchCompetive_args, getMatchCompetive_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetive_args");

    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetive_argsTupleSchemeFactory());
    }

    public String wareIssue; // required
    public String transferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WARE_ISSUE((short)1, "wareIssue"),
      TRANSFER_ID((short)2, "transferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WARE_ISSUE
            return WARE_ISSUE;
          case 2: // TRANSFER_ID
            return TRANSFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetive_args.class, metaDataMap);
    }

    public getMatchCompetive_args() {
    }

    public getMatchCompetive_args(
      String wareIssue,
      String transferId)
    {
      this();
      this.wareIssue = wareIssue;
      this.transferId = transferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetive_args(getMatchCompetive_args other) {
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
      if (other.isSetTransferId()) {
        this.transferId = other.transferId;
      }
    }

    public getMatchCompetive_args deepCopy() {
      return new getMatchCompetive_args(this);
    }

    @Override
    public void clear() {
      this.wareIssue = null;
      this.transferId = null;
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public getMatchCompetive_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public String getTransferId() {
      return this.transferId;
    }

    public getMatchCompetive_args setTransferId(String transferId) {
      this.transferId = transferId;
      return this;
    }

    public void unsetTransferId() {
      this.transferId = null;
    }

    /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferId() {
      return this.transferId != null;
    }

    public void setTransferIdIsSet(boolean value) {
      if (!value) {
        this.transferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      case TRANSFER_ID:
        if (value == null) {
          unsetTransferId();
        } else {
          setTransferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WARE_ISSUE:
        return getWareIssue();

      case TRANSFER_ID:
        return getTransferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WARE_ISSUE:
        return isSetWareIssue();
      case TRANSFER_ID:
        return isSetTransferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetive_args)
        return this.equals((getMatchCompetive_args)that);
      return false;
    }

    public boolean equals(getMatchCompetive_args that) {
      if (that == null)
        return false;

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      boolean this_present_transferId = true && this.isSetTransferId();
      boolean that_present_transferId = true && that.isSetTransferId();
      if (this_present_transferId || that_present_transferId) {
        if (!(this_present_transferId && that_present_transferId))
          return false;
        if (!this.transferId.equals(that.transferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetive_args(");
      boolean first = true;

      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferId:");
      if (this.transferId == null) {
        sb.append("null");
      } else {
        sb.append(this.transferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetive_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetive_argsStandardScheme getScheme() {
        return new getMatchCompetive_argsStandardScheme();
      }
    }

    private static class getMatchCompetive_argsStandardScheme extends StandardScheme<getMatchCompetive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transferId = iprot.readString();
                struct.setTransferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        if (struct.transferId != null) {
          oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
          oprot.writeString(struct.transferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetive_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetive_argsTupleScheme getScheme() {
        return new getMatchCompetive_argsTupleScheme();
      }
    }

    private static class getMatchCompetive_argsTupleScheme extends TupleScheme<getMatchCompetive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWareIssue()) {
          optionals.set(0);
        }
        if (struct.isSetTransferId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
        if (struct.isSetTransferId()) {
          oprot.writeString(struct.transferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transferId = iprot.readString();
          struct.setTransferIdIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetive_result implements org.apache.thrift.TBase<getMatchCompetive_result, getMatchCompetive_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetive_resultTupleSchemeFactory());
    }

    public MatchCompetive success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetive_result.class, metaDataMap);
    }

    public getMatchCompetive_result() {
    }

    public getMatchCompetive_result(
      MatchCompetive success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetive_result(getMatchCompetive_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchCompetive(other.success);
      }
    }

    public getMatchCompetive_result deepCopy() {
      return new getMatchCompetive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchCompetive getSuccess() {
      return this.success;
    }

    public getMatchCompetive_result setSuccess(MatchCompetive success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchCompetive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetive_result)
        return this.equals((getMatchCompetive_result)that);
      return false;
    }

    public boolean equals(getMatchCompetive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetive_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetive_resultStandardScheme getScheme() {
        return new getMatchCompetive_resultStandardScheme();
      }
    }

    private static class getMatchCompetive_resultStandardScheme extends StandardScheme<getMatchCompetive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchCompetive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetive_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetive_resultTupleScheme getScheme() {
        return new getMatchCompetive_resultTupleScheme();
      }
    }

    private static class getMatchCompetive_resultTupleScheme extends TupleScheme<getMatchCompetive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchCompetive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveByLotteryId_args implements org.apache.thrift.TBase<getMatchCompetiveByLotteryId_args, getMatchCompetiveByLotteryId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveByLotteryId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveByLotteryId_args");

    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveByLotteryId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveByLotteryId_argsTupleSchemeFactory());
    }

    public String wareIssue; // required
    public String transferId; // required
    public String lotteryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WARE_ISSUE((short)1, "wareIssue"),
      TRANSFER_ID((short)2, "transferId"),
      LOTTERY_ID((short)3, "lotteryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WARE_ISSUE
            return WARE_ISSUE;
          case 2: // TRANSFER_ID
            return TRANSFER_ID;
          case 3: // LOTTERY_ID
            return LOTTERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveByLotteryId_args.class, metaDataMap);
    }

    public getMatchCompetiveByLotteryId_args() {
    }

    public getMatchCompetiveByLotteryId_args(
      String wareIssue,
      String transferId,
      String lotteryId)
    {
      this();
      this.wareIssue = wareIssue;
      this.transferId = transferId;
      this.lotteryId = lotteryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveByLotteryId_args(getMatchCompetiveByLotteryId_args other) {
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
      if (other.isSetTransferId()) {
        this.transferId = other.transferId;
      }
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
    }

    public getMatchCompetiveByLotteryId_args deepCopy() {
      return new getMatchCompetiveByLotteryId_args(this);
    }

    @Override
    public void clear() {
      this.wareIssue = null;
      this.transferId = null;
      this.lotteryId = null;
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public getMatchCompetiveByLotteryId_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public String getTransferId() {
      return this.transferId;
    }

    public getMatchCompetiveByLotteryId_args setTransferId(String transferId) {
      this.transferId = transferId;
      return this;
    }

    public void unsetTransferId() {
      this.transferId = null;
    }

    /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferId() {
      return this.transferId != null;
    }

    public void setTransferIdIsSet(boolean value) {
      if (!value) {
        this.transferId = null;
      }
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getMatchCompetiveByLotteryId_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      case TRANSFER_ID:
        if (value == null) {
          unsetTransferId();
        } else {
          setTransferId((String)value);
        }
        break;

      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WARE_ISSUE:
        return getWareIssue();

      case TRANSFER_ID:
        return getTransferId();

      case LOTTERY_ID:
        return getLotteryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WARE_ISSUE:
        return isSetWareIssue();
      case TRANSFER_ID:
        return isSetTransferId();
      case LOTTERY_ID:
        return isSetLotteryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveByLotteryId_args)
        return this.equals((getMatchCompetiveByLotteryId_args)that);
      return false;
    }

    public boolean equals(getMatchCompetiveByLotteryId_args that) {
      if (that == null)
        return false;

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      boolean this_present_transferId = true && this.isSetTransferId();
      boolean that_present_transferId = true && that.isSetTransferId();
      if (this_present_transferId || that_present_transferId) {
        if (!(this_present_transferId && that_present_transferId))
          return false;
        if (!this.transferId.equals(that.transferId))
          return false;
      }

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveByLotteryId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveByLotteryId_args(");
      boolean first = true;

      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferId:");
      if (this.transferId == null) {
        sb.append("null");
      } else {
        sb.append(this.transferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveByLotteryId_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveByLotteryId_argsStandardScheme getScheme() {
        return new getMatchCompetiveByLotteryId_argsStandardScheme();
      }
    }

    private static class getMatchCompetiveByLotteryId_argsStandardScheme extends StandardScheme<getMatchCompetiveByLotteryId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveByLotteryId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transferId = iprot.readString();
                struct.setTransferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveByLotteryId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        if (struct.transferId != null) {
          oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
          oprot.writeString(struct.transferId);
          oprot.writeFieldEnd();
        }
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveByLotteryId_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveByLotteryId_argsTupleScheme getScheme() {
        return new getMatchCompetiveByLotteryId_argsTupleScheme();
      }
    }

    private static class getMatchCompetiveByLotteryId_argsTupleScheme extends TupleScheme<getMatchCompetiveByLotteryId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveByLotteryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWareIssue()) {
          optionals.set(0);
        }
        if (struct.isSetTransferId()) {
          optionals.set(1);
        }
        if (struct.isSetLotteryId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
        if (struct.isSetTransferId()) {
          oprot.writeString(struct.transferId);
        }
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveByLotteryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transferId = iprot.readString();
          struct.setTransferIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveByLotteryId_result implements org.apache.thrift.TBase<getMatchCompetiveByLotteryId_result, getMatchCompetiveByLotteryId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveByLotteryId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveByLotteryId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveByLotteryId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveByLotteryId_resultTupleSchemeFactory());
    }

    public MatchCompetive success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveByLotteryId_result.class, metaDataMap);
    }

    public getMatchCompetiveByLotteryId_result() {
    }

    public getMatchCompetiveByLotteryId_result(
      MatchCompetive success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveByLotteryId_result(getMatchCompetiveByLotteryId_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchCompetive(other.success);
      }
    }

    public getMatchCompetiveByLotteryId_result deepCopy() {
      return new getMatchCompetiveByLotteryId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchCompetive getSuccess() {
      return this.success;
    }

    public getMatchCompetiveByLotteryId_result setSuccess(MatchCompetive success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchCompetive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveByLotteryId_result)
        return this.equals((getMatchCompetiveByLotteryId_result)that);
      return false;
    }

    public boolean equals(getMatchCompetiveByLotteryId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveByLotteryId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveByLotteryId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveByLotteryId_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveByLotteryId_resultStandardScheme getScheme() {
        return new getMatchCompetiveByLotteryId_resultStandardScheme();
      }
    }

    private static class getMatchCompetiveByLotteryId_resultStandardScheme extends StandardScheme<getMatchCompetiveByLotteryId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveByLotteryId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchCompetive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveByLotteryId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveByLotteryId_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveByLotteryId_resultTupleScheme getScheme() {
        return new getMatchCompetiveByLotteryId_resultTupleScheme();
      }
    }

    private static class getMatchCompetiveByLotteryId_resultTupleScheme extends TupleScheme<getMatchCompetiveByLotteryId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveByLotteryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveByLotteryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchCompetive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createIssueSport_args implements org.apache.thrift.TBase<createIssueSport_args, createIssueSport_args._Fields>, java.io.Serializable, Cloneable, Comparable<createIssueSport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIssueSport_args");

    private static final org.apache.thrift.protocol.TField ISSUE_SPORT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("issueSportList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIssueSport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIssueSport_argsTupleSchemeFactory());
    }

    public List<IssueSport> issueSportList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ISSUE_SPORT_LIST((short)1, "issueSportList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ISSUE_SPORT_LIST
            return ISSUE_SPORT_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ISSUE_SPORT_LIST, new org.apache.thrift.meta_data.FieldMetaData("issueSportList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssueSport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIssueSport_args.class, metaDataMap);
    }

    public createIssueSport_args() {
    }

    public createIssueSport_args(
      List<IssueSport> issueSportList)
    {
      this();
      this.issueSportList = issueSportList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIssueSport_args(createIssueSport_args other) {
      if (other.isSetIssueSportList()) {
        List<IssueSport> __this__issueSportList = new ArrayList<IssueSport>(other.issueSportList.size());
        for (IssueSport other_element : other.issueSportList) {
          __this__issueSportList.add(new IssueSport(other_element));
        }
        this.issueSportList = __this__issueSportList;
      }
    }

    public createIssueSport_args deepCopy() {
      return new createIssueSport_args(this);
    }

    @Override
    public void clear() {
      this.issueSportList = null;
    }

    public int getIssueSportListSize() {
      return (this.issueSportList == null) ? 0 : this.issueSportList.size();
    }

    public java.util.Iterator<IssueSport> getIssueSportListIterator() {
      return (this.issueSportList == null) ? null : this.issueSportList.iterator();
    }

    public void addToIssueSportList(IssueSport elem) {
      if (this.issueSportList == null) {
        this.issueSportList = new ArrayList<IssueSport>();
      }
      this.issueSportList.add(elem);
    }

    public List<IssueSport> getIssueSportList() {
      return this.issueSportList;
    }

    public createIssueSport_args setIssueSportList(List<IssueSport> issueSportList) {
      this.issueSportList = issueSportList;
      return this;
    }

    public void unsetIssueSportList() {
      this.issueSportList = null;
    }

    /** Returns true if field issueSportList is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueSportList() {
      return this.issueSportList != null;
    }

    public void setIssueSportListIsSet(boolean value) {
      if (!value) {
        this.issueSportList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ISSUE_SPORT_LIST:
        if (value == null) {
          unsetIssueSportList();
        } else {
          setIssueSportList((List<IssueSport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ISSUE_SPORT_LIST:
        return getIssueSportList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ISSUE_SPORT_LIST:
        return isSetIssueSportList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIssueSport_args)
        return this.equals((createIssueSport_args)that);
      return false;
    }

    public boolean equals(createIssueSport_args that) {
      if (that == null)
        return false;

      boolean this_present_issueSportList = true && this.isSetIssueSportList();
      boolean that_present_issueSportList = true && that.isSetIssueSportList();
      if (this_present_issueSportList || that_present_issueSportList) {
        if (!(this_present_issueSportList && that_present_issueSportList))
          return false;
        if (!this.issueSportList.equals(that.issueSportList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createIssueSport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIssueSportList()).compareTo(other.isSetIssueSportList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueSportList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueSportList, other.issueSportList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIssueSport_args(");
      boolean first = true;

      sb.append("issueSportList:");
      if (this.issueSportList == null) {
        sb.append("null");
      } else {
        sb.append(this.issueSportList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIssueSport_argsStandardSchemeFactory implements SchemeFactory {
      public createIssueSport_argsStandardScheme getScheme() {
        return new createIssueSport_argsStandardScheme();
      }
    }

    private static class createIssueSport_argsStandardScheme extends StandardScheme<createIssueSport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIssueSport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ISSUE_SPORT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.issueSportList = new ArrayList<IssueSport>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    IssueSport _elem66;
                    _elem66 = new IssueSport();
                    _elem66.read(iprot);
                    struct.issueSportList.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setIssueSportListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIssueSport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.issueSportList != null) {
          oprot.writeFieldBegin(ISSUE_SPORT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.issueSportList.size()));
            for (IssueSport _iter67 : struct.issueSportList)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIssueSport_argsTupleSchemeFactory implements SchemeFactory {
      public createIssueSport_argsTupleScheme getScheme() {
        return new createIssueSport_argsTupleScheme();
      }
    }

    private static class createIssueSport_argsTupleScheme extends TupleScheme<createIssueSport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIssueSport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIssueSportList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIssueSportList()) {
          {
            oprot.writeI32(struct.issueSportList.size());
            for (IssueSport _iter68 : struct.issueSportList)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIssueSport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.issueSportList = new ArrayList<IssueSport>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              IssueSport _elem71;
              _elem71 = new IssueSport();
              _elem71.read(iprot);
              struct.issueSportList.add(_elem71);
            }
          }
          struct.setIssueSportListIsSet(true);
        }
      }
    }

  }

  public static class createIssueSport_result implements org.apache.thrift.TBase<createIssueSport_result, createIssueSport_result._Fields>, java.io.Serializable, Cloneable, Comparable<createIssueSport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createIssueSport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createIssueSport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createIssueSport_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createIssueSport_result.class, metaDataMap);
    }

    public createIssueSport_result() {
    }

    public createIssueSport_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createIssueSport_result(createIssueSport_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createIssueSport_result deepCopy() {
      return new createIssueSport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createIssueSport_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createIssueSport_result)
        return this.equals((createIssueSport_result)that);
      return false;
    }

    public boolean equals(createIssueSport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createIssueSport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createIssueSport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createIssueSport_resultStandardSchemeFactory implements SchemeFactory {
      public createIssueSport_resultStandardScheme getScheme() {
        return new createIssueSport_resultStandardScheme();
      }
    }

    private static class createIssueSport_resultStandardScheme extends StandardScheme<createIssueSport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createIssueSport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createIssueSport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createIssueSport_resultTupleSchemeFactory implements SchemeFactory {
      public createIssueSport_resultTupleScheme getScheme() {
        return new createIssueSport_resultTupleScheme();
      }
    }

    private static class createIssueSport_resultTupleScheme extends TupleScheme<createIssueSport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createIssueSport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createIssueSport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findIssueSport_args implements org.apache.thrift.TBase<findIssueSport_args, findIssueSport_args._Fields>, java.io.Serializable, Cloneable, Comparable<findIssueSport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findIssueSport_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findIssueSport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findIssueSport_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String wareIssue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      WARE_ISSUE((short)2, "wareIssue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // WARE_ISSUE
            return WARE_ISSUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findIssueSport_args.class, metaDataMap);
    }

    public findIssueSport_args() {
    }

    public findIssueSport_args(
      String lotteryId,
      String wareIssue)
    {
      this();
      this.lotteryId = lotteryId;
      this.wareIssue = wareIssue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findIssueSport_args(findIssueSport_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
    }

    public findIssueSport_args deepCopy() {
      return new findIssueSport_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.wareIssue = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public findIssueSport_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public findIssueSport_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case WARE_ISSUE:
        return getWareIssue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case WARE_ISSUE:
        return isSetWareIssue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findIssueSport_args)
        return this.equals((findIssueSport_args)that);
      return false;
    }

    public boolean equals(findIssueSport_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findIssueSport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findIssueSport_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findIssueSport_argsStandardSchemeFactory implements SchemeFactory {
      public findIssueSport_argsStandardScheme getScheme() {
        return new findIssueSport_argsStandardScheme();
      }
    }

    private static class findIssueSport_argsStandardScheme extends StandardScheme<findIssueSport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findIssueSport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findIssueSport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findIssueSport_argsTupleSchemeFactory implements SchemeFactory {
      public findIssueSport_argsTupleScheme getScheme() {
        return new findIssueSport_argsTupleScheme();
      }
    }

    private static class findIssueSport_argsTupleScheme extends TupleScheme<findIssueSport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findIssueSport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetWareIssue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findIssueSport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
      }
    }

  }

  public static class findIssueSport_result implements org.apache.thrift.TBase<findIssueSport_result, findIssueSport_result._Fields>, java.io.Serializable, Cloneable, Comparable<findIssueSport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findIssueSport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findIssueSport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findIssueSport_resultTupleSchemeFactory());
    }

    public IssueSport success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IssueSport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findIssueSport_result.class, metaDataMap);
    }

    public findIssueSport_result() {
    }

    public findIssueSport_result(
      IssueSport success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findIssueSport_result(findIssueSport_result other) {
      if (other.isSetSuccess()) {
        this.success = new IssueSport(other.success);
      }
    }

    public findIssueSport_result deepCopy() {
      return new findIssueSport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IssueSport getSuccess() {
      return this.success;
    }

    public findIssueSport_result setSuccess(IssueSport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IssueSport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findIssueSport_result)
        return this.equals((findIssueSport_result)that);
      return false;
    }

    public boolean equals(findIssueSport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findIssueSport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findIssueSport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findIssueSport_resultStandardSchemeFactory implements SchemeFactory {
      public findIssueSport_resultStandardScheme getScheme() {
        return new findIssueSport_resultStandardScheme();
      }
    }

    private static class findIssueSport_resultStandardScheme extends StandardScheme<findIssueSport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findIssueSport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IssueSport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findIssueSport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findIssueSport_resultTupleSchemeFactory implements SchemeFactory {
      public findIssueSport_resultTupleScheme getScheme() {
        return new findIssueSport_resultTupleScheme();
      }
    }

    private static class findIssueSport_resultTupleScheme extends TupleScheme<findIssueSport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findIssueSport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findIssueSport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IssueSport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveListByMatchType_args implements org.apache.thrift.TBase<getMatchCompetiveListByMatchType_args, getMatchCompetiveListByMatchType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveListByMatchType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveListByMatchType_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveListByMatchType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveListByMatchType_argsTupleSchemeFactory());
    }

    public String lotteryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveListByMatchType_args.class, metaDataMap);
    }

    public getMatchCompetiveListByMatchType_args() {
    }

    public getMatchCompetiveListByMatchType_args(
      String lotteryId)
    {
      this();
      this.lotteryId = lotteryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveListByMatchType_args(getMatchCompetiveListByMatchType_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
    }

    public getMatchCompetiveListByMatchType_args deepCopy() {
      return new getMatchCompetiveListByMatchType_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getMatchCompetiveListByMatchType_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveListByMatchType_args)
        return this.equals((getMatchCompetiveListByMatchType_args)that);
      return false;
    }

    public boolean equals(getMatchCompetiveListByMatchType_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveListByMatchType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveListByMatchType_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveListByMatchType_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveListByMatchType_argsStandardScheme getScheme() {
        return new getMatchCompetiveListByMatchType_argsStandardScheme();
      }
    }

    private static class getMatchCompetiveListByMatchType_argsStandardScheme extends StandardScheme<getMatchCompetiveListByMatchType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveListByMatchType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveListByMatchType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveListByMatchType_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveListByMatchType_argsTupleScheme getScheme() {
        return new getMatchCompetiveListByMatchType_argsTupleScheme();
      }
    }

    private static class getMatchCompetiveListByMatchType_argsTupleScheme extends TupleScheme<getMatchCompetiveListByMatchType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveListByMatchType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveListByMatchType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveListByMatchType_result implements org.apache.thrift.TBase<getMatchCompetiveListByMatchType_result, getMatchCompetiveListByMatchType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveListByMatchType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveListByMatchType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveListByMatchType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveListByMatchType_resultTupleSchemeFactory());
    }

    public List<MatchCompetive> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveListByMatchType_result.class, metaDataMap);
    }

    public getMatchCompetiveListByMatchType_result() {
    }

    public getMatchCompetiveListByMatchType_result(
      List<MatchCompetive> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveListByMatchType_result(getMatchCompetiveListByMatchType_result other) {
      if (other.isSetSuccess()) {
        List<MatchCompetive> __this__success = new ArrayList<MatchCompetive>(other.success.size());
        for (MatchCompetive other_element : other.success) {
          __this__success.add(new MatchCompetive(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMatchCompetiveListByMatchType_result deepCopy() {
      return new getMatchCompetiveListByMatchType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MatchCompetive> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MatchCompetive elem) {
      if (this.success == null) {
        this.success = new ArrayList<MatchCompetive>();
      }
      this.success.add(elem);
    }

    public List<MatchCompetive> getSuccess() {
      return this.success;
    }

    public getMatchCompetiveListByMatchType_result setSuccess(List<MatchCompetive> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MatchCompetive>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveListByMatchType_result)
        return this.equals((getMatchCompetiveListByMatchType_result)that);
      return false;
    }

    public boolean equals(getMatchCompetiveListByMatchType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveListByMatchType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveListByMatchType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveListByMatchType_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveListByMatchType_resultStandardScheme getScheme() {
        return new getMatchCompetiveListByMatchType_resultStandardScheme();
      }
    }

    private static class getMatchCompetiveListByMatchType_resultStandardScheme extends StandardScheme<getMatchCompetiveListByMatchType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveListByMatchType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<MatchCompetive>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    MatchCompetive _elem74;
                    _elem74 = new MatchCompetive();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveListByMatchType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MatchCompetive _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveListByMatchType_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveListByMatchType_resultTupleScheme getScheme() {
        return new getMatchCompetiveListByMatchType_resultTupleScheme();
      }
    }

    private static class getMatchCompetiveListByMatchType_resultTupleScheme extends TupleScheme<getMatchCompetiveListByMatchType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveListByMatchType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MatchCompetive _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveListByMatchType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MatchCompetive>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              MatchCompetive _elem79;
              _elem79 = new MatchCompetive();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createMatchCompetiveList_args implements org.apache.thrift.TBase<createMatchCompetiveList_args, createMatchCompetiveList_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMatchCompetiveList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchCompetiveList_args");

    private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetiveList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchCompetiveList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchCompetiveList_argsTupleSchemeFactory());
    }

    public List<MatchCompetive> matchCompetiveList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_COMPETIVE_LIST((short)1, "matchCompetiveList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_COMPETIVE_LIST
            return MATCH_COMPETIVE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_COMPETIVE_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchCompetiveList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchCompetiveList_args.class, metaDataMap);
    }

    public createMatchCompetiveList_args() {
    }

    public createMatchCompetiveList_args(
      List<MatchCompetive> matchCompetiveList)
    {
      this();
      this.matchCompetiveList = matchCompetiveList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchCompetiveList_args(createMatchCompetiveList_args other) {
      if (other.isSetMatchCompetiveList()) {
        List<MatchCompetive> __this__matchCompetiveList = new ArrayList<MatchCompetive>(other.matchCompetiveList.size());
        for (MatchCompetive other_element : other.matchCompetiveList) {
          __this__matchCompetiveList.add(new MatchCompetive(other_element));
        }
        this.matchCompetiveList = __this__matchCompetiveList;
      }
    }

    public createMatchCompetiveList_args deepCopy() {
      return new createMatchCompetiveList_args(this);
    }

    @Override
    public void clear() {
      this.matchCompetiveList = null;
    }

    public int getMatchCompetiveListSize() {
      return (this.matchCompetiveList == null) ? 0 : this.matchCompetiveList.size();
    }

    public java.util.Iterator<MatchCompetive> getMatchCompetiveListIterator() {
      return (this.matchCompetiveList == null) ? null : this.matchCompetiveList.iterator();
    }

    public void addToMatchCompetiveList(MatchCompetive elem) {
      if (this.matchCompetiveList == null) {
        this.matchCompetiveList = new ArrayList<MatchCompetive>();
      }
      this.matchCompetiveList.add(elem);
    }

    public List<MatchCompetive> getMatchCompetiveList() {
      return this.matchCompetiveList;
    }

    public createMatchCompetiveList_args setMatchCompetiveList(List<MatchCompetive> matchCompetiveList) {
      this.matchCompetiveList = matchCompetiveList;
      return this;
    }

    public void unsetMatchCompetiveList() {
      this.matchCompetiveList = null;
    }

    /** Returns true if field matchCompetiveList is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchCompetiveList() {
      return this.matchCompetiveList != null;
    }

    public void setMatchCompetiveListIsSet(boolean value) {
      if (!value) {
        this.matchCompetiveList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_COMPETIVE_LIST:
        if (value == null) {
          unsetMatchCompetiveList();
        } else {
          setMatchCompetiveList((List<MatchCompetive>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_COMPETIVE_LIST:
        return getMatchCompetiveList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_COMPETIVE_LIST:
        return isSetMatchCompetiveList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchCompetiveList_args)
        return this.equals((createMatchCompetiveList_args)that);
      return false;
    }

    public boolean equals(createMatchCompetiveList_args that) {
      if (that == null)
        return false;

      boolean this_present_matchCompetiveList = true && this.isSetMatchCompetiveList();
      boolean that_present_matchCompetiveList = true && that.isSetMatchCompetiveList();
      if (this_present_matchCompetiveList || that_present_matchCompetiveList) {
        if (!(this_present_matchCompetiveList && that_present_matchCompetiveList))
          return false;
        if (!this.matchCompetiveList.equals(that.matchCompetiveList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMatchCompetiveList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchCompetiveList()).compareTo(other.isSetMatchCompetiveList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchCompetiveList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetiveList, other.matchCompetiveList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchCompetiveList_args(");
      boolean first = true;

      sb.append("matchCompetiveList:");
      if (this.matchCompetiveList == null) {
        sb.append("null");
      } else {
        sb.append(this.matchCompetiveList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchCompetiveList_argsStandardSchemeFactory implements SchemeFactory {
      public createMatchCompetiveList_argsStandardScheme getScheme() {
        return new createMatchCompetiveList_argsStandardScheme();
      }
    }

    private static class createMatchCompetiveList_argsStandardScheme extends StandardScheme<createMatchCompetiveList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_COMPETIVE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.matchCompetiveList = new ArrayList<MatchCompetive>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    MatchCompetive _elem82;
                    _elem82 = new MatchCompetive();
                    _elem82.read(iprot);
                    struct.matchCompetiveList.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setMatchCompetiveListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchCompetiveList != null) {
          oprot.writeFieldBegin(MATCH_COMPETIVE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchCompetiveList.size()));
            for (MatchCompetive _iter83 : struct.matchCompetiveList)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchCompetiveList_argsTupleSchemeFactory implements SchemeFactory {
      public createMatchCompetiveList_argsTupleScheme getScheme() {
        return new createMatchCompetiveList_argsTupleScheme();
      }
    }

    private static class createMatchCompetiveList_argsTupleScheme extends TupleScheme<createMatchCompetiveList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchCompetiveList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatchCompetiveList()) {
          {
            oprot.writeI32(struct.matchCompetiveList.size());
            for (MatchCompetive _iter84 : struct.matchCompetiveList)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.matchCompetiveList = new ArrayList<MatchCompetive>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              MatchCompetive _elem87;
              _elem87 = new MatchCompetive();
              _elem87.read(iprot);
              struct.matchCompetiveList.add(_elem87);
            }
          }
          struct.setMatchCompetiveListIsSet(true);
        }
      }
    }

  }

  public static class createMatchCompetiveList_result implements org.apache.thrift.TBase<createMatchCompetiveList_result, createMatchCompetiveList_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMatchCompetiveList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchCompetiveList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchCompetiveList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchCompetiveList_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchCompetiveList_result.class, metaDataMap);
    }

    public createMatchCompetiveList_result() {
    }

    public createMatchCompetiveList_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchCompetiveList_result(createMatchCompetiveList_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createMatchCompetiveList_result deepCopy() {
      return new createMatchCompetiveList_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createMatchCompetiveList_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchCompetiveList_result)
        return this.equals((createMatchCompetiveList_result)that);
      return false;
    }

    public boolean equals(createMatchCompetiveList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMatchCompetiveList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchCompetiveList_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchCompetiveList_resultStandardSchemeFactory implements SchemeFactory {
      public createMatchCompetiveList_resultStandardScheme getScheme() {
        return new createMatchCompetiveList_resultStandardScheme();
      }
    }

    private static class createMatchCompetiveList_resultStandardScheme extends StandardScheme<createMatchCompetiveList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchCompetiveList_resultTupleSchemeFactory implements SchemeFactory {
      public createMatchCompetiveList_resultTupleScheme getScheme() {
        return new createMatchCompetiveList_resultTupleScheme();
      }
    }

    private static class createMatchCompetiveList_resultTupleScheme extends TupleScheme<createMatchCompetiveList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createMatchCompetiveResultList_args implements org.apache.thrift.TBase<createMatchCompetiveResultList_args, createMatchCompetiveResultList_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMatchCompetiveResultList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchCompetiveResultList_args");

    private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetiveList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchCompetiveResultList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchCompetiveResultList_argsTupleSchemeFactory());
    }

    public List<MatchCompetive> matchCompetiveList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_COMPETIVE_LIST((short)1, "matchCompetiveList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_COMPETIVE_LIST
            return MATCH_COMPETIVE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_COMPETIVE_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchCompetiveList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchCompetiveResultList_args.class, metaDataMap);
    }

    public createMatchCompetiveResultList_args() {
    }

    public createMatchCompetiveResultList_args(
      List<MatchCompetive> matchCompetiveList)
    {
      this();
      this.matchCompetiveList = matchCompetiveList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchCompetiveResultList_args(createMatchCompetiveResultList_args other) {
      if (other.isSetMatchCompetiveList()) {
        List<MatchCompetive> __this__matchCompetiveList = new ArrayList<MatchCompetive>(other.matchCompetiveList.size());
        for (MatchCompetive other_element : other.matchCompetiveList) {
          __this__matchCompetiveList.add(new MatchCompetive(other_element));
        }
        this.matchCompetiveList = __this__matchCompetiveList;
      }
    }

    public createMatchCompetiveResultList_args deepCopy() {
      return new createMatchCompetiveResultList_args(this);
    }

    @Override
    public void clear() {
      this.matchCompetiveList = null;
    }

    public int getMatchCompetiveListSize() {
      return (this.matchCompetiveList == null) ? 0 : this.matchCompetiveList.size();
    }

    public java.util.Iterator<MatchCompetive> getMatchCompetiveListIterator() {
      return (this.matchCompetiveList == null) ? null : this.matchCompetiveList.iterator();
    }

    public void addToMatchCompetiveList(MatchCompetive elem) {
      if (this.matchCompetiveList == null) {
        this.matchCompetiveList = new ArrayList<MatchCompetive>();
      }
      this.matchCompetiveList.add(elem);
    }

    public List<MatchCompetive> getMatchCompetiveList() {
      return this.matchCompetiveList;
    }

    public createMatchCompetiveResultList_args setMatchCompetiveList(List<MatchCompetive> matchCompetiveList) {
      this.matchCompetiveList = matchCompetiveList;
      return this;
    }

    public void unsetMatchCompetiveList() {
      this.matchCompetiveList = null;
    }

    /** Returns true if field matchCompetiveList is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchCompetiveList() {
      return this.matchCompetiveList != null;
    }

    public void setMatchCompetiveListIsSet(boolean value) {
      if (!value) {
        this.matchCompetiveList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_COMPETIVE_LIST:
        if (value == null) {
          unsetMatchCompetiveList();
        } else {
          setMatchCompetiveList((List<MatchCompetive>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_COMPETIVE_LIST:
        return getMatchCompetiveList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_COMPETIVE_LIST:
        return isSetMatchCompetiveList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchCompetiveResultList_args)
        return this.equals((createMatchCompetiveResultList_args)that);
      return false;
    }

    public boolean equals(createMatchCompetiveResultList_args that) {
      if (that == null)
        return false;

      boolean this_present_matchCompetiveList = true && this.isSetMatchCompetiveList();
      boolean that_present_matchCompetiveList = true && that.isSetMatchCompetiveList();
      if (this_present_matchCompetiveList || that_present_matchCompetiveList) {
        if (!(this_present_matchCompetiveList && that_present_matchCompetiveList))
          return false;
        if (!this.matchCompetiveList.equals(that.matchCompetiveList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMatchCompetiveResultList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchCompetiveList()).compareTo(other.isSetMatchCompetiveList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchCompetiveList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetiveList, other.matchCompetiveList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchCompetiveResultList_args(");
      boolean first = true;

      sb.append("matchCompetiveList:");
      if (this.matchCompetiveList == null) {
        sb.append("null");
      } else {
        sb.append(this.matchCompetiveList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchCompetiveResultList_argsStandardSchemeFactory implements SchemeFactory {
      public createMatchCompetiveResultList_argsStandardScheme getScheme() {
        return new createMatchCompetiveResultList_argsStandardScheme();
      }
    }

    private static class createMatchCompetiveResultList_argsStandardScheme extends StandardScheme<createMatchCompetiveResultList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_COMPETIVE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.matchCompetiveList = new ArrayList<MatchCompetive>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    MatchCompetive _elem90;
                    _elem90 = new MatchCompetive();
                    _elem90.read(iprot);
                    struct.matchCompetiveList.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setMatchCompetiveListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchCompetiveList != null) {
          oprot.writeFieldBegin(MATCH_COMPETIVE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchCompetiveList.size()));
            for (MatchCompetive _iter91 : struct.matchCompetiveList)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchCompetiveResultList_argsTupleSchemeFactory implements SchemeFactory {
      public createMatchCompetiveResultList_argsTupleScheme getScheme() {
        return new createMatchCompetiveResultList_argsTupleScheme();
      }
    }

    private static class createMatchCompetiveResultList_argsTupleScheme extends TupleScheme<createMatchCompetiveResultList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchCompetiveList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatchCompetiveList()) {
          {
            oprot.writeI32(struct.matchCompetiveList.size());
            for (MatchCompetive _iter92 : struct.matchCompetiveList)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveResultList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.matchCompetiveList = new ArrayList<MatchCompetive>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              MatchCompetive _elem95;
              _elem95 = new MatchCompetive();
              _elem95.read(iprot);
              struct.matchCompetiveList.add(_elem95);
            }
          }
          struct.setMatchCompetiveListIsSet(true);
        }
      }
    }

  }

  public static class createMatchCompetiveResultList_result implements org.apache.thrift.TBase<createMatchCompetiveResultList_result, createMatchCompetiveResultList_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMatchCompetiveResultList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchCompetiveResultList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchCompetiveResultList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchCompetiveResultList_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchCompetiveResultList_result.class, metaDataMap);
    }

    public createMatchCompetiveResultList_result() {
    }

    public createMatchCompetiveResultList_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchCompetiveResultList_result(createMatchCompetiveResultList_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createMatchCompetiveResultList_result deepCopy() {
      return new createMatchCompetiveResultList_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createMatchCompetiveResultList_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchCompetiveResultList_result)
        return this.equals((createMatchCompetiveResultList_result)that);
      return false;
    }

    public boolean equals(createMatchCompetiveResultList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMatchCompetiveResultList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchCompetiveResultList_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchCompetiveResultList_resultStandardSchemeFactory implements SchemeFactory {
      public createMatchCompetiveResultList_resultStandardScheme getScheme() {
        return new createMatchCompetiveResultList_resultStandardScheme();
      }
    }

    private static class createMatchCompetiveResultList_resultStandardScheme extends StandardScheme<createMatchCompetiveResultList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchCompetiveResultList_resultTupleSchemeFactory implements SchemeFactory {
      public createMatchCompetiveResultList_resultTupleScheme getScheme() {
        return new createMatchCompetiveResultList_resultTupleScheme();
      }
    }

    private static class createMatchCompetiveResultList_resultTupleScheme extends TupleScheme<createMatchCompetiveResultList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchCompetiveResultList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveList_args implements org.apache.thrift.TBase<getMatchCompetiveList_args, getMatchCompetiveList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveList_args");

    private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetive", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveList_argsTupleSchemeFactory());
    }

    public MatchCompetive matchCompetive; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_COMPETIVE((short)1, "matchCompetive"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_COMPETIVE
            return MATCH_COMPETIVE;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_COMPETIVE, new org.apache.thrift.meta_data.FieldMetaData("matchCompetive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveList_args.class, metaDataMap);
    }

    public getMatchCompetiveList_args() {
    }

    public getMatchCompetiveList_args(
      MatchCompetive matchCompetive,
      int currentPage,
      int pageSize)
    {
      this();
      this.matchCompetive = matchCompetive;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveList_args(getMatchCompetiveList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMatchCompetive()) {
        this.matchCompetive = new MatchCompetive(other.matchCompetive);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getMatchCompetiveList_args deepCopy() {
      return new getMatchCompetiveList_args(this);
    }

    @Override
    public void clear() {
      this.matchCompetive = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public MatchCompetive getMatchCompetive() {
      return this.matchCompetive;
    }

    public getMatchCompetiveList_args setMatchCompetive(MatchCompetive matchCompetive) {
      this.matchCompetive = matchCompetive;
      return this;
    }

    public void unsetMatchCompetive() {
      this.matchCompetive = null;
    }

    /** Returns true if field matchCompetive is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchCompetive() {
      return this.matchCompetive != null;
    }

    public void setMatchCompetiveIsSet(boolean value) {
      if (!value) {
        this.matchCompetive = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getMatchCompetiveList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getMatchCompetiveList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_COMPETIVE:
        if (value == null) {
          unsetMatchCompetive();
        } else {
          setMatchCompetive((MatchCompetive)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_COMPETIVE:
        return getMatchCompetive();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_COMPETIVE:
        return isSetMatchCompetive();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveList_args)
        return this.equals((getMatchCompetiveList_args)that);
      return false;
    }

    public boolean equals(getMatchCompetiveList_args that) {
      if (that == null)
        return false;

      boolean this_present_matchCompetive = true && this.isSetMatchCompetive();
      boolean that_present_matchCompetive = true && that.isSetMatchCompetive();
      if (this_present_matchCompetive || that_present_matchCompetive) {
        if (!(this_present_matchCompetive && that_present_matchCompetive))
          return false;
        if (!this.matchCompetive.equals(that.matchCompetive))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchCompetive()).compareTo(other.isSetMatchCompetive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchCompetive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetive, other.matchCompetive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveList_args(");
      boolean first = true;

      sb.append("matchCompetive:");
      if (this.matchCompetive == null) {
        sb.append("null");
      } else {
        sb.append(this.matchCompetive);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (matchCompetive != null) {
        matchCompetive.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveList_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveList_argsStandardScheme getScheme() {
        return new getMatchCompetiveList_argsStandardScheme();
      }
    }

    private static class getMatchCompetiveList_argsStandardScheme extends StandardScheme<getMatchCompetiveList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_COMPETIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.matchCompetive = new MatchCompetive();
                struct.matchCompetive.read(iprot);
                struct.setMatchCompetiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchCompetive != null) {
          oprot.writeFieldBegin(MATCH_COMPETIVE_FIELD_DESC);
          struct.matchCompetive.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveList_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveList_argsTupleScheme getScheme() {
        return new getMatchCompetiveList_argsTupleScheme();
      }
    }

    private static class getMatchCompetiveList_argsTupleScheme extends TupleScheme<getMatchCompetiveList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchCompetive()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMatchCompetive()) {
          struct.matchCompetive.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.matchCompetive = new MatchCompetive();
          struct.matchCompetive.read(iprot);
          struct.setMatchCompetiveIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getMatchCompetiveList_result implements org.apache.thrift.TBase<getMatchCompetiveList_result, getMatchCompetiveList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchCompetiveList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchCompetiveList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchCompetiveList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchCompetiveList_resultTupleSchemeFactory());
    }

    public MatchCompetiveData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetiveData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchCompetiveList_result.class, metaDataMap);
    }

    public getMatchCompetiveList_result() {
    }

    public getMatchCompetiveList_result(
      MatchCompetiveData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchCompetiveList_result(getMatchCompetiveList_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchCompetiveData(other.success);
      }
    }

    public getMatchCompetiveList_result deepCopy() {
      return new getMatchCompetiveList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchCompetiveData getSuccess() {
      return this.success;
    }

    public getMatchCompetiveList_result setSuccess(MatchCompetiveData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchCompetiveData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchCompetiveList_result)
        return this.equals((getMatchCompetiveList_result)that);
      return false;
    }

    public boolean equals(getMatchCompetiveList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchCompetiveList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchCompetiveList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchCompetiveList_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchCompetiveList_resultStandardScheme getScheme() {
        return new getMatchCompetiveList_resultStandardScheme();
      }
    }

    private static class getMatchCompetiveList_resultStandardScheme extends StandardScheme<getMatchCompetiveList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchCompetiveData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchCompetiveList_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchCompetiveList_resultTupleScheme getScheme() {
        return new getMatchCompetiveList_resultTupleScheme();
      }
    }

    private static class getMatchCompetiveList_resultTupleScheme extends TupleScheme<getMatchCompetiveList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchCompetiveList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchCompetiveData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMatchCompetive_args implements org.apache.thrift.TBase<updateMatchCompetive_args, updateMatchCompetive_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMatchCompetive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMatchCompetive_args");

    private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetive", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMatchCompetive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMatchCompetive_argsTupleSchemeFactory());
    }

    public MatchCompetive matchCompetive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_COMPETIVE((short)1, "matchCompetive");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_COMPETIVE
            return MATCH_COMPETIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_COMPETIVE, new org.apache.thrift.meta_data.FieldMetaData("matchCompetive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMatchCompetive_args.class, metaDataMap);
    }

    public updateMatchCompetive_args() {
    }

    public updateMatchCompetive_args(
      MatchCompetive matchCompetive)
    {
      this();
      this.matchCompetive = matchCompetive;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMatchCompetive_args(updateMatchCompetive_args other) {
      if (other.isSetMatchCompetive()) {
        this.matchCompetive = new MatchCompetive(other.matchCompetive);
      }
    }

    public updateMatchCompetive_args deepCopy() {
      return new updateMatchCompetive_args(this);
    }

    @Override
    public void clear() {
      this.matchCompetive = null;
    }

    public MatchCompetive getMatchCompetive() {
      return this.matchCompetive;
    }

    public updateMatchCompetive_args setMatchCompetive(MatchCompetive matchCompetive) {
      this.matchCompetive = matchCompetive;
      return this;
    }

    public void unsetMatchCompetive() {
      this.matchCompetive = null;
    }

    /** Returns true if field matchCompetive is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchCompetive() {
      return this.matchCompetive != null;
    }

    public void setMatchCompetiveIsSet(boolean value) {
      if (!value) {
        this.matchCompetive = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_COMPETIVE:
        if (value == null) {
          unsetMatchCompetive();
        } else {
          setMatchCompetive((MatchCompetive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_COMPETIVE:
        return getMatchCompetive();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_COMPETIVE:
        return isSetMatchCompetive();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMatchCompetive_args)
        return this.equals((updateMatchCompetive_args)that);
      return false;
    }

    public boolean equals(updateMatchCompetive_args that) {
      if (that == null)
        return false;

      boolean this_present_matchCompetive = true && this.isSetMatchCompetive();
      boolean that_present_matchCompetive = true && that.isSetMatchCompetive();
      if (this_present_matchCompetive || that_present_matchCompetive) {
        if (!(this_present_matchCompetive && that_present_matchCompetive))
          return false;
        if (!this.matchCompetive.equals(that.matchCompetive))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMatchCompetive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchCompetive()).compareTo(other.isSetMatchCompetive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchCompetive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetive, other.matchCompetive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMatchCompetive_args(");
      boolean first = true;

      sb.append("matchCompetive:");
      if (this.matchCompetive == null) {
        sb.append("null");
      } else {
        sb.append(this.matchCompetive);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (matchCompetive != null) {
        matchCompetive.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMatchCompetive_argsStandardSchemeFactory implements SchemeFactory {
      public updateMatchCompetive_argsStandardScheme getScheme() {
        return new updateMatchCompetive_argsStandardScheme();
      }
    }

    private static class updateMatchCompetive_argsStandardScheme extends StandardScheme<updateMatchCompetive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMatchCompetive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_COMPETIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.matchCompetive = new MatchCompetive();
                struct.matchCompetive.read(iprot);
                struct.setMatchCompetiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMatchCompetive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchCompetive != null) {
          oprot.writeFieldBegin(MATCH_COMPETIVE_FIELD_DESC);
          struct.matchCompetive.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMatchCompetive_argsTupleSchemeFactory implements SchemeFactory {
      public updateMatchCompetive_argsTupleScheme getScheme() {
        return new updateMatchCompetive_argsTupleScheme();
      }
    }

    private static class updateMatchCompetive_argsTupleScheme extends TupleScheme<updateMatchCompetive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMatchCompetive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchCompetive()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatchCompetive()) {
          struct.matchCompetive.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMatchCompetive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.matchCompetive = new MatchCompetive();
          struct.matchCompetive.read(iprot);
          struct.setMatchCompetiveIsSet(true);
        }
      }
    }

  }

  public static class updateMatchCompetive_result implements org.apache.thrift.TBase<updateMatchCompetive_result, updateMatchCompetive_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMatchCompetive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMatchCompetive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMatchCompetive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMatchCompetive_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMatchCompetive_result.class, metaDataMap);
    }

    public updateMatchCompetive_result() {
    }

    public updateMatchCompetive_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMatchCompetive_result(updateMatchCompetive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateMatchCompetive_result deepCopy() {
      return new updateMatchCompetive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateMatchCompetive_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMatchCompetive_result)
        return this.equals((updateMatchCompetive_result)that);
      return false;
    }

    public boolean equals(updateMatchCompetive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMatchCompetive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMatchCompetive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMatchCompetive_resultStandardSchemeFactory implements SchemeFactory {
      public updateMatchCompetive_resultStandardScheme getScheme() {
        return new updateMatchCompetive_resultStandardScheme();
      }
    }

    private static class updateMatchCompetive_resultStandardScheme extends StandardScheme<updateMatchCompetive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMatchCompetive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMatchCompetive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMatchCompetive_resultTupleSchemeFactory implements SchemeFactory {
      public updateMatchCompetive_resultTupleScheme getScheme() {
        return new updateMatchCompetive_resultTupleScheme();
      }
    }

    private static class updateMatchCompetive_resultTupleScheme extends TupleScheme<updateMatchCompetive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMatchCompetive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMatchCompetive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteMatchCompetive_args implements org.apache.thrift.TBase<deleteMatchCompetive_args, deleteMatchCompetive_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMatchCompetive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMatchCompetive_args");

    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transferId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMatchCompetive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMatchCompetive_argsTupleSchemeFactory());
    }

    public String wareIssue; // required
    public String transferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WARE_ISSUE((short)1, "wareIssue"),
      TRANSFER_ID((short)2, "transferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WARE_ISSUE
            return WARE_ISSUE;
          case 2: // TRANSFER_ID
            return TRANSFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANSFER_ID, new org.apache.thrift.meta_data.FieldMetaData("transferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMatchCompetive_args.class, metaDataMap);
    }

    public deleteMatchCompetive_args() {
    }

    public deleteMatchCompetive_args(
      String wareIssue,
      String transferId)
    {
      this();
      this.wareIssue = wareIssue;
      this.transferId = transferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMatchCompetive_args(deleteMatchCompetive_args other) {
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
      if (other.isSetTransferId()) {
        this.transferId = other.transferId;
      }
    }

    public deleteMatchCompetive_args deepCopy() {
      return new deleteMatchCompetive_args(this);
    }

    @Override
    public void clear() {
      this.wareIssue = null;
      this.transferId = null;
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public deleteMatchCompetive_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public String getTransferId() {
      return this.transferId;
    }

    public deleteMatchCompetive_args setTransferId(String transferId) {
      this.transferId = transferId;
      return this;
    }

    public void unsetTransferId() {
      this.transferId = null;
    }

    /** Returns true if field transferId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferId() {
      return this.transferId != null;
    }

    public void setTransferIdIsSet(boolean value) {
      if (!value) {
        this.transferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      case TRANSFER_ID:
        if (value == null) {
          unsetTransferId();
        } else {
          setTransferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WARE_ISSUE:
        return getWareIssue();

      case TRANSFER_ID:
        return getTransferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WARE_ISSUE:
        return isSetWareIssue();
      case TRANSFER_ID:
        return isSetTransferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMatchCompetive_args)
        return this.equals((deleteMatchCompetive_args)that);
      return false;
    }

    public boolean equals(deleteMatchCompetive_args that) {
      if (that == null)
        return false;

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      boolean this_present_transferId = true && this.isSetTransferId();
      boolean that_present_transferId = true && that.isSetTransferId();
      if (this_present_transferId || that_present_transferId) {
        if (!(this_present_transferId && that_present_transferId))
          return false;
        if (!this.transferId.equals(that.transferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteMatchCompetive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(other.isSetTransferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferId, other.transferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMatchCompetive_args(");
      boolean first = true;

      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferId:");
      if (this.transferId == null) {
        sb.append("null");
      } else {
        sb.append(this.transferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMatchCompetive_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMatchCompetive_argsStandardScheme getScheme() {
        return new deleteMatchCompetive_argsStandardScheme();
      }
    }

    private static class deleteMatchCompetive_argsStandardScheme extends StandardScheme<deleteMatchCompetive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMatchCompetive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transferId = iprot.readString();
                struct.setTransferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMatchCompetive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        if (struct.transferId != null) {
          oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
          oprot.writeString(struct.transferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMatchCompetive_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMatchCompetive_argsTupleScheme getScheme() {
        return new deleteMatchCompetive_argsTupleScheme();
      }
    }

    private static class deleteMatchCompetive_argsTupleScheme extends TupleScheme<deleteMatchCompetive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMatchCompetive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWareIssue()) {
          optionals.set(0);
        }
        if (struct.isSetTransferId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
        if (struct.isSetTransferId()) {
          oprot.writeString(struct.transferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMatchCompetive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transferId = iprot.readString();
          struct.setTransferIdIsSet(true);
        }
      }
    }

  }

  public static class deleteMatchCompetive_result implements org.apache.thrift.TBase<deleteMatchCompetive_result, deleteMatchCompetive_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMatchCompetive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMatchCompetive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMatchCompetive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMatchCompetive_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMatchCompetive_result.class, metaDataMap);
    }

    public deleteMatchCompetive_result() {
    }

    public deleteMatchCompetive_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMatchCompetive_result(deleteMatchCompetive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteMatchCompetive_result deepCopy() {
      return new deleteMatchCompetive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteMatchCompetive_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMatchCompetive_result)
        return this.equals((deleteMatchCompetive_result)that);
      return false;
    }

    public boolean equals(deleteMatchCompetive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteMatchCompetive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMatchCompetive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMatchCompetive_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMatchCompetive_resultStandardScheme getScheme() {
        return new deleteMatchCompetive_resultStandardScheme();
      }
    }

    private static class deleteMatchCompetive_resultStandardScheme extends StandardScheme<deleteMatchCompetive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMatchCompetive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMatchCompetive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMatchCompetive_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMatchCompetive_resultTupleScheme getScheme() {
        return new deleteMatchCompetive_resultTupleScheme();
      }
    }

    private static class deleteMatchCompetive_resultTupleScheme extends TupleScheme<deleteMatchCompetive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMatchCompetive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMatchCompetive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createMatchFootball_args implements org.apache.thrift.TBase<createMatchFootball_args, createMatchFootball_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMatchFootball_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchFootball_args");

    private static final org.apache.thrift.protocol.TField MATCH_FOOTBALL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchFootballList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchFootball_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchFootball_argsTupleSchemeFactory());
    }

    public List<MatchFootball> matchFootballList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_FOOTBALL_LIST((short)1, "matchFootballList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_FOOTBALL_LIST
            return MATCH_FOOTBALL_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_FOOTBALL_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchFootballList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchFootball.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchFootball_args.class, metaDataMap);
    }

    public createMatchFootball_args() {
    }

    public createMatchFootball_args(
      List<MatchFootball> matchFootballList)
    {
      this();
      this.matchFootballList = matchFootballList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchFootball_args(createMatchFootball_args other) {
      if (other.isSetMatchFootballList()) {
        List<MatchFootball> __this__matchFootballList = new ArrayList<MatchFootball>(other.matchFootballList.size());
        for (MatchFootball other_element : other.matchFootballList) {
          __this__matchFootballList.add(new MatchFootball(other_element));
        }
        this.matchFootballList = __this__matchFootballList;
      }
    }

    public createMatchFootball_args deepCopy() {
      return new createMatchFootball_args(this);
    }

    @Override
    public void clear() {
      this.matchFootballList = null;
    }

    public int getMatchFootballListSize() {
      return (this.matchFootballList == null) ? 0 : this.matchFootballList.size();
    }

    public java.util.Iterator<MatchFootball> getMatchFootballListIterator() {
      return (this.matchFootballList == null) ? null : this.matchFootballList.iterator();
    }

    public void addToMatchFootballList(MatchFootball elem) {
      if (this.matchFootballList == null) {
        this.matchFootballList = new ArrayList<MatchFootball>();
      }
      this.matchFootballList.add(elem);
    }

    public List<MatchFootball> getMatchFootballList() {
      return this.matchFootballList;
    }

    public createMatchFootball_args setMatchFootballList(List<MatchFootball> matchFootballList) {
      this.matchFootballList = matchFootballList;
      return this;
    }

    public void unsetMatchFootballList() {
      this.matchFootballList = null;
    }

    /** Returns true if field matchFootballList is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchFootballList() {
      return this.matchFootballList != null;
    }

    public void setMatchFootballListIsSet(boolean value) {
      if (!value) {
        this.matchFootballList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_FOOTBALL_LIST:
        if (value == null) {
          unsetMatchFootballList();
        } else {
          setMatchFootballList((List<MatchFootball>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_FOOTBALL_LIST:
        return getMatchFootballList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_FOOTBALL_LIST:
        return isSetMatchFootballList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchFootball_args)
        return this.equals((createMatchFootball_args)that);
      return false;
    }

    public boolean equals(createMatchFootball_args that) {
      if (that == null)
        return false;

      boolean this_present_matchFootballList = true && this.isSetMatchFootballList();
      boolean that_present_matchFootballList = true && that.isSetMatchFootballList();
      if (this_present_matchFootballList || that_present_matchFootballList) {
        if (!(this_present_matchFootballList && that_present_matchFootballList))
          return false;
        if (!this.matchFootballList.equals(that.matchFootballList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMatchFootball_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchFootballList()).compareTo(other.isSetMatchFootballList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchFootballList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchFootballList, other.matchFootballList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchFootball_args(");
      boolean first = true;

      sb.append("matchFootballList:");
      if (this.matchFootballList == null) {
        sb.append("null");
      } else {
        sb.append(this.matchFootballList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchFootball_argsStandardSchemeFactory implements SchemeFactory {
      public createMatchFootball_argsStandardScheme getScheme() {
        return new createMatchFootball_argsStandardScheme();
      }
    }

    private static class createMatchFootball_argsStandardScheme extends StandardScheme<createMatchFootball_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchFootball_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_FOOTBALL_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.matchFootballList = new ArrayList<MatchFootball>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    MatchFootball _elem98;
                    _elem98 = new MatchFootball();
                    _elem98.read(iprot);
                    struct.matchFootballList.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setMatchFootballListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchFootball_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchFootballList != null) {
          oprot.writeFieldBegin(MATCH_FOOTBALL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchFootballList.size()));
            for (MatchFootball _iter99 : struct.matchFootballList)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchFootball_argsTupleSchemeFactory implements SchemeFactory {
      public createMatchFootball_argsTupleScheme getScheme() {
        return new createMatchFootball_argsTupleScheme();
      }
    }

    private static class createMatchFootball_argsTupleScheme extends TupleScheme<createMatchFootball_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchFootball_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchFootballList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatchFootballList()) {
          {
            oprot.writeI32(struct.matchFootballList.size());
            for (MatchFootball _iter100 : struct.matchFootballList)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchFootball_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.matchFootballList = new ArrayList<MatchFootball>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              MatchFootball _elem103;
              _elem103 = new MatchFootball();
              _elem103.read(iprot);
              struct.matchFootballList.add(_elem103);
            }
          }
          struct.setMatchFootballListIsSet(true);
        }
      }
    }

  }

  public static class createMatchFootball_result implements org.apache.thrift.TBase<createMatchFootball_result, createMatchFootball_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMatchFootball_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchFootball_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchFootball_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchFootball_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchFootball_result.class, metaDataMap);
    }

    public createMatchFootball_result() {
    }

    public createMatchFootball_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchFootball_result(createMatchFootball_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createMatchFootball_result deepCopy() {
      return new createMatchFootball_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createMatchFootball_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchFootball_result)
        return this.equals((createMatchFootball_result)that);
      return false;
    }

    public boolean equals(createMatchFootball_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMatchFootball_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchFootball_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchFootball_resultStandardSchemeFactory implements SchemeFactory {
      public createMatchFootball_resultStandardScheme getScheme() {
        return new createMatchFootball_resultStandardScheme();
      }
    }

    private static class createMatchFootball_resultStandardScheme extends StandardScheme<createMatchFootball_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchFootball_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchFootball_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchFootball_resultTupleSchemeFactory implements SchemeFactory {
      public createMatchFootball_resultTupleScheme getScheme() {
        return new createMatchFootball_resultTupleScheme();
      }
    }

    private static class createMatchFootball_resultTupleScheme extends TupleScheme<createMatchFootball_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchFootball_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchFootball_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchFootballList_args implements org.apache.thrift.TBase<getMatchFootballList_args, getMatchFootballList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchFootballList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchFootballList_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchFootballList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchFootballList_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String wareIssue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      WARE_ISSUE((short)2, "wareIssue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // WARE_ISSUE
            return WARE_ISSUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchFootballList_args.class, metaDataMap);
    }

    public getMatchFootballList_args() {
    }

    public getMatchFootballList_args(
      String lotteryId,
      String wareIssue)
    {
      this();
      this.lotteryId = lotteryId;
      this.wareIssue = wareIssue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchFootballList_args(getMatchFootballList_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
    }

    public getMatchFootballList_args deepCopy() {
      return new getMatchFootballList_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.wareIssue = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getMatchFootballList_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public getMatchFootballList_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case WARE_ISSUE:
        return getWareIssue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case WARE_ISSUE:
        return isSetWareIssue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchFootballList_args)
        return this.equals((getMatchFootballList_args)that);
      return false;
    }

    public boolean equals(getMatchFootballList_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchFootballList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchFootballList_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchFootballList_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchFootballList_argsStandardScheme getScheme() {
        return new getMatchFootballList_argsStandardScheme();
      }
    }

    private static class getMatchFootballList_argsStandardScheme extends StandardScheme<getMatchFootballList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchFootballList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchFootballList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchFootballList_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchFootballList_argsTupleScheme getScheme() {
        return new getMatchFootballList_argsTupleScheme();
      }
    }

    private static class getMatchFootballList_argsTupleScheme extends TupleScheme<getMatchFootballList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchFootballList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetWareIssue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchFootballList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
      }
    }

  }

  public static class getMatchFootballList_result implements org.apache.thrift.TBase<getMatchFootballList_result, getMatchFootballList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchFootballList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchFootballList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchFootballList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchFootballList_resultTupleSchemeFactory());
    }

    public List<MatchFootball> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchFootball.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchFootballList_result.class, metaDataMap);
    }

    public getMatchFootballList_result() {
    }

    public getMatchFootballList_result(
      List<MatchFootball> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchFootballList_result(getMatchFootballList_result other) {
      if (other.isSetSuccess()) {
        List<MatchFootball> __this__success = new ArrayList<MatchFootball>(other.success.size());
        for (MatchFootball other_element : other.success) {
          __this__success.add(new MatchFootball(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMatchFootballList_result deepCopy() {
      return new getMatchFootballList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MatchFootball> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MatchFootball elem) {
      if (this.success == null) {
        this.success = new ArrayList<MatchFootball>();
      }
      this.success.add(elem);
    }

    public List<MatchFootball> getSuccess() {
      return this.success;
    }

    public getMatchFootballList_result setSuccess(List<MatchFootball> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MatchFootball>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchFootballList_result)
        return this.equals((getMatchFootballList_result)that);
      return false;
    }

    public boolean equals(getMatchFootballList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchFootballList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchFootballList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchFootballList_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchFootballList_resultStandardScheme getScheme() {
        return new getMatchFootballList_resultStandardScheme();
      }
    }

    private static class getMatchFootballList_resultStandardScheme extends StandardScheme<getMatchFootballList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchFootballList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<MatchFootball>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    MatchFootball _elem106;
                    _elem106 = new MatchFootball();
                    _elem106.read(iprot);
                    struct.success.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchFootballList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MatchFootball _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchFootballList_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchFootballList_resultTupleScheme getScheme() {
        return new getMatchFootballList_resultTupleScheme();
      }
    }

    private static class getMatchFootballList_resultTupleScheme extends TupleScheme<getMatchFootballList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchFootballList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MatchFootball _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchFootballList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MatchFootball>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              MatchFootball _elem111;
              _elem111 = new MatchFootball();
              _elem111.read(iprot);
              struct.success.add(_elem111);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchFootballDate_args implements org.apache.thrift.TBase<getMatchFootballDate_args, getMatchFootballDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchFootballDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchFootballDate_args");

    private static final org.apache.thrift.protocol.TField MATCH_FOOTBALL_FIELD_DESC = new org.apache.thrift.protocol.TField("matchFootball", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchFootballDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchFootballDate_argsTupleSchemeFactory());
    }

    public MatchFootball matchFootball; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_FOOTBALL((short)1, "matchFootball"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_FOOTBALL
            return MATCH_FOOTBALL;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_FOOTBALL, new org.apache.thrift.meta_data.FieldMetaData("matchFootball", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchFootball.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchFootballDate_args.class, metaDataMap);
    }

    public getMatchFootballDate_args() {
    }

    public getMatchFootballDate_args(
      MatchFootball matchFootball,
      int currentPage,
      int pageSize)
    {
      this();
      this.matchFootball = matchFootball;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchFootballDate_args(getMatchFootballDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMatchFootball()) {
        this.matchFootball = new MatchFootball(other.matchFootball);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getMatchFootballDate_args deepCopy() {
      return new getMatchFootballDate_args(this);
    }

    @Override
    public void clear() {
      this.matchFootball = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public MatchFootball getMatchFootball() {
      return this.matchFootball;
    }

    public getMatchFootballDate_args setMatchFootball(MatchFootball matchFootball) {
      this.matchFootball = matchFootball;
      return this;
    }

    public void unsetMatchFootball() {
      this.matchFootball = null;
    }

    /** Returns true if field matchFootball is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchFootball() {
      return this.matchFootball != null;
    }

    public void setMatchFootballIsSet(boolean value) {
      if (!value) {
        this.matchFootball = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getMatchFootballDate_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getMatchFootballDate_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_FOOTBALL:
        if (value == null) {
          unsetMatchFootball();
        } else {
          setMatchFootball((MatchFootball)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_FOOTBALL:
        return getMatchFootball();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_FOOTBALL:
        return isSetMatchFootball();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchFootballDate_args)
        return this.equals((getMatchFootballDate_args)that);
      return false;
    }

    public boolean equals(getMatchFootballDate_args that) {
      if (that == null)
        return false;

      boolean this_present_matchFootball = true && this.isSetMatchFootball();
      boolean that_present_matchFootball = true && that.isSetMatchFootball();
      if (this_present_matchFootball || that_present_matchFootball) {
        if (!(this_present_matchFootball && that_present_matchFootball))
          return false;
        if (!this.matchFootball.equals(that.matchFootball))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchFootballDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchFootball()).compareTo(other.isSetMatchFootball());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchFootball()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchFootball, other.matchFootball);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchFootballDate_args(");
      boolean first = true;

      sb.append("matchFootball:");
      if (this.matchFootball == null) {
        sb.append("null");
      } else {
        sb.append(this.matchFootball);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (matchFootball != null) {
        matchFootball.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchFootballDate_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchFootballDate_argsStandardScheme getScheme() {
        return new getMatchFootballDate_argsStandardScheme();
      }
    }

    private static class getMatchFootballDate_argsStandardScheme extends StandardScheme<getMatchFootballDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchFootballDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_FOOTBALL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.matchFootball = new MatchFootball();
                struct.matchFootball.read(iprot);
                struct.setMatchFootballIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchFootballDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchFootball != null) {
          oprot.writeFieldBegin(MATCH_FOOTBALL_FIELD_DESC);
          struct.matchFootball.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchFootballDate_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchFootballDate_argsTupleScheme getScheme() {
        return new getMatchFootballDate_argsTupleScheme();
      }
    }

    private static class getMatchFootballDate_argsTupleScheme extends TupleScheme<getMatchFootballDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchFootballDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchFootball()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMatchFootball()) {
          struct.matchFootball.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchFootballDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.matchFootball = new MatchFootball();
          struct.matchFootball.read(iprot);
          struct.setMatchFootballIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getMatchFootballDate_result implements org.apache.thrift.TBase<getMatchFootballDate_result, getMatchFootballDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchFootballDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchFootballDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchFootballDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchFootballDate_resultTupleSchemeFactory());
    }

    public MatchFootballDate success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchFootballDate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchFootballDate_result.class, metaDataMap);
    }

    public getMatchFootballDate_result() {
    }

    public getMatchFootballDate_result(
      MatchFootballDate success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchFootballDate_result(getMatchFootballDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchFootballDate(other.success);
      }
    }

    public getMatchFootballDate_result deepCopy() {
      return new getMatchFootballDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchFootballDate getSuccess() {
      return this.success;
    }

    public getMatchFootballDate_result setSuccess(MatchFootballDate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchFootballDate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchFootballDate_result)
        return this.equals((getMatchFootballDate_result)that);
      return false;
    }

    public boolean equals(getMatchFootballDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchFootballDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchFootballDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchFootballDate_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchFootballDate_resultStandardScheme getScheme() {
        return new getMatchFootballDate_resultStandardScheme();
      }
    }

    private static class getMatchFootballDate_resultStandardScheme extends StandardScheme<getMatchFootballDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchFootballDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchFootballDate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchFootballDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchFootballDate_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchFootballDate_resultTupleScheme getScheme() {
        return new getMatchFootballDate_resultTupleScheme();
      }
    }

    private static class getMatchFootballDate_resultTupleScheme extends TupleScheme<getMatchFootballDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchFootballDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchFootballDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchFootballDate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchFootball_args implements org.apache.thrift.TBase<getMatchFootball_args, getMatchFootball_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchFootball_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchFootball_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WARE_ISSUE_FIELD_DESC = new org.apache.thrift.protocol.TField("wareIssue", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchFootball_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchFootball_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String wareIssue; // required
    public String matchNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      WARE_ISSUE((short)2, "wareIssue"),
      MATCH_NO((short)3, "matchNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // WARE_ISSUE
            return WARE_ISSUE;
          case 3: // MATCH_NO
            return MATCH_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WARE_ISSUE, new org.apache.thrift.meta_data.FieldMetaData("wareIssue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("matchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchFootball_args.class, metaDataMap);
    }

    public getMatchFootball_args() {
    }

    public getMatchFootball_args(
      String lotteryId,
      String wareIssue,
      String matchNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.wareIssue = wareIssue;
      this.matchNo = matchNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchFootball_args(getMatchFootball_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetWareIssue()) {
        this.wareIssue = other.wareIssue;
      }
      if (other.isSetMatchNo()) {
        this.matchNo = other.matchNo;
      }
    }

    public getMatchFootball_args deepCopy() {
      return new getMatchFootball_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.wareIssue = null;
      this.matchNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getMatchFootball_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getWareIssue() {
      return this.wareIssue;
    }

    public getMatchFootball_args setWareIssue(String wareIssue) {
      this.wareIssue = wareIssue;
      return this;
    }

    public void unsetWareIssue() {
      this.wareIssue = null;
    }

    /** Returns true if field wareIssue is set (has been assigned a value) and false otherwise */
    public boolean isSetWareIssue() {
      return this.wareIssue != null;
    }

    public void setWareIssueIsSet(boolean value) {
      if (!value) {
        this.wareIssue = null;
      }
    }

    public String getMatchNo() {
      return this.matchNo;
    }

    public getMatchFootball_args setMatchNo(String matchNo) {
      this.matchNo = matchNo;
      return this;
    }

    public void unsetMatchNo() {
      this.matchNo = null;
    }

    /** Returns true if field matchNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchNo() {
      return this.matchNo != null;
    }

    public void setMatchNoIsSet(boolean value) {
      if (!value) {
        this.matchNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case WARE_ISSUE:
        if (value == null) {
          unsetWareIssue();
        } else {
          setWareIssue((String)value);
        }
        break;

      case MATCH_NO:
        if (value == null) {
          unsetMatchNo();
        } else {
          setMatchNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case WARE_ISSUE:
        return getWareIssue();

      case MATCH_NO:
        return getMatchNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case WARE_ISSUE:
        return isSetWareIssue();
      case MATCH_NO:
        return isSetMatchNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchFootball_args)
        return this.equals((getMatchFootball_args)that);
      return false;
    }

    public boolean equals(getMatchFootball_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_wareIssue = true && this.isSetWareIssue();
      boolean that_present_wareIssue = true && that.isSetWareIssue();
      if (this_present_wareIssue || that_present_wareIssue) {
        if (!(this_present_wareIssue && that_present_wareIssue))
          return false;
        if (!this.wareIssue.equals(that.wareIssue))
          return false;
      }

      boolean this_present_matchNo = true && this.isSetMatchNo();
      boolean that_present_matchNo = true && that.isSetMatchNo();
      if (this_present_matchNo || that_present_matchNo) {
        if (!(this_present_matchNo && that_present_matchNo))
          return false;
        if (!this.matchNo.equals(that.matchNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchFootball_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWareIssue()).compareTo(other.isSetWareIssue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWareIssue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareIssue, other.wareIssue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMatchNo()).compareTo(other.isSetMatchNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNo, other.matchNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchFootball_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wareIssue:");
      if (this.wareIssue == null) {
        sb.append("null");
      } else {
        sb.append(this.wareIssue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("matchNo:");
      if (this.matchNo == null) {
        sb.append("null");
      } else {
        sb.append(this.matchNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchFootball_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchFootball_argsStandardScheme getScheme() {
        return new getMatchFootball_argsStandardScheme();
      }
    }

    private static class getMatchFootball_argsStandardScheme extends StandardScheme<getMatchFootball_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchFootball_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WARE_ISSUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.wareIssue = iprot.readString();
                struct.setWareIssueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MATCH_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.matchNo = iprot.readString();
                struct.setMatchNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchFootball_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.wareIssue != null) {
          oprot.writeFieldBegin(WARE_ISSUE_FIELD_DESC);
          oprot.writeString(struct.wareIssue);
          oprot.writeFieldEnd();
        }
        if (struct.matchNo != null) {
          oprot.writeFieldBegin(MATCH_NO_FIELD_DESC);
          oprot.writeString(struct.matchNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchFootball_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchFootball_argsTupleScheme getScheme() {
        return new getMatchFootball_argsTupleScheme();
      }
    }

    private static class getMatchFootball_argsTupleScheme extends TupleScheme<getMatchFootball_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchFootball_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetWareIssue()) {
          optionals.set(1);
        }
        if (struct.isSetMatchNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetWareIssue()) {
          oprot.writeString(struct.wareIssue);
        }
        if (struct.isSetMatchNo()) {
          oprot.writeString(struct.matchNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchFootball_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.wareIssue = iprot.readString();
          struct.setWareIssueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.matchNo = iprot.readString();
          struct.setMatchNoIsSet(true);
        }
      }
    }

  }

  public static class getMatchFootball_result implements org.apache.thrift.TBase<getMatchFootball_result, getMatchFootball_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchFootball_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchFootball_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchFootball_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchFootball_resultTupleSchemeFactory());
    }

    public MatchFootball success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchFootball.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchFootball_result.class, metaDataMap);
    }

    public getMatchFootball_result() {
    }

    public getMatchFootball_result(
      MatchFootball success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchFootball_result(getMatchFootball_result other) {
      if (other.isSetSuccess()) {
        this.success = new MatchFootball(other.success);
      }
    }

    public getMatchFootball_result deepCopy() {
      return new getMatchFootball_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MatchFootball getSuccess() {
      return this.success;
    }

    public getMatchFootball_result setSuccess(MatchFootball success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MatchFootball)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchFootball_result)
        return this.equals((getMatchFootball_result)that);
      return false;
    }

    public boolean equals(getMatchFootball_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMatchFootball_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchFootball_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchFootball_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchFootball_resultStandardScheme getScheme() {
        return new getMatchFootball_resultStandardScheme();
      }
    }

    private static class getMatchFootball_resultStandardScheme extends StandardScheme<getMatchFootball_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchFootball_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MatchFootball();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchFootball_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchFootball_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchFootball_resultTupleScheme getScheme() {
        return new getMatchFootball_resultTupleScheme();
      }
    }

    private static class getMatchFootball_resultTupleScheme extends TupleScheme<getMatchFootball_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchFootball_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchFootball_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MatchFootball();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMatchFootball_args implements org.apache.thrift.TBase<updateMatchFootball_args, updateMatchFootball_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMatchFootball_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMatchFootball_args");

    private static final org.apache.thrift.protocol.TField MATCH_FOOTBALL_FIELD_DESC = new org.apache.thrift.protocol.TField("matchFootball", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMatchFootball_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMatchFootball_argsTupleSchemeFactory());
    }

    public MatchFootball matchFootball; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_FOOTBALL((short)1, "matchFootball");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_FOOTBALL
            return MATCH_FOOTBALL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_FOOTBALL, new org.apache.thrift.meta_data.FieldMetaData("matchFootball", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchFootball.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMatchFootball_args.class, metaDataMap);
    }

    public updateMatchFootball_args() {
    }

    public updateMatchFootball_args(
      MatchFootball matchFootball)
    {
      this();
      this.matchFootball = matchFootball;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMatchFootball_args(updateMatchFootball_args other) {
      if (other.isSetMatchFootball()) {
        this.matchFootball = new MatchFootball(other.matchFootball);
      }
    }

    public updateMatchFootball_args deepCopy() {
      return new updateMatchFootball_args(this);
    }

    @Override
    public void clear() {
      this.matchFootball = null;
    }

    public MatchFootball getMatchFootball() {
      return this.matchFootball;
    }

    public updateMatchFootball_args setMatchFootball(MatchFootball matchFootball) {
      this.matchFootball = matchFootball;
      return this;
    }

    public void unsetMatchFootball() {
      this.matchFootball = null;
    }

    /** Returns true if field matchFootball is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchFootball() {
      return this.matchFootball != null;
    }

    public void setMatchFootballIsSet(boolean value) {
      if (!value) {
        this.matchFootball = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_FOOTBALL:
        if (value == null) {
          unsetMatchFootball();
        } else {
          setMatchFootball((MatchFootball)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_FOOTBALL:
        return getMatchFootball();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_FOOTBALL:
        return isSetMatchFootball();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMatchFootball_args)
        return this.equals((updateMatchFootball_args)that);
      return false;
    }

    public boolean equals(updateMatchFootball_args that) {
      if (that == null)
        return false;

      boolean this_present_matchFootball = true && this.isSetMatchFootball();
      boolean that_present_matchFootball = true && that.isSetMatchFootball();
      if (this_present_matchFootball || that_present_matchFootball) {
        if (!(this_present_matchFootball && that_present_matchFootball))
          return false;
        if (!this.matchFootball.equals(that.matchFootball))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMatchFootball_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchFootball()).compareTo(other.isSetMatchFootball());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchFootball()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchFootball, other.matchFootball);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMatchFootball_args(");
      boolean first = true;

      sb.append("matchFootball:");
      if (this.matchFootball == null) {
        sb.append("null");
      } else {
        sb.append(this.matchFootball);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (matchFootball != null) {
        matchFootball.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMatchFootball_argsStandardSchemeFactory implements SchemeFactory {
      public updateMatchFootball_argsStandardScheme getScheme() {
        return new updateMatchFootball_argsStandardScheme();
      }
    }

    private static class updateMatchFootball_argsStandardScheme extends StandardScheme<updateMatchFootball_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMatchFootball_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_FOOTBALL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.matchFootball = new MatchFootball();
                struct.matchFootball.read(iprot);
                struct.setMatchFootballIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMatchFootball_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchFootball != null) {
          oprot.writeFieldBegin(MATCH_FOOTBALL_FIELD_DESC);
          struct.matchFootball.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMatchFootball_argsTupleSchemeFactory implements SchemeFactory {
      public updateMatchFootball_argsTupleScheme getScheme() {
        return new updateMatchFootball_argsTupleScheme();
      }
    }

    private static class updateMatchFootball_argsTupleScheme extends TupleScheme<updateMatchFootball_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMatchFootball_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchFootball()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatchFootball()) {
          struct.matchFootball.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMatchFootball_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.matchFootball = new MatchFootball();
          struct.matchFootball.read(iprot);
          struct.setMatchFootballIsSet(true);
        }
      }
    }

  }

  public static class updateMatchFootball_result implements org.apache.thrift.TBase<updateMatchFootball_result, updateMatchFootball_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMatchFootball_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMatchFootball_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMatchFootball_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMatchFootball_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMatchFootball_result.class, metaDataMap);
    }

    public updateMatchFootball_result() {
    }

    public updateMatchFootball_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMatchFootball_result(updateMatchFootball_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateMatchFootball_result deepCopy() {
      return new updateMatchFootball_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateMatchFootball_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMatchFootball_result)
        return this.equals((updateMatchFootball_result)that);
      return false;
    }

    public boolean equals(updateMatchFootball_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateMatchFootball_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMatchFootball_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMatchFootball_resultStandardSchemeFactory implements SchemeFactory {
      public updateMatchFootball_resultStandardScheme getScheme() {
        return new updateMatchFootball_resultStandardScheme();
      }
    }

    private static class updateMatchFootball_resultStandardScheme extends StandardScheme<updateMatchFootball_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMatchFootball_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMatchFootball_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMatchFootball_resultTupleSchemeFactory implements SchemeFactory {
      public updateMatchFootball_resultTupleScheme getScheme() {
        return new updateMatchFootball_resultTupleScheme();
      }
    }

    private static class updateMatchFootball_resultTupleScheme extends TupleScheme<updateMatchFootball_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMatchFootball_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMatchFootball_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveOrUpdateMatchCompetiveResult_args implements org.apache.thrift.TBase<saveOrUpdateMatchCompetiveResult_args, saveOrUpdateMatchCompetiveResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrUpdateMatchCompetiveResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrUpdateMatchCompetiveResult_args");

    private static final org.apache.thrift.protocol.TField MATCH_COMPETIVE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCompetiveResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrUpdateMatchCompetiveResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrUpdateMatchCompetiveResult_argsTupleSchemeFactory());
    }

    public MatchCompetiveResult matchCompetiveResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MATCH_COMPETIVE_RESULT((short)1, "matchCompetiveResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MATCH_COMPETIVE_RESULT
            return MATCH_COMPETIVE_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MATCH_COMPETIVE_RESULT, new org.apache.thrift.meta_data.FieldMetaData("matchCompetiveResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MatchCompetiveResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrUpdateMatchCompetiveResult_args.class, metaDataMap);
    }

    public saveOrUpdateMatchCompetiveResult_args() {
    }

    public saveOrUpdateMatchCompetiveResult_args(
      MatchCompetiveResult matchCompetiveResult)
    {
      this();
      this.matchCompetiveResult = matchCompetiveResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrUpdateMatchCompetiveResult_args(saveOrUpdateMatchCompetiveResult_args other) {
      if (other.isSetMatchCompetiveResult()) {
        this.matchCompetiveResult = new MatchCompetiveResult(other.matchCompetiveResult);
      }
    }

    public saveOrUpdateMatchCompetiveResult_args deepCopy() {
      return new saveOrUpdateMatchCompetiveResult_args(this);
    }

    @Override
    public void clear() {
      this.matchCompetiveResult = null;
    }

    public MatchCompetiveResult getMatchCompetiveResult() {
      return this.matchCompetiveResult;
    }

    public saveOrUpdateMatchCompetiveResult_args setMatchCompetiveResult(MatchCompetiveResult matchCompetiveResult) {
      this.matchCompetiveResult = matchCompetiveResult;
      return this;
    }

    public void unsetMatchCompetiveResult() {
      this.matchCompetiveResult = null;
    }

    /** Returns true if field matchCompetiveResult is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchCompetiveResult() {
      return this.matchCompetiveResult != null;
    }

    public void setMatchCompetiveResultIsSet(boolean value) {
      if (!value) {
        this.matchCompetiveResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MATCH_COMPETIVE_RESULT:
        if (value == null) {
          unsetMatchCompetiveResult();
        } else {
          setMatchCompetiveResult((MatchCompetiveResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MATCH_COMPETIVE_RESULT:
        return getMatchCompetiveResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MATCH_COMPETIVE_RESULT:
        return isSetMatchCompetiveResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrUpdateMatchCompetiveResult_args)
        return this.equals((saveOrUpdateMatchCompetiveResult_args)that);
      return false;
    }

    public boolean equals(saveOrUpdateMatchCompetiveResult_args that) {
      if (that == null)
        return false;

      boolean this_present_matchCompetiveResult = true && this.isSetMatchCompetiveResult();
      boolean that_present_matchCompetiveResult = true && that.isSetMatchCompetiveResult();
      if (this_present_matchCompetiveResult || that_present_matchCompetiveResult) {
        if (!(this_present_matchCompetiveResult && that_present_matchCompetiveResult))
          return false;
        if (!this.matchCompetiveResult.equals(that.matchCompetiveResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveOrUpdateMatchCompetiveResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMatchCompetiveResult()).compareTo(other.isSetMatchCompetiveResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchCompetiveResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCompetiveResult, other.matchCompetiveResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrUpdateMatchCompetiveResult_args(");
      boolean first = true;

      sb.append("matchCompetiveResult:");
      if (this.matchCompetiveResult == null) {
        sb.append("null");
      } else {
        sb.append(this.matchCompetiveResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (matchCompetiveResult != null) {
        matchCompetiveResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrUpdateMatchCompetiveResult_argsStandardSchemeFactory implements SchemeFactory {
      public saveOrUpdateMatchCompetiveResult_argsStandardScheme getScheme() {
        return new saveOrUpdateMatchCompetiveResult_argsStandardScheme();
      }
    }

    private static class saveOrUpdateMatchCompetiveResult_argsStandardScheme extends StandardScheme<saveOrUpdateMatchCompetiveResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrUpdateMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MATCH_COMPETIVE_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.matchCompetiveResult = new MatchCompetiveResult();
                struct.matchCompetiveResult.read(iprot);
                struct.setMatchCompetiveResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrUpdateMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.matchCompetiveResult != null) {
          oprot.writeFieldBegin(MATCH_COMPETIVE_RESULT_FIELD_DESC);
          struct.matchCompetiveResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrUpdateMatchCompetiveResult_argsTupleSchemeFactory implements SchemeFactory {
      public saveOrUpdateMatchCompetiveResult_argsTupleScheme getScheme() {
        return new saveOrUpdateMatchCompetiveResult_argsTupleScheme();
      }
    }

    private static class saveOrUpdateMatchCompetiveResult_argsTupleScheme extends TupleScheme<saveOrUpdateMatchCompetiveResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMatchCompetiveResult()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMatchCompetiveResult()) {
          struct.matchCompetiveResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateMatchCompetiveResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.matchCompetiveResult = new MatchCompetiveResult();
          struct.matchCompetiveResult.read(iprot);
          struct.setMatchCompetiveResultIsSet(true);
        }
      }
    }

  }

  public static class saveOrUpdateMatchCompetiveResult_result implements org.apache.thrift.TBase<saveOrUpdateMatchCompetiveResult_result, saveOrUpdateMatchCompetiveResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrUpdateMatchCompetiveResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrUpdateMatchCompetiveResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOrUpdateMatchCompetiveResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOrUpdateMatchCompetiveResult_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrUpdateMatchCompetiveResult_result.class, metaDataMap);
    }

    public saveOrUpdateMatchCompetiveResult_result() {
    }

    public saveOrUpdateMatchCompetiveResult_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrUpdateMatchCompetiveResult_result(saveOrUpdateMatchCompetiveResult_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveOrUpdateMatchCompetiveResult_result deepCopy() {
      return new saveOrUpdateMatchCompetiveResult_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveOrUpdateMatchCompetiveResult_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrUpdateMatchCompetiveResult_result)
        return this.equals((saveOrUpdateMatchCompetiveResult_result)that);
      return false;
    }

    public boolean equals(saveOrUpdateMatchCompetiveResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveOrUpdateMatchCompetiveResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOrUpdateMatchCompetiveResult_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrUpdateMatchCompetiveResult_resultStandardSchemeFactory implements SchemeFactory {
      public saveOrUpdateMatchCompetiveResult_resultStandardScheme getScheme() {
        return new saveOrUpdateMatchCompetiveResult_resultStandardScheme();
      }
    }

    private static class saveOrUpdateMatchCompetiveResult_resultStandardScheme extends StandardScheme<saveOrUpdateMatchCompetiveResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrUpdateMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrUpdateMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrUpdateMatchCompetiveResult_resultTupleSchemeFactory implements SchemeFactory {
      public saveOrUpdateMatchCompetiveResult_resultTupleScheme getScheme() {
        return new saveOrUpdateMatchCompetiveResult_resultTupleScheme();
      }
    }

    private static class saveOrUpdateMatchCompetiveResult_resultTupleScheme extends TupleScheme<saveOrUpdateMatchCompetiveResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateMatchCompetiveResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
