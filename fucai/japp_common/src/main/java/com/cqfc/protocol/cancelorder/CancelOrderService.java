/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.cancelorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CancelOrderService {

  public interface Iface {

    public int createCancelOrder(CancelOrder cancelOrder) throws org.apache.thrift.TException;

    public long getSuccessTicketCancelOrder(String lotteryId, String issueNo) throws org.apache.thrift.TException;

    public ReturnData getCancelOrder(CancelOrder cancelOrder, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public int createSportCancelOrder(SportCancelOrder sportCancelOrder) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createCancelOrder(CancelOrder cancelOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSuccessTicketCancelOrder(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCancelOrder(CancelOrder cancelOrder, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createSportCancelOrder(SportCancelOrder sportCancelOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int createCancelOrder(CancelOrder cancelOrder) throws org.apache.thrift.TException
    {
      send_createCancelOrder(cancelOrder);
      return recv_createCancelOrder();
    }

    public void send_createCancelOrder(CancelOrder cancelOrder) throws org.apache.thrift.TException
    {
      createCancelOrder_args args = new createCancelOrder_args();
      args.setCancelOrder(cancelOrder);
      sendBase("createCancelOrder", args);
    }

    public int recv_createCancelOrder() throws org.apache.thrift.TException
    {
      createCancelOrder_result result = new createCancelOrder_result();
      receiveBase(result, "createCancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCancelOrder failed: unknown result");
    }

    public long getSuccessTicketCancelOrder(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      send_getSuccessTicketCancelOrder(lotteryId, issueNo);
      return recv_getSuccessTicketCancelOrder();
    }

    public void send_getSuccessTicketCancelOrder(String lotteryId, String issueNo) throws org.apache.thrift.TException
    {
      getSuccessTicketCancelOrder_args args = new getSuccessTicketCancelOrder_args();
      args.setLotteryId(lotteryId);
      args.setIssueNo(issueNo);
      sendBase("getSuccessTicketCancelOrder", args);
    }

    public long recv_getSuccessTicketCancelOrder() throws org.apache.thrift.TException
    {
      getSuccessTicketCancelOrder_result result = new getSuccessTicketCancelOrder_result();
      receiveBase(result, "getSuccessTicketCancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSuccessTicketCancelOrder failed: unknown result");
    }

    public ReturnData getCancelOrder(CancelOrder cancelOrder, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getCancelOrder(cancelOrder, currentPage, pageSize);
      return recv_getCancelOrder();
    }

    public void send_getCancelOrder(CancelOrder cancelOrder, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getCancelOrder_args args = new getCancelOrder_args();
      args.setCancelOrder(cancelOrder);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getCancelOrder", args);
    }

    public ReturnData recv_getCancelOrder() throws org.apache.thrift.TException
    {
      getCancelOrder_result result = new getCancelOrder_result();
      receiveBase(result, "getCancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCancelOrder failed: unknown result");
    }

    public int createSportCancelOrder(SportCancelOrder sportCancelOrder) throws org.apache.thrift.TException
    {
      send_createSportCancelOrder(sportCancelOrder);
      return recv_createSportCancelOrder();
    }

    public void send_createSportCancelOrder(SportCancelOrder sportCancelOrder) throws org.apache.thrift.TException
    {
      createSportCancelOrder_args args = new createSportCancelOrder_args();
      args.setSportCancelOrder(sportCancelOrder);
      sendBase("createSportCancelOrder", args);
    }

    public int recv_createSportCancelOrder() throws org.apache.thrift.TException
    {
      createSportCancelOrder_result result = new createSportCancelOrder_result();
      receiveBase(result, "createSportCancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createSportCancelOrder failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCancelOrder(CancelOrder cancelOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCancelOrder_call method_call = new createCancelOrder_call(cancelOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CancelOrder cancelOrder;
      public createCancelOrder_call(CancelOrder cancelOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cancelOrder = cancelOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCancelOrder_args args = new createCancelOrder_args();
        args.setCancelOrder(cancelOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCancelOrder();
      }
    }

    public void getSuccessTicketCancelOrder(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSuccessTicketCancelOrder_call method_call = new getSuccessTicketCancelOrder_call(lotteryId, issueNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSuccessTicketCancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lotteryId;
      private String issueNo;
      public getSuccessTicketCancelOrder_call(String lotteryId, String issueNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lotteryId = lotteryId;
        this.issueNo = issueNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSuccessTicketCancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSuccessTicketCancelOrder_args args = new getSuccessTicketCancelOrder_args();
        args.setLotteryId(lotteryId);
        args.setIssueNo(issueNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSuccessTicketCancelOrder();
      }
    }

    public void getCancelOrder(CancelOrder cancelOrder, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCancelOrder_call method_call = new getCancelOrder_call(cancelOrder, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CancelOrder cancelOrder;
      private int currentPage;
      private int pageSize;
      public getCancelOrder_call(CancelOrder cancelOrder, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cancelOrder = cancelOrder;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCancelOrder_args args = new getCancelOrder_args();
        args.setCancelOrder(cancelOrder);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCancelOrder();
      }
    }

    public void createSportCancelOrder(SportCancelOrder sportCancelOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createSportCancelOrder_call method_call = new createSportCancelOrder_call(sportCancelOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSportCancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SportCancelOrder sportCancelOrder;
      public createSportCancelOrder_call(SportCancelOrder sportCancelOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sportCancelOrder = sportCancelOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createSportCancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createSportCancelOrder_args args = new createSportCancelOrder_args();
        args.setSportCancelOrder(sportCancelOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createSportCancelOrder();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCancelOrder", new createCancelOrder());
      processMap.put("getSuccessTicketCancelOrder", new getSuccessTicketCancelOrder());
      processMap.put("getCancelOrder", new getCancelOrder());
      processMap.put("createSportCancelOrder", new createSportCancelOrder());
      return processMap;
    }

    public static class createCancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCancelOrder_args> {
      public createCancelOrder() {
        super("createCancelOrder");
      }

      public createCancelOrder_args getEmptyArgsInstance() {
        return new createCancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCancelOrder_result getResult(I iface, createCancelOrder_args args) throws org.apache.thrift.TException {
        createCancelOrder_result result = new createCancelOrder_result();
        result.success = iface.createCancelOrder(args.cancelOrder);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSuccessTicketCancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSuccessTicketCancelOrder_args> {
      public getSuccessTicketCancelOrder() {
        super("getSuccessTicketCancelOrder");
      }

      public getSuccessTicketCancelOrder_args getEmptyArgsInstance() {
        return new getSuccessTicketCancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSuccessTicketCancelOrder_result getResult(I iface, getSuccessTicketCancelOrder_args args) throws org.apache.thrift.TException {
        getSuccessTicketCancelOrder_result result = new getSuccessTicketCancelOrder_result();
        result.success = iface.getSuccessTicketCancelOrder(args.lotteryId, args.issueNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCancelOrder_args> {
      public getCancelOrder() {
        super("getCancelOrder");
      }

      public getCancelOrder_args getEmptyArgsInstance() {
        return new getCancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCancelOrder_result getResult(I iface, getCancelOrder_args args) throws org.apache.thrift.TException {
        getCancelOrder_result result = new getCancelOrder_result();
        result.success = iface.getCancelOrder(args.cancelOrder, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class createSportCancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createSportCancelOrder_args> {
      public createSportCancelOrder() {
        super("createSportCancelOrder");
      }

      public createSportCancelOrder_args getEmptyArgsInstance() {
        return new createSportCancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createSportCancelOrder_result getResult(I iface, createSportCancelOrder_args args) throws org.apache.thrift.TException {
        createSportCancelOrder_result result = new createSportCancelOrder_result();
        result.success = iface.createSportCancelOrder(args.sportCancelOrder);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createCancelOrder", new createCancelOrder());
      processMap.put("getSuccessTicketCancelOrder", new getSuccessTicketCancelOrder());
      processMap.put("getCancelOrder", new getCancelOrder());
      processMap.put("createSportCancelOrder", new createSportCancelOrder());
      return processMap;
    }

    public static class createCancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCancelOrder_args, Integer> {
      public createCancelOrder() {
        super("createCancelOrder");
      }

      public createCancelOrder_args getEmptyArgsInstance() {
        return new createCancelOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createCancelOrder_result result = new createCancelOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createCancelOrder_result result = new createCancelOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createCancelOrder(args.cancelOrder,resultHandler);
      }
    }

    public static class getSuccessTicketCancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSuccessTicketCancelOrder_args, Long> {
      public getSuccessTicketCancelOrder() {
        super("getSuccessTicketCancelOrder");
      }

      public getSuccessTicketCancelOrder_args getEmptyArgsInstance() {
        return new getSuccessTicketCancelOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getSuccessTicketCancelOrder_result result = new getSuccessTicketCancelOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSuccessTicketCancelOrder_result result = new getSuccessTicketCancelOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSuccessTicketCancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getSuccessTicketCancelOrder(args.lotteryId, args.issueNo,resultHandler);
      }
    }

    public static class getCancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCancelOrder_args, ReturnData> {
      public getCancelOrder() {
        super("getCancelOrder");
      }

      public getCancelOrder_args getEmptyArgsInstance() {
        return new getCancelOrder_args();
      }

      public AsyncMethodCallback<ReturnData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnData>() { 
          public void onComplete(ReturnData o) {
            getCancelOrder_result result = new getCancelOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCancelOrder_result result = new getCancelOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnData> resultHandler) throws TException {
        iface.getCancelOrder(args.cancelOrder, args.currentPage, args.pageSize,resultHandler);
      }
    }

    public static class createSportCancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createSportCancelOrder_args, Integer> {
      public createSportCancelOrder() {
        super("createSportCancelOrder");
      }

      public createSportCancelOrder_args getEmptyArgsInstance() {
        return new createSportCancelOrder_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createSportCancelOrder_result result = new createSportCancelOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createSportCancelOrder_result result = new createSportCancelOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createSportCancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createSportCancelOrder(args.sportCancelOrder,resultHandler);
      }
    }

  }

  public static class createCancelOrder_args implements org.apache.thrift.TBase<createCancelOrder_args, createCancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCancelOrder_args");

    private static final org.apache.thrift.protocol.TField CANCEL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCancelOrder_argsTupleSchemeFactory());
    }

    public CancelOrder cancelOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANCEL_ORDER((short)1, "cancelOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANCEL_ORDER
            return CANCEL_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANCEL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("cancelOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancelOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCancelOrder_args.class, metaDataMap);
    }

    public createCancelOrder_args() {
    }

    public createCancelOrder_args(
      CancelOrder cancelOrder)
    {
      this();
      this.cancelOrder = cancelOrder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCancelOrder_args(createCancelOrder_args other) {
      if (other.isSetCancelOrder()) {
        this.cancelOrder = new CancelOrder(other.cancelOrder);
      }
    }

    public createCancelOrder_args deepCopy() {
      return new createCancelOrder_args(this);
    }

    @Override
    public void clear() {
      this.cancelOrder = null;
    }

    public CancelOrder getCancelOrder() {
      return this.cancelOrder;
    }

    public createCancelOrder_args setCancelOrder(CancelOrder cancelOrder) {
      this.cancelOrder = cancelOrder;
      return this;
    }

    public void unsetCancelOrder() {
      this.cancelOrder = null;
    }

    /** Returns true if field cancelOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetCancelOrder() {
      return this.cancelOrder != null;
    }

    public void setCancelOrderIsSet(boolean value) {
      if (!value) {
        this.cancelOrder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CANCEL_ORDER:
        if (value == null) {
          unsetCancelOrder();
        } else {
          setCancelOrder((CancelOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CANCEL_ORDER:
        return getCancelOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CANCEL_ORDER:
        return isSetCancelOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCancelOrder_args)
        return this.equals((createCancelOrder_args)that);
      return false;
    }

    public boolean equals(createCancelOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_cancelOrder = true && this.isSetCancelOrder();
      boolean that_present_cancelOrder = true && that.isSetCancelOrder();
      if (this_present_cancelOrder || that_present_cancelOrder) {
        if (!(this_present_cancelOrder && that_present_cancelOrder))
          return false;
        if (!this.cancelOrder.equals(that.cancelOrder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createCancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCancelOrder()).compareTo(other.isSetCancelOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCancelOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelOrder, other.cancelOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCancelOrder_args(");
      boolean first = true;

      sb.append("cancelOrder:");
      if (this.cancelOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.cancelOrder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cancelOrder != null) {
        cancelOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public createCancelOrder_argsStandardScheme getScheme() {
        return new createCancelOrder_argsStandardScheme();
      }
    }

    private static class createCancelOrder_argsStandardScheme extends StandardScheme<createCancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANCEL_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cancelOrder = new CancelOrder();
                struct.cancelOrder.read(iprot);
                struct.setCancelOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cancelOrder != null) {
          oprot.writeFieldBegin(CANCEL_ORDER_FIELD_DESC);
          struct.cancelOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public createCancelOrder_argsTupleScheme getScheme() {
        return new createCancelOrder_argsTupleScheme();
      }
    }

    private static class createCancelOrder_argsTupleScheme extends TupleScheme<createCancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCancelOrder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCancelOrder()) {
          struct.cancelOrder.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cancelOrder = new CancelOrder();
          struct.cancelOrder.read(iprot);
          struct.setCancelOrderIsSet(true);
        }
      }
    }

  }

  public static class createCancelOrder_result implements org.apache.thrift.TBase<createCancelOrder_result, createCancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCancelOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCancelOrder_result.class, metaDataMap);
    }

    public createCancelOrder_result() {
    }

    public createCancelOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCancelOrder_result(createCancelOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createCancelOrder_result deepCopy() {
      return new createCancelOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createCancelOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCancelOrder_result)
        return this.equals((createCancelOrder_result)that);
      return false;
    }

    public boolean equals(createCancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createCancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public createCancelOrder_resultStandardScheme getScheme() {
        return new createCancelOrder_resultStandardScheme();
      }
    }

    private static class createCancelOrder_resultStandardScheme extends StandardScheme<createCancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public createCancelOrder_resultTupleScheme getScheme() {
        return new createCancelOrder_resultTupleScheme();
      }
    }

    private static class createCancelOrder_resultTupleScheme extends TupleScheme<createCancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSuccessTicketCancelOrder_args implements org.apache.thrift.TBase<getSuccessTicketCancelOrder_args, getSuccessTicketCancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSuccessTicketCancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSuccessTicketCancelOrder_args");

    private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSuccessTicketCancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSuccessTicketCancelOrder_argsTupleSchemeFactory());
    }

    public String lotteryId; // required
    public String issueNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOTTERY_ID((short)1, "lotteryId"),
      ISSUE_NO((short)2, "issueNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOTTERY_ID
            return LOTTERY_ID;
          case 2: // ISSUE_NO
            return ISSUE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSuccessTicketCancelOrder_args.class, metaDataMap);
    }

    public getSuccessTicketCancelOrder_args() {
    }

    public getSuccessTicketCancelOrder_args(
      String lotteryId,
      String issueNo)
    {
      this();
      this.lotteryId = lotteryId;
      this.issueNo = issueNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSuccessTicketCancelOrder_args(getSuccessTicketCancelOrder_args other) {
      if (other.isSetLotteryId()) {
        this.lotteryId = other.lotteryId;
      }
      if (other.isSetIssueNo()) {
        this.issueNo = other.issueNo;
      }
    }

    public getSuccessTicketCancelOrder_args deepCopy() {
      return new getSuccessTicketCancelOrder_args(this);
    }

    @Override
    public void clear() {
      this.lotteryId = null;
      this.issueNo = null;
    }

    public String getLotteryId() {
      return this.lotteryId;
    }

    public getSuccessTicketCancelOrder_args setLotteryId(String lotteryId) {
      this.lotteryId = lotteryId;
      return this;
    }

    public void unsetLotteryId() {
      this.lotteryId = null;
    }

    /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
    public boolean isSetLotteryId() {
      return this.lotteryId != null;
    }

    public void setLotteryIdIsSet(boolean value) {
      if (!value) {
        this.lotteryId = null;
      }
    }

    public String getIssueNo() {
      return this.issueNo;
    }

    public getSuccessTicketCancelOrder_args setIssueNo(String issueNo) {
      this.issueNo = issueNo;
      return this;
    }

    public void unsetIssueNo() {
      this.issueNo = null;
    }

    /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIssueNo() {
      return this.issueNo != null;
    }

    public void setIssueNoIsSet(boolean value) {
      if (!value) {
        this.issueNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOTTERY_ID:
        if (value == null) {
          unsetLotteryId();
        } else {
          setLotteryId((String)value);
        }
        break;

      case ISSUE_NO:
        if (value == null) {
          unsetIssueNo();
        } else {
          setIssueNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOTTERY_ID:
        return getLotteryId();

      case ISSUE_NO:
        return getIssueNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOTTERY_ID:
        return isSetLotteryId();
      case ISSUE_NO:
        return isSetIssueNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSuccessTicketCancelOrder_args)
        return this.equals((getSuccessTicketCancelOrder_args)that);
      return false;
    }

    public boolean equals(getSuccessTicketCancelOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_lotteryId = true && this.isSetLotteryId();
      boolean that_present_lotteryId = true && that.isSetLotteryId();
      if (this_present_lotteryId || that_present_lotteryId) {
        if (!(this_present_lotteryId && that_present_lotteryId))
          return false;
        if (!this.lotteryId.equals(that.lotteryId))
          return false;
      }

      boolean this_present_issueNo = true && this.isSetIssueNo();
      boolean that_present_issueNo = true && that.isSetIssueNo();
      if (this_present_issueNo || that_present_issueNo) {
        if (!(this_present_issueNo && that_present_issueNo))
          return false;
        if (!this.issueNo.equals(that.issueNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSuccessTicketCancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLotteryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIssueNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSuccessTicketCancelOrder_args(");
      boolean first = true;

      sb.append("lotteryId:");
      if (this.lotteryId == null) {
        sb.append("null");
      } else {
        sb.append(this.lotteryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("issueNo:");
      if (this.issueNo == null) {
        sb.append("null");
      } else {
        sb.append(this.issueNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSuccessTicketCancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public getSuccessTicketCancelOrder_argsStandardScheme getScheme() {
        return new getSuccessTicketCancelOrder_argsStandardScheme();
      }
    }

    private static class getSuccessTicketCancelOrder_argsStandardScheme extends StandardScheme<getSuccessTicketCancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSuccessTicketCancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOTTERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lotteryId = iprot.readString();
                struct.setLotteryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISSUE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.issueNo = iprot.readString();
                struct.setIssueNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSuccessTicketCancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lotteryId != null) {
          oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
          oprot.writeString(struct.lotteryId);
          oprot.writeFieldEnd();
        }
        if (struct.issueNo != null) {
          oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
          oprot.writeString(struct.issueNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSuccessTicketCancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public getSuccessTicketCancelOrder_argsTupleScheme getScheme() {
        return new getSuccessTicketCancelOrder_argsTupleScheme();
      }
    }

    private static class getSuccessTicketCancelOrder_argsTupleScheme extends TupleScheme<getSuccessTicketCancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSuccessTicketCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLotteryId()) {
          optionals.set(0);
        }
        if (struct.isSetIssueNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLotteryId()) {
          oprot.writeString(struct.lotteryId);
        }
        if (struct.isSetIssueNo()) {
          oprot.writeString(struct.issueNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSuccessTicketCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lotteryId = iprot.readString();
          struct.setLotteryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.issueNo = iprot.readString();
          struct.setIssueNoIsSet(true);
        }
      }
    }

  }

  public static class getSuccessTicketCancelOrder_result implements org.apache.thrift.TBase<getSuccessTicketCancelOrder_result, getSuccessTicketCancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSuccessTicketCancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSuccessTicketCancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSuccessTicketCancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSuccessTicketCancelOrder_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSuccessTicketCancelOrder_result.class, metaDataMap);
    }

    public getSuccessTicketCancelOrder_result() {
    }

    public getSuccessTicketCancelOrder_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSuccessTicketCancelOrder_result(getSuccessTicketCancelOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSuccessTicketCancelOrder_result deepCopy() {
      return new getSuccessTicketCancelOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getSuccessTicketCancelOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSuccessTicketCancelOrder_result)
        return this.equals((getSuccessTicketCancelOrder_result)that);
      return false;
    }

    public boolean equals(getSuccessTicketCancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSuccessTicketCancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSuccessTicketCancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSuccessTicketCancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public getSuccessTicketCancelOrder_resultStandardScheme getScheme() {
        return new getSuccessTicketCancelOrder_resultStandardScheme();
      }
    }

    private static class getSuccessTicketCancelOrder_resultStandardScheme extends StandardScheme<getSuccessTicketCancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSuccessTicketCancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSuccessTicketCancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSuccessTicketCancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public getSuccessTicketCancelOrder_resultTupleScheme getScheme() {
        return new getSuccessTicketCancelOrder_resultTupleScheme();
      }
    }

    private static class getSuccessTicketCancelOrder_resultTupleScheme extends TupleScheme<getSuccessTicketCancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSuccessTicketCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSuccessTicketCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCancelOrder_args implements org.apache.thrift.TBase<getCancelOrder_args, getCancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCancelOrder_args");

    private static final org.apache.thrift.protocol.TField CANCEL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCancelOrder_argsTupleSchemeFactory());
    }

    public CancelOrder cancelOrder; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANCEL_ORDER((short)1, "cancelOrder"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANCEL_ORDER
            return CANCEL_ORDER;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANCEL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("cancelOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CancelOrder.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCancelOrder_args.class, metaDataMap);
    }

    public getCancelOrder_args() {
    }

    public getCancelOrder_args(
      CancelOrder cancelOrder,
      int currentPage,
      int pageSize)
    {
      this();
      this.cancelOrder = cancelOrder;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCancelOrder_args(getCancelOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCancelOrder()) {
        this.cancelOrder = new CancelOrder(other.cancelOrder);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getCancelOrder_args deepCopy() {
      return new getCancelOrder_args(this);
    }

    @Override
    public void clear() {
      this.cancelOrder = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public CancelOrder getCancelOrder() {
      return this.cancelOrder;
    }

    public getCancelOrder_args setCancelOrder(CancelOrder cancelOrder) {
      this.cancelOrder = cancelOrder;
      return this;
    }

    public void unsetCancelOrder() {
      this.cancelOrder = null;
    }

    /** Returns true if field cancelOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetCancelOrder() {
      return this.cancelOrder != null;
    }

    public void setCancelOrderIsSet(boolean value) {
      if (!value) {
        this.cancelOrder = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getCancelOrder_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getCancelOrder_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CANCEL_ORDER:
        if (value == null) {
          unsetCancelOrder();
        } else {
          setCancelOrder((CancelOrder)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CANCEL_ORDER:
        return getCancelOrder();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CANCEL_ORDER:
        return isSetCancelOrder();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCancelOrder_args)
        return this.equals((getCancelOrder_args)that);
      return false;
    }

    public boolean equals(getCancelOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_cancelOrder = true && this.isSetCancelOrder();
      boolean that_present_cancelOrder = true && that.isSetCancelOrder();
      if (this_present_cancelOrder || that_present_cancelOrder) {
        if (!(this_present_cancelOrder && that_present_cancelOrder))
          return false;
        if (!this.cancelOrder.equals(that.cancelOrder))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCancelOrder()).compareTo(other.isSetCancelOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCancelOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelOrder, other.cancelOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCancelOrder_args(");
      boolean first = true;

      sb.append("cancelOrder:");
      if (this.cancelOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.cancelOrder);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cancelOrder != null) {
        cancelOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public getCancelOrder_argsStandardScheme getScheme() {
        return new getCancelOrder_argsStandardScheme();
      }
    }

    private static class getCancelOrder_argsStandardScheme extends StandardScheme<getCancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANCEL_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cancelOrder = new CancelOrder();
                struct.cancelOrder.read(iprot);
                struct.setCancelOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cancelOrder != null) {
          oprot.writeFieldBegin(CANCEL_ORDER_FIELD_DESC);
          struct.cancelOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public getCancelOrder_argsTupleScheme getScheme() {
        return new getCancelOrder_argsTupleScheme();
      }
    }

    private static class getCancelOrder_argsTupleScheme extends TupleScheme<getCancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCancelOrder()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCancelOrder()) {
          struct.cancelOrder.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cancelOrder = new CancelOrder();
          struct.cancelOrder.read(iprot);
          struct.setCancelOrderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getCancelOrder_result implements org.apache.thrift.TBase<getCancelOrder_result, getCancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCancelOrder_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCancelOrder_result.class, metaDataMap);
    }

    public getCancelOrder_result() {
    }

    public getCancelOrder_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCancelOrder_result(getCancelOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getCancelOrder_result deepCopy() {
      return new getCancelOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getCancelOrder_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCancelOrder_result)
        return this.equals((getCancelOrder_result)that);
      return false;
    }

    public boolean equals(getCancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public getCancelOrder_resultStandardScheme getScheme() {
        return new getCancelOrder_resultStandardScheme();
      }
    }

    private static class getCancelOrder_resultStandardScheme extends StandardScheme<getCancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public getCancelOrder_resultTupleScheme getScheme() {
        return new getCancelOrder_resultTupleScheme();
      }
    }

    private static class getCancelOrder_resultTupleScheme extends TupleScheme<getCancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createSportCancelOrder_args implements org.apache.thrift.TBase<createSportCancelOrder_args, createSportCancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createSportCancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSportCancelOrder_args");

    private static final org.apache.thrift.protocol.TField SPORT_CANCEL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sportCancelOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSportCancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSportCancelOrder_argsTupleSchemeFactory());
    }

    public SportCancelOrder sportCancelOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPORT_CANCEL_ORDER((short)1, "sportCancelOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPORT_CANCEL_ORDER
            return SPORT_CANCEL_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPORT_CANCEL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sportCancelOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SportCancelOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSportCancelOrder_args.class, metaDataMap);
    }

    public createSportCancelOrder_args() {
    }

    public createSportCancelOrder_args(
      SportCancelOrder sportCancelOrder)
    {
      this();
      this.sportCancelOrder = sportCancelOrder;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSportCancelOrder_args(createSportCancelOrder_args other) {
      if (other.isSetSportCancelOrder()) {
        this.sportCancelOrder = new SportCancelOrder(other.sportCancelOrder);
      }
    }

    public createSportCancelOrder_args deepCopy() {
      return new createSportCancelOrder_args(this);
    }

    @Override
    public void clear() {
      this.sportCancelOrder = null;
    }

    public SportCancelOrder getSportCancelOrder() {
      return this.sportCancelOrder;
    }

    public createSportCancelOrder_args setSportCancelOrder(SportCancelOrder sportCancelOrder) {
      this.sportCancelOrder = sportCancelOrder;
      return this;
    }

    public void unsetSportCancelOrder() {
      this.sportCancelOrder = null;
    }

    /** Returns true if field sportCancelOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetSportCancelOrder() {
      return this.sportCancelOrder != null;
    }

    public void setSportCancelOrderIsSet(boolean value) {
      if (!value) {
        this.sportCancelOrder = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPORT_CANCEL_ORDER:
        if (value == null) {
          unsetSportCancelOrder();
        } else {
          setSportCancelOrder((SportCancelOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPORT_CANCEL_ORDER:
        return getSportCancelOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPORT_CANCEL_ORDER:
        return isSetSportCancelOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSportCancelOrder_args)
        return this.equals((createSportCancelOrder_args)that);
      return false;
    }

    public boolean equals(createSportCancelOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_sportCancelOrder = true && this.isSetSportCancelOrder();
      boolean that_present_sportCancelOrder = true && that.isSetSportCancelOrder();
      if (this_present_sportCancelOrder || that_present_sportCancelOrder) {
        if (!(this_present_sportCancelOrder && that_present_sportCancelOrder))
          return false;
        if (!this.sportCancelOrder.equals(that.sportCancelOrder))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createSportCancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSportCancelOrder()).compareTo(other.isSetSportCancelOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSportCancelOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sportCancelOrder, other.sportCancelOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSportCancelOrder_args(");
      boolean first = true;

      sb.append("sportCancelOrder:");
      if (this.sportCancelOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.sportCancelOrder);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sportCancelOrder != null) {
        sportCancelOrder.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSportCancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public createSportCancelOrder_argsStandardScheme getScheme() {
        return new createSportCancelOrder_argsStandardScheme();
      }
    }

    private static class createSportCancelOrder_argsStandardScheme extends StandardScheme<createSportCancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSportCancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPORT_CANCEL_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sportCancelOrder = new SportCancelOrder();
                struct.sportCancelOrder.read(iprot);
                struct.setSportCancelOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSportCancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sportCancelOrder != null) {
          oprot.writeFieldBegin(SPORT_CANCEL_ORDER_FIELD_DESC);
          struct.sportCancelOrder.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSportCancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public createSportCancelOrder_argsTupleScheme getScheme() {
        return new createSportCancelOrder_argsTupleScheme();
      }
    }

    private static class createSportCancelOrder_argsTupleScheme extends TupleScheme<createSportCancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSportCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSportCancelOrder()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSportCancelOrder()) {
          struct.sportCancelOrder.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSportCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sportCancelOrder = new SportCancelOrder();
          struct.sportCancelOrder.read(iprot);
          struct.setSportCancelOrderIsSet(true);
        }
      }
    }

  }

  public static class createSportCancelOrder_result implements org.apache.thrift.TBase<createSportCancelOrder_result, createSportCancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createSportCancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSportCancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSportCancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSportCancelOrder_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSportCancelOrder_result.class, metaDataMap);
    }

    public createSportCancelOrder_result() {
    }

    public createSportCancelOrder_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSportCancelOrder_result(createSportCancelOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createSportCancelOrder_result deepCopy() {
      return new createSportCancelOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createSportCancelOrder_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSportCancelOrder_result)
        return this.equals((createSportCancelOrder_result)that);
      return false;
    }

    public boolean equals(createSportCancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createSportCancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSportCancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSportCancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public createSportCancelOrder_resultStandardScheme getScheme() {
        return new createSportCancelOrder_resultStandardScheme();
      }
    }

    private static class createSportCancelOrder_resultStandardScheme extends StandardScheme<createSportCancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSportCancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSportCancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSportCancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public createSportCancelOrder_resultTupleScheme getScheme() {
        return new createSportCancelOrder_resultTupleScheme();
      }
    }

    private static class createSportCancelOrder_resultTupleScheme extends TupleScheme<createSportCancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSportCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSportCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
