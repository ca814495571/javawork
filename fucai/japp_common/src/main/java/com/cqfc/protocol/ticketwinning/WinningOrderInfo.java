/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.ticketwinning;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WinningOrderInfo implements org.apache.thrift.TBase<WinningOrderInfo, WinningOrderInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WinningOrderInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WinningOrderInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WINNING_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("winningAmount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContent", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiple", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SEND_PRIZE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendPrizeState", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WinningOrderInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WinningOrderInfoTupleSchemeFactory());
  }

  public long id; // required
  public String lotteryId; // required
  public String partnerId; // required
  public long userId; // required
  public String issueNo; // required
  public int orderType; // required
  public String orderNo; // required
  public long winningAmount; // required
  public String orderContent; // required
  public int multiple; // required
  public String playType; // required
  public String createTime; // required
  public String lastUpdateTime; // required
  public int sendPrizeState; // required
  public String tradeId; // required
  public int orderStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LOTTERY_ID((short)2, "lotteryId"),
    PARTNER_ID((short)3, "partnerId"),
    USER_ID((short)4, "userId"),
    ISSUE_NO((short)5, "issueNo"),
    ORDER_TYPE((short)6, "orderType"),
    ORDER_NO((short)7, "orderNo"),
    WINNING_AMOUNT((short)8, "winningAmount"),
    ORDER_CONTENT((short)9, "orderContent"),
    MULTIPLE((short)10, "multiple"),
    PLAY_TYPE((short)11, "playType"),
    CREATE_TIME((short)12, "createTime"),
    LAST_UPDATE_TIME((short)13, "lastUpdateTime"),
    SEND_PRIZE_STATE((short)14, "sendPrizeState"),
    TRADE_ID((short)15, "tradeId"),
    ORDER_STATUS((short)16, "orderStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // PARTNER_ID
          return PARTNER_ID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // ISSUE_NO
          return ISSUE_NO;
        case 6: // ORDER_TYPE
          return ORDER_TYPE;
        case 7: // ORDER_NO
          return ORDER_NO;
        case 8: // WINNING_AMOUNT
          return WINNING_AMOUNT;
        case 9: // ORDER_CONTENT
          return ORDER_CONTENT;
        case 10: // MULTIPLE
          return MULTIPLE;
        case 11: // PLAY_TYPE
          return PLAY_TYPE;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 14: // SEND_PRIZE_STATE
          return SEND_PRIZE_STATE;
        case 15: // TRADE_ID
          return TRADE_ID;
        case 16: // ORDER_STATUS
          return ORDER_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ORDERTYPE_ISSET_ID = 2;
  private static final int __WINNINGAMOUNT_ISSET_ID = 3;
  private static final int __MULTIPLE_ISSET_ID = 4;
  private static final int __SENDPRIZESTATE_ISSET_ID = 5;
  private static final int __ORDERSTATUS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINNING_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("winningAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("orderContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("multiple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_PRIZE_STATE, new org.apache.thrift.meta_data.FieldMetaData("sendPrizeState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WinningOrderInfo.class, metaDataMap);
  }

  public WinningOrderInfo() {
  }

  public WinningOrderInfo(
    long id,
    String lotteryId,
    String partnerId,
    long userId,
    String issueNo,
    int orderType,
    String orderNo,
    long winningAmount,
    String orderContent,
    int multiple,
    String playType,
    String createTime,
    String lastUpdateTime,
    int sendPrizeState,
    String tradeId,
    int orderStatus)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.lotteryId = lotteryId;
    this.partnerId = partnerId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.issueNo = issueNo;
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    this.orderNo = orderNo;
    this.winningAmount = winningAmount;
    setWinningAmountIsSet(true);
    this.orderContent = orderContent;
    this.multiple = multiple;
    setMultipleIsSet(true);
    this.playType = playType;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.sendPrizeState = sendPrizeState;
    setSendPrizeStateIsSet(true);
    this.tradeId = tradeId;
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WinningOrderInfo(WinningOrderInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    this.userId = other.userId;
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    this.orderType = other.orderType;
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    this.winningAmount = other.winningAmount;
    if (other.isSetOrderContent()) {
      this.orderContent = other.orderContent;
    }
    this.multiple = other.multiple;
    if (other.isSetPlayType()) {
      this.playType = other.playType;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    this.sendPrizeState = other.sendPrizeState;
    if (other.isSetTradeId()) {
      this.tradeId = other.tradeId;
    }
    this.orderStatus = other.orderStatus;
  }

  public WinningOrderInfo deepCopy() {
    return new WinningOrderInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.lotteryId = null;
    this.partnerId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.issueNo = null;
    setOrderTypeIsSet(false);
    this.orderType = 0;
    this.orderNo = null;
    setWinningAmountIsSet(false);
    this.winningAmount = 0;
    this.orderContent = null;
    setMultipleIsSet(false);
    this.multiple = 0;
    this.playType = null;
    this.createTime = null;
    this.lastUpdateTime = null;
    setSendPrizeStateIsSet(false);
    this.sendPrizeState = 0;
    this.tradeId = null;
    setOrderStatusIsSet(false);
    this.orderStatus = 0;
  }

  public long getId() {
    return this.id;
  }

  public WinningOrderInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public WinningOrderInfo setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public WinningOrderInfo setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public WinningOrderInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public WinningOrderInfo setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public int getOrderType() {
    return this.orderType;
  }

  public WinningOrderInfo setOrderType(int orderType) {
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    return this;
  }

  public void unsetOrderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public WinningOrderInfo setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public long getWinningAmount() {
    return this.winningAmount;
  }

  public WinningOrderInfo setWinningAmount(long winningAmount) {
    this.winningAmount = winningAmount;
    setWinningAmountIsSet(true);
    return this;
  }

  public void unsetWinningAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINNINGAMOUNT_ISSET_ID);
  }

  /** Returns true if field winningAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetWinningAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __WINNINGAMOUNT_ISSET_ID);
  }

  public void setWinningAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINNINGAMOUNT_ISSET_ID, value);
  }

  public String getOrderContent() {
    return this.orderContent;
  }

  public WinningOrderInfo setOrderContent(String orderContent) {
    this.orderContent = orderContent;
    return this;
  }

  public void unsetOrderContent() {
    this.orderContent = null;
  }

  /** Returns true if field orderContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderContent() {
    return this.orderContent != null;
  }

  public void setOrderContentIsSet(boolean value) {
    if (!value) {
      this.orderContent = null;
    }
  }

  public int getMultiple() {
    return this.multiple;
  }

  public WinningOrderInfo setMultiple(int multiple) {
    this.multiple = multiple;
    setMultipleIsSet(true);
    return this;
  }

  public void unsetMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  /** Returns true if field multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIPLE_ISSET_ID);
  }

  public void setMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIPLE_ISSET_ID, value);
  }

  public String getPlayType() {
    return this.playType;
  }

  public WinningOrderInfo setPlayType(String playType) {
    this.playType = playType;
    return this;
  }

  public void unsetPlayType() {
    this.playType = null;
  }

  /** Returns true if field playType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayType() {
    return this.playType != null;
  }

  public void setPlayTypeIsSet(boolean value) {
    if (!value) {
      this.playType = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public WinningOrderInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public WinningOrderInfo setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getSendPrizeState() {
    return this.sendPrizeState;
  }

  public WinningOrderInfo setSendPrizeState(int sendPrizeState) {
    this.sendPrizeState = sendPrizeState;
    setSendPrizeStateIsSet(true);
    return this;
  }

  public void unsetSendPrizeState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDPRIZESTATE_ISSET_ID);
  }

  /** Returns true if field sendPrizeState is set (has been assigned a value) and false otherwise */
  public boolean isSetSendPrizeState() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDPRIZESTATE_ISSET_ID);
  }

  public void setSendPrizeStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDPRIZESTATE_ISSET_ID, value);
  }

  public String getTradeId() {
    return this.tradeId;
  }

  public WinningOrderInfo setTradeId(String tradeId) {
    this.tradeId = tradeId;
    return this;
  }

  public void unsetTradeId() {
    this.tradeId = null;
  }

  /** Returns true if field tradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeId() {
    return this.tradeId != null;
  }

  public void setTradeIdIsSet(boolean value) {
    if (!value) {
      this.tradeId = null;
    }
  }

  public int getOrderStatus() {
    return this.orderStatus;
  }

  public WinningOrderInfo setOrderStatus(int orderStatus) {
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
    return this;
  }

  public void unsetOrderStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  public void setOrderStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((Integer)value);
      }
      break;

    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;

    case WINNING_AMOUNT:
      if (value == null) {
        unsetWinningAmount();
      } else {
        setWinningAmount((Long)value);
      }
      break;

    case ORDER_CONTENT:
      if (value == null) {
        unsetOrderContent();
      } else {
        setOrderContent((String)value);
      }
      break;

    case MULTIPLE:
      if (value == null) {
        unsetMultiple();
      } else {
        setMultiple((Integer)value);
      }
      break;

    case PLAY_TYPE:
      if (value == null) {
        unsetPlayType();
      } else {
        setPlayType((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case SEND_PRIZE_STATE:
      if (value == null) {
        unsetSendPrizeState();
      } else {
        setSendPrizeState((Integer)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeId();
      } else {
        setTradeId((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case LOTTERY_ID:
      return getLotteryId();

    case PARTNER_ID:
      return getPartnerId();

    case USER_ID:
      return Long.valueOf(getUserId());

    case ISSUE_NO:
      return getIssueNo();

    case ORDER_TYPE:
      return Integer.valueOf(getOrderType());

    case ORDER_NO:
      return getOrderNo();

    case WINNING_AMOUNT:
      return Long.valueOf(getWinningAmount());

    case ORDER_CONTENT:
      return getOrderContent();

    case MULTIPLE:
      return Integer.valueOf(getMultiple());

    case PLAY_TYPE:
      return getPlayType();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case SEND_PRIZE_STATE:
      return Integer.valueOf(getSendPrizeState());

    case TRADE_ID:
      return getTradeId();

    case ORDER_STATUS:
      return Integer.valueOf(getOrderStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case PARTNER_ID:
      return isSetPartnerId();
    case USER_ID:
      return isSetUserId();
    case ISSUE_NO:
      return isSetIssueNo();
    case ORDER_TYPE:
      return isSetOrderType();
    case ORDER_NO:
      return isSetOrderNo();
    case WINNING_AMOUNT:
      return isSetWinningAmount();
    case ORDER_CONTENT:
      return isSetOrderContent();
    case MULTIPLE:
      return isSetMultiple();
    case PLAY_TYPE:
      return isSetPlayType();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case SEND_PRIZE_STATE:
      return isSetSendPrizeState();
    case TRADE_ID:
      return isSetTradeId();
    case ORDER_STATUS:
      return isSetOrderStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WinningOrderInfo)
      return this.equals((WinningOrderInfo)that);
    return false;
  }

  public boolean equals(WinningOrderInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_orderType = true;
    boolean that_present_orderType = true;
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (this.orderType != that.orderType)
        return false;
    }

    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }

    boolean this_present_winningAmount = true;
    boolean that_present_winningAmount = true;
    if (this_present_winningAmount || that_present_winningAmount) {
      if (!(this_present_winningAmount && that_present_winningAmount))
        return false;
      if (this.winningAmount != that.winningAmount)
        return false;
    }

    boolean this_present_orderContent = true && this.isSetOrderContent();
    boolean that_present_orderContent = true && that.isSetOrderContent();
    if (this_present_orderContent || that_present_orderContent) {
      if (!(this_present_orderContent && that_present_orderContent))
        return false;
      if (!this.orderContent.equals(that.orderContent))
        return false;
    }

    boolean this_present_multiple = true;
    boolean that_present_multiple = true;
    if (this_present_multiple || that_present_multiple) {
      if (!(this_present_multiple && that_present_multiple))
        return false;
      if (this.multiple != that.multiple)
        return false;
    }

    boolean this_present_playType = true && this.isSetPlayType();
    boolean that_present_playType = true && that.isSetPlayType();
    if (this_present_playType || that_present_playType) {
      if (!(this_present_playType && that_present_playType))
        return false;
      if (!this.playType.equals(that.playType))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_sendPrizeState = true;
    boolean that_present_sendPrizeState = true;
    if (this_present_sendPrizeState || that_present_sendPrizeState) {
      if (!(this_present_sendPrizeState && that_present_sendPrizeState))
        return false;
      if (this.sendPrizeState != that.sendPrizeState)
        return false;
    }

    boolean this_present_tradeId = true && this.isSetTradeId();
    boolean that_present_tradeId = true && that.isSetTradeId();
    if (this_present_tradeId || that_present_tradeId) {
      if (!(this_present_tradeId && that_present_tradeId))
        return false;
      if (!this.tradeId.equals(that.tradeId))
        return false;
    }

    boolean this_present_orderStatus = true;
    boolean that_present_orderStatus = true;
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (this.orderStatus != that.orderStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WinningOrderInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(other.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, other.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinningAmount()).compareTo(other.isSetWinningAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinningAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winningAmount, other.winningAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderContent()).compareTo(other.isSetOrderContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContent, other.orderContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiple()).compareTo(other.isSetMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiple, other.multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayType()).compareTo(other.isSetPlayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playType, other.playType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendPrizeState()).compareTo(other.isSetSendPrizeState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendPrizeState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendPrizeState, other.sendPrizeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(other.isSetTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeId, other.tradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WinningOrderInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    sb.append(this.orderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("winningAmount:");
    sb.append(this.winningAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderContent:");
    if (this.orderContent == null) {
      sb.append("null");
    } else {
      sb.append(this.orderContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiple:");
    sb.append(this.multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playType:");
    if (this.playType == null) {
      sb.append("null");
    } else {
      sb.append(this.playType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendPrizeState:");
    sb.append(this.sendPrizeState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeId:");
    if (this.tradeId == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    sb.append(this.orderStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WinningOrderInfoStandardSchemeFactory implements SchemeFactory {
    public WinningOrderInfoStandardScheme getScheme() {
      return new WinningOrderInfoStandardScheme();
    }
  }

  private static class WinningOrderInfoStandardScheme extends StandardScheme<WinningOrderInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WinningOrderInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = iprot.readI32();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNo = iprot.readString();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WINNING_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.winningAmount = iprot.readI64();
              struct.setWinningAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderContent = iprot.readString();
              struct.setOrderContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiple = iprot.readI32();
              struct.setMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playType = iprot.readString();
              struct.setPlayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEND_PRIZE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendPrizeState = iprot.readI32();
              struct.setSendPrizeStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeId = iprot.readString();
              struct.setTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderStatus = iprot.readI32();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WinningOrderInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.orderType);
      oprot.writeFieldEnd();
      if (struct.orderNo != null) {
        oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.orderNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINNING_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.winningAmount);
      oprot.writeFieldEnd();
      if (struct.orderContent != null) {
        oprot.writeFieldBegin(ORDER_CONTENT_FIELD_DESC);
        oprot.writeString(struct.orderContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MULTIPLE_FIELD_DESC);
      oprot.writeI32(struct.multiple);
      oprot.writeFieldEnd();
      if (struct.playType != null) {
        oprot.writeFieldBegin(PLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.playType);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEND_PRIZE_STATE_FIELD_DESC);
      oprot.writeI32(struct.sendPrizeState);
      oprot.writeFieldEnd();
      if (struct.tradeId != null) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeString(struct.tradeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
      oprot.writeI32(struct.orderStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WinningOrderInfoTupleSchemeFactory implements SchemeFactory {
    public WinningOrderInfoTupleScheme getScheme() {
      return new WinningOrderInfoTupleScheme();
    }
  }

  private static class WinningOrderInfoTupleScheme extends TupleScheme<WinningOrderInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WinningOrderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(4);
      }
      if (struct.isSetOrderType()) {
        optionals.set(5);
      }
      if (struct.isSetOrderNo()) {
        optionals.set(6);
      }
      if (struct.isSetWinningAmount()) {
        optionals.set(7);
      }
      if (struct.isSetOrderContent()) {
        optionals.set(8);
      }
      if (struct.isSetMultiple()) {
        optionals.set(9);
      }
      if (struct.isSetPlayType()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(12);
      }
      if (struct.isSetSendPrizeState()) {
        optionals.set(13);
      }
      if (struct.isSetTradeId()) {
        optionals.set(14);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType);
      }
      if (struct.isSetOrderNo()) {
        oprot.writeString(struct.orderNo);
      }
      if (struct.isSetWinningAmount()) {
        oprot.writeI64(struct.winningAmount);
      }
      if (struct.isSetOrderContent()) {
        oprot.writeString(struct.orderContent);
      }
      if (struct.isSetMultiple()) {
        oprot.writeI32(struct.multiple);
      }
      if (struct.isSetPlayType()) {
        oprot.writeString(struct.playType);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetSendPrizeState()) {
        oprot.writeI32(struct.sendPrizeState);
      }
      if (struct.isSetTradeId()) {
        oprot.writeString(struct.tradeId);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeI32(struct.orderStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WinningOrderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderType = iprot.readI32();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderNo = iprot.readString();
        struct.setOrderNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.winningAmount = iprot.readI64();
        struct.setWinningAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderContent = iprot.readString();
        struct.setOrderContentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.multiple = iprot.readI32();
        struct.setMultipleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.playType = iprot.readString();
        struct.setPlayTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sendPrizeState = iprot.readI32();
        struct.setSendPrizeStateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tradeId = iprot.readString();
        struct.setTradeIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orderStatus = iprot.readI32();
        struct.setOrderStatusIsSet(true);
      }
    }
  }

}

