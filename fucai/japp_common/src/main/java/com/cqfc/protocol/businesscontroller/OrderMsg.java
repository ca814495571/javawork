/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.businesscontroller;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderMsg implements org.apache.thrift.TBase<OrderMsg, OrderMsg._Fields>, java.io.Serializable, Cloneable, Comparable<OrderMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderMsg");

  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TICKETS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketsNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MACHINE_FIELD_DESC = new org.apache.thrift.protocol.TField("machine", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ID_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("idCard", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("planId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField WARE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wareId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TICKET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketList", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderMsgTupleSchemeFactory());
  }

  public String partnerId; // required
  public String version; // required
  public String time; // required
  public String lotteryId; // required
  public int ticketsNum; // required
  public int totalMoney; // required
  public String province; // required
  public String machine; // required
  public long userId; // required
  public String realName; // required
  public String idCard; // required
  public String phone; // required
  public String planId; // required
  public String wareId; // required
  public List<VoteTicket> ticketList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTNER_ID((short)1, "partnerId"),
    VERSION((short)2, "version"),
    TIME((short)3, "time"),
    LOTTERY_ID((short)4, "lotteryId"),
    TICKETS_NUM((short)5, "ticketsNum"),
    TOTAL_MONEY((short)6, "totalMoney"),
    PROVINCE((short)7, "province"),
    MACHINE((short)8, "machine"),
    USER_ID((short)9, "userId"),
    REAL_NAME((short)10, "realName"),
    ID_CARD((short)11, "idCard"),
    PHONE((short)12, "phone"),
    PLAN_ID((short)13, "planId"),
    WARE_ID((short)14, "wareId"),
    TICKET_LIST((short)15, "ticketList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER_ID
          return PARTNER_ID;
        case 2: // VERSION
          return VERSION;
        case 3: // TIME
          return TIME;
        case 4: // LOTTERY_ID
          return LOTTERY_ID;
        case 5: // TICKETS_NUM
          return TICKETS_NUM;
        case 6: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 7: // PROVINCE
          return PROVINCE;
        case 8: // MACHINE
          return MACHINE;
        case 9: // USER_ID
          return USER_ID;
        case 10: // REAL_NAME
          return REAL_NAME;
        case 11: // ID_CARD
          return ID_CARD;
        case 12: // PHONE
          return PHONE;
        case 13: // PLAN_ID
          return PLAN_ID;
        case 14: // WARE_ID
          return WARE_ID;
        case 15: // TICKET_LIST
          return TICKET_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETSNUM_ISSET_ID = 0;
  private static final int __TOTALMONEY_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKETS_NUM, new org.apache.thrift.meta_data.FieldMetaData("ticketsNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE, new org.apache.thrift.meta_data.FieldMetaData("machine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD, new org.apache.thrift.meta_data.FieldMetaData("idCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("planId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_ID, new org.apache.thrift.meta_data.FieldMetaData("wareId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_LIST, new org.apache.thrift.meta_data.FieldMetaData("ticketList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VoteTicket.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderMsg.class, metaDataMap);
  }

  public OrderMsg() {
  }

  public OrderMsg(
    String partnerId,
    String version,
    String time,
    String lotteryId,
    int ticketsNum,
    int totalMoney,
    String province,
    String machine,
    long userId,
    String realName,
    String idCard,
    String phone,
    String planId,
    String wareId,
    List<VoteTicket> ticketList)
  {
    this();
    this.partnerId = partnerId;
    this.version = version;
    this.time = time;
    this.lotteryId = lotteryId;
    this.ticketsNum = ticketsNum;
    setTicketsNumIsSet(true);
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.province = province;
    this.machine = machine;
    this.userId = userId;
    setUserIdIsSet(true);
    this.realName = realName;
    this.idCard = idCard;
    this.phone = phone;
    this.planId = planId;
    this.wareId = wareId;
    this.ticketList = ticketList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderMsg(OrderMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartnerId()) {
      this.partnerId = other.partnerId;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    this.ticketsNum = other.ticketsNum;
    this.totalMoney = other.totalMoney;
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetMachine()) {
      this.machine = other.machine;
    }
    this.userId = other.userId;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetIdCard()) {
      this.idCard = other.idCard;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetPlanId()) {
      this.planId = other.planId;
    }
    if (other.isSetWareId()) {
      this.wareId = other.wareId;
    }
    if (other.isSetTicketList()) {
      List<VoteTicket> __this__ticketList = new ArrayList<VoteTicket>(other.ticketList.size());
      for (VoteTicket other_element : other.ticketList) {
        __this__ticketList.add(new VoteTicket(other_element));
      }
      this.ticketList = __this__ticketList;
    }
  }

  public OrderMsg deepCopy() {
    return new OrderMsg(this);
  }

  @Override
  public void clear() {
    this.partnerId = null;
    this.version = null;
    this.time = null;
    this.lotteryId = null;
    setTicketsNumIsSet(false);
    this.ticketsNum = 0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0;
    this.province = null;
    this.machine = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.realName = null;
    this.idCard = null;
    this.phone = null;
    this.planId = null;
    this.wareId = null;
    this.ticketList = null;
  }

  public String getPartnerId() {
    return this.partnerId;
  }

  public OrderMsg setPartnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  public void unsetPartnerId() {
    this.partnerId = null;
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return this.partnerId != null;
  }

  public void setPartnerIdIsSet(boolean value) {
    if (!value) {
      this.partnerId = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public OrderMsg setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getTime() {
    return this.time;
  }

  public OrderMsg setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public OrderMsg setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public int getTicketsNum() {
    return this.ticketsNum;
  }

  public OrderMsg setTicketsNum(int ticketsNum) {
    this.ticketsNum = ticketsNum;
    setTicketsNumIsSet(true);
    return this;
  }

  public void unsetTicketsNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETSNUM_ISSET_ID);
  }

  /** Returns true if field ticketsNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketsNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETSNUM_ISSET_ID);
  }

  public void setTicketsNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETSNUM_ISSET_ID, value);
  }

  public int getTotalMoney() {
    return this.totalMoney;
  }

  public OrderMsg setTotalMoney(int totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public String getProvince() {
    return this.province;
  }

  public OrderMsg setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getMachine() {
    return this.machine;
  }

  public OrderMsg setMachine(String machine) {
    this.machine = machine;
    return this;
  }

  public void unsetMachine() {
    this.machine = null;
  }

  /** Returns true if field machine is set (has been assigned a value) and false otherwise */
  public boolean isSetMachine() {
    return this.machine != null;
  }

  public void setMachineIsSet(boolean value) {
    if (!value) {
      this.machine = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public OrderMsg setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public OrderMsg setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getIdCard() {
    return this.idCard;
  }

  public OrderMsg setIdCard(String idCard) {
    this.idCard = idCard;
    return this;
  }

  public void unsetIdCard() {
    this.idCard = null;
  }

  /** Returns true if field idCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCard() {
    return this.idCard != null;
  }

  public void setIdCardIsSet(boolean value) {
    if (!value) {
      this.idCard = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public OrderMsg setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getPlanId() {
    return this.planId;
  }

  public OrderMsg setPlanId(String planId) {
    this.planId = planId;
    return this;
  }

  public void unsetPlanId() {
    this.planId = null;
  }

  /** Returns true if field planId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanId() {
    return this.planId != null;
  }

  public void setPlanIdIsSet(boolean value) {
    if (!value) {
      this.planId = null;
    }
  }

  public String getWareId() {
    return this.wareId;
  }

  public OrderMsg setWareId(String wareId) {
    this.wareId = wareId;
    return this;
  }

  public void unsetWareId() {
    this.wareId = null;
  }

  /** Returns true if field wareId is set (has been assigned a value) and false otherwise */
  public boolean isSetWareId() {
    return this.wareId != null;
  }

  public void setWareIdIsSet(boolean value) {
    if (!value) {
      this.wareId = null;
    }
  }

  public int getTicketListSize() {
    return (this.ticketList == null) ? 0 : this.ticketList.size();
  }

  public java.util.Iterator<VoteTicket> getTicketListIterator() {
    return (this.ticketList == null) ? null : this.ticketList.iterator();
  }

  public void addToTicketList(VoteTicket elem) {
    if (this.ticketList == null) {
      this.ticketList = new ArrayList<VoteTicket>();
    }
    this.ticketList.add(elem);
  }

  public List<VoteTicket> getTicketList() {
    return this.ticketList;
  }

  public OrderMsg setTicketList(List<VoteTicket> ticketList) {
    this.ticketList = ticketList;
    return this;
  }

  public void unsetTicketList() {
    this.ticketList = null;
  }

  /** Returns true if field ticketList is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketList() {
    return this.ticketList != null;
  }

  public void setTicketListIsSet(boolean value) {
    if (!value) {
      this.ticketList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case TICKETS_NUM:
      if (value == null) {
        unsetTicketsNum();
      } else {
        setTicketsNum((Integer)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Integer)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case MACHINE:
      if (value == null) {
        unsetMachine();
      } else {
        setMachine((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case ID_CARD:
      if (value == null) {
        unsetIdCard();
      } else {
        setIdCard((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case PLAN_ID:
      if (value == null) {
        unsetPlanId();
      } else {
        setPlanId((String)value);
      }
      break;

    case WARE_ID:
      if (value == null) {
        unsetWareId();
      } else {
        setWareId((String)value);
      }
      break;

    case TICKET_LIST:
      if (value == null) {
        unsetTicketList();
      } else {
        setTicketList((List<VoteTicket>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER_ID:
      return getPartnerId();

    case VERSION:
      return getVersion();

    case TIME:
      return getTime();

    case LOTTERY_ID:
      return getLotteryId();

    case TICKETS_NUM:
      return Integer.valueOf(getTicketsNum());

    case TOTAL_MONEY:
      return Integer.valueOf(getTotalMoney());

    case PROVINCE:
      return getProvince();

    case MACHINE:
      return getMachine();

    case USER_ID:
      return Long.valueOf(getUserId());

    case REAL_NAME:
      return getRealName();

    case ID_CARD:
      return getIdCard();

    case PHONE:
      return getPhone();

    case PLAN_ID:
      return getPlanId();

    case WARE_ID:
      return getWareId();

    case TICKET_LIST:
      return getTicketList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER_ID:
      return isSetPartnerId();
    case VERSION:
      return isSetVersion();
    case TIME:
      return isSetTime();
    case LOTTERY_ID:
      return isSetLotteryId();
    case TICKETS_NUM:
      return isSetTicketsNum();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case PROVINCE:
      return isSetProvince();
    case MACHINE:
      return isSetMachine();
    case USER_ID:
      return isSetUserId();
    case REAL_NAME:
      return isSetRealName();
    case ID_CARD:
      return isSetIdCard();
    case PHONE:
      return isSetPhone();
    case PLAN_ID:
      return isSetPlanId();
    case WARE_ID:
      return isSetWareId();
    case TICKET_LIST:
      return isSetTicketList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderMsg)
      return this.equals((OrderMsg)that);
    return false;
  }

  public boolean equals(OrderMsg that) {
    if (that == null)
      return false;

    boolean this_present_partnerId = true && this.isSetPartnerId();
    boolean that_present_partnerId = true && that.isSetPartnerId();
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (!this.partnerId.equals(that.partnerId))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_ticketsNum = true;
    boolean that_present_ticketsNum = true;
    if (this_present_ticketsNum || that_present_ticketsNum) {
      if (!(this_present_ticketsNum && that_present_ticketsNum))
        return false;
      if (this.ticketsNum != that.ticketsNum)
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_machine = true && this.isSetMachine();
    boolean that_present_machine = true && that.isSetMachine();
    if (this_present_machine || that_present_machine) {
      if (!(this_present_machine && that_present_machine))
        return false;
      if (!this.machine.equals(that.machine))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_idCard = true && this.isSetIdCard();
    boolean that_present_idCard = true && that.isSetIdCard();
    if (this_present_idCard || that_present_idCard) {
      if (!(this_present_idCard && that_present_idCard))
        return false;
      if (!this.idCard.equals(that.idCard))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_planId = true && this.isSetPlanId();
    boolean that_present_planId = true && that.isSetPlanId();
    if (this_present_planId || that_present_planId) {
      if (!(this_present_planId && that_present_planId))
        return false;
      if (!this.planId.equals(that.planId))
        return false;
    }

    boolean this_present_wareId = true && this.isSetWareId();
    boolean that_present_wareId = true && that.isSetWareId();
    if (this_present_wareId || that_present_wareId) {
      if (!(this_present_wareId && that_present_wareId))
        return false;
      if (!this.wareId.equals(that.wareId))
        return false;
    }

    boolean this_present_ticketList = true && this.isSetTicketList();
    boolean that_present_ticketList = true && that.isSetTicketList();
    if (this_present_ticketList || that_present_ticketList) {
      if (!(this_present_ticketList && that_present_ticketList))
        return false;
      if (!this.ticketList.equals(that.ticketList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OrderMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketsNum()).compareTo(other.isSetTicketsNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketsNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketsNum, other.ticketsNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachine()).compareTo(other.isSetMachine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machine, other.machine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCard()).compareTo(other.isSetIdCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCard, other.idCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanId()).compareTo(other.isSetPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planId, other.planId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWareId()).compareTo(other.isSetWareId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareId, other.wareId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketList()).compareTo(other.isSetTicketList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketList, other.ticketList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderMsg(");
    boolean first = true;

    sb.append("partnerId:");
    if (this.partnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketsNum:");
    sb.append(this.ticketsNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("machine:");
    if (this.machine == null) {
      sb.append("null");
    } else {
      sb.append(this.machine);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCard:");
    if (this.idCard == null) {
      sb.append("null");
    } else {
      sb.append(this.idCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planId:");
    if (this.planId == null) {
      sb.append("null");
    } else {
      sb.append(this.planId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wareId:");
    if (this.wareId == null) {
      sb.append("null");
    } else {
      sb.append(this.wareId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketList:");
    if (this.ticketList == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderMsgStandardSchemeFactory implements SchemeFactory {
    public OrderMsgStandardScheme getScheme() {
      return new OrderMsgStandardScheme();
    }
  }

  private static class OrderMsgStandardScheme extends StandardScheme<OrderMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerId = iprot.readString();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TICKETS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketsNum = iprot.readI32();
              struct.setTicketsNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalMoney = iprot.readI32();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MACHINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machine = iprot.readString();
              struct.setMachineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ID_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCard = iprot.readString();
              struct.setIdCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planId = iprot.readString();
              struct.setPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WARE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareId = iprot.readString();
              struct.setWareIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TICKET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.ticketList = new ArrayList<VoteTicket>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  VoteTicket _elem12;
                  _elem12 = new VoteTicket();
                  _elem12.read(iprot);
                  struct.ticketList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setTicketListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partnerId != null) {
        oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
        oprot.writeString(struct.partnerId);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKETS_NUM_FIELD_DESC);
      oprot.writeI32(struct.ticketsNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeI32(struct.totalMoney);
      oprot.writeFieldEnd();
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.machine != null) {
        oprot.writeFieldBegin(MACHINE_FIELD_DESC);
        oprot.writeString(struct.machine);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.idCard != null) {
        oprot.writeFieldBegin(ID_CARD_FIELD_DESC);
        oprot.writeString(struct.idCard);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.planId != null) {
        oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
        oprot.writeString(struct.planId);
        oprot.writeFieldEnd();
      }
      if (struct.wareId != null) {
        oprot.writeFieldBegin(WARE_ID_FIELD_DESC);
        oprot.writeString(struct.wareId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketList != null) {
        oprot.writeFieldBegin(TICKET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ticketList.size()));
          for (VoteTicket _iter13 : struct.ticketList)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderMsgTupleSchemeFactory implements SchemeFactory {
    public OrderMsgTupleScheme getScheme() {
      return new OrderMsgTupleScheme();
    }
  }

  private static class OrderMsgTupleScheme extends TupleScheme<OrderMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartnerId()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetTime()) {
        optionals.set(2);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(3);
      }
      if (struct.isSetTicketsNum()) {
        optionals.set(4);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(5);
      }
      if (struct.isSetProvince()) {
        optionals.set(6);
      }
      if (struct.isSetMachine()) {
        optionals.set(7);
      }
      if (struct.isSetUserId()) {
        optionals.set(8);
      }
      if (struct.isSetRealName()) {
        optionals.set(9);
      }
      if (struct.isSetIdCard()) {
        optionals.set(10);
      }
      if (struct.isSetPhone()) {
        optionals.set(11);
      }
      if (struct.isSetPlanId()) {
        optionals.set(12);
      }
      if (struct.isSetWareId()) {
        optionals.set(13);
      }
      if (struct.isSetTicketList()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPartnerId()) {
        oprot.writeString(struct.partnerId);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetTicketsNum()) {
        oprot.writeI32(struct.ticketsNum);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeI32(struct.totalMoney);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetMachine()) {
        oprot.writeString(struct.machine);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetIdCard()) {
        oprot.writeString(struct.idCard);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetPlanId()) {
        oprot.writeString(struct.planId);
      }
      if (struct.isSetWareId()) {
        oprot.writeString(struct.wareId);
      }
      if (struct.isSetTicketList()) {
        {
          oprot.writeI32(struct.ticketList.size());
          for (VoteTicket _iter14 : struct.ticketList)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.partnerId = iprot.readString();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ticketsNum = iprot.readI32();
        struct.setTicketsNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalMoney = iprot.readI32();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.machine = iprot.readString();
        struct.setMachineIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.idCard = iprot.readString();
        struct.setIdCardIsSet(true);
      }
      if (incoming.get(11)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planId = iprot.readString();
        struct.setPlanIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.wareId = iprot.readString();
        struct.setWareIdIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ticketList = new ArrayList<VoteTicket>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            VoteTicket _elem17;
            _elem17 = new VoteTicket();
            _elem17.read(iprot);
            struct.ticketList.add(_elem17);
          }
        }
        struct.setTicketListIsSet(true);
      }
    }
  }

}

