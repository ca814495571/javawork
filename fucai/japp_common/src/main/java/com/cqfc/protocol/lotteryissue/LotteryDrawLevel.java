/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.protocol.lotteryissue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LotteryDrawLevel implements org.apache.thrift.TBase<LotteryDrawLevel, LotteryDrawLevel._Fields>, java.io.Serializable, Cloneable, Comparable<LotteryDrawLevel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LotteryDrawLevel");

  private static final org.apache.thrift.protocol.TField LEVEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("levelId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOTTERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lotteryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ISSUE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("issueNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEVEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("levelName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LotteryDrawLevelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LotteryDrawLevelTupleSchemeFactory());
  }

  public int levelId; // required
  public String lotteryId; // required
  public String issueNo; // required
  public int level; // required
  public String levelName; // required
  public long money; // required
  public long totalCount; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEVEL_ID((short)1, "levelId"),
    LOTTERY_ID((short)2, "lotteryId"),
    ISSUE_NO((short)3, "issueNo"),
    LEVEL((short)4, "level"),
    LEVEL_NAME((short)5, "levelName"),
    MONEY((short)6, "money"),
    TOTAL_COUNT((short)7, "totalCount"),
    CREATE_TIME((short)8, "createTime"),
    LAST_UPDATE_TIME((short)9, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEVEL_ID
          return LEVEL_ID;
        case 2: // LOTTERY_ID
          return LOTTERY_ID;
        case 3: // ISSUE_NO
          return ISSUE_NO;
        case 4: // LEVEL
          return LEVEL;
        case 5: // LEVEL_NAME
          return LEVEL_NAME;
        case 6: // MONEY
          return MONEY;
        case 7: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEVELID_ISSET_ID = 0;
  private static final int __LEVEL_ISSET_ID = 1;
  private static final int __MONEY_ISSET_ID = 2;
  private static final int __TOTALCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEVEL_ID, new org.apache.thrift.meta_data.FieldMetaData("levelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOTTERY_ID, new org.apache.thrift.meta_data.FieldMetaData("lotteryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_NO, new org.apache.thrift.meta_data.FieldMetaData("issueNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("levelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LotteryDrawLevel.class, metaDataMap);
  }

  public LotteryDrawLevel() {
  }

  public LotteryDrawLevel(
    int levelId,
    String lotteryId,
    String issueNo,
    int level,
    String levelName,
    long money,
    long totalCount,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.levelId = levelId;
    setLevelIdIsSet(true);
    this.lotteryId = lotteryId;
    this.issueNo = issueNo;
    this.level = level;
    setLevelIsSet(true);
    this.levelName = levelName;
    this.money = money;
    setMoneyIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LotteryDrawLevel(LotteryDrawLevel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.levelId = other.levelId;
    if (other.isSetLotteryId()) {
      this.lotteryId = other.lotteryId;
    }
    if (other.isSetIssueNo()) {
      this.issueNo = other.issueNo;
    }
    this.level = other.level;
    if (other.isSetLevelName()) {
      this.levelName = other.levelName;
    }
    this.money = other.money;
    this.totalCount = other.totalCount;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public LotteryDrawLevel deepCopy() {
    return new LotteryDrawLevel(this);
  }

  @Override
  public void clear() {
    setLevelIdIsSet(false);
    this.levelId = 0;
    this.lotteryId = null;
    this.issueNo = null;
    setLevelIsSet(false);
    this.level = 0;
    this.levelName = null;
    setMoneyIsSet(false);
    this.money = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public int getLevelId() {
    return this.levelId;
  }

  public LotteryDrawLevel setLevelId(int levelId) {
    this.levelId = levelId;
    setLevelIdIsSet(true);
    return this;
  }

  public void unsetLevelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELID_ISSET_ID);
  }

  /** Returns true if field levelId is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELID_ISSET_ID);
  }

  public void setLevelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELID_ISSET_ID, value);
  }

  public String getLotteryId() {
    return this.lotteryId;
  }

  public LotteryDrawLevel setLotteryId(String lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

  public void unsetLotteryId() {
    this.lotteryId = null;
  }

  /** Returns true if field lotteryId is set (has been assigned a value) and false otherwise */
  public boolean isSetLotteryId() {
    return this.lotteryId != null;
  }

  public void setLotteryIdIsSet(boolean value) {
    if (!value) {
      this.lotteryId = null;
    }
  }

  public String getIssueNo() {
    return this.issueNo;
  }

  public LotteryDrawLevel setIssueNo(String issueNo) {
    this.issueNo = issueNo;
    return this;
  }

  public void unsetIssueNo() {
    this.issueNo = null;
  }

  /** Returns true if field issueNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueNo() {
    return this.issueNo != null;
  }

  public void setIssueNoIsSet(boolean value) {
    if (!value) {
      this.issueNo = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public LotteryDrawLevel setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public String getLevelName() {
    return this.levelName;
  }

  public LotteryDrawLevel setLevelName(String levelName) {
    this.levelName = levelName;
    return this;
  }

  public void unsetLevelName() {
    this.levelName = null;
  }

  /** Returns true if field levelName is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelName() {
    return this.levelName != null;
  }

  public void setLevelNameIsSet(boolean value) {
    if (!value) {
      this.levelName = null;
    }
  }

  public long getMoney() {
    return this.money;
  }

  public LotteryDrawLevel setMoney(long money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public long getTotalCount() {
    return this.totalCount;
  }

  public LotteryDrawLevel setTotalCount(long totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public LotteryDrawLevel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public LotteryDrawLevel setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEVEL_ID:
      if (value == null) {
        unsetLevelId();
      } else {
        setLevelId((Integer)value);
      }
      break;

    case LOTTERY_ID:
      if (value == null) {
        unsetLotteryId();
      } else {
        setLotteryId((String)value);
      }
      break;

    case ISSUE_NO:
      if (value == null) {
        unsetIssueNo();
      } else {
        setIssueNo((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case LEVEL_NAME:
      if (value == null) {
        unsetLevelName();
      } else {
        setLevelName((String)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Long)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEVEL_ID:
      return Integer.valueOf(getLevelId());

    case LOTTERY_ID:
      return getLotteryId();

    case ISSUE_NO:
      return getIssueNo();

    case LEVEL:
      return Integer.valueOf(getLevel());

    case LEVEL_NAME:
      return getLevelName();

    case MONEY:
      return Long.valueOf(getMoney());

    case TOTAL_COUNT:
      return Long.valueOf(getTotalCount());

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEVEL_ID:
      return isSetLevelId();
    case LOTTERY_ID:
      return isSetLotteryId();
    case ISSUE_NO:
      return isSetIssueNo();
    case LEVEL:
      return isSetLevel();
    case LEVEL_NAME:
      return isSetLevelName();
    case MONEY:
      return isSetMoney();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LotteryDrawLevel)
      return this.equals((LotteryDrawLevel)that);
    return false;
  }

  public boolean equals(LotteryDrawLevel that) {
    if (that == null)
      return false;

    boolean this_present_levelId = true;
    boolean that_present_levelId = true;
    if (this_present_levelId || that_present_levelId) {
      if (!(this_present_levelId && that_present_levelId))
        return false;
      if (this.levelId != that.levelId)
        return false;
    }

    boolean this_present_lotteryId = true && this.isSetLotteryId();
    boolean that_present_lotteryId = true && that.isSetLotteryId();
    if (this_present_lotteryId || that_present_lotteryId) {
      if (!(this_present_lotteryId && that_present_lotteryId))
        return false;
      if (!this.lotteryId.equals(that.lotteryId))
        return false;
    }

    boolean this_present_issueNo = true && this.isSetIssueNo();
    boolean that_present_issueNo = true && that.isSetIssueNo();
    if (this_present_issueNo || that_present_issueNo) {
      if (!(this_present_issueNo && that_present_issueNo))
        return false;
      if (!this.issueNo.equals(that.issueNo))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_levelName = true && this.isSetLevelName();
    boolean that_present_levelName = true && that.isSetLevelName();
    if (this_present_levelName || that_present_levelName) {
      if (!(this_present_levelName && that_present_levelName))
        return false;
      if (!this.levelName.equals(that.levelName))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LotteryDrawLevel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLevelId()).compareTo(other.isSetLevelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelId, other.levelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotteryId()).compareTo(other.isSetLotteryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotteryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotteryId, other.lotteryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueNo()).compareTo(other.isSetIssueNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueNo, other.issueNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelName()).compareTo(other.isSetLevelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelName, other.levelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(other.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, other.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LotteryDrawLevel(");
    boolean first = true;

    sb.append("levelId:");
    sb.append(this.levelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lotteryId:");
    if (this.lotteryId == null) {
      sb.append("null");
    } else {
      sb.append(this.lotteryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueNo:");
    if (this.issueNo == null) {
      sb.append("null");
    } else {
      sb.append(this.issueNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelName:");
    if (this.levelName == null) {
      sb.append("null");
    } else {
      sb.append(this.levelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LotteryDrawLevelStandardSchemeFactory implements SchemeFactory {
    public LotteryDrawLevelStandardScheme getScheme() {
      return new LotteryDrawLevelStandardScheme();
    }
  }

  private static class LotteryDrawLevelStandardScheme extends StandardScheme<LotteryDrawLevel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LotteryDrawLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEVEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levelId = iprot.readI32();
              struct.setLevelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOTTERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lotteryId = iprot.readString();
              struct.setLotteryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ISSUE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueNo = iprot.readString();
              struct.setIssueNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEVEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.levelName = iprot.readString();
              struct.setLevelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.money = iprot.readI64();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalCount = iprot.readI64();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LotteryDrawLevel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEVEL_ID_FIELD_DESC);
      oprot.writeI32(struct.levelId);
      oprot.writeFieldEnd();
      if (struct.lotteryId != null) {
        oprot.writeFieldBegin(LOTTERY_ID_FIELD_DESC);
        oprot.writeString(struct.lotteryId);
        oprot.writeFieldEnd();
      }
      if (struct.issueNo != null) {
        oprot.writeFieldBegin(ISSUE_NO_FIELD_DESC);
        oprot.writeString(struct.issueNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      if (struct.levelName != null) {
        oprot.writeFieldBegin(LEVEL_NAME_FIELD_DESC);
        oprot.writeString(struct.levelName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI64(struct.money);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalCount);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LotteryDrawLevelTupleSchemeFactory implements SchemeFactory {
    public LotteryDrawLevelTupleScheme getScheme() {
      return new LotteryDrawLevelTupleScheme();
    }
  }

  private static class LotteryDrawLevelTupleScheme extends TupleScheme<LotteryDrawLevel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LotteryDrawLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLevelId()) {
        optionals.set(0);
      }
      if (struct.isSetLotteryId()) {
        optionals.set(1);
      }
      if (struct.isSetIssueNo()) {
        optionals.set(2);
      }
      if (struct.isSetLevel()) {
        optionals.set(3);
      }
      if (struct.isSetLevelName()) {
        optionals.set(4);
      }
      if (struct.isSetMoney()) {
        optionals.set(5);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetLevelId()) {
        oprot.writeI32(struct.levelId);
      }
      if (struct.isSetLotteryId()) {
        oprot.writeString(struct.lotteryId);
      }
      if (struct.isSetIssueNo()) {
        oprot.writeString(struct.issueNo);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetLevelName()) {
        oprot.writeString(struct.levelName);
      }
      if (struct.isSetMoney()) {
        oprot.writeI64(struct.money);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI64(struct.totalCount);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LotteryDrawLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.levelId = iprot.readI32();
        struct.setLevelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lotteryId = iprot.readString();
        struct.setLotteryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.issueNo = iprot.readString();
        struct.setIssueNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.levelName = iprot.readString();
        struct.setLevelNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.money = iprot.readI64();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalCount = iprot.readI64();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

