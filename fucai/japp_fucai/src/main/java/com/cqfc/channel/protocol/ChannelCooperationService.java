/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.channel.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChannelCooperationService {

  public interface Iface {

    public ReturnData getChannelCooperationList(ChannelCooperation channelCooperation, int currentPage, int pageSize) throws org.apache.thrift.TException;

    public boolean addChannelCooperation(ChannelCooperation channelCooperation) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getChannelCooperationList(ChannelCooperation channelCooperation, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getChannelCooperationList_call> resultHandler) throws org.apache.thrift.TException;

    public void addChannelCooperation(ChannelCooperation channelCooperation, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addChannelCooperation_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ReturnData getChannelCooperationList(ChannelCooperation channelCooperation, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      send_getChannelCooperationList(channelCooperation, currentPage, pageSize);
      return recv_getChannelCooperationList();
    }

    public void send_getChannelCooperationList(ChannelCooperation channelCooperation, int currentPage, int pageSize) throws org.apache.thrift.TException
    {
      getChannelCooperationList_args args = new getChannelCooperationList_args();
      args.setChannelCooperation(channelCooperation);
      args.setCurrentPage(currentPage);
      args.setPageSize(pageSize);
      sendBase("getChannelCooperationList", args);
    }

    public ReturnData recv_getChannelCooperationList() throws org.apache.thrift.TException
    {
      getChannelCooperationList_result result = new getChannelCooperationList_result();
      receiveBase(result, "getChannelCooperationList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChannelCooperationList failed: unknown result");
    }

    public boolean addChannelCooperation(ChannelCooperation channelCooperation) throws org.apache.thrift.TException
    {
      send_addChannelCooperation(channelCooperation);
      return recv_addChannelCooperation();
    }

    public void send_addChannelCooperation(ChannelCooperation channelCooperation) throws org.apache.thrift.TException
    {
      addChannelCooperation_args args = new addChannelCooperation_args();
      args.setChannelCooperation(channelCooperation);
      sendBase("addChannelCooperation", args);
    }

    public boolean recv_addChannelCooperation() throws org.apache.thrift.TException
    {
      addChannelCooperation_result result = new addChannelCooperation_result();
      receiveBase(result, "addChannelCooperation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addChannelCooperation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getChannelCooperationList(ChannelCooperation channelCooperation, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback<getChannelCooperationList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChannelCooperationList_call method_call = new getChannelCooperationList_call(channelCooperation, currentPage, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChannelCooperationList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChannelCooperation channelCooperation;
      private int currentPage;
      private int pageSize;
      public getChannelCooperationList_call(ChannelCooperation channelCooperation, int currentPage, int pageSize, org.apache.thrift.async.AsyncMethodCallback<getChannelCooperationList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCooperation = channelCooperation;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChannelCooperationList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChannelCooperationList_args args = new getChannelCooperationList_args();
        args.setChannelCooperation(channelCooperation);
        args.setCurrentPage(currentPage);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChannelCooperationList();
      }
    }

    public void addChannelCooperation(ChannelCooperation channelCooperation, org.apache.thrift.async.AsyncMethodCallback<addChannelCooperation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addChannelCooperation_call method_call = new addChannelCooperation_call(channelCooperation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addChannelCooperation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChannelCooperation channelCooperation;
      public addChannelCooperation_call(ChannelCooperation channelCooperation, org.apache.thrift.async.AsyncMethodCallback<addChannelCooperation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCooperation = channelCooperation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addChannelCooperation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addChannelCooperation_args args = new addChannelCooperation_args();
        args.setChannelCooperation(channelCooperation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addChannelCooperation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getChannelCooperationList", new getChannelCooperationList());
      processMap.put("addChannelCooperation", new addChannelCooperation());
      return processMap;
    }

    public static class getChannelCooperationList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChannelCooperationList_args> {
      public getChannelCooperationList() {
        super("getChannelCooperationList");
      }

      public getChannelCooperationList_args getEmptyArgsInstance() {
        return new getChannelCooperationList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChannelCooperationList_result getResult(I iface, getChannelCooperationList_args args) throws org.apache.thrift.TException {
        getChannelCooperationList_result result = new getChannelCooperationList_result();
        result.success = iface.getChannelCooperationList(args.channelCooperation, args.currentPage, args.pageSize);
        return result;
      }
    }

    public static class addChannelCooperation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addChannelCooperation_args> {
      public addChannelCooperation() {
        super("addChannelCooperation");
      }

      public addChannelCooperation_args getEmptyArgsInstance() {
        return new addChannelCooperation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addChannelCooperation_result getResult(I iface, addChannelCooperation_args args) throws org.apache.thrift.TException {
        addChannelCooperation_result result = new addChannelCooperation_result();
        result.success = iface.addChannelCooperation(args.channelCooperation);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class getChannelCooperationList_args implements org.apache.thrift.TBase<getChannelCooperationList_args, getChannelCooperationList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelCooperationList_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_COOPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCooperation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelCooperationList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelCooperationList_argsTupleSchemeFactory());
    }

    public ChannelCooperation channelCooperation; // required
    public int currentPage; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_COOPERATION((short)1, "channelCooperation"),
      CURRENT_PAGE((short)2, "currentPage"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_COOPERATION
            return CHANNEL_COOPERATION;
          case 2: // CURRENT_PAGE
            return CURRENT_PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_COOPERATION, new org.apache.thrift.meta_data.FieldMetaData("channelCooperation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelCooperation.class)));
      tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelCooperationList_args.class, metaDataMap);
    }

    public getChannelCooperationList_args() {
    }

    public getChannelCooperationList_args(
      ChannelCooperation channelCooperation,
      int currentPage,
      int pageSize)
    {
      this();
      this.channelCooperation = channelCooperation;
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelCooperationList_args(getChannelCooperationList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetChannelCooperation()) {
        this.channelCooperation = new ChannelCooperation(other.channelCooperation);
      }
      this.currentPage = other.currentPage;
      this.pageSize = other.pageSize;
    }

    public getChannelCooperationList_args deepCopy() {
      return new getChannelCooperationList_args(this);
    }

    @Override
    public void clear() {
      this.channelCooperation = null;
      setCurrentPageIsSet(false);
      this.currentPage = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public ChannelCooperation getChannelCooperation() {
      return this.channelCooperation;
    }

    public getChannelCooperationList_args setChannelCooperation(ChannelCooperation channelCooperation) {
      this.channelCooperation = channelCooperation;
      return this;
    }

    public void unsetChannelCooperation() {
      this.channelCooperation = null;
    }

    /** Returns true if field channelCooperation is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCooperation() {
      return this.channelCooperation != null;
    }

    public void setChannelCooperationIsSet(boolean value) {
      if (!value) {
        this.channelCooperation = null;
      }
    }

    public int getCurrentPage() {
      return this.currentPage;
    }

    public getChannelCooperationList_args setCurrentPage(int currentPage) {
      this.currentPage = currentPage;
      setCurrentPageIsSet(true);
      return this;
    }

    public void unsetCurrentPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentPage() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
    }

    public void setCurrentPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getChannelCooperationList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_COOPERATION:
        if (value == null) {
          unsetChannelCooperation();
        } else {
          setChannelCooperation((ChannelCooperation)value);
        }
        break;

      case CURRENT_PAGE:
        if (value == null) {
          unsetCurrentPage();
        } else {
          setCurrentPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_COOPERATION:
        return getChannelCooperation();

      case CURRENT_PAGE:
        return Integer.valueOf(getCurrentPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_COOPERATION:
        return isSetChannelCooperation();
      case CURRENT_PAGE:
        return isSetCurrentPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelCooperationList_args)
        return this.equals((getChannelCooperationList_args)that);
      return false;
    }

    public boolean equals(getChannelCooperationList_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCooperation = true && this.isSetChannelCooperation();
      boolean that_present_channelCooperation = true && that.isSetChannelCooperation();
      if (this_present_channelCooperation || that_present_channelCooperation) {
        if (!(this_present_channelCooperation && that_present_channelCooperation))
          return false;
        if (!this.channelCooperation.equals(that.channelCooperation))
          return false;
      }

      boolean this_present_currentPage = true;
      boolean that_present_currentPage = true;
      if (this_present_currentPage || that_present_currentPage) {
        if (!(this_present_currentPage && that_present_currentPage))
          return false;
        if (this.currentPage != that.currentPage)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getChannelCooperationList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getChannelCooperationList_args typedOther = (getChannelCooperationList_args)other;

      lastComparison = Boolean.valueOf(isSetChannelCooperation()).compareTo(typedOther.isSetChannelCooperation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCooperation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCooperation, typedOther.channelCooperation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(typedOther.isSetCurrentPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, typedOther.currentPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelCooperationList_args(");
      boolean first = true;

      sb.append("channelCooperation:");
      if (this.channelCooperation == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCooperation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentPage:");
      sb.append(this.currentPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (channelCooperation != null) {
        channelCooperation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelCooperationList_argsStandardSchemeFactory implements SchemeFactory {
      public getChannelCooperationList_argsStandardScheme getScheme() {
        return new getChannelCooperationList_argsStandardScheme();
      }
    }

    private static class getChannelCooperationList_argsStandardScheme extends StandardScheme<getChannelCooperationList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelCooperationList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_COOPERATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.channelCooperation = new ChannelCooperation();
                struct.channelCooperation.read(iprot);
                struct.setChannelCooperationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currentPage = iprot.readI32();
                struct.setCurrentPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelCooperationList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCooperation != null) {
          oprot.writeFieldBegin(CHANNEL_COOPERATION_FIELD_DESC);
          struct.channelCooperation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
        oprot.writeI32(struct.currentPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelCooperationList_argsTupleSchemeFactory implements SchemeFactory {
      public getChannelCooperationList_argsTupleScheme getScheme() {
        return new getChannelCooperationList_argsTupleScheme();
      }
    }

    private static class getChannelCooperationList_argsTupleScheme extends TupleScheme<getChannelCooperationList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelCooperationList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCooperation()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetChannelCooperation()) {
          struct.channelCooperation.write(oprot);
        }
        if (struct.isSetCurrentPage()) {
          oprot.writeI32(struct.currentPage);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelCooperationList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.channelCooperation = new ChannelCooperation();
          struct.channelCooperation.read(iprot);
          struct.setChannelCooperationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentPage = iprot.readI32();
          struct.setCurrentPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class getChannelCooperationList_result implements org.apache.thrift.TBase<getChannelCooperationList_result, getChannelCooperationList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChannelCooperationList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChannelCooperationList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChannelCooperationList_resultTupleSchemeFactory());
    }

    public ReturnData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChannelCooperationList_result.class, metaDataMap);
    }

    public getChannelCooperationList_result() {
    }

    public getChannelCooperationList_result(
      ReturnData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelCooperationList_result(getChannelCooperationList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnData(other.success);
      }
    }

    public getChannelCooperationList_result deepCopy() {
      return new getChannelCooperationList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnData getSuccess() {
      return this.success;
    }

    public getChannelCooperationList_result setSuccess(ReturnData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelCooperationList_result)
        return this.equals((getChannelCooperationList_result)that);
      return false;
    }

    public boolean equals(getChannelCooperationList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getChannelCooperationList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getChannelCooperationList_result typedOther = (getChannelCooperationList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChannelCooperationList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChannelCooperationList_resultStandardSchemeFactory implements SchemeFactory {
      public getChannelCooperationList_resultStandardScheme getScheme() {
        return new getChannelCooperationList_resultStandardScheme();
      }
    }

    private static class getChannelCooperationList_resultStandardScheme extends StandardScheme<getChannelCooperationList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChannelCooperationList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChannelCooperationList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChannelCooperationList_resultTupleSchemeFactory implements SchemeFactory {
      public getChannelCooperationList_resultTupleScheme getScheme() {
        return new getChannelCooperationList_resultTupleScheme();
      }
    }

    private static class getChannelCooperationList_resultTupleScheme extends TupleScheme<getChannelCooperationList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChannelCooperationList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChannelCooperationList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addChannelCooperation_args implements org.apache.thrift.TBase<addChannelCooperation_args, addChannelCooperation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChannelCooperation_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_COOPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCooperation", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addChannelCooperation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addChannelCooperation_argsTupleSchemeFactory());
    }

    public ChannelCooperation channelCooperation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_COOPERATION((short)1, "channelCooperation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_COOPERATION
            return CHANNEL_COOPERATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_COOPERATION, new org.apache.thrift.meta_data.FieldMetaData("channelCooperation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelCooperation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChannelCooperation_args.class, metaDataMap);
    }

    public addChannelCooperation_args() {
    }

    public addChannelCooperation_args(
      ChannelCooperation channelCooperation)
    {
      this();
      this.channelCooperation = channelCooperation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChannelCooperation_args(addChannelCooperation_args other) {
      if (other.isSetChannelCooperation()) {
        this.channelCooperation = new ChannelCooperation(other.channelCooperation);
      }
    }

    public addChannelCooperation_args deepCopy() {
      return new addChannelCooperation_args(this);
    }

    @Override
    public void clear() {
      this.channelCooperation = null;
    }

    public ChannelCooperation getChannelCooperation() {
      return this.channelCooperation;
    }

    public addChannelCooperation_args setChannelCooperation(ChannelCooperation channelCooperation) {
      this.channelCooperation = channelCooperation;
      return this;
    }

    public void unsetChannelCooperation() {
      this.channelCooperation = null;
    }

    /** Returns true if field channelCooperation is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCooperation() {
      return this.channelCooperation != null;
    }

    public void setChannelCooperationIsSet(boolean value) {
      if (!value) {
        this.channelCooperation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_COOPERATION:
        if (value == null) {
          unsetChannelCooperation();
        } else {
          setChannelCooperation((ChannelCooperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_COOPERATION:
        return getChannelCooperation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_COOPERATION:
        return isSetChannelCooperation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addChannelCooperation_args)
        return this.equals((addChannelCooperation_args)that);
      return false;
    }

    public boolean equals(addChannelCooperation_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCooperation = true && this.isSetChannelCooperation();
      boolean that_present_channelCooperation = true && that.isSetChannelCooperation();
      if (this_present_channelCooperation || that_present_channelCooperation) {
        if (!(this_present_channelCooperation && that_present_channelCooperation))
          return false;
        if (!this.channelCooperation.equals(that.channelCooperation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addChannelCooperation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addChannelCooperation_args typedOther = (addChannelCooperation_args)other;

      lastComparison = Boolean.valueOf(isSetChannelCooperation()).compareTo(typedOther.isSetChannelCooperation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCooperation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCooperation, typedOther.channelCooperation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addChannelCooperation_args(");
      boolean first = true;

      sb.append("channelCooperation:");
      if (this.channelCooperation == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCooperation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (channelCooperation != null) {
        channelCooperation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChannelCooperation_argsStandardSchemeFactory implements SchemeFactory {
      public addChannelCooperation_argsStandardScheme getScheme() {
        return new addChannelCooperation_argsStandardScheme();
      }
    }

    private static class addChannelCooperation_argsStandardScheme extends StandardScheme<addChannelCooperation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChannelCooperation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_COOPERATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.channelCooperation = new ChannelCooperation();
                struct.channelCooperation.read(iprot);
                struct.setChannelCooperationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChannelCooperation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCooperation != null) {
          oprot.writeFieldBegin(CHANNEL_COOPERATION_FIELD_DESC);
          struct.channelCooperation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChannelCooperation_argsTupleSchemeFactory implements SchemeFactory {
      public addChannelCooperation_argsTupleScheme getScheme() {
        return new addChannelCooperation_argsTupleScheme();
      }
    }

    private static class addChannelCooperation_argsTupleScheme extends TupleScheme<addChannelCooperation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChannelCooperation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCooperation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelCooperation()) {
          struct.channelCooperation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChannelCooperation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelCooperation = new ChannelCooperation();
          struct.channelCooperation.read(iprot);
          struct.setChannelCooperationIsSet(true);
        }
      }
    }

  }

  public static class addChannelCooperation_result implements org.apache.thrift.TBase<addChannelCooperation_result, addChannelCooperation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChannelCooperation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addChannelCooperation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addChannelCooperation_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChannelCooperation_result.class, metaDataMap);
    }

    public addChannelCooperation_result() {
    }

    public addChannelCooperation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChannelCooperation_result(addChannelCooperation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addChannelCooperation_result deepCopy() {
      return new addChannelCooperation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addChannelCooperation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addChannelCooperation_result)
        return this.equals((addChannelCooperation_result)that);
      return false;
    }

    public boolean equals(addChannelCooperation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addChannelCooperation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addChannelCooperation_result typedOther = (addChannelCooperation_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addChannelCooperation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChannelCooperation_resultStandardSchemeFactory implements SchemeFactory {
      public addChannelCooperation_resultStandardScheme getScheme() {
        return new addChannelCooperation_resultStandardScheme();
      }
    }

    private static class addChannelCooperation_resultStandardScheme extends StandardScheme<addChannelCooperation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChannelCooperation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChannelCooperation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChannelCooperation_resultTupleSchemeFactory implements SchemeFactory {
      public addChannelCooperation_resultTupleScheme getScheme() {
        return new addChannelCooperation_resultTupleScheme();
      }
    }

    private static class addChannelCooperation_resultTupleScheme extends TupleScheme<addChannelCooperation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChannelCooperation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChannelCooperation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
