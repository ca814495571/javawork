/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cqfc.channel.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChannelCooperation implements org.apache.thrift.TBase<ChannelCooperation, ChannelCooperation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelCooperation");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("channelKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField BALANCE_ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceAlarm", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountBalance", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField MIN_BALANCE_ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("minBalanceAlarm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXTENSION3_FIELD_DESC = new org.apache.thrift.protocol.TField("extension3", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REGIST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CHANNEL_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelAccountID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("credit", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChannelCooperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChannelCooperationTupleSchemeFactory());
  }

  public int id; // required
  public String channelName; // required
  public String channelKey; // required
  public short status; // required
  public long balanceAlarm; // required
  public long accountType; // required
  public long accountBalance; // required
  public String minBalanceAlarm; // required
  public String extension3; // required
  public String registTime; // required
  public String lastUpdateTime; // required
  public String channelID; // required
  public String channelAccountID; // required
  public int credit; // required
  public String remark; // required
  public String password; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CHANNEL_NAME((short)2, "channelName"),
    CHANNEL_KEY((short)3, "channelKey"),
    STATUS((short)4, "status"),
    BALANCE_ALARM((short)5, "balanceAlarm"),
    ACCOUNT_TYPE((short)6, "accountType"),
    ACCOUNT_BALANCE((short)7, "accountBalance"),
    MIN_BALANCE_ALARM((short)8, "minBalanceAlarm"),
    EXTENSION3((short)9, "extension3"),
    REGIST_TIME((short)10, "registTime"),
    LAST_UPDATE_TIME((short)11, "lastUpdateTime"),
    CHANNEL_ID((short)12, "channelID"),
    CHANNEL_ACCOUNT_ID((short)13, "channelAccountID"),
    CREDIT((short)14, "credit"),
    REMARK((short)15, "remark"),
    PASSWORD((short)16, "password");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 3: // CHANNEL_KEY
          return CHANNEL_KEY;
        case 4: // STATUS
          return STATUS;
        case 5: // BALANCE_ALARM
          return BALANCE_ALARM;
        case 6: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 7: // ACCOUNT_BALANCE
          return ACCOUNT_BALANCE;
        case 8: // MIN_BALANCE_ALARM
          return MIN_BALANCE_ALARM;
        case 9: // EXTENSION3
          return EXTENSION3;
        case 10: // REGIST_TIME
          return REGIST_TIME;
        case 11: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        case 12: // CHANNEL_ID
          return CHANNEL_ID;
        case 13: // CHANNEL_ACCOUNT_ID
          return CHANNEL_ACCOUNT_ID;
        case 14: // CREDIT
          return CREDIT;
        case 15: // REMARK
          return REMARK;
        case 16: // PASSWORD
          return PASSWORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __BALANCEALARM_ISSET_ID = 2;
  private static final int __ACCOUNTTYPE_ISSET_ID = 3;
  private static final int __ACCOUNTBALANCE_ISSET_ID = 4;
  private static final int __CREDIT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_KEY, new org.apache.thrift.meta_data.FieldMetaData("channelKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BALANCE_ALARM, new org.apache.thrift.meta_data.FieldMetaData("balanceAlarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCOUNT_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("accountBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_BALANCE_ALARM, new org.apache.thrift.meta_data.FieldMetaData("minBalanceAlarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION3, new org.apache.thrift.meta_data.FieldMetaData("extension3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGIST_TIME, new org.apache.thrift.meta_data.FieldMetaData("registTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("channelAccountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT, new org.apache.thrift.meta_data.FieldMetaData("credit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelCooperation.class, metaDataMap);
  }

  public ChannelCooperation() {
  }

  public ChannelCooperation(
    int id,
    String channelName,
    String channelKey,
    short status,
    long balanceAlarm,
    long accountType,
    long accountBalance,
    String minBalanceAlarm,
    String extension3,
    String registTime,
    String lastUpdateTime,
    String channelID,
    String channelAccountID,
    int credit,
    String remark,
    String password)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.channelName = channelName;
    this.channelKey = channelKey;
    this.status = status;
    setStatusIsSet(true);
    this.balanceAlarm = balanceAlarm;
    setBalanceAlarmIsSet(true);
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    this.accountBalance = accountBalance;
    setAccountBalanceIsSet(true);
    this.minBalanceAlarm = minBalanceAlarm;
    this.extension3 = extension3;
    this.registTime = registTime;
    this.lastUpdateTime = lastUpdateTime;
    this.channelID = channelID;
    this.channelAccountID = channelAccountID;
    this.credit = credit;
    setCreditIsSet(true);
    this.remark = remark;
    this.password = password;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelCooperation(ChannelCooperation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetChannelKey()) {
      this.channelKey = other.channelKey;
    }
    this.status = other.status;
    this.balanceAlarm = other.balanceAlarm;
    this.accountType = other.accountType;
    this.accountBalance = other.accountBalance;
    if (other.isSetMinBalanceAlarm()) {
      this.minBalanceAlarm = other.minBalanceAlarm;
    }
    if (other.isSetExtension3()) {
      this.extension3 = other.extension3;
    }
    if (other.isSetRegistTime()) {
      this.registTime = other.registTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetChannelID()) {
      this.channelID = other.channelID;
    }
    if (other.isSetChannelAccountID()) {
      this.channelAccountID = other.channelAccountID;
    }
    this.credit = other.credit;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
  }

  public ChannelCooperation deepCopy() {
    return new ChannelCooperation(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.channelName = null;
    this.channelKey = null;
    setStatusIsSet(false);
    this.status = 0;
    setBalanceAlarmIsSet(false);
    this.balanceAlarm = 0;
    setAccountTypeIsSet(false);
    this.accountType = 0;
    setAccountBalanceIsSet(false);
    this.accountBalance = 0;
    this.minBalanceAlarm = null;
    this.extension3 = null;
    this.registTime = null;
    this.lastUpdateTime = null;
    this.channelID = null;
    this.channelAccountID = null;
    setCreditIsSet(false);
    this.credit = 0;
    this.remark = null;
    this.password = null;
  }

  public int getId() {
    return this.id;
  }

  public ChannelCooperation setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getChannelName() {
    return this.channelName;
  }

  public ChannelCooperation setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  public String getChannelKey() {
    return this.channelKey;
  }

  public ChannelCooperation setChannelKey(String channelKey) {
    this.channelKey = channelKey;
    return this;
  }

  public void unsetChannelKey() {
    this.channelKey = null;
  }

  /** Returns true if field channelKey is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelKey() {
    return this.channelKey != null;
  }

  public void setChannelKeyIsSet(boolean value) {
    if (!value) {
      this.channelKey = null;
    }
  }

  public short getStatus() {
    return this.status;
  }

  public ChannelCooperation setStatus(short status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getBalanceAlarm() {
    return this.balanceAlarm;
  }

  public ChannelCooperation setBalanceAlarm(long balanceAlarm) {
    this.balanceAlarm = balanceAlarm;
    setBalanceAlarmIsSet(true);
    return this;
  }

  public void unsetBalanceAlarm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEALARM_ISSET_ID);
  }

  /** Returns true if field balanceAlarm is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceAlarm() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEALARM_ISSET_ID);
  }

  public void setBalanceAlarmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEALARM_ISSET_ID, value);
  }

  public long getAccountType() {
    return this.accountType;
  }

  public ChannelCooperation setAccountType(long accountType) {
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    return this;
  }

  public void unsetAccountType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  public void setAccountTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID, value);
  }

  public long getAccountBalance() {
    return this.accountBalance;
  }

  public ChannelCooperation setAccountBalance(long accountBalance) {
    this.accountBalance = accountBalance;
    setAccountBalanceIsSet(true);
    return this;
  }

  public void unsetAccountBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTBALANCE_ISSET_ID);
  }

  /** Returns true if field accountBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTBALANCE_ISSET_ID);
  }

  public void setAccountBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTBALANCE_ISSET_ID, value);
  }

  public String getMinBalanceAlarm() {
    return this.minBalanceAlarm;
  }

  public ChannelCooperation setMinBalanceAlarm(String minBalanceAlarm) {
    this.minBalanceAlarm = minBalanceAlarm;
    return this;
  }

  public void unsetMinBalanceAlarm() {
    this.minBalanceAlarm = null;
  }

  /** Returns true if field minBalanceAlarm is set (has been assigned a value) and false otherwise */
  public boolean isSetMinBalanceAlarm() {
    return this.minBalanceAlarm != null;
  }

  public void setMinBalanceAlarmIsSet(boolean value) {
    if (!value) {
      this.minBalanceAlarm = null;
    }
  }

  public String getExtension3() {
    return this.extension3;
  }

  public ChannelCooperation setExtension3(String extension3) {
    this.extension3 = extension3;
    return this;
  }

  public void unsetExtension3() {
    this.extension3 = null;
  }

  /** Returns true if field extension3 is set (has been assigned a value) and false otherwise */
  public boolean isSetExtension3() {
    return this.extension3 != null;
  }

  public void setExtension3IsSet(boolean value) {
    if (!value) {
      this.extension3 = null;
    }
  }

  public String getRegistTime() {
    return this.registTime;
  }

  public ChannelCooperation setRegistTime(String registTime) {
    this.registTime = registTime;
    return this;
  }

  public void unsetRegistTime() {
    this.registTime = null;
  }

  /** Returns true if field registTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistTime() {
    return this.registTime != null;
  }

  public void setRegistTimeIsSet(boolean value) {
    if (!value) {
      this.registTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public ChannelCooperation setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public String getChannelID() {
    return this.channelID;
  }

  public ChannelCooperation setChannelID(String channelID) {
    this.channelID = channelID;
    return this;
  }

  public void unsetChannelID() {
    this.channelID = null;
  }

  /** Returns true if field channelID is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelID() {
    return this.channelID != null;
  }

  public void setChannelIDIsSet(boolean value) {
    if (!value) {
      this.channelID = null;
    }
  }

  public String getChannelAccountID() {
    return this.channelAccountID;
  }

  public ChannelCooperation setChannelAccountID(String channelAccountID) {
    this.channelAccountID = channelAccountID;
    return this;
  }

  public void unsetChannelAccountID() {
    this.channelAccountID = null;
  }

  /** Returns true if field channelAccountID is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelAccountID() {
    return this.channelAccountID != null;
  }

  public void setChannelAccountIDIsSet(boolean value) {
    if (!value) {
      this.channelAccountID = null;
    }
  }

  public int getCredit() {
    return this.credit;
  }

  public ChannelCooperation setCredit(int credit) {
    this.credit = credit;
    setCreditIsSet(true);
    return this;
  }

  public void unsetCredit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  /** Returns true if field credit is set (has been assigned a value) and false otherwise */
  public boolean isSetCredit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  public void setCreditIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDIT_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ChannelCooperation setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public ChannelCooperation setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((String)value);
      }
      break;

    case CHANNEL_KEY:
      if (value == null) {
        unsetChannelKey();
      } else {
        setChannelKey((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Short)value);
      }
      break;

    case BALANCE_ALARM:
      if (value == null) {
        unsetBalanceAlarm();
      } else {
        setBalanceAlarm((Long)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccountType();
      } else {
        setAccountType((Long)value);
      }
      break;

    case ACCOUNT_BALANCE:
      if (value == null) {
        unsetAccountBalance();
      } else {
        setAccountBalance((Long)value);
      }
      break;

    case MIN_BALANCE_ALARM:
      if (value == null) {
        unsetMinBalanceAlarm();
      } else {
        setMinBalanceAlarm((String)value);
      }
      break;

    case EXTENSION3:
      if (value == null) {
        unsetExtension3();
      } else {
        setExtension3((String)value);
      }
      break;

    case REGIST_TIME:
      if (value == null) {
        unsetRegistTime();
      } else {
        setRegistTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelID();
      } else {
        setChannelID((String)value);
      }
      break;

    case CHANNEL_ACCOUNT_ID:
      if (value == null) {
        unsetChannelAccountID();
      } else {
        setChannelAccountID((String)value);
      }
      break;

    case CREDIT:
      if (value == null) {
        unsetCredit();
      } else {
        setCredit((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case CHANNEL_NAME:
      return getChannelName();

    case CHANNEL_KEY:
      return getChannelKey();

    case STATUS:
      return Short.valueOf(getStatus());

    case BALANCE_ALARM:
      return Long.valueOf(getBalanceAlarm());

    case ACCOUNT_TYPE:
      return Long.valueOf(getAccountType());

    case ACCOUNT_BALANCE:
      return Long.valueOf(getAccountBalance());

    case MIN_BALANCE_ALARM:
      return getMinBalanceAlarm();

    case EXTENSION3:
      return getExtension3();

    case REGIST_TIME:
      return getRegistTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    case CHANNEL_ID:
      return getChannelID();

    case CHANNEL_ACCOUNT_ID:
      return getChannelAccountID();

    case CREDIT:
      return Integer.valueOf(getCredit());

    case REMARK:
      return getRemark();

    case PASSWORD:
      return getPassword();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CHANNEL_NAME:
      return isSetChannelName();
    case CHANNEL_KEY:
      return isSetChannelKey();
    case STATUS:
      return isSetStatus();
    case BALANCE_ALARM:
      return isSetBalanceAlarm();
    case ACCOUNT_TYPE:
      return isSetAccountType();
    case ACCOUNT_BALANCE:
      return isSetAccountBalance();
    case MIN_BALANCE_ALARM:
      return isSetMinBalanceAlarm();
    case EXTENSION3:
      return isSetExtension3();
    case REGIST_TIME:
      return isSetRegistTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case CHANNEL_ID:
      return isSetChannelID();
    case CHANNEL_ACCOUNT_ID:
      return isSetChannelAccountID();
    case CREDIT:
      return isSetCredit();
    case REMARK:
      return isSetRemark();
    case PASSWORD:
      return isSetPassword();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelCooperation)
      return this.equals((ChannelCooperation)that);
    return false;
  }

  public boolean equals(ChannelCooperation that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_channelKey = true && this.isSetChannelKey();
    boolean that_present_channelKey = true && that.isSetChannelKey();
    if (this_present_channelKey || that_present_channelKey) {
      if (!(this_present_channelKey && that_present_channelKey))
        return false;
      if (!this.channelKey.equals(that.channelKey))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_balanceAlarm = true;
    boolean that_present_balanceAlarm = true;
    if (this_present_balanceAlarm || that_present_balanceAlarm) {
      if (!(this_present_balanceAlarm && that_present_balanceAlarm))
        return false;
      if (this.balanceAlarm != that.balanceAlarm)
        return false;
    }

    boolean this_present_accountType = true;
    boolean that_present_accountType = true;
    if (this_present_accountType || that_present_accountType) {
      if (!(this_present_accountType && that_present_accountType))
        return false;
      if (this.accountType != that.accountType)
        return false;
    }

    boolean this_present_accountBalance = true;
    boolean that_present_accountBalance = true;
    if (this_present_accountBalance || that_present_accountBalance) {
      if (!(this_present_accountBalance && that_present_accountBalance))
        return false;
      if (this.accountBalance != that.accountBalance)
        return false;
    }

    boolean this_present_minBalanceAlarm = true && this.isSetMinBalanceAlarm();
    boolean that_present_minBalanceAlarm = true && that.isSetMinBalanceAlarm();
    if (this_present_minBalanceAlarm || that_present_minBalanceAlarm) {
      if (!(this_present_minBalanceAlarm && that_present_minBalanceAlarm))
        return false;
      if (!this.minBalanceAlarm.equals(that.minBalanceAlarm))
        return false;
    }

    boolean this_present_extension3 = true && this.isSetExtension3();
    boolean that_present_extension3 = true && that.isSetExtension3();
    if (this_present_extension3 || that_present_extension3) {
      if (!(this_present_extension3 && that_present_extension3))
        return false;
      if (!this.extension3.equals(that.extension3))
        return false;
    }

    boolean this_present_registTime = true && this.isSetRegistTime();
    boolean that_present_registTime = true && that.isSetRegistTime();
    if (this_present_registTime || that_present_registTime) {
      if (!(this_present_registTime && that_present_registTime))
        return false;
      if (!this.registTime.equals(that.registTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    boolean this_present_channelID = true && this.isSetChannelID();
    boolean that_present_channelID = true && that.isSetChannelID();
    if (this_present_channelID || that_present_channelID) {
      if (!(this_present_channelID && that_present_channelID))
        return false;
      if (!this.channelID.equals(that.channelID))
        return false;
    }

    boolean this_present_channelAccountID = true && this.isSetChannelAccountID();
    boolean that_present_channelAccountID = true && that.isSetChannelAccountID();
    if (this_present_channelAccountID || that_present_channelAccountID) {
      if (!(this_present_channelAccountID && that_present_channelAccountID))
        return false;
      if (!this.channelAccountID.equals(that.channelAccountID))
        return false;
    }

    boolean this_present_credit = true;
    boolean that_present_credit = true;
    if (this_present_credit || that_present_credit) {
      if (!(this_present_credit && that_present_credit))
        return false;
      if (this.credit != that.credit)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ChannelCooperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ChannelCooperation typedOther = (ChannelCooperation)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(typedOther.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, typedOther.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelKey()).compareTo(typedOther.isSetChannelKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelKey, typedOther.channelKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceAlarm()).compareTo(typedOther.isSetBalanceAlarm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceAlarm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceAlarm, typedOther.balanceAlarm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountType()).compareTo(typedOther.isSetAccountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, typedOther.accountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountBalance()).compareTo(typedOther.isSetAccountBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountBalance, typedOther.accountBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinBalanceAlarm()).compareTo(typedOther.isSetMinBalanceAlarm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinBalanceAlarm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minBalanceAlarm, typedOther.minBalanceAlarm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtension3()).compareTo(typedOther.isSetExtension3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtension3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extension3, typedOther.extension3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistTime()).compareTo(typedOther.isSetRegistTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registTime, typedOther.registTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelAccountID()).compareTo(typedOther.isSetChannelAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelAccountID, typedOther.channelAccountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredit()).compareTo(typedOther.isSetCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credit, typedOther.credit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChannelCooperation(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelKey:");
    if (this.channelKey == null) {
      sb.append("null");
    } else {
      sb.append(this.channelKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceAlarm:");
    sb.append(this.balanceAlarm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountType:");
    sb.append(this.accountType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountBalance:");
    sb.append(this.accountBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minBalanceAlarm:");
    if (this.minBalanceAlarm == null) {
      sb.append("null");
    } else {
      sb.append(this.minBalanceAlarm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extension3:");
    if (this.extension3 == null) {
      sb.append("null");
    } else {
      sb.append(this.extension3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registTime:");
    if (this.registTime == null) {
      sb.append("null");
    } else {
      sb.append(this.registTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelID:");
    if (this.channelID == null) {
      sb.append("null");
    } else {
      sb.append(this.channelID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelAccountID:");
    if (this.channelAccountID == null) {
      sb.append("null");
    } else {
      sb.append(this.channelAccountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credit:");
    sb.append(this.credit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelCooperationStandardSchemeFactory implements SchemeFactory {
    public ChannelCooperationStandardScheme getScheme() {
      return new ChannelCooperationStandardScheme();
    }
  }

  private static class ChannelCooperationStandardScheme extends StandardScheme<ChannelCooperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelCooperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelKey = iprot.readString();
              struct.setChannelKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.status = iprot.readI16();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BALANCE_ALARM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.balanceAlarm = iprot.readI64();
              struct.setBalanceAlarmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountType = iprot.readI64();
              struct.setAccountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountBalance = iprot.readI64();
              struct.setAccountBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MIN_BALANCE_ALARM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minBalanceAlarm = iprot.readString();
              struct.setMinBalanceAlarmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTENSION3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extension3 = iprot.readString();
              struct.setExtension3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REGIST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registTime = iprot.readString();
              struct.setRegistTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelID = iprot.readString();
              struct.setChannelIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHANNEL_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelAccountID = iprot.readString();
              struct.setChannelAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.credit = iprot.readI32();
              struct.setCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelCooperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.channelKey != null) {
        oprot.writeFieldBegin(CHANNEL_KEY_FIELD_DESC);
        oprot.writeString(struct.channelKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI16(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_ALARM_FIELD_DESC);
      oprot.writeI64(struct.balanceAlarm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
      oprot.writeI64(struct.accountType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_BALANCE_FIELD_DESC);
      oprot.writeI64(struct.accountBalance);
      oprot.writeFieldEnd();
      if (struct.minBalanceAlarm != null) {
        oprot.writeFieldBegin(MIN_BALANCE_ALARM_FIELD_DESC);
        oprot.writeString(struct.minBalanceAlarm);
        oprot.writeFieldEnd();
      }
      if (struct.extension3 != null) {
        oprot.writeFieldBegin(EXTENSION3_FIELD_DESC);
        oprot.writeString(struct.extension3);
        oprot.writeFieldEnd();
      }
      if (struct.registTime != null) {
        oprot.writeFieldBegin(REGIST_TIME_FIELD_DESC);
        oprot.writeString(struct.registTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      if (struct.channelID != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelID);
        oprot.writeFieldEnd();
      }
      if (struct.channelAccountID != null) {
        oprot.writeFieldBegin(CHANNEL_ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.channelAccountID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_FIELD_DESC);
      oprot.writeI32(struct.credit);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelCooperationTupleSchemeFactory implements SchemeFactory {
    public ChannelCooperationTupleScheme getScheme() {
      return new ChannelCooperationTupleScheme();
    }
  }

  private static class ChannelCooperationTupleScheme extends TupleScheme<ChannelCooperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelCooperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetChannelName()) {
        optionals.set(1);
      }
      if (struct.isSetChannelKey()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetBalanceAlarm()) {
        optionals.set(4);
      }
      if (struct.isSetAccountType()) {
        optionals.set(5);
      }
      if (struct.isSetAccountBalance()) {
        optionals.set(6);
      }
      if (struct.isSetMinBalanceAlarm()) {
        optionals.set(7);
      }
      if (struct.isSetExtension3()) {
        optionals.set(8);
      }
      if (struct.isSetRegistTime()) {
        optionals.set(9);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetChannelID()) {
        optionals.set(11);
      }
      if (struct.isSetChannelAccountID()) {
        optionals.set(12);
      }
      if (struct.isSetCredit()) {
        optionals.set(13);
      }
      if (struct.isSetRemark()) {
        optionals.set(14);
      }
      if (struct.isSetPassword()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetChannelKey()) {
        oprot.writeString(struct.channelKey);
      }
      if (struct.isSetStatus()) {
        oprot.writeI16(struct.status);
      }
      if (struct.isSetBalanceAlarm()) {
        oprot.writeI64(struct.balanceAlarm);
      }
      if (struct.isSetAccountType()) {
        oprot.writeI64(struct.accountType);
      }
      if (struct.isSetAccountBalance()) {
        oprot.writeI64(struct.accountBalance);
      }
      if (struct.isSetMinBalanceAlarm()) {
        oprot.writeString(struct.minBalanceAlarm);
      }
      if (struct.isSetExtension3()) {
        oprot.writeString(struct.extension3);
      }
      if (struct.isSetRegistTime()) {
        oprot.writeString(struct.registTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
      if (struct.isSetChannelID()) {
        oprot.writeString(struct.channelID);
      }
      if (struct.isSetChannelAccountID()) {
        oprot.writeString(struct.channelAccountID);
      }
      if (struct.isSetCredit()) {
        oprot.writeI32(struct.credit);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelCooperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channelKey = iprot.readString();
        struct.setChannelKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI16();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.balanceAlarm = iprot.readI64();
        struct.setBalanceAlarmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accountType = iprot.readI64();
        struct.setAccountTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accountBalance = iprot.readI64();
        struct.setAccountBalanceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.minBalanceAlarm = iprot.readString();
        struct.setMinBalanceAlarmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.extension3 = iprot.readString();
        struct.setExtension3IsSet(true);
      }
      if (incoming.get(9)) {
        struct.registTime = iprot.readString();
        struct.setRegistTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.channelID = iprot.readString();
        struct.setChannelIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.channelAccountID = iprot.readString();
        struct.setChannelAccountIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.credit = iprot.readI32();
        struct.setCreditIsSet(true);
      }
      if (incoming.get(14)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(15)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }
  }

}

